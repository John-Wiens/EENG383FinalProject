

Microchip Technology PIC18 LITE Macro Assembler V1.45 build -152302408 
                                                                                               Mon May 07 21:15:30 2018

Microchip Technology Omniscient Code Generator v1.45 (Free mode) build 201711160504
     1                           	processor	18F26K22
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	lm
     5                           	psect	idataBANK0,global,class=CODE,delta=1,noexec
     6                           	psect	mediumconst,global,reloc=2,class=MEDIUMCONST,delta=1,noexec
     7                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     8                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
     9                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
    10                           	psect	dataBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
    11                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1,noexec
    12                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    13                           	psect	text0,global,reloc=2,class=CODE,delta=1
    14                           	psect	text1,global,reloc=2,class=CODE,delta=1
    15                           	psect	text2,global,reloc=2,class=CODE,delta=1
    16                           	psect	text3,global,reloc=2,class=CODE,delta=1
    17                           	psect	text4,global,reloc=2,class=CODE,delta=1
    18                           	psect	text5,global,reloc=2,class=CODE,delta=1
    19                           	psect	text6,global,reloc=2,class=CODE,delta=1
    20                           	psect	text7,global,reloc=2,class=CODE,delta=1,group=1
    21                           	psect	text8,global,reloc=2,class=CODE,delta=1,group=1
    22                           	psect	text9,global,reloc=2,class=CODE,delta=1
    23                           	psect	text10,global,reloc=2,class=CODE,delta=1
    24                           	psect	text11,global,reloc=2,class=CODE,delta=1
    25                           	psect	text12,global,reloc=2,class=CODE,delta=1
    26                           	psect	text13,global,reloc=2,class=CODE,delta=1
    27                           	psect	text14,global,reloc=2,class=CODE,delta=1
    28                           	psect	text15,global,reloc=2,class=CODE,delta=1
    29                           	psect	text16,global,reloc=2,class=CODE,delta=1
    30                           	psect	text17,global,reloc=2,class=CODE,delta=1
    31                           	psect	text18,global,reloc=2,class=CODE,delta=1
    32                           	psect	text19,global,reloc=2,class=CODE,delta=1
    33                           	psect	text20,global,reloc=2,class=CODE,delta=1
    34                           	psect	text21,global,reloc=2,class=CODE,delta=1
    35                           	psect	text22,global,reloc=2,class=CODE,delta=1
    36                           	psect	text23,global,reloc=2,class=CODE,delta=1
    37                           	psect	text24,global,reloc=2,class=CODE,delta=1
    38                           	psect	text25,global,reloc=2,class=CODE,delta=1
    39                           	psect	text26,global,reloc=2,class=CODE,delta=1
    40                           	psect	text27,global,reloc=2,class=CODE,delta=1
    41                           	psect	text28,global,reloc=2,class=CODE,delta=1
    42                           	psect	text29,global,reloc=2,class=CODE,delta=1
    43                           	psect	text30,global,reloc=2,class=CODE,delta=1
    44                           	psect	intcode,global,reloc=2,class=CODE,delta=1
    45                           	psect	text32,global,reloc=2,class=CODE,delta=1
    46                           	psect	text33,global,reloc=2,class=CODE,delta=1
    47                           	psect	text34,global,reloc=2,class=CODE,delta=1
    48                           	psect	text35,global,reloc=2,class=CODE,delta=1
    49                           	psect	text36,global,reloc=2,class=CODE,delta=1
    50                           	psect	text37,global,reloc=2,class=CODE,delta=1
    51                           	psect	text38,global,reloc=2,class=CODE,delta=1
    52                           	psect	text39,global,reloc=2,class=CODE,delta=1
    53                           	psect	text40,global,reloc=2,class=CODE,delta=1
    54                           	psect	text41,global,reloc=2,class=CODE,delta=1
    55                           	psect	text42,global,reloc=2,class=CODE,delta=1
    56                           	psect	text43,global,reloc=2,class=CODE,delta=1
    57                           	psect	text44,global,reloc=2,class=CODE,delta=1
    58                           	psect	text45,global,reloc=2,class=CODE,delta=1
    59                           	psect	text46,global,reloc=2,class=CODE,delta=1
    60                           	psect	text47,global,reloc=2,class=CODE,delta=1
    61                           	psect	text48,global,reloc=2,class=CODE,delta=1
    62                           	psect	text49,global,reloc=2,class=CODE,delta=1
    63                           	psect	text50,global,reloc=2,class=CODE,delta=1
    64                           	psect	text51,global,reloc=2,class=CODE,delta=1
    65                           	psect	text52,global,reloc=2,class=CODE,delta=1
    66                           	psect	text53,global,reloc=2,class=CODE,delta=1
    67                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
    68                           	psect	text54,global,reloc=2,class=CODE,delta=1
    69                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
    70                           	psect	temp,global,ovrld,common,class=COMRAM,space=1,delta=1
    71  0000                     
    72                           ; Version 1.45
    73                           ; Generated 16/11/2017 GMT
    74                           ; 
    75                           ; Copyright Â© 2017, Microchip Technology Inc. and its subsidiaries ("Microchip")
    76                           ; All rights reserved.
    77                           ; 
    78                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    79                           ; 
    80                           ; Redistribution and use in source and binary forms, with or without modification, are
    81                           ; permitted provided that the following conditions are met:
    82                           ; 
    83                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    84                           ;        conditions and the following disclaimer.
    85                           ; 
    86                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    87                           ;        of conditions and the following disclaimer in the documentation and/or other
    88                           ;        materials provided with the distribution.
    89                           ; 
    90                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    91                           ;        software without specific prior written permission.
    92                           ; 
    93                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    94                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    95                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    96                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    97                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    98                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    99                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
   100                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
   101                           ; 
   102                           ; 
   103                           ; Code-generator required, PIC18F26K22 Definitions
   104                           ; 
   105                           ; SFR Addresses
   106  0000                     
   107                           	psect	idataBANK0
   108  001350                     __pidataBANK0:
   109                           	opt stack 0
   110                           
   111                           ;initializer for _rightLimit
   112  001350  86A0               	dw	34464
   113  001352  0001               	dw	1
   114                           
   115                           ;initializer for _leftLimit
   116  001354  7960               	dw	31072
   117  001356  FFFE               	dw	65534
   118                           
   119                           ;initializer for _motorSpeed
   120  001358  0BB8               	dw	3000
   121                           
   122                           ;initializer for _pitchPosition
   123  00135A  0BB8               	dw	3000
   124                           
   125                           ;initializer for _yawPosition
   126  00135C  0BB8               	dw	3000
   127                           
   128                           	psect	mediumconst
   129  00FC4A                     __pmediumconst:
   130                           	opt stack 0
   131  00FC4A  00                 	db	0
   132  00FC4B                     _dpowers:
   133                           	opt stack 0
   134  00FC4B  0001               	dw	1
   135  00FC4D  0000               	dw	0
   136  00FC4F  000A               	dw	10
   137  00FC51  0000               	dw	0
   138  00FC53  0064               	dw	100
   139  00FC55  0000               	dw	0
   140  00FC57  03E8               	dw	1000
   141  00FC59  0000               	dw	0
   142  00FC5B  2710               	dw	10000
   143  00FC5D  0000               	dw	0
   144  00FC5F  86A0               	dw	34464
   145  00FC61  0001               	dw	1
   146  00FC63  4240               	dw	16960
   147  00FC65  000F               	dw	15
   148  00FC67  9680               	dw	38528
   149  00FC69  0098               	dw	152
   150  00FC6B  E100               	dw	57600
   151  00FC6D  05F5               	dw	1525
   152  00FC6F  CA00               	dw	51712
   153  00FC71  3B9A               	dw	15258
   154  00FC73                     __end_of_dpowers:
   155                           	opt stack 0
   156  0000                     _TMR5	set	3919
   157  0000                     _CCP5CONbits	set	3924
   158  0000                     _CCP4CONbits	set	3927
   159  0000                     _T5GCONbits	set	3917
   160  0000                     _T5CONbits	set	3918
   161  0000                     _T5CON	set	3918
   162  0000                     _TMR5L	set	3919
   163  0000                     _TMR5H	set	3920
   164  0000                     _T5GCON	set	3917
   165  0000                     _CCPR4H	set	3929
   166  0000                     _CCPR4L	set	3928
   167  0000                     _CCP4CON	set	3927
   168  0000                     _CCPTMRS1bits	set	3912
   169  0000                     _CCPR5H	set	3926
   170  0000                     _CCPR5L	set	3925
   171  0000                     _CCP5CON	set	3924
   172  0000                     _ANSELA	set	3896
   173  0000                     _ANSELB	set	3897
   174  0000                     _ANSELC	set	3898
   175  0000                     _TMR1	set	4046
   176  0000                     _TMR3	set	4018
   177  0000                     _LATAbits	set	3977
   178  0000                     _T2CONbits	set	4026
   179  0000                     _T2CON	set	4026
   180  0000                     _TMR2	set	4028
   181  0000                     _PR2	set	4027
   182  0000                     _T1GCONbits	set	4044
   183  0000                     _T1CONbits	set	4045
   184  0000                     _T1CON	set	4045
   185  0000                     _TMR1L	set	4046
   186  0000                     _TMR1H	set	4047
   187  0000                     _T1GCON	set	4044
   188  0000                     _TXREG1	set	4013
   189  0000                     _RCREG1	set	4014
   190  0000                     _RCSTA1bits	set	4011
   191  0000                     _TXSTA1bits	set	4012
   192  0000                     _SPBRGH1	set	4016
   193  0000                     _SPBRG1	set	4015
   194  0000                     _TXSTA1	set	4012
   195  0000                     _RCSTA1	set	4011
   196  0000                     _BAUDCON1	set	4024
   197  0000                     _T3GCONbits	set	4020
   198  0000                     _T3CONbits	set	4017
   199  0000                     _T3CON	set	4017
   200  0000                     _PIR2bits	set	4001
   201  0000                     _TMR3L	set	4018
   202  0000                     _TMR3H	set	4019
   203  0000                     _T3GCON	set	4020
   204  0000                     _T0CON	set	4053
   205  0000                     _TMR0L	set	4054
   206  0000                     _TMR0H	set	4055
   207  0000                     _T0CONbits	set	4053
   208  0000                     _TXREG2	set	3955
   209  0000                     _RCREG2	set	3956
   210  0000                     _RCSTA2bits	set	3953
   211  0000                     _TXSTA2bits	set	3954
   212  0000                     _PIR3bits	set	4004
   213  0000                     _SPBRGH2	set	3958
   214  0000                     _SPBRG2	set	3957
   215  0000                     _TXSTA2	set	3954
   216  0000                     _RCSTA2	set	3953
   217  0000                     _BAUDCON2	set	3952
   218  0000                     _OSCTUNE	set	3995
   219  0000                     _OSCCON2	set	4050
   220  0000                     _OSCCON	set	4051
   221  0000                     _PIR1bits	set	3998
   222  0000                     _PIE1bits	set	3997
   223  0000                     _PIR5bits	set	3966
   224  0000                     _PIE5bits	set	3965
   225  0000                     _PIR4bits	set	3963
   226  0000                     _PIE4bits	set	3962
   227  0000                     _RCONbits	set	4048
   228  0000                     _INTCONbits	set	4082
   229  0000                     _INTCON2bits	set	4081
   230  0000                     _WPUB	set	3937
   231  0000                     _TRISC	set	3988
   232  0000                     _TRISB	set	3987
   233  0000                     _TRISA	set	3986
   234  0000                     _LATC	set	3979
   235  0000                     _LATB	set	3978
   236  0000                     _LATA	set	3977
   237  0000                     _PLLRDY	set	32407
   238  00FC73                     STR_3:
   239  00FC73  43                 	db	67	;'C'
   240  00FC74  6F                 	db	111	;'o'
   241  00FC75  6E                 	db	110	;'n'
   242  00FC76  6E                 	db	110	;'n'
   243  00FC77  65                 	db	101	;'e'
   244  00FC78  63                 	db	99	;'c'
   245  00FC79  74                 	db	116	;'t'
   246  00FC7A  20                 	db	32
   247  00FC7B  52                 	db	82	;'R'
   248  00FC7C  41                 	db	65	;'A'
   249  00FC7D  32                 	db	50	;'2'
   250  00FC7E  20                 	db	32
   251  00FC7F  74                 	db	116	;'t'
   252  00FC80  6F                 	db	111	;'o'
   253  00FC81  20                 	db	32
   254  00FC82  74                 	db	116	;'t'
   255  00FC83  68                 	db	104	;'h'
   256  00FC84  65                 	db	101	;'e'
   257  00FC85  20                 	db	32
   258  00FC86  4D                 	db	77	;'M'
   259  00FC87  6F                 	db	111	;'o'
   260  00FC88  74                 	db	116	;'t'
   261  00FC89  6F                 	db	111	;'o'
   262  00FC8A  72                 	db	114	;'r'
   263  00FC8B  20                 	db	32
   264  00FC8C  43                 	db	67	;'C'
   265  00FC8D  6F                 	db	111	;'o'
   266  00FC8E  6E                 	db	110	;'n'
   267  00FC8F  74                 	db	116	;'t'
   268  00FC90  72                 	db	114	;'r'
   269  00FC91  6F                 	db	111	;'o'
   270  00FC92  6C                 	db	108	;'l'
   271  00FC93  6C                 	db	108	;'l'
   272  00FC94  65                 	db	101	;'e'
   273  00FC95  72                 	db	114	;'r'
   274  00FC96  20                 	db	32
   275  00FC97  44                 	db	68	;'D'
   276  00FC98  61                 	db	97	;'a'
   277  00FC99  74                 	db	116	;'t'
   278  00FC9A  61                 	db	97	;'a'
   279  00FC9B  0D                 	db	13
   280  00FC9C  0A                 	db	10
   281  00FC9D  00                 	db	0
   282  00FC9E                     STR_7:
   283  00FC9E  44                 	db	68	;'D'
   284  00FC9F  65                 	db	101	;'e'
   285  00FCA0  63                 	db	99	;'c'
   286  00FCA1  72                 	db	114	;'r'
   287  00FCA2  65                 	db	101	;'e'
   288  00FCA3  6D                 	db	109	;'m'
   289  00FCA4  65                 	db	101	;'e'
   290  00FCA5  6E                 	db	110	;'n'
   291  00FCA6  74                 	db	116	;'t'
   292  00FCA7  69                 	db	105	;'i'
   293  00FCA8  6E                 	db	110	;'n'
   294  00FCA9  67                 	db	103	;'g'
   295  00FCAA  20                 	db	32
   296  00FCAB  50                 	db	80	;'P'
   297  00FCAC  69                 	db	105	;'i'
   298  00FCAD  74                 	db	116	;'t'
   299  00FCAE  63                 	db	99	;'c'
   300  00FCAF  68                 	db	104	;'h'
   301  00FCB0  20                 	db	32
   302  00FCB1  53                 	db	83	;'S'
   303  00FCB2  65                 	db	101	;'e'
   304  00FCB3  72                 	db	114	;'r'
   305  00FCB4  76                 	db	118	;'v'
   306  00FCB5  6F                 	db	111	;'o'
   307  00FCB6  20                 	db	32
   308  00FCB7  50                 	db	80	;'P'
   309  00FCB8  6F                 	db	111	;'o'
   310  00FCB9  73                 	db	115	;'s'
   311  00FCBA  69                 	db	105	;'i'
   312  00FCBB  74                 	db	116	;'t'
   313  00FCBC  69                 	db	105	;'i'
   314  00FCBD  6F                 	db	111	;'o'
   315  00FCBE  6E                 	db	110	;'n'
   316  00FCBF  3A                 	db	58	;':'
   317  00FCC0  20                 	db	32
   318  00FCC1  25                 	db	37
   319  00FCC2  75                 	db	117	;'u'
   320  00FCC3  0D                 	db	13
   321  00FCC4  0A                 	db	10
   322  00FCC5  00                 	db	0
   323  00FCC6                     STR_6:
   324  00FCC6  49                 	db	73	;'I'
   325  00FCC7  6E                 	db	110	;'n'
   326  00FCC8  63                 	db	99	;'c'
   327  00FCC9  72                 	db	114	;'r'
   328  00FCCA  65                 	db	101	;'e'
   329  00FCCB  6D                 	db	109	;'m'
   330  00FCCC  65                 	db	101	;'e'
   331  00FCCD  6E                 	db	110	;'n'
   332  00FCCE  74                 	db	116	;'t'
   333  00FCCF  69                 	db	105	;'i'
   334  00FCD0  6E                 	db	110	;'n'
   335  00FCD1  67                 	db	103	;'g'
   336  00FCD2  20                 	db	32
   337  00FCD3  50                 	db	80	;'P'
   338  00FCD4  69                 	db	105	;'i'
   339  00FCD5  74                 	db	116	;'t'
   340  00FCD6  63                 	db	99	;'c'
   341  00FCD7  68                 	db	104	;'h'
   342  00FCD8  20                 	db	32
   343  00FCD9  53                 	db	83	;'S'
   344  00FCDA  65                 	db	101	;'e'
   345  00FCDB  72                 	db	114	;'r'
   346  00FCDC  76                 	db	118	;'v'
   347  00FCDD  6F                 	db	111	;'o'
   348  00FCDE  20                 	db	32
   349  00FCDF  50                 	db	80	;'P'
   350  00FCE0  6F                 	db	111	;'o'
   351  00FCE1  73                 	db	115	;'s'
   352  00FCE2  69                 	db	105	;'i'
   353  00FCE3  74                 	db	116	;'t'
   354  00FCE4  69                 	db	105	;'i'
   355  00FCE5  6F                 	db	111	;'o'
   356  00FCE6  6E                 	db	110	;'n'
   357  00FCE7  3A                 	db	58	;':'
   358  00FCE8  20                 	db	32
   359  00FCE9  25                 	db	37
   360  00FCEA  75                 	db	117	;'u'
   361  00FCEB  0D                 	db	13
   362  00FCEC  0A                 	db	10
   363  00FCED  00                 	db	0
   364  00FCEE                     STR_25:
   365  00FCEE  45                 	db	69	;'E'
   366  00FCEF  6E                 	db	110	;'n'
   367  00FCF0  63                 	db	99	;'c'
   368  00FCF1  6F                 	db	111	;'o'
   369  00FCF2  64                 	db	100	;'d'
   370  00FCF3  65                 	db	101	;'e'
   371  00FCF4  72                 	db	114	;'r'
   372  00FCF5  20                 	db	32
   373  00FCF6  50                 	db	80	;'P'
   374  00FCF7  6F                 	db	111	;'o'
   375  00FCF8  73                 	db	115	;'s'
   376  00FCF9  69                 	db	105	;'i'
   377  00FCFA  74                 	db	116	;'t'
   378  00FCFB  69                 	db	105	;'i'
   379  00FCFC  6F                 	db	111	;'o'
   380  00FCFD  6E                 	db	110	;'n'
   381  00FCFE  3A                 	db	58	;':'
   382  00FCFF  20                 	db	32
   383  00FD00  25                 	db	37
   384  00FD01  6C                 	db	108	;'l'
   385  00FD02  64                 	db	100	;'d'
   386  00FD03  20                 	db	32
   387  00FD04  20                 	db	32
   388  00FD05  20                 	db	32
   389  00FD06  53                 	db	83	;'S'
   390  00FD07  65                 	db	101	;'e'
   391  00FD08  74                 	db	116	;'t'
   392  00FD09  50                 	db	80	;'P'
   393  00FD0A  6F                 	db	111	;'o'
   394  00FD0B  69                 	db	105	;'i'
   395  00FD0C  6E                 	db	110	;'n'
   396  00FD0D  74                 	db	116	;'t'
   397  00FD0E  3A                 	db	58	;':'
   398  00FD0F  25                 	db	37
   399  00FD10  6C                 	db	108	;'l'
   400  00FD11  64                 	db	100	;'d'
   401  00FD12  0D                 	db	13
   402  00FD13  0A                 	db	10
   403  00FD14  00                 	db	0
   404  00FD15                     STR_20:
   405  00FD15  44                 	db	68	;'D'
   406  00FD16  65                 	db	101	;'e'
   407  00FD17  63                 	db	99	;'c'
   408  00FD18  72                 	db	114	;'r'
   409  00FD19  65                 	db	101	;'e'
   410  00FD1A  6D                 	db	109	;'m'
   411  00FD1B  65                 	db	101	;'e'
   412  00FD1C  6E                 	db	110	;'n'
   413  00FD1D  74                 	db	116	;'t'
   414  00FD1E  69                 	db	105	;'i'
   415  00FD1F  6E                 	db	110	;'n'
   416  00FD20  67                 	db	103	;'g'
   417  00FD21  20                 	db	32
   418  00FD22  59                 	db	89	;'Y'
   419  00FD23  61                 	db	97	;'a'
   420  00FD24  77                 	db	119	;'w'
   421  00FD25  20                 	db	32
   422  00FD26  53                 	db	83	;'S'
   423  00FD27  65                 	db	101	;'e'
   424  00FD28  72                 	db	114	;'r'
   425  00FD29  76                 	db	118	;'v'
   426  00FD2A  6F                 	db	111	;'o'
   427  00FD2B  20                 	db	32
   428  00FD2C  50                 	db	80	;'P'
   429  00FD2D  6F                 	db	111	;'o'
   430  00FD2E  73                 	db	115	;'s'
   431  00FD2F  69                 	db	105	;'i'
   432  00FD30  74                 	db	116	;'t'
   433  00FD31  69                 	db	105	;'i'
   434  00FD32  6F                 	db	111	;'o'
   435  00FD33  6E                 	db	110	;'n'
   436  00FD34  3A                 	db	58	;':'
   437  00FD35  20                 	db	32
   438  00FD36  25                 	db	37
   439  00FD37  75                 	db	117	;'u'
   440  00FD38  0D                 	db	13
   441  00FD39  0A                 	db	10
   442  00FD3A  00                 	db	0
   443  00FD3B                     STR_19:
   444  00FD3B  49                 	db	73	;'I'
   445  00FD3C  6E                 	db	110	;'n'
   446  00FD3D  63                 	db	99	;'c'
   447  00FD3E  72                 	db	114	;'r'
   448  00FD3F  65                 	db	101	;'e'
   449  00FD40  6D                 	db	109	;'m'
   450  00FD41  65                 	db	101	;'e'
   451  00FD42  6E                 	db	110	;'n'
   452  00FD43  74                 	db	116	;'t'
   453  00FD44  69                 	db	105	;'i'
   454  00FD45  6E                 	db	110	;'n'
   455  00FD46  67                 	db	103	;'g'
   456  00FD47  20                 	db	32
   457  00FD48  59                 	db	89	;'Y'
   458  00FD49  61                 	db	97	;'a'
   459  00FD4A  77                 	db	119	;'w'
   460  00FD4B  20                 	db	32
   461  00FD4C  53                 	db	83	;'S'
   462  00FD4D  65                 	db	101	;'e'
   463  00FD4E  72                 	db	114	;'r'
   464  00FD4F  76                 	db	118	;'v'
   465  00FD50  6F                 	db	111	;'o'
   466  00FD51  20                 	db	32
   467  00FD52  50                 	db	80	;'P'
   468  00FD53  6F                 	db	111	;'o'
   469  00FD54  73                 	db	115	;'s'
   470  00FD55  69                 	db	105	;'i'
   471  00FD56  74                 	db	116	;'t'
   472  00FD57  69                 	db	105	;'i'
   473  00FD58  6F                 	db	111	;'o'
   474  00FD59  6E                 	db	110	;'n'
   475  00FD5A  3A                 	db	58	;':'
   476  00FD5B  20                 	db	32
   477  00FD5C  25                 	db	37
   478  00FD5D  75                 	db	117	;'u'
   479  00FD5E  0D                 	db	13
   480  00FD5F  0A                 	db	10
   481  00FD60  00                 	db	0
   482  00FD61                     STR_12:
   483  00FD61  4D                 	db	77	;'M'
   484  00FD62  2F                 	db	47
   485  00FD63  6D                 	db	109	;'m'
   486  00FD64  20                 	db	32
   487  00FD65  49                 	db	73	;'I'
   488  00FD66  6E                 	db	110	;'n'
   489  00FD67  63                 	db	99	;'c'
   490  00FD68  72                 	db	114	;'r'
   491  00FD69  65                 	db	101	;'e'
   492  00FD6A  61                 	db	97	;'a'
   493  00FD6B  73                 	db	115	;'s'
   494  00FD6C  65                 	db	101	;'e'
   495  00FD6D  2F                 	db	47
   496  00FD6E  44                 	db	68	;'D'
   497  00FD6F  65                 	db	101	;'e'
   498  00FD70  63                 	db	99	;'c'
   499  00FD71  72                 	db	114	;'r'
   500  00FD72  65                 	db	101	;'e'
   501  00FD73  61                 	db	97	;'a'
   502  00FD74  73                 	db	115	;'s'
   503  00FD75  65                 	db	101	;'e'
   504  00FD76  20                 	db	32
   505  00FD77  4D                 	db	77	;'M'
   506  00FD78  6F                 	db	111	;'o'
   507  00FD79  74                 	db	116	;'t'
   508  00FD7A  6F                 	db	111	;'o'
   509  00FD7B  72                 	db	114	;'r'
   510  00FD7C  20                 	db	32
   511  00FD7D  53                 	db	83	;'S'
   512  00FD7E  70                 	db	112	;'p'
   513  00FD7F  65                 	db	101	;'e'
   514  00FD80  65                 	db	101	;'e'
   515  00FD81  64                 	db	100	;'d'
   516  00FD82  20                 	db	32
   517  00FD83  0D                 	db	13
   518  00FD84  0A                 	db	10
   519  00FD85  00                 	db	0
   520  00FD86                     STR_14:
   521  00FD86  45                 	db	69	;'E'
   522  00FD87  20                 	db	32
   523  00FD88  70                 	db	112	;'p'
   524  00FD89  72                 	db	114	;'r'
   525  00FD8A  69                 	db	105	;'i'
   526  00FD8B  6E                 	db	110	;'n'
   527  00FD8C  74                 	db	116	;'t'
   528  00FD8D  20                 	db	32
   529  00FD8E  65                 	db	101	;'e'
   530  00FD8F  6E                 	db	110	;'n'
   531  00FD90  63                 	db	99	;'c'
   532  00FD91  6F                 	db	111	;'o'
   533  00FD92  64                 	db	100	;'d'
   534  00FD93  65                 	db	101	;'e'
   535  00FD94  72                 	db	114	;'r'
   536  00FD95  20                 	db	32
   537  00FD96  76                 	db	118	;'v'
   538  00FD97  61                 	db	97	;'a'
   539  00FD98  6C                 	db	108	;'l'
   540  00FD99  75                 	db	117	;'u'
   541  00FD9A  65                 	db	101	;'e'
   542  00FD9B  73                 	db	115	;'s'
   543  00FD9C  20                 	db	32
   544  00FD9D  74                 	db	116	;'t'
   545  00FD9E  6F                 	db	111	;'o'
   546  00FD9F  20                 	db	32
   547  00FDA0  63                 	db	99	;'c'
   548  00FDA1  6F                 	db	111	;'o'
   549  00FDA2  6E                 	db	110	;'n'
   550  00FDA3  73                 	db	115	;'s'
   551  00FDA4  6F                 	db	111	;'o'
   552  00FDA5  6C                 	db	108	;'l'
   553  00FDA6  65                 	db	101	;'e'
   554  00FDA7  20                 	db	32
   555  00FDA8  0D                 	db	13
   556  00FDA9  0A                 	db	10
   557  00FDAA  00                 	db	0
   558  00FDAB                     STR_15:
   559  00FDAB  6F                 	db	111	;'o'
   560  00FDAC  20                 	db	32
   561  00FDAD  70                 	db	112	;'p'
   562  00FDAE  72                 	db	114	;'r'
   563  00FDAF  69                 	db	105	;'i'
   564  00FDB0  6E                 	db	110	;'n'
   565  00FDB1  74                 	db	116	;'t'
   566  00FDB2  20                 	db	32
   567  00FDB3  65                 	db	101	;'e'
   568  00FDB4  6E                 	db	110	;'n'
   569  00FDB5  63                 	db	99	;'c'
   570  00FDB6  6F                 	db	111	;'o'
   571  00FDB7  64                 	db	100	;'d'
   572  00FDB8  65                 	db	101	;'e'
   573  00FDB9  72                 	db	114	;'r'
   574  00FDBA  20                 	db	32
   575  00FDBB  76                 	db	118	;'v'
   576  00FDBC  61                 	db	97	;'a'
   577  00FDBD  6C                 	db	108	;'l'
   578  00FDBE  75                 	db	117	;'u'
   579  00FDBF  65                 	db	101	;'e'
   580  00FDC0  73                 	db	115	;'s'
   581  00FDC1  20                 	db	32
   582  00FDC2  74                 	db	116	;'t'
   583  00FDC3  6F                 	db	111	;'o'
   584  00FDC4  20                 	db	32
   585  00FDC5  63                 	db	99	;'c'
   586  00FDC6  6F                 	db	111	;'o'
   587  00FDC7  6E                 	db	110	;'n'
   588  00FDC8  73                 	db	115	;'s'
   589  00FDC9  6F                 	db	111	;'o'
   590  00FDCA  6C                 	db	108	;'l'
   591  00FDCB  65                 	db	101	;'e'
   592  00FDCC  20                 	db	32
   593  00FDCD  0D                 	db	13
   594  00FDCE  0A                 	db	10
   595  00FDCF  00                 	db	0
   596  00FDD0                     STR_13:
   597  00FDD0  46                 	db	70	;'F'
   598  00FDD1  2F                 	db	47
   599  00FDD2  66                 	db	102	;'f'
   600  00FDD3  20                 	db	32
   601  00FDD4  4D                 	db	77	;'M'
   602  00FDD5  6F                 	db	111	;'o'
   603  00FDD6  76                 	db	118	;'v'
   604  00FDD7  65                 	db	101	;'e'
   605  00FDD8  20                 	db	32
   606  00FDD9  4D                 	db	77	;'M'
   607  00FDDA  6F                 	db	111	;'o'
   608  00FDDB  74                 	db	116	;'t'
   609  00FDDC  6F                 	db	111	;'o'
   610  00FDDD  72                 	db	114	;'r'
   611  00FDDE  20                 	db	32
   612  00FDDF  31                 	db	49	;'1'
   613  00FDE0  30                 	db	48	;'0'
   614  00FDE1  30                 	db	48	;'0'
   615  00FDE2  30                 	db	48	;'0'
   616  00FDE3  30                 	db	48	;'0'
   617  00FDE4  2F                 	db	47
   618  00FDE5  2D                 	db	45
   619  00FDE6  31                 	db	49	;'1'
   620  00FDE7  30                 	db	48	;'0'
   621  00FDE8  30                 	db	48	;'0'
   622  00FDE9  30                 	db	48	;'0'
   623  00FDEA  30                 	db	48	;'0'
   624  00FDEB  20                 	db	32
   625  00FDEC  74                 	db	116	;'t'
   626  00FDED  69                 	db	105	;'i'
   627  00FDEE  63                 	db	99	;'c'
   628  00FDEF  6B                 	db	107	;'k'
   629  00FDF0  73                 	db	115	;'s'
   630  00FDF1  20                 	db	32
   631  00FDF2  0D                 	db	13
   632  00FDF3  0A                 	db	10
   633  00FDF4  00                 	db	0
   634  00FDF5                     STR_24:
   635  00FDF5  44                 	db	68	;'D'
   636  00FDF6  65                 	db	101	;'e'
   637  00FDF7  63                 	db	99	;'c'
   638  00FDF8  72                 	db	114	;'r'
   639  00FDF9  65                 	db	101	;'e'
   640  00FDFA  6D                 	db	109	;'m'
   641  00FDFB  65                 	db	101	;'e'
   642  00FDFC  6E                 	db	110	;'n'
   643  00FDFD  74                 	db	116	;'t'
   644  00FDFE  69                 	db	105	;'i'
   645  00FDFF  6E                 	db	110	;'n'
   646  00FE00  67                 	db	103	;'g'
   647  00FE01  20                 	db	32
   648  00FE02  4D                 	db	77	;'M'
   649  00FE03  6F                 	db	111	;'o'
   650  00FE04  74                 	db	116	;'t'
   651  00FE05  6F                 	db	111	;'o'
   652  00FE06  72                 	db	114	;'r'
   653  00FE07  20                 	db	32
   654  00FE08  53                 	db	83	;'S'
   655  00FE09  65                 	db	101	;'e'
   656  00FE0A  74                 	db	116	;'t'
   657  00FE0B  70                 	db	112	;'p'
   658  00FE0C  6F                 	db	111	;'o'
   659  00FE0D  69                 	db	105	;'i'
   660  00FE0E  6E                 	db	110	;'n'
   661  00FE0F  74                 	db	116	;'t'
   662  00FE10  3A                 	db	58	;':'
   663  00FE11  20                 	db	32
   664  00FE12  25                 	db	37
   665  00FE13  6C                 	db	108	;'l'
   666  00FE14  64                 	db	100	;'d'
   667  00FE15  0D                 	db	13
   668  00FE16  0A                 	db	10
   669  00FE17  00                 	db	0
   670  00FE18                     STR_23:
   671  00FE18  49                 	db	73	;'I'
   672  00FE19  6E                 	db	110	;'n'
   673  00FE1A  63                 	db	99	;'c'
   674  00FE1B  72                 	db	114	;'r'
   675  00FE1C  65                 	db	101	;'e'
   676  00FE1D  6D                 	db	109	;'m'
   677  00FE1E  65                 	db	101	;'e'
   678  00FE1F  6E                 	db	110	;'n'
   679  00FE20  74                 	db	116	;'t'
   680  00FE21  69                 	db	105	;'i'
   681  00FE22  6E                 	db	110	;'n'
   682  00FE23  67                 	db	103	;'g'
   683  00FE24  20                 	db	32
   684  00FE25  4D                 	db	77	;'M'
   685  00FE26  6F                 	db	111	;'o'
   686  00FE27  74                 	db	116	;'t'
   687  00FE28  6F                 	db	111	;'o'
   688  00FE29  72                 	db	114	;'r'
   689  00FE2A  20                 	db	32
   690  00FE2B  53                 	db	83	;'S'
   691  00FE2C  65                 	db	101	;'e'
   692  00FE2D  74                 	db	116	;'t'
   693  00FE2E  70                 	db	112	;'p'
   694  00FE2F  6F                 	db	111	;'o'
   695  00FE30  69                 	db	105	;'i'
   696  00FE31  6E                 	db	110	;'n'
   697  00FE32  74                 	db	116	;'t'
   698  00FE33  3A                 	db	58	;':'
   699  00FE34  20                 	db	32
   700  00FE35  25                 	db	37
   701  00FE36  6C                 	db	108	;'l'
   702  00FE37  64                 	db	100	;'d'
   703  00FE38  0D                 	db	13
   704  00FE39  0A                 	db	10
   705  00FE3A  00                 	db	0
   706  00FE3B                     STR_2:
   707  00FE3B  43                 	db	67	;'C'
   708  00FE3C  6F                 	db	111	;'o'
   709  00FE3D  6E                 	db	110	;'n'
   710  00FE3E  6E                 	db	110	;'n'
   711  00FE3F  65                 	db	101	;'e'
   712  00FE40  63                 	db	99	;'c'
   713  00FE41  74                 	db	116	;'t'
   714  00FE42  20                 	db	32
   715  00FE43  52                 	db	82	;'R'
   716  00FE44  41                 	db	65	;'A'
   717  00FE45  30                 	db	48	;'0'
   718  00FE46  20                 	db	32
   719  00FE47  74                 	db	116	;'t'
   720  00FE48  6F                 	db	111	;'o'
   721  00FE49  20                 	db	32
   722  00FE4A  50                 	db	80	;'P'
   723  00FE4B  69                 	db	105	;'i'
   724  00FE4C  74                 	db	116	;'t'
   725  00FE4D  63                 	db	99	;'c'
   726  00FE4E  68                 	db	104	;'h'
   727  00FE4F  20                 	db	32
   728  00FE50  53                 	db	83	;'S'
   729  00FE51  65                 	db	101	;'e'
   730  00FE52  72                 	db	114	;'r'
   731  00FE53  76                 	db	118	;'v'
   732  00FE54  6F                 	db	111	;'o'
   733  00FE55  20                 	db	32
   734  00FE56  44                 	db	68	;'D'
   735  00FE57  61                 	db	97	;'a'
   736  00FE58  74                 	db	116	;'t'
   737  00FE59  61                 	db	97	;'a'
   738  00FE5A  0D                 	db	13
   739  00FE5B  0A                 	db	10
   740  00FE5C  00                 	db	0
   741  00FE5D                     STR_16:
   742  00FE5D  75                 	db	117	;'u'
   743  00FE5E  20                 	db	32
   744  00FE5F  70                 	db	112	;'p'
   745  00FE60  72                 	db	114	;'r'
   746  00FE61  69                 	db	105	;'i'
   747  00FE62  6E                 	db	110	;'n'
   748  00FE63  74                 	db	116	;'t'
   749  00FE64  20                 	db	32
   750  00FE65  69                 	db	105	;'i'
   751  00FE66  6E                 	db	110	;'n'
   752  00FE67  63                 	db	99	;'c'
   753  00FE68  6F                 	db	111	;'o'
   754  00FE69  6D                 	db	109	;'m'
   755  00FE6A  69                 	db	105	;'i'
   756  00FE6B  6E                 	db	110	;'n'
   757  00FE6C  67                 	db	103	;'g'
   758  00FE6D  20                 	db	32
   759  00FE6E  45                 	db	69	;'E'
   760  00FE6F  55                 	db	85	;'U'
   761  00FE70  53                 	db	83	;'S'
   762  00FE71  41                 	db	65	;'A'
   763  00FE72  52                 	db	82	;'R'
   764  00FE73  54                 	db	84	;'T'
   765  00FE74  31                 	db	49	;'1'
   766  00FE75  20                 	db	32
   767  00FE76  64                 	db	100	;'d'
   768  00FE77  61                 	db	97	;'a'
   769  00FE78  74                 	db	116	;'t'
   770  00FE79  61                 	db	97	;'a'
   771  00FE7A  20                 	db	32
   772  00FE7B  0D                 	db	13
   773  00FE7C  0A                 	db	10
   774  00FE7D  00                 	db	0
   775  00FE7E                     STR_1:
   776  00FE7E  43                 	db	67	;'C'
   777  00FE7F  6F                 	db	111	;'o'
   778  00FE80  6E                 	db	110	;'n'
   779  00FE81  6E                 	db	110	;'n'
   780  00FE82  65                 	db	101	;'e'
   781  00FE83  63                 	db	99	;'c'
   782  00FE84  74                 	db	116	;'t'
   783  00FE85  20                 	db	32
   784  00FE86  52                 	db	82	;'R'
   785  00FE87  41                 	db	65	;'A'
   786  00FE88  31                 	db	49	;'1'
   787  00FE89  20                 	db	32
   788  00FE8A  74                 	db	116	;'t'
   789  00FE8B  6F                 	db	111	;'o'
   790  00FE8C  20                 	db	32
   791  00FE8D  59                 	db	89	;'Y'
   792  00FE8E  61                 	db	97	;'a'
   793  00FE8F  77                 	db	119	;'w'
   794  00FE90  20                 	db	32
   795  00FE91  53                 	db	83	;'S'
   796  00FE92  65                 	db	101	;'e'
   797  00FE93  72                 	db	114	;'r'
   798  00FE94  76                 	db	118	;'v'
   799  00FE95  6F                 	db	111	;'o'
   800  00FE96  20                 	db	32
   801  00FE97  44                 	db	68	;'D'
   802  00FE98  61                 	db	97	;'a'
   803  00FE99  74                 	db	116	;'t'
   804  00FE9A  61                 	db	97	;'a'
   805  00FE9B  0D                 	db	13
   806  00FE9C  0A                 	db	10
   807  00FE9D  00                 	db	0
   808  00FE9E                     STR_34:
   809  00FE9E  55                 	db	85	;'U'
   810  00FE9F  6E                 	db	110	;'n'
   811  00FEA0  6B                 	db	107	;'k'
   812  00FEA1  6E                 	db	110	;'n'
   813  00FEA2  6F                 	db	111	;'o'
   814  00FEA3  77                 	db	119	;'w'
   815  00FEA4  6E                 	db	110	;'n'
   816  00FEA5  20                 	db	32
   817  00FEA6  6F                 	db	111	;'o'
   818  00FEA7  72                 	db	114	;'r'
   819  00FEA8  20                 	db	32
   820  00FEA9  49                 	db	73	;'I'
   821  00FEAA  6E                 	db	110	;'n'
   822  00FEAB  76                 	db	118	;'v'
   823  00FEAC  61                 	db	97	;'a'
   824  00FEAD  6C                 	db	108	;'l'
   825  00FEAE  69                 	db	105	;'i'
   826  00FEAF  64                 	db	100	;'d'
   827  00FEB0  20                 	db	32
   828  00FEB1  43                 	db	67	;'C'
   829  00FEB2  6F                 	db	111	;'o'
   830  00FEB3  6D                 	db	109	;'m'
   831  00FEB4  6D                 	db	109	;'m'
   832  00FEB5  61                 	db	97	;'a'
   833  00FEB6  6E                 	db	110	;'n'
   834  00FEB7  64                 	db	100	;'d'
   835  00FEB8  20                 	db	32
   836  00FEB9  25                 	db	37
   837  00FEBA  63                 	db	99	;'c'
   838  00FEBB  0D                 	db	13
   839  00FEBC  0A                 	db	10
   840  00FEBD  00                 	db	0
   841  00FEBE                     STR_22:
   842  00FEBE  44                 	db	68	;'D'
   843  00FEBF  65                 	db	101	;'e'
   844  00FEC0  63                 	db	99	;'c'
   845  00FEC1  72                 	db	114	;'r'
   846  00FEC2  65                 	db	101	;'e'
   847  00FEC3  6D                 	db	109	;'m'
   848  00FEC4  65                 	db	101	;'e'
   849  00FEC5  6E                 	db	110	;'n'
   850  00FEC6  74                 	db	116	;'t'
   851  00FEC7  69                 	db	105	;'i'
   852  00FEC8  6E                 	db	110	;'n'
   853  00FEC9  67                 	db	103	;'g'
   854  00FECA  20                 	db	32
   855  00FECB  4D                 	db	77	;'M'
   856  00FECC  6F                 	db	111	;'o'
   857  00FECD  74                 	db	116	;'t'
   858  00FECE  6F                 	db	111	;'o'
   859  00FECF  72                 	db	114	;'r'
   860  00FED0  20                 	db	32
   861  00FED1  53                 	db	83	;'S'
   862  00FED2  70                 	db	112	;'p'
   863  00FED3  65                 	db	101	;'e'
   864  00FED4  65                 	db	101	;'e'
   865  00FED5  64                 	db	100	;'d'
   866  00FED6  3A                 	db	58	;':'
   867  00FED7  20                 	db	32
   868  00FED8  25                 	db	37
   869  00FED9  75                 	db	117	;'u'
   870  00FEDA  0D                 	db	13
   871  00FEDB  0A                 	db	10
   872  00FEDC  00                 	db	0
   873  00FEDD                     STR_21:
   874  00FEDD  49                 	db	73	;'I'
   875  00FEDE  6E                 	db	110	;'n'
   876  00FEDF  63                 	db	99	;'c'
   877  00FEE0  72                 	db	114	;'r'
   878  00FEE1  65                 	db	101	;'e'
   879  00FEE2  6D                 	db	109	;'m'
   880  00FEE3  65                 	db	101	;'e'
   881  00FEE4  6E                 	db	110	;'n'
   882  00FEE5  74                 	db	116	;'t'
   883  00FEE6  69                 	db	105	;'i'
   884  00FEE7  6E                 	db	110	;'n'
   885  00FEE8  67                 	db	103	;'g'
   886  00FEE9  20                 	db	32
   887  00FEEA  4D                 	db	77	;'M'
   888  00FEEB  6F                 	db	111	;'o'
   889  00FEEC  74                 	db	116	;'t'
   890  00FEED  6F                 	db	111	;'o'
   891  00FEEE  72                 	db	114	;'r'
   892  00FEEF  20                 	db	32
   893  00FEF0  53                 	db	83	;'S'
   894  00FEF1  70                 	db	112	;'p'
   895  00FEF2  65                 	db	101	;'e'
   896  00FEF3  65                 	db	101	;'e'
   897  00FEF4  64                 	db	100	;'d'
   898  00FEF5  3A                 	db	58	;':'
   899  00FEF6  20                 	db	32
   900  00FEF7  25                 	db	37
   901  00FEF8  75                 	db	117	;'u'
   902  00FEF9  0D                 	db	13
   903  00FEFA  0A                 	db	10
   904  00FEFB  00                 	db	0
   905  00FEFC                     STR_28:
   906  00FEFC  52                 	db	82	;'R'
   907  00FEFD  65                 	db	101	;'e'
   908  00FEFE  63                 	db	99	;'c'
   909  00FEFF  65                 	db	101	;'e'
   910  00FF00  69                 	db	105	;'i'
   911  00FF01  76                 	db	118	;'v'
   912  00FF02  65                 	db	101	;'e'
   913  00FF03  64                 	db	100	;'d'
   914  00FF04  20                 	db	32
   915  00FF05  25                 	db	37
   916  00FF06  75                 	db	117	;'u'
   917  00FF07  20                 	db	32
   918  00FF08  66                 	db	102	;'f'
   919  00FF09  72                 	db	114	;'r'
   920  00FF0A  6F                 	db	111	;'o'
   921  00FF0B  6D                 	db	109	;'m'
   922  00FF0C  20                 	db	32
   923  00FF0D  45                 	db	69	;'E'
   924  00FF0E  55                 	db	85	;'U'
   925  00FF0F  53                 	db	83	;'S'
   926  00FF10  41                 	db	65	;'A'
   927  00FF11  52                 	db	82	;'R'
   928  00FF12  54                 	db	84	;'T'
   929  00FF13  31                 	db	49	;'1'
   930  00FF14  0D                 	db	13
   931  00FF15  0A                 	db	10
   932  00FF16  00                 	db	0
   933  00FF17                     STR_4:
   934  00FF17  43                 	db	67	;'C'
   935  00FF18  6F                 	db	111	;'o'
   936  00FF19  6E                 	db	110	;'n'
   937  00FF1A  6E                 	db	110	;'n'
   938  00FF1B  65                 	db	101	;'e'
   939  00FF1C  63                 	db	99	;'c'
   940  00FF1D  74                 	db	116	;'t'
   941  00FF1E  20                 	db	32
   942  00FF1F  52                 	db	82	;'R'
   943  00FF20  42                 	db	66	;'B'
   944  00FF21  30                 	db	48	;'0'
   945  00FF22  20                 	db	32
   946  00FF23  74                 	db	116	;'t'
   947  00FF24  6F                 	db	111	;'o'
   948  00FF25  20                 	db	32
   949  00FF26  45                 	db	69	;'E'
   950  00FF27  6E                 	db	110	;'n'
   951  00FF28  63                 	db	99	;'c'
   952  00FF29  6F                 	db	111	;'o'
   953  00FF2A  64                 	db	100	;'d'
   954  00FF2B  65                 	db	101	;'e'
   955  00FF2C  72                 	db	114	;'r'
   956  00FF2D  20                 	db	32
   957  00FF2E  41                 	db	65	;'A'
   958  00FF2F  0D                 	db	13
   959  00FF30  0A                 	db	10
   960  00FF31  00                 	db	0
   961  00FF32                     STR_5:
   962  00FF32  43                 	db	67	;'C'
   963  00FF33  6F                 	db	111	;'o'
   964  00FF34  6E                 	db	110	;'n'
   965  00FF35  6E                 	db	110	;'n'
   966  00FF36  65                 	db	101	;'e'
   967  00FF37  63                 	db	99	;'c'
   968  00FF38  74                 	db	116	;'t'
   969  00FF39  20                 	db	32
   970  00FF3A  52                 	db	82	;'R'
   971  00FF3B  41                 	db	65	;'A'
   972  00FF3C  34                 	db	52	;'4'
   973  00FF3D  20                 	db	32
   974  00FF3E  74                 	db	116	;'t'
   975  00FF3F  6F                 	db	111	;'o'
   976  00FF40  20                 	db	32
   977  00FF41  45                 	db	69	;'E'
   978  00FF42  6E                 	db	110	;'n'
   979  00FF43  63                 	db	99	;'c'
   980  00FF44  6F                 	db	111	;'o'
   981  00FF45  64                 	db	100	;'d'
   982  00FF46  65                 	db	101	;'e'
   983  00FF47  72                 	db	114	;'r'
   984  00FF48  20                 	db	32
   985  00FF49  42                 	db	66	;'B'
   986  00FF4A  0D                 	db	13
   987  00FF4B  0A                 	db	10
   988  00FF4C  00                 	db	0
   989  00FF4D                     STR_11:
   990  00FF4D  54                 	db	84	;'T'
   991  00FF4E  2F                 	db	47
   992  00FF4F  74                 	db	116	;'t'
   993  00FF50  20                 	db	32
   994  00FF51  6D                 	db	109	;'m'
   995  00FF52  6F                 	db	111	;'o'
   996  00FF53  76                 	db	118	;'v'
   997  00FF54  65                 	db	101	;'e'
   998  00FF55  20                 	db	32
   999  00FF56  54                 	db	84	;'T'
  1000  00FF57  69                 	db	105	;'i'
  1001  00FF58  6C                 	db	108	;'l'
  1002  00FF59  74                 	db	116	;'t'
  1003  00FF5A  20                 	db	32
  1004  00FF5B  53                 	db	83	;'S'
  1005  00FF5C  65                 	db	101	;'e'
  1006  00FF5D  72                 	db	114	;'r'
  1007  00FF5E  76                 	db	118	;'v'
  1008  00FF5F  6F                 	db	111	;'o'
  1009  00FF60  0D                 	db	13
  1010  00FF61  0A                 	db	10
  1011  00FF62  00                 	db	0
  1012  00FF63                     STR_29:
  1013  00FF63  0A                 	db	10
  1014  00FF64  0A                 	db	10
  1015  00FF65  0A                 	db	10
  1016  00FF66  0A                 	db	10
  1017  00FF67  0A                 	db	10
  1018  00FF68  0A                 	db	10
  1019  00FF69  0A                 	db	10
  1020  00FF6A  0A                 	db	10
  1021  00FF6B  0A                 	db	10
  1022  00FF6C  0A                 	db	10
  1023  00FF6D  0A                 	db	10
  1024  00FF6E  0A                 	db	10
  1025  00FF6F  0A                 	db	10
  1026  00FF70  0A                 	db	10
  1027  00FF71  0A                 	db	10
  1028  00FF72  0A                 	db	10
  1029  00FF73  0A                 	db	10
  1030  00FF74  0A                 	db	10
  1031  00FF75  0A                 	db	10
  1032  00FF76  0A                 	db	10
  1033  00FF77  00                 	db	0
  1034  00FF78                     STR_10:
  1035  00FF78  53                 	db	83	;'S'
  1036  00FF79  2F                 	db	47
  1037  00FF7A  73                 	db	115	;'s'
  1038  00FF7B  20                 	db	32
  1039  00FF7C  6D                 	db	109	;'m'
  1040  00FF7D  6F                 	db	111	;'o'
  1041  00FF7E  76                 	db	118	;'v'
  1042  00FF7F  65                 	db	101	;'e'
  1043  00FF80  20                 	db	32
  1044  00FF81  59                 	db	89	;'Y'
  1045  00FF82  61                 	db	97	;'a'
  1046  00FF83  77                 	db	119	;'w'
  1047  00FF84  20                 	db	32
  1048  00FF85  53                 	db	83	;'S'
  1049  00FF86  65                 	db	101	;'e'
  1050  00FF87  72                 	db	114	;'r'
  1051  00FF88  76                 	db	118	;'v'
  1052  00FF89  6F                 	db	111	;'o'
  1053  00FF8A  0D                 	db	13
  1054  00FF8B  0A                 	db	10
  1055  00FF8C  00                 	db	0
  1056  00FF8D                     STR_8:
  1057  00FF8D  44                 	db	68	;'D'
  1058  00FF8E  65                 	db	101	;'e'
  1059  00FF8F  62                 	db	98	;'b'
  1060  00FF90  75                 	db	117	;'u'
  1061  00FF91  67                 	db	103	;'g'
  1062  00FF92  20                 	db	32
  1063  00FF93  43                 	db	67	;'C'
  1064  00FF94  6F                 	db	111	;'o'
  1065  00FF95  6E                 	db	110	;'n'
  1066  00FF96  73                 	db	115	;'s'
  1067  00FF97  6F                 	db	111	;'o'
  1068  00FF98  6C                 	db	108	;'l'
  1069  00FF99  65                 	db	101	;'e'
  1070  00FF9A  20                 	db	32
  1071  00FF9B  48                 	db	72	;'H'
  1072  00FF9C  65                 	db	101	;'e'
  1073  00FF9D  6C                 	db	108	;'l'
  1074  00FF9E  70                 	db	112	;'p'
  1075  00FF9F  0D                 	db	13
  1076  00FFA0  0A                 	db	10
  1077  00FFA1  00                 	db	0
  1078  00FFA2                     STR_17:
  1079  00FFA2  7A                 	db	122	;'z'
  1080  00FFA3  20                 	db	32
  1081  00FFA4  63                 	db	99	;'c'
  1082  00FFA5  6C                 	db	108	;'l'
  1083  00FFA6  65                 	db	101	;'e'
  1084  00FFA7  61                 	db	97	;'a'
  1085  00FFA8  72                 	db	114	;'r'
  1086  00FFA9  20                 	db	32
  1087  00FFAA  74                 	db	116	;'t'
  1088  00FFAB  65                 	db	101	;'e'
  1089  00FFAC  72                 	db	114	;'r'
  1090  00FFAD  6D                 	db	109	;'m'
  1091  00FFAE  69                 	db	105	;'i'
  1092  00FFAF  6E                 	db	110	;'n'
  1093  00FFB0  61                 	db	97	;'a'
  1094  00FFB1  6C                 	db	108	;'l'
  1095  00FFB2  0D                 	db	13
  1096  00FFB3  0A                 	db	10
  1097  00FFB4  00                 	db	0
  1098  00FFB5                     STR_9:
  1099  00FFB5  3F                 	db	63	;'?'
  1100  00FFB6  20                 	db	32
  1101  00FFB7  53                 	db	83	;'S'
  1102  00FFB8  68                 	db	104	;'h'
  1103  00FFB9  6F                 	db	111	;'o'
  1104  00FFBA  77                 	db	119	;'w'
  1105  00FFBB  20                 	db	32
  1106  00FFBC  48                 	db	72	;'H'
  1107  00FFBD  65                 	db	101	;'e'
  1108  00FFBE  6C                 	db	108	;'l'
  1109  00FFBF  70                 	db	112	;'p'
  1110  00FFC0  20                 	db	32
  1111  00FFC1  4D                 	db	77	;'M'
  1112  00FFC2  65                 	db	101	;'e'
  1113  00FFC3  6E                 	db	110	;'n'
  1114  00FFC4  75                 	db	117	;'u'
  1115  00FFC5  0D                 	db	13
  1116  00FFC6  0A                 	db	10
  1117  00FFC7  00                 	db	0
  1118  00FFC8                     STR_30:
  1119  00FFC8  55                 	db	85	;'U'
  1120  00FFC9  6E                 	db	110	;'n'
  1121  00FFCA  6B                 	db	107	;'k'
  1122  00FFCB  6E                 	db	110	;'n'
  1123  00FFCC  6F                 	db	111	;'o'
  1124  00FFCD  77                 	db	119	;'w'
  1125  00FFCE  6E                 	db	110	;'n'
  1126  00FFCF  20                 	db	32
  1127  00FFD0  6B                 	db	107	;'k'
  1128  00FFD1  65                 	db	101	;'e'
  1129  00FFD2  79                 	db	121	;'y'
  1130  00FFD3  20                 	db	32
  1131  00FFD4  25                 	db	37
  1132  00FFD5  63                 	db	99	;'c'
  1133  00FFD6  0D                 	db	13
  1134  00FFD7  0A                 	db	10
  1135  00FFD8  00                 	db	0
  1136  00FFD9                     STR_18:
  1137  00FFD9  5A                 	db	90	;'Z'
  1138  00FFDA  20                 	db	32
  1139  00FFDB  52                 	db	82	;'R'
  1140  00FFDC  65                 	db	101	;'e'
  1141  00FFDD  73                 	db	115	;'s'
  1142  00FFDE  65                 	db	101	;'e'
  1143  00FFDF  74                 	db	116	;'t'
  1144  00FFE0  20                 	db	32
  1145  00FFE1  50                 	db	80	;'P'
  1146  00FFE2  69                 	db	105	;'i'
  1147  00FFE3  63                 	db	99	;'c'
  1148  00FFE4  0D                 	db	13
  1149  00FFE5  0A                 	db	10
  1150  00FFE6  00                 	db	0
  1151  00FFE7                     STR_35:
  1152  00FFE7  25                 	db	37
  1153  00FFE8  6C                 	db	108	;'l'
  1154  00FFE9  64                 	db	100	;'d'
  1155  00FFEA  2C                 	db	44
  1156  00FFEB  20                 	db	32
  1157  00FFEC  20                 	db	32
  1158  00FFED  20                 	db	32
  1159  00FFEE  20                 	db	32
  1160  00FFEF  25                 	db	37
  1161  00FFF0  6C                 	db	108	;'l'
  1162  00FFF1  64                 	db	100	;'d'
  1163  00FFF2  0D                 	db	13
  1164  00FFF3  0A                 	db	10
  1165  00FFF4  00                 	db	0
  1166  00FFF5                     STR_26:
  1167  00FFF5  20                 	db	32
  1168  00FFF6  6B                 	db	107	;'k'
  1169  00FFF7  0D                 	db	13
  1170  00FFF8  0A                 	db	10
  1171  00FFF9  00                 	db	0
  1172  00FFFA                     STR_27:
  1173  00FFFA  6F                 	db	111	;'o'
  1174  00FFFB  6B                 	db	107	;'k'
  1175  00FFFC  0D                 	db	13
  1176  00FFFD  0A                 	db	10
  1177  00FFFE  00                 	db	0
  1178  0000                     
  1179                           ; #config settings
  1180  00FFFF  00                 	db	0	; dummy byte at the end
  1181  0000                     
  1182                           	psect	cinit
  1183  000EA6                     __pcinit:
  1184                           	opt stack 0
  1185  000EA6                     start_initialization:
  1186                           	opt stack 0
  1187  000EA6                     __initialization:
  1188                           	opt stack 0
  1189                           
  1190                           ; Initialize objects allocated to BANK0 (14 bytes)
  1191                           ; load TBLPTR registers with __pidataBANK0
  1192  000EA6  0E50               	movlw	low __pidataBANK0
  1193  000EA8  6EF6               	movwf	tblptrl,c
  1194  000EAA  0E13               	movlw	high __pidataBANK0
  1195  000EAC  6EF7               	movwf	tblptrh,c
  1196  000EAE  0E00               	movlw	low (__pidataBANK0 shr (0+16))
  1197  000EB0  6EF8               	movwf	tblptru,c
  1198  000EB2  EE00  F096         	lfsr	0,__pdataBANK0
  1199  000EB6  EE10 F00E          	lfsr	1,14
  1200  000EBA                     copy_data0:
  1201  000EBA  0009               	tblrd		*+
  1202  000EBC  CFF5 FFEE          	movff	tablat,postinc0
  1203  000EC0  50E5               	movf	postdec1,w,c
  1204  000EC2  50E1               	movf	fsr1l,w,c
  1205  000EC4  E1FA               	bnz	copy_data0
  1206                           
  1207                           ; Clear objects allocated to BANK0 (12 bytes)
  1208  000EC6  EE00  F0A4         	lfsr	0,__pbssBANK0
  1209  000ECA  0E0C               	movlw	12
  1210  000ECC                     clear_0:
  1211  000ECC  6AEE               	clrf	postinc0,c
  1212  000ECE  06E8               	decf	wreg,f,c
  1213  000ED0  E1FD               	bnz	clear_0
  1214                           
  1215                           ; Clear objects allocated to COMRAM (22 bytes)
  1216  000ED2  EE00  F041         	lfsr	0,__pbssCOMRAM
  1217  000ED6  0E16               	movlw	22
  1218  000ED8                     clear_1:
  1219  000ED8  6AEE               	clrf	postinc0,c
  1220  000EDA  06E8               	decf	wreg,f,c
  1221  000EDC  E1FD               	bnz	clear_1
  1222  000EDE                     end_of_initialization:
  1223                           	opt stack 0
  1224  000EDE                     __end_of__initialization:
  1225                           	opt stack 0
  1226  000EDE  9057               	bcf	int$flags,0,c	;clear compiler interrupt flag (level 1)
  1227  000EE0  9257               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
  1228  000EE2  0100               	movlb	0
  1229  000EE4  EF76  F000         	goto	_main	;jump to C main() function
  1230                           tblptru	equ	0xFF8
  1231                           tblptrh	equ	0xFF7
  1232                           tblptrl	equ	0xFF6
  1233                           tablat	equ	0xFF5
  1234                           postinc0	equ	0xFEE
  1235                           wreg	equ	0xFE8
  1236                           postdec1	equ	0xFE5
  1237                           fsr1l	equ	0xFE1
  1238                           
  1239                           	psect	bssCOMRAM
  1240  000041                     __pbssCOMRAM:
  1241                           	opt stack 0
  1242  000041                     _TMR2_InterruptHandler:
  1243                           	opt stack 0
  1244  000041                     	ds	2
  1245  000043                     _TMR5_InterruptHandler:
  1246                           	opt stack 0
  1247  000043                     	ds	2
  1248  000045                     _timer5ReloadVal:
  1249                           	opt stack 0
  1250  000045                     	ds	2
  1251  000047                     _TMR1_InterruptHandler:
  1252                           	opt stack 0
  1253  000047                     	ds	2
  1254  000049                     _timer1ReloadVal:
  1255                           	opt stack 0
  1256  000049                     	ds	2
  1257  00004B                     _timer3ReloadVal:
  1258                           	opt stack 0
  1259  00004B                     	ds	2
  1260  00004D                     _timer0ReloadVal:
  1261                           	opt stack 0
  1262  00004D                     	ds	2
  1263  00004F                     _TMR0_InterruptHandler:
  1264                           	opt stack 0
  1265  00004F                     	ds	2
  1266  000051                     TMR5_DefaultInterruptHandler@pulseHigh:
  1267                           	opt stack 0
  1268  000051                     	ds	1
  1269  000052                     TMR1_DefaultInterruptHandler@pulseHigh:
  1270                           	opt stack 0
  1271  000052                     	ds	1
  1272  000053                     TMR0_DefaultInterruptHandler@pulseHigh:
  1273                           	opt stack 0
  1274  000053                     	ds	1
  1275  000054                     _encoderB:
  1276                           	opt stack 0
  1277  000054                     	ds	1
  1278  000055                     _encoderA:
  1279                           	opt stack 0
  1280  000055                     	ds	1
  1281  000056                     _motorControlMode:
  1282                           	opt stack 0
  1283  000056                     	ds	1
  1284                           tblptru	equ	0xFF8
  1285                           tblptrh	equ	0xFF7
  1286                           tblptrl	equ	0xFF6
  1287                           tablat	equ	0xFF5
  1288                           postinc0	equ	0xFEE
  1289                           wreg	equ	0xFE8
  1290                           postdec1	equ	0xFE5
  1291                           fsr1l	equ	0xFE1
  1292                           
  1293                           	psect	bssBANK0
  1294  0000A4                     __pbssBANK0:
  1295                           	opt stack 0
  1296  0000A4                     _home:
  1297                           	opt stack 0
  1298  0000A4                     	ds	4
  1299  0000A8                     _encoderPosition:
  1300                           	opt stack 0
  1301  0000A8                     	ds	4
  1302  0000AC                     _motorSetPoint:
  1303                           	opt stack 0
  1304  0000AC                     	ds	4
  1305                           tblptru	equ	0xFF8
  1306                           tblptrh	equ	0xFF7
  1307                           tblptrl	equ	0xFF6
  1308                           tablat	equ	0xFF5
  1309                           postinc0	equ	0xFEE
  1310                           wreg	equ	0xFE8
  1311                           postdec1	equ	0xFE5
  1312                           fsr1l	equ	0xFE1
  1313                           
  1314                           	psect	dataBANK0
  1315  000096                     __pdataBANK0:
  1316                           	opt stack 0
  1317  000096                     _rightLimit:
  1318                           	opt stack 0
  1319  000096                     	ds	4
  1320  00009A                     _leftLimit:
  1321                           	opt stack 0
  1322  00009A                     	ds	4
  1323  00009E                     _motorSpeed:
  1324                           	opt stack 0
  1325  00009E                     	ds	2
  1326  0000A0                     _pitchPosition:
  1327                           	opt stack 0
  1328  0000A0                     	ds	2
  1329  0000A2                     _yawPosition:
  1330                           	opt stack 0
  1331  0000A2                     	ds	2
  1332                           tblptru	equ	0xFF8
  1333                           tblptrh	equ	0xFF7
  1334                           tblptrl	equ	0xFF6
  1335                           tablat	equ	0xFF5
  1336                           postinc0	equ	0xFEE
  1337                           wreg	equ	0xFE8
  1338                           postdec1	equ	0xFE5
  1339                           fsr1l	equ	0xFE1
  1340                           
  1341                           	psect	cstackBANK0
  1342  000060                     __pcstackBANK0:
  1343                           	opt stack 0
  1344  000060                     ?_parseInt:
  1345                           	opt stack 0
  1346  000060                     ?___lldiv:
  1347                           	opt stack 0
  1348  000060                     EUSART2_Write@txData:
  1349                           	opt stack 0
  1350  000060                     TMR0_SetInterruptHandler@InterruptHandler:
  1351                           	opt stack 0
  1352  000060                     TMR1_SetInterruptHandler@InterruptHandler:
  1353                           	opt stack 0
  1354  000060                     TMR5_SetInterruptHandler@InterruptHandler:
  1355                           	opt stack 0
  1356  000060                     TMR2_SetInterruptHandler@InterruptHandler:
  1357                           	opt stack 0
  1358  000060                     setYawServo@pos:
  1359                           	opt stack 0
  1360  000060                     setPitchServo@pos:
  1361                           	opt stack 0
  1362  000060                     setMotorSpeed@speed:
  1363                           	opt stack 0
  1364  000060                     ___lldiv@dividend:
  1365                           	opt stack 0
  1366                           
  1367                           ; 4 bytes @ 0x0
  1368  000060                     	ds	1
  1369  000061                     putch@txData:
  1370                           	opt stack 0
  1371                           
  1372                           ; 1 bytes @ 0x1
  1373  000061                     	ds	1
  1374  000062                     ??_TMR0_Initialize:
  1375  000062                     ??_parseInt:
  1376                           
  1377                           ; 1 bytes @ 0x2
  1378  000062                     	ds	1
  1379  000063                     parseInt@position:
  1380                           	opt stack 0
  1381                           
  1382                           ; 2 bytes @ 0x3
  1383  000063                     	ds	1
  1384  000064                     ___lldiv@divisor:
  1385                           	opt stack 0
  1386                           
  1387                           ; 4 bytes @ 0x4
  1388  000064                     	ds	4
  1389  000068                     ___lldiv@quotient:
  1390                           	opt stack 0
  1391                           
  1392                           ; 4 bytes @ 0x8
  1393  000068                     	ds	4
  1394  00006C                     ___lldiv@counter:
  1395                           	opt stack 0
  1396                           
  1397                           ; 1 bytes @ 0xC
  1398  00006C                     	ds	1
  1399  00006D                     ?___llmod:
  1400                           	opt stack 0
  1401  00006D                     ___llmod@dividend:
  1402                           	opt stack 0
  1403                           
  1404                           ; 4 bytes @ 0xD
  1405  00006D                     	ds	4
  1406  000071                     ___llmod@divisor:
  1407                           	opt stack 0
  1408                           
  1409                           ; 4 bytes @ 0x11
  1410  000071                     	ds	4
  1411  000075                     ___llmod@counter:
  1412                           	opt stack 0
  1413                           
  1414                           ; 1 bytes @ 0x15
  1415  000075                     	ds	1
  1416  000076                     ?_printf:
  1417                           	opt stack 0
  1418  000076                     printf@f:
  1419                           	opt stack 0
  1420                           
  1421                           ; 2 bytes @ 0x16
  1422  000076                     	ds	10
  1423  000080                     ??_printf:
  1424                           
  1425                           ; 1 bytes @ 0x20
  1426  000080                     	ds	2
  1427  000082                     printf@prec:
  1428                           	opt stack 0
  1429                           
  1430                           ; 2 bytes @ 0x22
  1431  000082                     	ds	2
  1432  000084                     printf@val:
  1433                           	opt stack 0
  1434                           
  1435                           ; 4 bytes @ 0x24
  1436  000084                     	ds	4
  1437  000088                     printf@flag:
  1438                           	opt stack 0
  1439                           
  1440                           ; 1 bytes @ 0x28
  1441  000088                     	ds	1
  1442  000089                     printf@ap:
  1443                           	opt stack 0
  1444                           
  1445                           ; 2 bytes @ 0x29
  1446  000089                     	ds	2
  1447  00008B                     printf@c:
  1448                           	opt stack 0
  1449                           
  1450                           ; 1 bytes @ 0x2B
  1451  00008B                     	ds	1
  1452  00008C                     ??_main:
  1453                           
  1454                           ; 1 bytes @ 0x2C
  1455  00008C                     	ds	4
  1456  000090                     main@pos:
  1457                           	opt stack 0
  1458                           
  1459                           ; 2 bytes @ 0x30
  1460  000090                     	ds	2
  1461  000092                     main@cmd2:
  1462                           	opt stack 0
  1463                           
  1464                           ; 1 bytes @ 0x32
  1465  000092                     	ds	1
  1466  000093                     main@speed:
  1467                           	opt stack 0
  1468                           
  1469                           ; 2 bytes @ 0x33
  1470  000093                     	ds	2
  1471  000095                     main@cmd:
  1472                           	opt stack 0
  1473                           
  1474                           ; 1 bytes @ 0x35
  1475  000095                     	ds	1
  1476                           tblptru	equ	0xFF8
  1477                           tblptrh	equ	0xFF7
  1478                           tblptrl	equ	0xFF6
  1479                           tablat	equ	0xFF5
  1480                           postinc0	equ	0xFEE
  1481                           wreg	equ	0xFE8
  1482                           postdec1	equ	0xFE5
  1483                           fsr1l	equ	0xFE1
  1484                           
  1485                           	psect	cstackCOMRAM
  1486  000001                     __pcstackCOMRAM:
  1487                           	opt stack 0
  1488  000001                     ?i2___lldiv:
  1489                           	opt stack 0
  1490  000001                     TMR2_WriteTimer@timerVal:
  1491                           	opt stack 0
  1492  000001                     i2EUSART2_Write@txData:
  1493                           	opt stack 0
  1494  000001                     TMR0_WriteTimer@timerVal:
  1495                           	opt stack 0
  1496  000001                     TMR1_WriteTimer@timerVal:
  1497                           	opt stack 0
  1498  000001                     TMR5_WriteTimer@timerVal:
  1499                           	opt stack 0
  1500  000001                     CCP4_CallBack@capturedValue:
  1501                           	opt stack 0
  1502  000001                     CCP5_CallBack@capturedValue:
  1503                           	opt stack 0
  1504  000001                     i2setMotorSpeed@speed:
  1505                           	opt stack 0
  1506  000001                     i2___lldiv@dividend:
  1507                           	opt stack 0
  1508                           
  1509                           ; 4 bytes @ 0x0
  1510  000001                     	ds	1
  1511  000002                     i2putch@txData:
  1512                           	opt stack 0
  1513                           
  1514                           ; 1 bytes @ 0x1
  1515  000002                     	ds	1
  1516  000003                     ??_TMR1_DefaultInterruptHandler:
  1517  000003                     ??_TMR5_DefaultInterruptHandler:
  1518  000003                     ??_TMR2_DefaultInterruptHandler:
  1519  000003                     CCP5_CaptureISR@module:
  1520                           	opt stack 0
  1521  000003                     CCP4_CaptureISR@module:
  1522                           	opt stack 0
  1523                           
  1524                           ; 2 bytes @ 0x2
  1525  000003                     	ds	2
  1526  000005                     i2___lldiv@divisor:
  1527                           	opt stack 0
  1528                           
  1529                           ; 4 bytes @ 0x4
  1530  000005                     	ds	2
  1531  000007                     TMR2_DefaultInterruptHandler@error:
  1532                           	opt stack 0
  1533                           
  1534                           ; 4 bytes @ 0x6
  1535  000007                     	ds	2
  1536  000009                     i2___lldiv@quotient:
  1537                           	opt stack 0
  1538                           
  1539                           ; 4 bytes @ 0x8
  1540  000009                     	ds	2
  1541  00000B                     
  1542                           ; 1 bytes @ 0xA
  1543  00000B                     	ds	2
  1544  00000D                     i2___lldiv@counter:
  1545                           	opt stack 0
  1546                           
  1547                           ; 1 bytes @ 0xC
  1548  00000D                     	ds	1
  1549  00000E                     ?i2___llmod:
  1550                           	opt stack 0
  1551  00000E                     i2___llmod@dividend:
  1552                           	opt stack 0
  1553                           
  1554                           ; 4 bytes @ 0xD
  1555  00000E                     	ds	4
  1556  000012                     i2___llmod@divisor:
  1557                           	opt stack 0
  1558                           
  1559                           ; 4 bytes @ 0x11
  1560  000012                     	ds	4
  1561  000016                     i2___llmod@counter:
  1562                           	opt stack 0
  1563                           
  1564                           ; 1 bytes @ 0x15
  1565  000016                     	ds	1
  1566  000017                     ?i2_printf:
  1567                           	opt stack 0
  1568  000017                     i2printf@f:
  1569                           	opt stack 0
  1570                           
  1571                           ; 2 bytes @ 0x16
  1572  000017                     	ds	10
  1573  000021                     ??i2_printf:
  1574                           
  1575                           ; 1 bytes @ 0x20
  1576  000021                     	ds	2
  1577  000023                     i2printf@prec:
  1578                           	opt stack 0
  1579                           
  1580                           ; 2 bytes @ 0x22
  1581  000023                     	ds	2
  1582  000025                     i2printf@val:
  1583                           	opt stack 0
  1584                           
  1585                           ; 4 bytes @ 0x24
  1586  000025                     	ds	4
  1587  000029                     i2printf@flag:
  1588                           	opt stack 0
  1589                           
  1590                           ; 1 bytes @ 0x28
  1591  000029                     	ds	1
  1592  00002A                     i2printf@ap:
  1593                           	opt stack 0
  1594                           
  1595                           ; 2 bytes @ 0x29
  1596  00002A                     	ds	2
  1597  00002C                     i2printf@c:
  1598                           	opt stack 0
  1599                           
  1600                           ; 1 bytes @ 0x2B
  1601  00002C                     	ds	1
  1602  00002D                     ??_TMR0_DefaultInterruptHandler:
  1603                           
  1604                           ; 1 bytes @ 0x2C
  1605  00002D                     	ds	2
  1606  00002F                     ??_INTERRUPT_InterruptManager:
  1607                           
  1608                           ; 1 bytes @ 0x2E
  1609  00002F                     	ds	18
  1610                           tblptru	equ	0xFF8
  1611                           tblptrh	equ	0xFF7
  1612                           tblptrl	equ	0xFF6
  1613                           tablat	equ	0xFF5
  1614                           postinc0	equ	0xFEE
  1615                           wreg	equ	0xFE8
  1616                           postdec1	equ	0xFE5
  1617                           fsr1l	equ	0xFE1
  1618                           
  1619 ;;
  1620 ;;Main: autosize = 0, tempsize = 4, incstack = 0, save=0
  1621 ;;
  1622 ;; *************** function _main *****************
  1623 ;; Defined at:
  1624 ;;		line 62 in file "main.c"
  1625 ;; Parameters:    Size  Location     Type
  1626 ;;		None
  1627 ;; Auto vars:     Size  Location     Type
  1628 ;;  speed           2   51[BANK0 ] unsigned int 
  1629 ;;  pos             2   48[BANK0 ] unsigned int 
  1630 ;;  cmd             1   53[BANK0 ] unsigned char 
  1631 ;;  cmd2            1   50[BANK0 ] unsigned char 
  1632 ;; Return value:  Size  Location     Type
  1633 ;;                  1    wreg      void 
  1634 ;; Registers used:
  1635 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1636 ;; Tracked objects:
  1637 ;;		On entry : 0/0
  1638 ;;		On exit  : 0/0
  1639 ;;		Unchanged: 0/0
  1640 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1641 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1642 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1643 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1644 ;;      Totals:         0      10       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1645 ;;Total ram usage:       10 bytes
  1646 ;; Hardware stack levels required when called:    9
  1647 ;; This function calls:
  1648 ;;		_EUSART1_Read
  1649 ;;		_EUSART1_is_rx_ready
  1650 ;;		_EUSART2_Read
  1651 ;;		_EUSART2_is_rx_ready
  1652 ;;		_SYSTEM_Initialize
  1653 ;;		_parseInt
  1654 ;;		_printf
  1655 ;;		_setMotorSpeed
  1656 ;;		_setPitchServo
  1657 ;;		_setYawServo
  1658 ;; This function is called by:
  1659 ;;		Startup code after reset
  1660 ;; This function uses a non-reentrant model
  1661 ;;
  1662                           
  1663                           	psect	text0
  1664  0000EC                     __ptext0:
  1665                           	opt stack 0
  1666  0000EC                     _main:
  1667                           	opt stack 22
  1668                           
  1669                           ;main.c: 63: char cmd, cmd2;
  1670                           ;main.c: 64: (INTCONbits.GIE = 1);
  1671                           
  1672                           ;incstack = 0
  1673  0000EC  8EF2               	bsf	intcon,7,c	;volatile
  1674                           
  1675                           ;main.c: 65: (INTCONbits.PEIE = 1);
  1676  0000EE  8CF2               	bsf	intcon,6,c	;volatile
  1677                           
  1678                           ;main.c: 67: SYSTEM_Initialize();
  1679  0000F0  EC1F  F008         	call	_SYSTEM_Initialize	;wreg free
  1680                           
  1681                           ;main.c: 68: printf("Connect RA1 to Yaw Servo Data\r\n");
  1682  0000F4  0E7E               	movlw	low STR_1
  1683  0000F6  0100               	movlb	0	; () banked
  1684  0000F8  6F76               	movwf	printf@f& (0+255),b
  1685  0000FA  0EFE               	movlw	high STR_1
  1686  0000FC  6F77               	movwf	(printf@f+1)& (0+255),b
  1687  0000FE  EC1C  F003         	call	_printf	;wreg free
  1688                           
  1689                           ;main.c: 69: printf("Connect RA0 to Pitch Servo Data\r\n");
  1690  000102  0E3B               	movlw	low STR_2
  1691  000104  0100               	movlb	0	; () banked
  1692  000106  6F76               	movwf	printf@f& (0+255),b
  1693  000108  0EFE               	movlw	high STR_2
  1694  00010A  6F77               	movwf	(printf@f+1)& (0+255),b
  1695  00010C  EC1C  F003         	call	_printf	;wreg free
  1696                           
  1697                           ;main.c: 70: printf("Connect RA2 to the Motor Controller Data\r\n");
  1698  000110  0E73               	movlw	low STR_3
  1699  000112  0100               	movlb	0	; () banked
  1700  000114  6F76               	movwf	printf@f& (0+255),b
  1701  000116  0EFC               	movlw	high STR_3
  1702  000118  6F77               	movwf	(printf@f+1)& (0+255),b
  1703  00011A  EC1C  F003         	call	_printf	;wreg free
  1704                           
  1705                           ;main.c: 71: printf("Connect RB0 to Encoder A\r\n");
  1706  00011E  0E17               	movlw	low STR_4
  1707  000120  0100               	movlb	0	; () banked
  1708  000122  6F76               	movwf	printf@f& (0+255),b
  1709  000124  0EFF               	movlw	high STR_4
  1710  000126  6F77               	movwf	(printf@f+1)& (0+255),b
  1711  000128  EC1C  F003         	call	_printf	;wreg free
  1712                           
  1713                           ;main.c: 72: printf("Connect RA4 to Encoder B\r\n");
  1714  00012C  0E32               	movlw	low STR_5
  1715  00012E  0100               	movlb	0	; () banked
  1716  000130  6F76               	movwf	printf@f& (0+255),b
  1717  000132  0EFF               	movlw	high STR_5
  1718  000134  6F77               	movwf	(printf@f+1)& (0+255),b
  1719  000136  EC1C  F003         	call	_printf	;wreg free
  1720  00013A                     
  1721                           ;main.c: 74: if ((EUSART2_is_rx_ready())) {
  1722  00013A  ECC3  F009         	call	_EUSART2_is_rx_ready	;wreg free
  1723  00013E  0900               	iorlw	0
  1724  000140  B4D8               	btfsc	status,2,c
  1725  000142  D197               	goto	l585
  1726                           
  1727                           ;main.c: 75: cmd = EUSART2_Read();
  1728  000144  ECA0  F009         	call	_EUSART2_Read	;wreg free
  1729  000148  0100               	movlb	0	; () banked
  1730  00014A  6F95               	movwf	main@cmd& (0+255),b
  1731                           
  1732                           ;main.c: 76: switch (cmd) {
  1733  00014C  D165               	goto	l583
  1734  00014E                     
  1735                           ; BSR set to: 0
  1736                           ;main.c: 78: setPitchServo(pitchPosition - 100);
  1737                           
  1738                           ; BSR set to: 0
  1739  00014E  0E9C               	movlw	156
  1740  000150  25A0               	addwf	_pitchPosition& (0+255),w,b
  1741  000152  6F60               	movwf	setPitchServo@pos& (0+255),b
  1742  000154  0EFF               	movlw	255
  1743  000156  21A1               	addwfc	(_pitchPosition+1)& (0+255),w,b
  1744  000158  6F61               	movwf	(setPitchServo@pos+1)& (0+255),b
  1745  00015A  ECEB  F007         	call	_setPitchServo	;wreg free
  1746                           
  1747                           ;main.c: 79: printf("Incrementing Pitch Servo Position: %u\r\n",pitchPosition);
  1748  00015E  0EC6               	movlw	low STR_6
  1749  000160  0100               	movlb	0	; () banked
  1750  000162  6F76               	movwf	printf@f& (0+255),b
  1751  000164  0EFC               	movlw	high STR_6
  1752  000166  6F77               	movwf	(printf@f+1)& (0+255),b
  1753  000168  C0A0  F078         	movff	_pitchPosition,?_printf+2
  1754  00016C  C0A1  F079         	movff	_pitchPosition+1,?_printf+3
  1755  000170  EC1C  F003         	call	_printf	;wreg free
  1756                           
  1757                           ;main.c: 80: break;
  1758  000174  D17E               	goto	l585
  1759  000176                     
  1760                           ;main.c: 82: setPitchServo(pitchPosition + 100);
  1761  000176  0E64               	movlw	100
  1762  000178  0100               	movlb	0	; () banked
  1763  00017A  25A0               	addwf	_pitchPosition& (0+255),w,b
  1764  00017C  6F60               	movwf	setPitchServo@pos& (0+255),b
  1765  00017E  0E00               	movlw	0
  1766  000180  21A1               	addwfc	(_pitchPosition+1)& (0+255),w,b
  1767  000182  6F61               	movwf	(setPitchServo@pos+1)& (0+255),b
  1768  000184  ECEB  F007         	call	_setPitchServo	;wreg free
  1769                           
  1770                           ;main.c: 83: printf("Decrementing Pitch Servo Position: %u\r\n",pitchPosition);
  1771  000188  0E9E               	movlw	low STR_7
  1772  00018A  0100               	movlb	0	; () banked
  1773  00018C  6F76               	movwf	printf@f& (0+255),b
  1774  00018E  0EFC               	movlw	high STR_7
  1775  000190  6F77               	movwf	(printf@f+1)& (0+255),b
  1776  000192  C0A0  F078         	movff	_pitchPosition,?_printf+2
  1777  000196  C0A1  F079         	movff	_pitchPosition+1,?_printf+3
  1778  00019A  EC1C  F003         	call	_printf	;wreg free
  1779                           
  1780                           ;main.c: 84: break;
  1781  00019E  D169               	goto	l585
  1782  0001A0                     
  1783                           ;main.c: 86: printf("Debug Console Help\r\n");
  1784  0001A0  0E8D               	movlw	low STR_8
  1785  0001A2  0100               	movlb	0	; () banked
  1786  0001A4  6F76               	movwf	printf@f& (0+255),b
  1787  0001A6  0EFF               	movlw	high STR_8
  1788  0001A8  6F77               	movwf	(printf@f+1)& (0+255),b
  1789  0001AA  EC1C  F003         	call	_printf	;wreg free
  1790                           
  1791                           ;main.c: 87: printf("? Show Help Menu\r\n");
  1792  0001AE  0EB5               	movlw	low STR_9
  1793  0001B0  0100               	movlb	0	; () banked
  1794  0001B2  6F76               	movwf	printf@f& (0+255),b
  1795  0001B4  0EFF               	movlw	high STR_9
  1796  0001B6  6F77               	movwf	(printf@f+1)& (0+255),b
  1797  0001B8  EC1C  F003         	call	_printf	;wreg free
  1798                           
  1799                           ;main.c: 88: printf("S/s move Yaw Servo\r\n");
  1800  0001BC  0E78               	movlw	low STR_10
  1801  0001BE  0100               	movlb	0	; () banked
  1802  0001C0  6F76               	movwf	printf@f& (0+255),b
  1803  0001C2  0EFF               	movlw	high STR_10
  1804  0001C4  6F77               	movwf	(printf@f+1)& (0+255),b
  1805  0001C6  EC1C  F003         	call	_printf	;wreg free
  1806                           
  1807                           ;main.c: 89: printf("T/t move Tilt Servo\r\n");
  1808  0001CA  0E4D               	movlw	low STR_11
  1809  0001CC  0100               	movlb	0	; () banked
  1810  0001CE  6F76               	movwf	printf@f& (0+255),b
  1811  0001D0  0EFF               	movlw	high STR_11
  1812  0001D2  6F77               	movwf	(printf@f+1)& (0+255),b
  1813  0001D4  EC1C  F003         	call	_printf	;wreg free
  1814                           
  1815                           ;main.c: 90: printf("M/m Increase/Decrease Motor Speed \r\n");
  1816  0001D8  0E61               	movlw	low STR_12
  1817  0001DA  0100               	movlb	0	; () banked
  1818  0001DC  6F76               	movwf	printf@f& (0+255),b
  1819  0001DE  0EFD               	movlw	high STR_12
  1820  0001E0  6F77               	movwf	(printf@f+1)& (0+255),b
  1821  0001E2  EC1C  F003         	call	_printf	;wreg free
  1822                           
  1823                           ;main.c: 91: printf("F/f Move Motor 10000/-10000 ticks \r\n");
  1824  0001E6  0ED0               	movlw	low STR_13
  1825  0001E8  0100               	movlb	0	; () banked
  1826  0001EA  6F76               	movwf	printf@f& (0+255),b
  1827  0001EC  0EFD               	movlw	high STR_13
  1828  0001EE  6F77               	movwf	(printf@f+1)& (0+255),b
  1829  0001F0  EC1C  F003         	call	_printf	;wreg free
  1830                           
  1831                           ;main.c: 92: printf("E print encoder values to console \r\n");
  1832  0001F4  0E86               	movlw	low STR_14
  1833  0001F6  0100               	movlb	0	; () banked
  1834  0001F8  6F76               	movwf	printf@f& (0+255),b
  1835  0001FA  0EFD               	movlw	high STR_14
  1836  0001FC  6F77               	movwf	(printf@f+1)& (0+255),b
  1837  0001FE  EC1C  F003         	call	_printf	;wreg free
  1838                           
  1839                           ;main.c: 93: printf("o print encoder values to console \r\n");
  1840  000202  0EAB               	movlw	low STR_15
  1841  000204  0100               	movlb	0	; () banked
  1842  000206  6F76               	movwf	printf@f& (0+255),b
  1843  000208  0EFD               	movlw	high STR_15
  1844  00020A  6F77               	movwf	(printf@f+1)& (0+255),b
  1845  00020C  EC1C  F003         	call	_printf	;wreg free
  1846                           
  1847                           ;main.c: 94: printf("u print incoming EUSART1 data \r\n");
  1848  000210  0E5D               	movlw	low STR_16
  1849  000212  0100               	movlb	0	; () banked
  1850  000214  6F76               	movwf	printf@f& (0+255),b
  1851  000216  0EFE               	movlw	high STR_16
  1852  000218  6F77               	movwf	(printf@f+1)& (0+255),b
  1853  00021A  EC1C  F003         	call	_printf	;wreg free
  1854                           
  1855                           ;main.c: 95: printf("z clear terminal\r\n");
  1856  00021E  0EA2               	movlw	low STR_17
  1857  000220  0100               	movlb	0	; () banked
  1858  000222  6F76               	movwf	printf@f& (0+255),b
  1859  000224  0EFF               	movlw	high STR_17
  1860  000226  6F77               	movwf	(printf@f+1)& (0+255),b
  1861  000228  EC1C  F003         	call	_printf	;wreg free
  1862                           
  1863                           ;main.c: 96: printf("Z Reset Pic\r\n");
  1864  00022C  0ED9               	movlw	low STR_18
  1865  00022E  0100               	movlb	0	; () banked
  1866  000230  6F76               	movwf	printf@f& (0+255),b
  1867  000232  0EFF               	movlw	high STR_18
  1868  000234  6F77               	movwf	(printf@f+1)& (0+255),b
  1869  000236  EC1C  F003         	call	_printf	;wreg free
  1870                           
  1871                           ;main.c: 99: break;
  1872  00023A  D11B               	goto	l585
  1873  00023C                     
  1874                           ;main.c: 101: setYawServo(yawPosition+100);
  1875  00023C  0E64               	movlw	100
  1876  00023E  0100               	movlb	0	; () banked
  1877  000240  25A2               	addwf	_yawPosition& (0+255),w,b
  1878  000242  6F60               	movwf	setYawServo@pos& (0+255),b
  1879  000244  0E00               	movlw	0
  1880  000246  21A3               	addwfc	(_yawPosition+1)& (0+255),w,b
  1881  000248  6F61               	movwf	(setYawServo@pos+1)& (0+255),b
  1882  00024A  ECD1  F007         	call	_setYawServo	;wreg free
  1883                           
  1884                           ;main.c: 102: printf("Incrementing Yaw Servo Position: %u\r\n",yawPosition);
  1885  00024E  0E3B               	movlw	low STR_19
  1886  000250  0100               	movlb	0	; () banked
  1887  000252  6F76               	movwf	printf@f& (0+255),b
  1888  000254  0EFD               	movlw	high STR_19
  1889  000256  6F77               	movwf	(printf@f+1)& (0+255),b
  1890  000258  C0A2  F078         	movff	_yawPosition,?_printf+2
  1891  00025C  C0A3  F079         	movff	_yawPosition+1,?_printf+3
  1892  000260  EC1C  F003         	call	_printf	;wreg free
  1893                           
  1894                           ;main.c: 103: break;
  1895  000264  D106               	goto	l585
  1896  000266                     
  1897                           ;main.c: 105: setYawServo(yawPosition-100);
  1898  000266  0E9C               	movlw	156
  1899  000268  0100               	movlb	0	; () banked
  1900  00026A  25A2               	addwf	_yawPosition& (0+255),w,b
  1901  00026C  6F60               	movwf	setYawServo@pos& (0+255),b
  1902  00026E  0EFF               	movlw	255
  1903  000270  21A3               	addwfc	(_yawPosition+1)& (0+255),w,b
  1904  000272  6F61               	movwf	(setYawServo@pos+1)& (0+255),b
  1905  000274  ECD1  F007         	call	_setYawServo	;wreg free
  1906                           
  1907                           ;main.c: 106: printf("Decrementing Yaw Servo Position: %u\r\n",yawPosition);
  1908  000278  0E15               	movlw	low STR_20
  1909  00027A  0100               	movlb	0	; () banked
  1910  00027C  6F76               	movwf	printf@f& (0+255),b
  1911  00027E  0EFD               	movlw	high STR_20
  1912  000280  6F77               	movwf	(printf@f+1)& (0+255),b
  1913  000282  C0A2  F078         	movff	_yawPosition,?_printf+2
  1914  000286  C0A3  F079         	movff	_yawPosition+1,?_printf+3
  1915  00028A  EC1C  F003         	call	_printf	;wreg free
  1916                           
  1917                           ;main.c: 107: break;
  1918  00028E  D0F1               	goto	l585
  1919  000290                     
  1920                           ;main.c: 109: motorControlMode = 0;
  1921  000290  0E00               	movlw	0
  1922  000292  6E56               	movwf	_motorControlMode,c
  1923                           
  1924                           ;main.c: 110: setMotorSpeed(motorSpeed+100);
  1925  000294  0E64               	movlw	100
  1926  000296  0100               	movlb	0	; () banked
  1927  000298  259E               	addwf	_motorSpeed& (0+255),w,b
  1928  00029A  6F60               	movwf	setMotorSpeed@speed& (0+255),b
  1929  00029C  0E00               	movlw	0
  1930  00029E  219F               	addwfc	(_motorSpeed+1)& (0+255),w,b
  1931  0002A0  6F61               	movwf	(setMotorSpeed@speed+1)& (0+255),b
  1932  0002A2  EC05  F008         	call	_setMotorSpeed	;wreg free
  1933                           
  1934                           ;main.c: 111: printf("Incrementing Motor Speed: %u\r\n",motorSpeed);
  1935  0002A6  0EDD               	movlw	low STR_21
  1936  0002A8  0100               	movlb	0	; () banked
  1937  0002AA  6F76               	movwf	printf@f& (0+255),b
  1938  0002AC  0EFE               	movlw	high STR_21
  1939  0002AE  6F77               	movwf	(printf@f+1)& (0+255),b
  1940  0002B0  C09E  F078         	movff	_motorSpeed,?_printf+2
  1941  0002B4  C09F  F079         	movff	_motorSpeed+1,?_printf+3
  1942  0002B8  EC1C  F003         	call	_printf	;wreg free
  1943                           
  1944                           ;main.c: 112: break;
  1945  0002BC  D0DA               	goto	l585
  1946  0002BE                     
  1947                           ;main.c: 114: motorControlMode = 0;
  1948  0002BE  0E00               	movlw	0
  1949  0002C0  6E56               	movwf	_motorControlMode,c
  1950                           
  1951                           ;main.c: 115: setMotorSpeed(motorSpeed-100);
  1952  0002C2  0E9C               	movlw	156
  1953  0002C4  0100               	movlb	0	; () banked
  1954  0002C6  259E               	addwf	_motorSpeed& (0+255),w,b
  1955  0002C8  6F60               	movwf	setMotorSpeed@speed& (0+255),b
  1956  0002CA  0EFF               	movlw	255
  1957  0002CC  219F               	addwfc	(_motorSpeed+1)& (0+255),w,b
  1958  0002CE  6F61               	movwf	(setMotorSpeed@speed+1)& (0+255),b
  1959  0002D0  EC05  F008         	call	_setMotorSpeed	;wreg free
  1960                           
  1961                           ;main.c: 116: printf("Decrementing Motor Speed: %u\r\n",motorSpeed);
  1962  0002D4  0EBE               	movlw	low STR_22
  1963  0002D6  0100               	movlb	0	; () banked
  1964  0002D8  6F76               	movwf	printf@f& (0+255),b
  1965  0002DA  0EFE               	movlw	high STR_22
  1966  0002DC  6F77               	movwf	(printf@f+1)& (0+255),b
  1967  0002DE  C09E  F078         	movff	_motorSpeed,?_printf+2
  1968  0002E2  C09F  F079         	movff	_motorSpeed+1,?_printf+3
  1969  0002E6  EC1C  F003         	call	_printf	;wreg free
  1970                           
  1971                           ;main.c: 117: break;
  1972  0002EA  D0C3               	goto	l585
  1973  0002EC                     
  1974                           ;main.c: 119: motorControlMode = 1;
  1975  0002EC  0E01               	movlw	1
  1976  0002EE  6E56               	movwf	_motorControlMode,c
  1977                           
  1978                           ;main.c: 120: motorSetPoint += 10000;
  1979  0002F0  0E10               	movlw	16
  1980  0002F2  0100               	movlb	0	; () banked
  1981  0002F4  27AC               	addwf	_motorSetPoint& (0+255),f,b
  1982  0002F6  0E27               	movlw	39
  1983  0002F8  23AD               	addwfc	(_motorSetPoint+1)& (0+255),f,b
  1984  0002FA  0E00               	movlw	0
  1985  0002FC  23AE               	addwfc	(_motorSetPoint+2)& (0+255),f,b
  1986  0002FE  0E00               	movlw	0
  1987  000300  23AF               	addwfc	(_motorSetPoint+3)& (0+255),f,b
  1988                           
  1989                           ; BSR set to: 0
  1990                           ;main.c: 121: printf("Incrementing Motor Setpoint: %ld\r\n",motorSetPoint);
  1991  000302  0E18               	movlw	low STR_23
  1992  000304  6F76               	movwf	printf@f& (0+255),b
  1993  000306  0EFE               	movlw	high STR_23
  1994  000308  6F77               	movwf	(printf@f+1)& (0+255),b
  1995  00030A  C0AC  F078         	movff	_motorSetPoint,?_printf+2
  1996  00030E  C0AD  F079         	movff	_motorSetPoint+1,?_printf+3
  1997  000312  C0AE  F07A         	movff	_motorSetPoint+2,?_printf+4
  1998  000316  C0AF  F07B         	movff	_motorSetPoint+3,?_printf+5
  1999  00031A  EC1C  F003         	call	_printf	;wreg free
  2000                           
  2001                           ;main.c: 122: break;
  2002  00031E  D0A9               	goto	l585
  2003  000320                     
  2004                           ;main.c: 124: motorControlMode = 1;
  2005  000320  0E01               	movlw	1
  2006  000322  6E56               	movwf	_motorControlMode,c
  2007                           
  2008                           ;main.c: 125: motorSetPoint -= 10000;
  2009  000324  0E10               	movlw	16
  2010  000326  0100               	movlb	0	; () banked
  2011  000328  5FAC               	subwf	_motorSetPoint& (0+255),f,b
  2012  00032A  0E27               	movlw	39
  2013  00032C  5BAD               	subwfb	(_motorSetPoint+1)& (0+255),f,b
  2014  00032E  0E00               	movlw	0
  2015  000330  5BAE               	subwfb	(_motorSetPoint+2)& (0+255),f,b
  2016  000332  0E00               	movlw	0
  2017  000334  5BAF               	subwfb	(_motorSetPoint+3)& (0+255),f,b
  2018                           
  2019                           ; BSR set to: 0
  2020                           ;main.c: 126: printf("Decrementing Motor Setpoint: %ld\r\n",motorSetPoint);
  2021  000336  0EF5               	movlw	low STR_24
  2022  000338  6F76               	movwf	printf@f& (0+255),b
  2023  00033A  0EFD               	movlw	high STR_24
  2024  00033C  6F77               	movwf	(printf@f+1)& (0+255),b
  2025  00033E  C0AC  F078         	movff	_motorSetPoint,?_printf+2
  2026  000342  C0AD  F079         	movff	_motorSetPoint+1,?_printf+3
  2027  000346  C0AE  F07A         	movff	_motorSetPoint+2,?_printf+4
  2028  00034A  C0AF  F07B         	movff	_motorSetPoint+3,?_printf+5
  2029  00034E  EC1C  F003         	call	_printf	;wreg free
  2030                           
  2031                           ;main.c: 127: break;
  2032  000352  D08F               	goto	l585
  2033  000354                     
  2034                           ;main.c: 130: printf("Encoder Position: %ld   SetPoint:%ld\r\n",encoderPosition,motorSet
      +                          Point);
  2035  000354  0EEE               	movlw	low STR_25
  2036  000356  0100               	movlb	0	; () banked
  2037  000358  6F76               	movwf	printf@f& (0+255),b
  2038  00035A  0EFC               	movlw	high STR_25
  2039  00035C  6F77               	movwf	(printf@f+1)& (0+255),b
  2040  00035E  C0A8  F078         	movff	_encoderPosition,?_printf+2
  2041  000362  C0A9  F079         	movff	_encoderPosition+1,?_printf+3
  2042  000366  C0AA  F07A         	movff	_encoderPosition+2,?_printf+4
  2043  00036A  C0AB  F07B         	movff	_encoderPosition+3,?_printf+5
  2044  00036E  C0AC  F07C         	movff	_motorSetPoint,?_printf+6
  2045  000372  C0AD  F07D         	movff	_motorSetPoint+1,?_printf+7
  2046  000376  C0AE  F07E         	movff	_motorSetPoint+2,?_printf+8
  2047  00037A  C0AF  F07F         	movff	_motorSetPoint+3,?_printf+9
  2048  00037E  EC1C  F003         	call	_printf	;wreg free
  2049  000382  ECC3  F009         	call	_EUSART2_is_rx_ready	;wreg free
  2050  000386  0900               	iorlw	0
  2051  000388  B4D8               	btfsc	status,2,c
  2052  00038A  D7E4               	goto	l596
  2053                           
  2054                           ;main.c: 131: }
  2055                           ;main.c: 132: EUSART2_Read();
  2056  00038C  ECA0  F009         	call	_EUSART2_Read	;wreg free
  2057                           
  2058                           ;main.c: 133: break;
  2059  000390  D070               	goto	l585
  2060  000392                     
  2061                           ;main.c: 135: printf(" k\r\n");
  2062  000392  0EF5               	movlw	low STR_26
  2063  000394  0100               	movlb	0	; () banked
  2064  000396  6F76               	movwf	printf@f& (0+255),b
  2065  000398  0EFF               	movlw	high STR_26
  2066  00039A  6F77               	movwf	(printf@f+1)& (0+255),b
  2067  00039C  EC1C  F003         	call	_printf	;wreg free
  2068                           
  2069                           ;main.c: 136: break;
  2070  0003A0  D068               	goto	l585
  2071  0003A2                     
  2072                           ;main.c: 139: if ((EUSART1_is_rx_ready())) {
  2073  0003A2  ECBD  F009         	call	_EUSART1_is_rx_ready	;wreg free
  2074  0003A6  0900               	iorlw	0
  2075  0003A8  B4D8               	btfsc	status,2,c
  2076  0003AA  D019               	goto	l604
  2077                           
  2078                           ;main.c: 140: cmd2 = EUSART1_Read();
  2079  0003AC  EC98  F009         	call	_EUSART1_Read	;wreg free
  2080  0003B0  0100               	movlb	0	; () banked
  2081  0003B2  6F92               	movwf	main@cmd2& (0+255),b
  2082                           
  2083                           ; BSR set to: 0
  2084                           ;main.c: 141: if (cmd2 == 'o') {
  2085  0003B4  0E6F               	movlw	111
  2086  0003B6  1992               	xorwf	main@cmd2& (0+255),w,b
  2087  0003B8  A4D8               	btfss	status,2,c
  2088  0003BA  D007               	goto	l603
  2089                           
  2090                           ; BSR set to: 0
  2091                           ;main.c: 142: printf("ok\r\n");
  2092  0003BC  0EFA               	movlw	low STR_27
  2093  0003BE  6F76               	movwf	printf@f& (0+255),b
  2094  0003C0  0EFF               	movlw	high STR_27
  2095  0003C2  6F77               	movwf	(printf@f+1)& (0+255),b
  2096  0003C4  EC1C  F003         	call	_printf	;wreg free
  2097                           
  2098                           ;main.c: 143: }
  2099  0003C8  D00A               	goto	l604
  2100  0003CA                     l603:
  2101                           
  2102                           ;main.c: 144: else {
  2103                           ;main.c: 145: printf("Received %u from EUSART1\r\n", cmd2);
  2104  0003CA  0EFC               	movlw	low STR_28
  2105  0003CC  0100               	movlb	0	; () banked
  2106  0003CE  6F76               	movwf	printf@f& (0+255),b
  2107  0003D0  0EFE               	movlw	high STR_28
  2108  0003D2  6F77               	movwf	(printf@f+1)& (0+255),b
  2109  0003D4  C092  F078         	movff	main@cmd2,?_printf+2
  2110  0003D8  6B79               	clrf	(?_printf+3)& (0+255),b
  2111  0003DA  EC1C  F003         	call	_printf	;wreg free
  2112  0003DE                     l604:
  2113  0003DE  ECC3  F009         	call	_EUSART2_is_rx_ready	;wreg free
  2114  0003E2  0900               	iorlw	0
  2115  0003E4  B4D8               	btfsc	status,2,c
  2116  0003E6  D7DD               	goto	l601
  2117                           
  2118                           ;main.c: 146: }
  2119                           ;main.c: 147: }
  2120                           ;main.c: 148: }
  2121                           ;main.c: 149: EUSART2_Read();
  2122  0003E8  ECA0  F009         	call	_EUSART2_Read	;wreg free
  2123                           
  2124                           ;main.c: 150: break;
  2125  0003EC  D042               	goto	l585
  2126  0003EE                     
  2127                           ;main.c: 152: printf("\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n");
  2128  0003EE  0E63               	movlw	low STR_29
  2129  0003F0  0100               	movlb	0	; () banked
  2130  0003F2  6F76               	movwf	printf@f& (0+255),b
  2131  0003F4  0EFF               	movlw	high STR_29
  2132  0003F6  6F77               	movwf	(printf@f+1)& (0+255),b
  2133  0003F8  EC1C  F003         	call	_printf	;wreg free
  2134                           
  2135                           ;main.c: 153: break;
  2136  0003FC  D03A               	goto	l585
  2137  0003FE                     l607:
  2138                           
  2139                           ; BSR set to: 0
  2140  0003FE  00FF               	reset		;# 
  2141                           
  2142                           ;main.c: 156: break;
  2143  000400  D038               	goto	l585
  2144  000402                     
  2145                           ;main.c: 158: printf("Unknown key %c\r\n",cmd);
  2146  000402  0EC8               	movlw	low STR_30
  2147  000404  0100               	movlb	0	; () banked
  2148  000406  6F76               	movwf	printf@f& (0+255),b
  2149  000408  0EFF               	movlw	high STR_30
  2150  00040A  6F77               	movwf	(printf@f+1)& (0+255),b
  2151  00040C  C095  F078         	movff	main@cmd,?_printf+2
  2152  000410  6B79               	clrf	(?_printf+3)& (0+255),b
  2153  000412  EC1C  F003         	call	_printf	;wreg free
  2154                           
  2155                           ;main.c: 160: }
  2156                           
  2157                           ;main.c: 159: break;
  2158  000416  D02D               	goto	l585
  2159  000418                     l583:
  2160  000418  0100               	movlb	0	; () banked
  2161  00041A  5195               	movf	main@cmd& (0+255),w,b
  2162                           
  2163                           ; Switch size 1, requested type "space"
  2164                           ; Number of cases is 14, Range of values is 63 to 122
  2165                           ; switch strategies available:
  2166                           ; Name         Instructions Cycles
  2167                           ; simple_byte           43    22 (average)
  2168                           ;	Chosen strategy is simple_byte
  2169  00041C  0A3F               	xorlw	63	; case 63
  2170  00041E  B4D8               	btfsc	status,2,c
  2171  000420  D6BF               	goto	l587
  2172  000422  0A7A               	xorlw	122	; case 69
  2173  000424  B4D8               	btfsc	status,2,c
  2174  000426  D7AD               	goto	l595
  2175  000428  0A03               	xorlw	3	; case 70
  2176  00042A  B4D8               	btfsc	status,2,c
  2177  00042C  D75F               	goto	l592
  2178  00042E  0A0B               	xorlw	11	; case 77
  2179  000430  B4D8               	btfsc	status,2,c
  2180  000432  D72E               	goto	l590
  2181  000434  0A1E               	xorlw	30	; case 83
  2182  000436  B4D8               	btfsc	status,2,c
  2183  000438  D701               	goto	l588
  2184  00043A  0A07               	xorlw	7	; case 84
  2185  00043C  B4D8               	btfsc	status,2,c
  2186  00043E  D69B               	goto	l586
  2187  000440  0A0E               	xorlw	14	; case 90
  2188  000442  B4D8               	btfsc	status,2,c
  2189  000444  D7DC               	goto	l607
  2190  000446  0A3C               	xorlw	60	; case 102
  2191  000448  B4D8               	btfsc	status,2,c
  2192  00044A  D76A               	goto	l593
  2193  00044C  0A0B               	xorlw	11	; case 109
  2194  00044E  B4D8               	btfsc	status,2,c
  2195  000450  D736               	goto	l591
  2196  000452  0A02               	xorlw	2	; case 111
  2197  000454  B4D8               	btfsc	status,2,c
  2198  000456  D79D               	goto	l598
  2199  000458  0A1C               	xorlw	28	; case 115
  2200  00045A  B4D8               	btfsc	status,2,c
  2201  00045C  D704               	goto	l589
  2202  00045E  0A07               	xorlw	7	; case 116
  2203  000460  B4D8               	btfsc	status,2,c
  2204  000462  D675               	goto	l584
  2205  000464  0A01               	xorlw	1	; case 117
  2206  000466  B4D8               	btfsc	status,2,c
  2207  000468  D7BA               	goto	l604
  2208  00046A  0A0F               	xorlw	15	; case 122
  2209  00046C  B4D8               	btfsc	status,2,c
  2210  00046E  D7BF               	goto	l606
  2211  000470  D7C8               	goto	l608
  2212  000472                     l585:
  2213                           
  2214                           ;main.c: 162: }
  2215                           ;main.c: 163: if ((EUSART1_is_rx_ready())) {
  2216                           
  2217                           ; BSR set to: 0
  2218                           
  2219                           ; BSR set to: 0
  2220  000472  ECBD  F009         	call	_EUSART1_is_rx_ready	;wreg free
  2221  000476  0900               	iorlw	0
  2222  000478  B4D8               	btfsc	status,2,c
  2223  00047A  D65F               	goto	l581
  2224                           
  2225                           ;main.c: 165: cmd = EUSART1_Read();
  2226  00047C  EC98  F009         	call	_EUSART1_Read	;wreg free
  2227  000480  0100               	movlb	0	; () banked
  2228  000482  6F95               	movwf	main@cmd& (0+255),b
  2229                           
  2230                           ;main.c: 166: switch (cmd) {
  2231  000484  D0BB               	goto	l610
  2232  000486                     
  2233                           ; BSR set to: 0
  2234                           ;main.c: 168: printf("");
  2235                           
  2236                           ; BSR set to: 0
  2237  000486  0E77               	movlw	low (STR_29+20)
  2238  000488  6F76               	movwf	printf@f& (0+255),b
  2239  00048A  0EFF               	movlw	high (STR_29+20)
  2240  00048C  6F77               	movwf	(printf@f+1)& (0+255),b
  2241  00048E  EC1C  F003         	call	_printf	;wreg free
  2242                           
  2243                           ;main.c: 169: uint16_t pos = parseInt()<<4;
  2244  000492  ECEA  F008         	call	_parseInt	;wreg free
  2245  000496  0100               	movlb	0	; () banked
  2246  000498  3B60               	swapf	?_parseInt& (0+255),f,b
  2247  00049A  3B61               	swapf	(?_parseInt+1)& (0+255),f,b
  2248  00049C  0EF0               	movlw	240
  2249  00049E  1761               	andwf	(?_parseInt+1)& (0+255),f,b
  2250  0004A0  5160               	movf	?_parseInt& (0+255),w,b
  2251  0004A2  0B0F               	andlw	15
  2252  0004A4  1361               	iorwf	(?_parseInt+1)& (0+255),f,b
  2253  0004A6  0EF0               	movlw	240
  2254  0004A8  1760               	andwf	?_parseInt& (0+255),f,b
  2255  0004AA  C060  F090         	movff	?_parseInt,main@pos
  2256  0004AE  C061  F091         	movff	?_parseInt+1,main@pos+1
  2257                           
  2258                           ; BSR set to: 0
  2259                           ;main.c: 170: setYawServo(pos +1100);
  2260  0004B2  0E4C               	movlw	76
  2261  0004B4  2590               	addwf	main@pos& (0+255),w,b
  2262  0004B6  6F60               	movwf	setYawServo@pos& (0+255),b
  2263  0004B8  0E04               	movlw	4
  2264  0004BA  2191               	addwfc	(main@pos+1)& (0+255),w,b
  2265  0004BC  6F61               	movwf	(setYawServo@pos+1)& (0+255),b
  2266  0004BE  ECD1  F007         	call	_setYawServo	;wreg free
  2267                           
  2268                           ;main.c: 171: break;
  2269  0004C2  D63B               	goto	l581
  2270  0004C4                     
  2271                           ;main.c: 173: printf("");
  2272  0004C4  0E77               	movlw	low (STR_29+20)
  2273  0004C6  0100               	movlb	0	; () banked
  2274  0004C8  6F76               	movwf	printf@f& (0+255),b
  2275  0004CA  0EFF               	movlw	high (STR_29+20)
  2276  0004CC  6F77               	movwf	(printf@f+1)& (0+255),b
  2277  0004CE  EC1C  F003         	call	_printf	;wreg free
  2278                           
  2279                           ;main.c: 174: uint16_t pos = parseInt()<<4;
  2280  0004D2  ECEA  F008         	call	_parseInt	;wreg free
  2281  0004D6  0100               	movlb	0	; () banked
  2282  0004D8  3B60               	swapf	?_parseInt& (0+255),f,b
  2283  0004DA  3B61               	swapf	(?_parseInt+1)& (0+255),f,b
  2284  0004DC  0EF0               	movlw	240
  2285  0004DE  1761               	andwf	(?_parseInt+1)& (0+255),f,b
  2286  0004E0  5160               	movf	?_parseInt& (0+255),w,b
  2287  0004E2  0B0F               	andlw	15
  2288  0004E4  1361               	iorwf	(?_parseInt+1)& (0+255),f,b
  2289  0004E6  0EF0               	movlw	240
  2290  0004E8  1760               	andwf	?_parseInt& (0+255),f,b
  2291  0004EA  C060  F090         	movff	?_parseInt,main@pos
  2292  0004EE  C061  F091         	movff	?_parseInt+1,main@pos+1
  2293                           
  2294                           ; BSR set to: 0
  2295                           ;main.c: 176: setPitchServo(pos + 1100);
  2296  0004F2  0E4C               	movlw	76
  2297  0004F4  2590               	addwf	main@pos& (0+255),w,b
  2298  0004F6  6F60               	movwf	setPitchServo@pos& (0+255),b
  2299  0004F8  0E04               	movlw	4
  2300  0004FA  2191               	addwfc	(main@pos+1)& (0+255),w,b
  2301  0004FC  6F61               	movwf	(setPitchServo@pos+1)& (0+255),b
  2302  0004FE  ECEB  F007         	call	_setPitchServo	;wreg free
  2303                           
  2304                           ;main.c: 177: break;
  2305  000502  D61B               	goto	l581
  2306  000504                     
  2307                           ;main.c: 179: motorControlMode = 0;
  2308  000504  0E00               	movlw	0
  2309  000506  6E56               	movwf	_motorControlMode,c
  2310                           
  2311                           ;main.c: 180: printf("");
  2312  000508  0E77               	movlw	low (STR_29+20)
  2313  00050A  0100               	movlb	0	; () banked
  2314  00050C  6F76               	movwf	printf@f& (0+255),b
  2315  00050E  0EFF               	movlw	high (STR_29+20)
  2316  000510  6F77               	movwf	(printf@f+1)& (0+255),b
  2317  000512  EC1C  F003         	call	_printf	;wreg free
  2318                           
  2319                           ;main.c: 181: uint16_t speed = parseInt();
  2320  000516  ECEA  F008         	call	_parseInt	;wreg free
  2321  00051A  C060  F093         	movff	?_parseInt,main@speed
  2322  00051E  C061  F094         	movff	?_parseInt+1,main@speed+1
  2323                           
  2324                           ;main.c: 182: speed = (speed <<4) - speed + 1100;
  2325  000522  C093  F08C         	movff	main@speed,??_main
  2326  000526  C094  F08D         	movff	main@speed+1,??_main+1
  2327  00052A  0100               	movlb	0	; () banked
  2328  00052C  1F8C               	comf	??_main& (0+255),f,b
  2329  00052E  1F8D               	comf	(??_main+1)& (0+255),f,b
  2330  000530  4B8C               	infsnz	??_main& (0+255),f,b
  2331  000532  2B8D               	incf	(??_main+1)& (0+255),f,b
  2332  000534  C093  F08E         	movff	main@speed,??_main+2
  2333  000538  C094  F08F         	movff	main@speed+1,??_main+3
  2334  00053C  3B8E               	swapf	(??_main+2)& (0+255),f,b
  2335  00053E  3B8F               	swapf	(??_main+3)& (0+255),f,b
  2336  000540  0EF0               	movlw	240
  2337  000542  178F               	andwf	(??_main+3)& (0+255),f,b
  2338  000544  518E               	movf	(??_main+2)& (0+255),w,b
  2339  000546  0B0F               	andlw	15
  2340  000548  138F               	iorwf	(??_main+3)& (0+255),f,b
  2341  00054A  0EF0               	movlw	240
  2342  00054C  178E               	andwf	(??_main+2)& (0+255),f,b
  2343  00054E  518C               	movf	??_main& (0+255),w,b
  2344  000550  278E               	addwf	(??_main+2)& (0+255),f,b
  2345  000552  518D               	movf	(??_main+1)& (0+255),w,b
  2346  000554  238F               	addwfc	(??_main+3)& (0+255),f,b
  2347  000556  0E4C               	movlw	76
  2348  000558  258E               	addwf	(??_main+2)& (0+255),w,b
  2349  00055A  6F93               	movwf	main@speed& (0+255),b
  2350  00055C  0E04               	movlw	4
  2351  00055E  218F               	addwfc	(??_main+3)& (0+255),w,b
  2352  000560  6F94               	movwf	(main@speed+1)& (0+255),b
  2353                           
  2354                           ; BSR set to: 0
  2355                           ;main.c: 184: setMotorSpeed(speed);
  2356  000562  C093  F060         	movff	main@speed,setMotorSpeed@speed
  2357  000566  C094  F061         	movff	main@speed+1,setMotorSpeed@speed+1
  2358  00056A  EC05  F008         	call	_setMotorSpeed	;wreg free
  2359                           
  2360                           ;main.c: 185: break;
  2361  00056E  D5E5               	goto	l581
  2362  000570                     l615:
  2363                           
  2364                           ; BSR set to: 0
  2365                           ;main.c: 187: home = encoderPosition;
  2366  000570  C0A8  F0A4         	movff	_encoderPosition,_home
  2367  000574  C0A9  F0A5         	movff	_encoderPosition+1,_home+1
  2368  000578  C0AA  F0A6         	movff	_encoderPosition+2,_home+2
  2369  00057C  C0AB  F0A7         	movff	_encoderPosition+3,_home+3
  2370                           
  2371                           ;main.c: 188: break;
  2372  000580  D5DC               	goto	l581
  2373  000582                     l616:
  2374                           
  2375                           ; BSR set to: 0
  2376                           ;main.c: 190: leftLimit = encoderPosition;
  2377  000582  C0A8  F09A         	movff	_encoderPosition,_leftLimit
  2378  000586  C0A9  F09B         	movff	_encoderPosition+1,_leftLimit+1
  2379  00058A  C0AA  F09C         	movff	_encoderPosition+2,_leftLimit+2
  2380  00058E  C0AB  F09D         	movff	_encoderPosition+3,_leftLimit+3
  2381                           
  2382                           ;main.c: 191: break;
  2383  000592  D5D3               	goto	l581
  2384  000594                     l617:
  2385                           
  2386                           ; BSR set to: 0
  2387                           ;main.c: 193: rightLimit = encoderPosition;
  2388  000594  C0A8  F096         	movff	_encoderPosition,_rightLimit
  2389  000598  C0A9  F097         	movff	_encoderPosition+1,_rightLimit+1
  2390  00059C  C0AA  F098         	movff	_encoderPosition+2,_rightLimit+2
  2391  0005A0  C0AB  F099         	movff	_encoderPosition+3,_rightLimit+3
  2392                           
  2393                           ;main.c: 194: break;
  2394  0005A4  D5CA               	goto	l581
  2395  0005A6                     
  2396                           ; BSR set to: 0
  2397                           ;main.c: 196: motorControlMode = 1;
  2398                           
  2399                           ; BSR set to: 0
  2400  0005A6  0E01               	movlw	1
  2401  0005A8  6E56               	movwf	_motorControlMode,c
  2402                           
  2403                           ; BSR set to: 0
  2404                           ;main.c: 197: motorSetPoint = home;
  2405  0005AA  C0A4  F0AC         	movff	_home,_motorSetPoint
  2406  0005AE  C0A5  F0AD         	movff	_home+1,_motorSetPoint+1
  2407  0005B2  C0A6  F0AE         	movff	_home+2,_motorSetPoint+2
  2408  0005B6  C0A7  F0AF         	movff	_home+3,_motorSetPoint+3
  2409                           
  2410                           ;main.c: 198: break;
  2411  0005BA  D5BF               	goto	l581
  2412  0005BC                     
  2413                           ; BSR set to: 0
  2414                           ;main.c: 200: motorControlMode = 1;
  2415                           
  2416                           ; BSR set to: 0
  2417  0005BC  0E01               	movlw	1
  2418  0005BE  6E56               	movwf	_motorControlMode,c
  2419                           
  2420                           ; BSR set to: 0
  2421                           ;main.c: 201: motorSetPoint = leftLimit;
  2422  0005C0  C09A  F0AC         	movff	_leftLimit,_motorSetPoint
  2423  0005C4  C09B  F0AD         	movff	_leftLimit+1,_motorSetPoint+1
  2424  0005C8  C09C  F0AE         	movff	_leftLimit+2,_motorSetPoint+2
  2425  0005CC  C09D  F0AF         	movff	_leftLimit+3,_motorSetPoint+3
  2426                           
  2427                           ;main.c: 202: break;
  2428  0005D0  D5B4               	goto	l581
  2429  0005D2                     
  2430                           ; BSR set to: 0
  2431                           ;main.c: 204: motorControlMode = 1;
  2432                           
  2433                           ; BSR set to: 0
  2434  0005D2  0E01               	movlw	1
  2435  0005D4  6E56               	movwf	_motorControlMode,c
  2436                           
  2437                           ; BSR set to: 0
  2438                           ;main.c: 205: motorSetPoint = rightLimit;
  2439  0005D6  C096  F0AC         	movff	_rightLimit,_motorSetPoint
  2440  0005DA  C097  F0AD         	movff	_rightLimit+1,_motorSetPoint+1
  2441  0005DE  C098  F0AE         	movff	_rightLimit+2,_motorSetPoint+2
  2442  0005E2  C099  F0AF         	movff	_rightLimit+3,_motorSetPoint+3
  2443                           
  2444                           ;main.c: 206: break;
  2445  0005E6  D5A9               	goto	l581
  2446  0005E8                     
  2447                           ; BSR set to: 0
  2448                           ;main.c: 208: printf("Unknown or Invalid Command %c\r\n",cmd);
  2449                           
  2450                           ; BSR set to: 0
  2451  0005E8  0E9E               	movlw	low STR_34
  2452  0005EA  6F76               	movwf	printf@f& (0+255),b
  2453  0005EC  0EFE               	movlw	high STR_34
  2454  0005EE  6F77               	movwf	(printf@f+1)& (0+255),b
  2455  0005F0  C095  F078         	movff	main@cmd,?_printf+2
  2456  0005F4  6B79               	clrf	(?_printf+3)& (0+255),b
  2457  0005F6  EC1C  F003         	call	_printf	;wreg free
  2458                           
  2459                           ;main.c: 211: }
  2460                           
  2461                           ;main.c: 209: break;
  2462  0005FA  D59F               	goto	l581
  2463  0005FC                     l610:
  2464  0005FC  0100               	movlb	0	; () banked
  2465  0005FE  5195               	movf	main@cmd& (0+255),w,b
  2466                           
  2467                           ; Switch size 1, requested type "space"
  2468                           ; Number of cases is 9, Range of values is 72 to 116
  2469                           ; switch strategies available:
  2470                           ; Name         Instructions Cycles
  2471                           ; simple_byte           28    15 (average)
  2472                           ;	Chosen strategy is simple_byte
  2473  000600  0A48               	xorlw	72	; case 72
  2474  000602  B4D8               	btfsc	status,2,c
  2475  000604  D7B5               	goto	l615
  2476  000606  0A04               	xorlw	4	; case 76
  2477  000608  B4D8               	btfsc	status,2,c
  2478  00060A  D7BB               	goto	l616
  2479  00060C  0A1E               	xorlw	30	; case 82
  2480  00060E  B4D8               	btfsc	status,2,c
  2481  000610  D7C1               	goto	l617
  2482  000612  0A3A               	xorlw	58	; case 104
  2483  000614  B4D8               	btfsc	status,2,c
  2484  000616  D7C7               	goto	l618
  2485  000618  0A04               	xorlw	4	; case 108
  2486  00061A  B4D8               	btfsc	status,2,c
  2487  00061C  D7CF               	goto	l619
  2488  00061E  0A1C               	xorlw	28	; case 112
  2489  000620  B4D8               	btfsc	status,2,c
  2490  000622  D731               	goto	l611
  2491  000624  0A02               	xorlw	2	; case 114
  2492  000626  B4D8               	btfsc	status,2,c
  2493  000628  D7D4               	goto	l620
  2494  00062A  0A01               	xorlw	1	; case 115
  2495  00062C  B4D8               	btfsc	status,2,c
  2496  00062E  D76A               	goto	l614
  2497  000630  0A07               	xorlw	7	; case 116
  2498  000632  B4D8               	btfsc	status,2,c
  2499  000634  D747               	goto	l613
  2500  000636  D7D8               	goto	l621
  2501  000638                     __end_of_main:
  2502                           	opt stack 0
  2503                           tblptru	equ	0xFF8
  2504                           tblptrh	equ	0xFF7
  2505                           tblptrl	equ	0xFF6
  2506                           tablat	equ	0xFF5
  2507                           intcon	equ	0xFF2
  2508                           postinc0	equ	0xFEE
  2509                           wreg	equ	0xFE8
  2510                           postdec1	equ	0xFE5
  2511                           fsr1l	equ	0xFE1
  2512                           status	equ	0xFD8
  2513                           
  2514 ;; *************** function _setYawServo *****************
  2515 ;; Defined at:
  2516 ;;		line 217 in file "main.c"
  2517 ;; Parameters:    Size  Location     Type
  2518 ;;  pos             2    0[BANK0 ] unsigned int 
  2519 ;; Auto vars:     Size  Location     Type
  2520 ;;		None
  2521 ;; Return value:  Size  Location     Type
  2522 ;;                  1    wreg      void 
  2523 ;; Registers used:
  2524 ;;		wreg, status,2, status,0
  2525 ;; Tracked objects:
  2526 ;;		On entry : 0/0
  2527 ;;		On exit  : 0/0
  2528 ;;		Unchanged: 0/0
  2529 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2530 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2531 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2532 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2533 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2534 ;;Total ram usage:        2 bytes
  2535 ;; Hardware stack levels used:    1
  2536 ;; Hardware stack levels required when called:    6
  2537 ;; This function calls:
  2538 ;;		Nothing
  2539 ;; This function is called by:
  2540 ;;		_main
  2541 ;; This function uses a non-reentrant model
  2542 ;;
  2543                           
  2544                           	psect	text1
  2545  000FA2                     __ptext1:
  2546                           	opt stack 0
  2547  000FA2                     _setYawServo:
  2548                           	opt stack 24
  2549                           
  2550                           ;main.c: 219: if(pos < 1100){
  2551                           
  2552                           ; BSR set to: 0
  2553                           ;incstack = 0
  2554  000FA2  0E4C               	movlw	76
  2555  000FA4  0100               	movlb	0	; () banked
  2556  000FA6  5D60               	subwf	setYawServo@pos& (0+255),w,b
  2557  000FA8  0E04               	movlw	4
  2558  000FAA  5961               	subwfb	(setYawServo@pos+1)& (0+255),w,b
  2559  000FAC  B0D8               	btfsc	status,0,c
  2560  000FAE  D004               	goto	l626
  2561                           
  2562                           ; BSR set to: 0
  2563                           ;main.c: 220: pos = 1100;
  2564  000FB0  0E04               	movlw	4
  2565  000FB2  6F61               	movwf	(setYawServo@pos+1)& (0+255),b
  2566  000FB4  0E4C               	movlw	76
  2567  000FB6  D009               	goto	L1
  2568  000FB8                     l626:
  2569                           
  2570                           ; BSR set to: 0
  2571                           ;main.c: 222: else if(pos > 4900){
  2572                           
  2573                           ; BSR set to: 0
  2574  000FB8  0E25               	movlw	37
  2575  000FBA  5D60               	subwf	setYawServo@pos& (0+255),w,b
  2576  000FBC  0E13               	movlw	19
  2577  000FBE  5961               	subwfb	(setYawServo@pos+1)& (0+255),w,b
  2578  000FC0  A0D8               	btfss	status,0,c
  2579  000FC2  D004               	goto	l628
  2580                           
  2581                           ; BSR set to: 0
  2582                           ;main.c: 223: pos = 4900;
  2583  000FC4  0E13               	movlw	19
  2584  000FC6  6F61               	movwf	(setYawServo@pos+1)& (0+255),b
  2585  000FC8  0E24               	movlw	36
  2586  000FCA                     L1:
  2587  000FCA  6F60               	movwf	setYawServo@pos& (0+255),b
  2588  000FCC                     l628:
  2589                           
  2590                           ; BSR set to: 0
  2591                           ;main.c: 224: }
  2592                           ;main.c: 226: yawPosition = pos;
  2593                           
  2594                           ; BSR set to: 0
  2595                           
  2596                           ; BSR set to: 0
  2597  000FCC  C060  F0A2         	movff	setYawServo@pos,_yawPosition
  2598  000FD0  C061  F0A3         	movff	setYawServo@pos+1,_yawPosition+1
  2599                           
  2600                           ; BSR set to: 0
  2601  000FD4  0012               	return		;funcret
  2602  000FD6                     __end_of_setYawServo:
  2603                           	opt stack 0
  2604                           tblptru	equ	0xFF8
  2605                           tblptrh	equ	0xFF7
  2606                           tblptrl	equ	0xFF6
  2607                           tablat	equ	0xFF5
  2608                           intcon	equ	0xFF2
  2609                           postinc0	equ	0xFEE
  2610                           wreg	equ	0xFE8
  2611                           postdec1	equ	0xFE5
  2612                           fsr1l	equ	0xFE1
  2613                           status	equ	0xFD8
  2614                           
  2615 ;; *************** function _setPitchServo *****************
  2616 ;; Defined at:
  2617 ;;		line 228 in file "main.c"
  2618 ;; Parameters:    Size  Location     Type
  2619 ;;  pos             2    0[BANK0 ] unsigned int 
  2620 ;; Auto vars:     Size  Location     Type
  2621 ;;		None
  2622 ;; Return value:  Size  Location     Type
  2623 ;;                  1    wreg      void 
  2624 ;; Registers used:
  2625 ;;		wreg, status,2, status,0
  2626 ;; Tracked objects:
  2627 ;;		On entry : 0/0
  2628 ;;		On exit  : 0/0
  2629 ;;		Unchanged: 0/0
  2630 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2631 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2632 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2633 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2634 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2635 ;;Total ram usage:        2 bytes
  2636 ;; Hardware stack levels used:    1
  2637 ;; Hardware stack levels required when called:    6
  2638 ;; This function calls:
  2639 ;;		Nothing
  2640 ;; This function is called by:
  2641 ;;		_main
  2642 ;; This function uses a non-reentrant model
  2643 ;;
  2644                           
  2645                           	psect	text2
  2646  000FD6                     __ptext2:
  2647                           	opt stack 0
  2648  000FD6                     _setPitchServo:
  2649                           	opt stack 24
  2650                           
  2651                           ;main.c: 230: if(pos < 1100){
  2652                           
  2653                           ; BSR set to: 0
  2654                           ;incstack = 0
  2655  000FD6  0E4C               	movlw	76
  2656  000FD8  0100               	movlb	0	; () banked
  2657  000FDA  5D60               	subwf	setPitchServo@pos& (0+255),w,b
  2658  000FDC  0E04               	movlw	4
  2659  000FDE  5961               	subwfb	(setPitchServo@pos+1)& (0+255),w,b
  2660  000FE0  B0D8               	btfsc	status,0,c
  2661  000FE2  D004               	goto	l632
  2662                           
  2663                           ; BSR set to: 0
  2664                           ;main.c: 231: pos = 1100;
  2665  000FE4  0E04               	movlw	4
  2666  000FE6  6F61               	movwf	(setPitchServo@pos+1)& (0+255),b
  2667  000FE8  0E4C               	movlw	76
  2668  000FEA  D009               	goto	L2
  2669  000FEC                     l632:
  2670                           
  2671                           ; BSR set to: 0
  2672                           ;main.c: 233: else if(pos > 4900){
  2673                           
  2674                           ; BSR set to: 0
  2675  000FEC  0E25               	movlw	37
  2676  000FEE  5D60               	subwf	setPitchServo@pos& (0+255),w,b
  2677  000FF0  0E13               	movlw	19
  2678  000FF2  5961               	subwfb	(setPitchServo@pos+1)& (0+255),w,b
  2679  000FF4  A0D8               	btfss	status,0,c
  2680  000FF6  D004               	goto	l634
  2681                           
  2682                           ; BSR set to: 0
  2683                           ;main.c: 234: pos = 4900;
  2684  000FF8  0E13               	movlw	19
  2685  000FFA  6F61               	movwf	(setPitchServo@pos+1)& (0+255),b
  2686  000FFC  0E24               	movlw	36
  2687  000FFE                     L2:
  2688  000FFE  6F60               	movwf	setPitchServo@pos& (0+255),b
  2689  001000                     l634:
  2690                           
  2691                           ; BSR set to: 0
  2692                           ;main.c: 235: }
  2693                           ;main.c: 237: pitchPosition = pos;
  2694                           
  2695                           ; BSR set to: 0
  2696                           
  2697                           ; BSR set to: 0
  2698  001000  C060  F0A0         	movff	setPitchServo@pos,_pitchPosition
  2699  001004  C061  F0A1         	movff	setPitchServo@pos+1,_pitchPosition+1
  2700                           
  2701                           ; BSR set to: 0
  2702  001008  0012               	return		;funcret
  2703  00100A                     __end_of_setPitchServo:
  2704                           	opt stack 0
  2705                           tblptru	equ	0xFF8
  2706                           tblptrh	equ	0xFF7
  2707                           tblptrl	equ	0xFF6
  2708                           tablat	equ	0xFF5
  2709                           intcon	equ	0xFF2
  2710                           postinc0	equ	0xFEE
  2711                           wreg	equ	0xFE8
  2712                           postdec1	equ	0xFE5
  2713                           fsr1l	equ	0xFE1
  2714                           status	equ	0xFD8
  2715                           
  2716 ;; *************** function _setMotorSpeed *****************
  2717 ;; Defined at:
  2718 ;;		line 239 in file "main.c"
  2719 ;; Parameters:    Size  Location     Type
  2720 ;;  speed           2    0[BANK0 ] unsigned int 
  2721 ;; Auto vars:     Size  Location     Type
  2722 ;;		None
  2723 ;; Return value:  Size  Location     Type
  2724 ;;                  1    wreg      void 
  2725 ;; Registers used:
  2726 ;;		wreg, status,2, status,0
  2727 ;; Tracked objects:
  2728 ;;		On entry : 0/0
  2729 ;;		On exit  : 0/0
  2730 ;;		Unchanged: 0/0
  2731 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2732 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2733 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2734 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2735 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2736 ;;Total ram usage:        2 bytes
  2737 ;; Hardware stack levels used:    1
  2738 ;; Hardware stack levels required when called:    6
  2739 ;; This function calls:
  2740 ;;		Nothing
  2741 ;; This function is called by:
  2742 ;;		_main
  2743 ;; This function uses a non-reentrant model
  2744 ;;
  2745                           
  2746                           	psect	text3
  2747  00100A                     __ptext3:
  2748                           	opt stack 0
  2749  00100A                     _setMotorSpeed:
  2750                           	opt stack 24
  2751                           
  2752                           ;main.c: 242: if(speed< 2500){
  2753                           
  2754                           ; BSR set to: 0
  2755                           ;incstack = 0
  2756  00100A  0EC4               	movlw	196
  2757  00100C  0100               	movlb	0	; () banked
  2758  00100E  5D60               	subwf	setMotorSpeed@speed& (0+255),w,b
  2759  001010  0E09               	movlw	9
  2760  001012  5961               	subwfb	(setMotorSpeed@speed+1)& (0+255),w,b
  2761  001014  B0D8               	btfsc	status,0,c
  2762  001016  D004               	goto	l638
  2763                           
  2764                           ; BSR set to: 0
  2765                           ;main.c: 243: speed = 2500;
  2766  001018  0E09               	movlw	9
  2767  00101A  6F61               	movwf	(setMotorSpeed@speed+1)& (0+255),b
  2768  00101C  0EC4               	movlw	196
  2769  00101E  D009               	goto	L3
  2770  001020                     l638:
  2771                           
  2772                           ; BSR set to: 0
  2773                           ;main.c: 246: else if(speed > 3500){
  2774                           
  2775                           ; BSR set to: 0
  2776  001020  0EAD               	movlw	173
  2777  001022  5D60               	subwf	setMotorSpeed@speed& (0+255),w,b
  2778  001024  0E0D               	movlw	13
  2779  001026  5961               	subwfb	(setMotorSpeed@speed+1)& (0+255),w,b
  2780  001028  A0D8               	btfss	status,0,c
  2781  00102A  D004               	goto	l640
  2782                           
  2783                           ; BSR set to: 0
  2784                           ;main.c: 247: speed = 3500;
  2785  00102C  0E0D               	movlw	13
  2786  00102E  6F61               	movwf	(setMotorSpeed@speed+1)& (0+255),b
  2787  001030  0EAC               	movlw	172
  2788  001032                     L3:
  2789  001032  6F60               	movwf	setMotorSpeed@speed& (0+255),b
  2790  001034                     l640:
  2791                           
  2792                           ; BSR set to: 0
  2793                           ;main.c: 248: }
  2794                           ;main.c: 250: motorSpeed = speed;
  2795                           
  2796                           ; BSR set to: 0
  2797                           
  2798                           ; BSR set to: 0
  2799  001034  C060  F09E         	movff	setMotorSpeed@speed,_motorSpeed
  2800  001038  C061  F09F         	movff	setMotorSpeed@speed+1,_motorSpeed+1
  2801                           
  2802                           ; BSR set to: 0
  2803  00103C  0012               	return		;funcret
  2804  00103E                     __end_of_setMotorSpeed:
  2805                           	opt stack 0
  2806                           tblptru	equ	0xFF8
  2807                           tblptrh	equ	0xFF7
  2808                           tblptrl	equ	0xFF6
  2809                           tablat	equ	0xFF5
  2810                           intcon	equ	0xFF2
  2811                           postinc0	equ	0xFEE
  2812                           wreg	equ	0xFE8
  2813                           postdec1	equ	0xFE5
  2814                           fsr1l	equ	0xFE1
  2815                           status	equ	0xFD8
  2816                           
  2817 ;; *************** function _printf *****************
  2818 ;; Defined at:
  2819 ;;		line 464 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\doprnt.c"
  2820 ;; Parameters:    Size  Location     Type
  2821 ;;  f               2   22[BANK0 ] PTR const unsigned char 
  2822 ;;		 -> STR_35(14), STR_34(32), STR_33(1), STR_32(1), 
  2823 ;;		 -> STR_31(1), STR_30(17), STR_29(21), STR_28(27), 
  2824 ;;		 -> STR_27(5), STR_26(5), STR_25(39), STR_24(35), 
  2825 ;;		 -> STR_23(35), STR_22(31), STR_21(31), STR_20(38), 
  2826 ;;		 -> STR_19(38), STR_18(14), STR_17(19), STR_16(33), 
  2827 ;;		 -> STR_15(37), STR_14(37), STR_13(37), STR_12(37), 
  2828 ;;		 -> STR_11(22), STR_10(21), STR_9(19), STR_8(21), 
  2829 ;;		 -> STR_7(40), STR_6(40), STR_5(27), STR_4(27), 
  2830 ;;		 -> STR_3(43), STR_2(34), STR_1(32), 
  2831 ;; Auto vars:     Size  Location     Type
  2832 ;;  val             4   36[BANK0 ] unsigned long 
  2833 ;;  tmpval          4    0        struct .
  2834 ;;  cp              3    0        PTR const unsigned char 
  2835 ;;  ap              2   41[BANK0 ] PTR void [1]
  2836 ;;		 -> ?i2_printf(2), ?_printf(2), 
  2837 ;;  prec            2   34[BANK0 ] int 
  2838 ;;  len             2    0        unsigned int 
  2839 ;;  c               1   43[BANK0 ] char 
  2840 ;;  flag            1   40[BANK0 ] unsigned char 
  2841 ;; Return value:  Size  Location     Type
  2842 ;;                  2   22[BANK0 ] int 
  2843 ;; Registers used:
  2844 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  2845 ;; Tracked objects:
  2846 ;;		On entry : 0/0
  2847 ;;		On exit  : 0/0
  2848 ;;		Unchanged: 0/0
  2849 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2850 ;;      Params:         0      10       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2851 ;;      Locals:         0      10       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2852 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2853 ;;      Totals:         0      22       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2854 ;;Total ram usage:       22 bytes
  2855 ;; Hardware stack levels used:    1
  2856 ;; Hardware stack levels required when called:    8
  2857 ;; This function calls:
  2858 ;;		___lldiv
  2859 ;;		___llmod
  2860 ;;		_putch
  2861 ;; This function is called by:
  2862 ;;		_main
  2863 ;; This function uses a non-reentrant model
  2864 ;;
  2865                           
  2866                           	psect	text4
  2867  000638                     __ptext4:
  2868                           	opt stack 0
  2869  000638                     _printf:
  2870                           	opt stack 22
  2871                           
  2872                           ;doprnt.c: 466: va_list ap;
  2873                           ;doprnt.c: 499: signed char c;
  2874                           ;doprnt.c: 504: int prec;
  2875                           ;doprnt.c: 508: unsigned char flag;
  2876                           ;doprnt.c: 523: union {
  2877                           ;doprnt.c: 524: unsigned long vd;
  2878                           ;doprnt.c: 525: double integ;
  2879                           ;doprnt.c: 526: } tmpval;
  2880                           ;doprnt.c: 528: unsigned long val;
  2881                           ;doprnt.c: 529: unsigned len;
  2882                           ;doprnt.c: 530: const char * cp;
  2883                           ;doprnt.c: 533: *ap = __va_start();
  2884                           
  2885                           ; BSR set to: 0
  2886                           ;incstack = 0
  2887  000638  0E78               	movlw	low (?_printf+2)
  2888  00063A  0100               	movlb	0	; () banked
  2889  00063C  6F89               	movwf	printf@ap& (0+255),b
  2890  00063E  0E00               	movlw	high (?_printf+2)
  2891  000640  6F8A               	movwf	(printf@ap+1)& (0+255),b
  2892                           
  2893                           ;doprnt.c: 536: while(c = *f++) {
  2894  000642  D10C               	goto	u1730
  2895  000644                     
  2896                           ; BSR set to: 0
  2897                           ;doprnt.c: 538: if(c != '%')
  2898                           
  2899                           ; BSR set to: 0
  2900  000644  0E25               	movlw	37
  2901  000646  198B               	xorwf	printf@c& (0+255),w,b
  2902  000648  B4D8               	btfsc	status,2,c
  2903  00064A  D004               	goto	l718
  2904                           
  2905                           ; BSR set to: 0
  2906                           ;doprnt.c: 540: {
  2907                           ;doprnt.c: 541: (putch(c) );
  2908  00064C  518B               	movf	printf@c& (0+255),w,b
  2909  00064E  ECAF  F009         	call	_putch
  2910                           
  2911                           ;doprnt.c: 542: continue;
  2912  000652  D104               	goto	u1730
  2913  000654                     l718:
  2914                           
  2915                           ;doprnt.c: 543: }
  2916                           ;doprnt.c: 548: flag = 0;
  2917  000654  0E00               	movlw	0
  2918  000656  0100               	movlb	0	; () banked
  2919  000658  6F88               	movwf	printf@flag& (0+255),b
  2920                           
  2921                           ; BSR set to: 0
  2922                           ;doprnt.c: 635: switch(c = *f++) {
  2923                           
  2924                           ;doprnt.c: 633: loop:
  2925  00065A  D013               	goto	l720
  2926  00065C                     
  2927                           ; BSR set to: 0
  2928                           ;doprnt.c: 643: flag |= 0x10;
  2929                           
  2930                           ; BSR set to: 0
  2931  00065C  8988               	bsf	printf@flag& (0+255),4,b
  2932                           
  2933                           ;doprnt.c: 644: goto loop;
  2934  00065E  D011               	goto	l720
  2935  000660                     
  2936                           ; BSR set to: 0
  2937                           ;doprnt.c: 799: c = (*(int *)__va_arg((*(int **)ap), (int)0));
  2938                           
  2939                           ; BSR set to: 0
  2940  000660  C089  FFD9         	movff	printf@ap,fsr2l
  2941  000664  C08A  FFDA         	movff	printf@ap+1,fsr2h
  2942  000668  50DF               	movf	indf2,w,c
  2943  00066A  6F8B               	movwf	printf@c& (0+255),b
  2944                           
  2945                           ; BSR set to: 0
  2946  00066C  0E02               	movlw	2
  2947  00066E  2789               	addwf	printf@ap& (0+255),f,b
  2948  000670  0E00               	movlw	0
  2949  000672  238A               	addwfc	(printf@ap+1)& (0+255),f,b
  2950  000674                     
  2951                           ; BSR set to: 0
  2952                           ;doprnt.c: 809: (putch(c) );
  2953                           
  2954                           ; BSR set to: 0
  2955  000674  518B               	movf	printf@c& (0+255),w,b
  2956  000676  ECAF  F009         	call	_putch
  2957                           
  2958                           ;doprnt.c: 810: continue;
  2959  00067A  D0F0               	goto	u1730
  2960  00067C                     
  2961                           ;doprnt.c: 818: flag |= 0x40;
  2962  00067C  0100               	movlb	0	; () banked
  2963  00067E  8D88               	bsf	printf@flag& (0+255),6,b
  2964                           
  2965                           ; BSR set to: 0
  2966                           ;doprnt.c: 822: }
  2967                           
  2968                           ;doprnt.c: 819: break;
  2969  000680  D01E               	goto	l726
  2970  000682                     l720:
  2971                           
  2972                           ; BSR set to: 0
  2973                           
  2974                           ; BSR set to: 0
  2975  000682  C076  FFF6         	movff	printf@f,tblptrl
  2976  000686  C077  FFF7         	movff	printf@f+1,tblptrh
  2977  00068A  4B76               	infsnz	printf@f& (0+255),f,b
  2978  00068C  2B77               	incf	(printf@f+1)& (0+255),f,b
  2979  00068E                     	if	1	;Program memory is < 0x10000, tblptru is always zero
  2980  00068E  6AF8               	clrf	tblptru,c
  2981  000690                     	endif
  2982  000690                     	if	0	;tblptru may be non-zero
  2983  000690                     	endif
  2984  000690  0008               	tblrd		*
  2985  000692  CFF5 F08B          	movff	tablat,printf@c
  2986  000696  518B               	movf	printf@c& (0+255),w,b
  2987                           
  2988                           ; Switch size 1, requested type "space"
  2989                           ; Number of cases is 6, Range of values is 0 to 117
  2990                           ; switch strategies available:
  2991                           ; Name         Instructions Cycles
  2992                           ; simple_byte           19    10 (average)
  2993                           ;	Chosen strategy is simple_byte
  2994  000698  0A00               	xorlw	0	; case 0
  2995  00069A  B4D8               	btfsc	status,2,c
  2996  00069C  0012               	return	
  2997  00069E  0A63               	xorlw	99	; case 99
  2998  0006A0  B4D8               	btfsc	status,2,c
  2999  0006A2  D7DE               	goto	l727
  3000  0006A4  0A07               	xorlw	7	; case 100
  3001  0006A6  B4D8               	btfsc	status,2,c
  3002  0006A8  D00A               	goto	l726
  3003  0006AA  0A0D               	xorlw	13	; case 105
  3004  0006AC  B4D8               	btfsc	status,2,c
  3005  0006AE  D007               	goto	l726
  3006  0006B0  0A05               	xorlw	5	; case 108
  3007  0006B2  B4D8               	btfsc	status,2,c
  3008  0006B4  D7D3               	goto	l723
  3009  0006B6  0A19               	xorlw	25	; case 117
  3010  0006B8  B4D8               	btfsc	status,2,c
  3011  0006BA  D7E0               	goto	l729
  3012  0006BC  D7DB               	goto	l728
  3013  0006BE                     l726:
  3014                           
  3015                           ; BSR set to: 0
  3016                           ;doprnt.c: 1251: if((flag & 0x40) == 0x00)
  3017  0006BE  BD88               	btfsc	printf@flag& (0+255),6,b
  3018  0006C0  D02E               	goto	l730
  3019                           
  3020                           ; BSR set to: 0
  3021                           ;doprnt.c: 1253: {
  3022                           ;doprnt.c: 1255: if(flag & 0x10)
  3023  0006C2  A988               	btfss	printf@flag& (0+255),4,b
  3024  0006C4  D00E               	goto	l731
  3025                           
  3026                           ; BSR set to: 0
  3027                           ;doprnt.c: 1256: val = (*(long *)__va_arg((*(long **)ap), (long)0));
  3028  0006C6  C089  FFD9         	movff	printf@ap,fsr2l
  3029  0006CA  C08A  FFDA         	movff	printf@ap+1,fsr2h
  3030  0006CE  CFDE F084          	movff	postinc2,printf@val
  3031  0006D2  CFDE F085          	movff	postinc2,printf@val+1
  3032  0006D6  CFDE F086          	movff	postinc2,printf@val+2
  3033  0006DA  CFDE F087          	movff	postinc2,printf@val+3
  3034                           
  3035                           ; BSR set to: 0
  3036  0006DE  0E04               	movlw	4
  3037  0006E0  D00E               	goto	L4
  3038  0006E2                     l731:
  3039                           
  3040                           ; BSR set to: 0
  3041                           ;doprnt.c: 1257: else
  3042                           ;doprnt.c: 1259: val = (long)(*(int *)__va_arg((*(int **)ap), (int)0));
  3043                           
  3044                           ; BSR set to: 0
  3045  0006E2  C089  FFD9         	movff	printf@ap,fsr2l
  3046  0006E6  C08A  FFDA         	movff	printf@ap+1,fsr2h
  3047  0006EA  CFDE F084          	movff	postinc2,printf@val
  3048  0006EE  CFDD F085          	movff	postdec2,printf@val+1
  3049  0006F2  0E00               	movlw	0
  3050  0006F4  BF85               	btfsc	(printf@val+1)& (0+255),7,b
  3051  0006F6  0EFF               	movlw	-1
  3052  0006F8  6F86               	movwf	(printf@val+2)& (0+255),b
  3053  0006FA  6F87               	movwf	(printf@val+3)& (0+255),b
  3054                           
  3055                           ; BSR set to: 0
  3056  0006FC  0E02               	movlw	2
  3057  0006FE                     L4:
  3058  0006FE  2789               	addwf	printf@ap& (0+255),f,b
  3059  000700  0E00               	movlw	0
  3060  000702  238A               	addwfc	(printf@ap+1)& (0+255),f,b
  3061                           
  3062                           ; BSR set to: 0
  3063                           ;doprnt.c: 1261: if((long)val < 0) {
  3064                           
  3065                           ; BSR set to: 0
  3066  000704  AF87               	btfss	(printf@val+3)& (0+255),7,b
  3067  000706  D02D               	goto	l736
  3068                           
  3069                           ; BSR set to: 0
  3070                           ;doprnt.c: 1262: flag |= 0x03;
  3071  000708  0E03               	movlw	3
  3072  00070A  1388               	iorwf	printf@flag& (0+255),f,b
  3073                           
  3074                           ; BSR set to: 0
  3075                           ;doprnt.c: 1263: val = -val;
  3076  00070C  1F87               	comf	(printf@val+3)& (0+255),f,b
  3077  00070E  1F86               	comf	(printf@val+2)& (0+255),f,b
  3078  000710  1F85               	comf	(printf@val+1)& (0+255),f,b
  3079  000712  6D84               	negf	printf@val& (0+255),b
  3080  000714  0E00               	movlw	0
  3081  000716  2385               	addwfc	(printf@val+1)& (0+255),f,b
  3082  000718  2386               	addwfc	(printf@val+2)& (0+255),f,b
  3083  00071A  2387               	addwfc	(printf@val+3)& (0+255),f,b
  3084                           
  3085                           ; BSR set to: 0
  3086                           ;doprnt.c: 1264: }
  3087                           ;doprnt.c: 1266: }
  3088  00071C  D022               	goto	l736
  3089  00071E                     l730:
  3090                           
  3091                           ; BSR set to: 0
  3092                           ;doprnt.c: 1268: else
  3093                           ;doprnt.c: 1273: {
  3094                           ;doprnt.c: 1281: if(flag & 0x10)
  3095  00071E  A988               	btfss	printf@flag& (0+255),4,b
  3096  000720  D00E               	goto	l735
  3097                           
  3098                           ; BSR set to: 0
  3099                           ;doprnt.c: 1282: val = (*(unsigned long *)__va_arg((*(unsigned long **)ap), (unsigned lo
      +                          ng)0));
  3100  000722  C089  FFD9         	movff	printf@ap,fsr2l
  3101  000726  C08A  FFDA         	movff	printf@ap+1,fsr2h
  3102  00072A  CFDE F084          	movff	postinc2,printf@val
  3103  00072E  CFDE F085          	movff	postinc2,printf@val+1
  3104  000732  CFDE F086          	movff	postinc2,printf@val+2
  3105  000736  CFDE F087          	movff	postinc2,printf@val+3
  3106                           
  3107                           ; BSR set to: 0
  3108  00073A  0E04               	movlw	4
  3109  00073C  D00F               	goto	L5
  3110  00073E                     l735:
  3111                           
  3112                           ; BSR set to: 0
  3113                           ;doprnt.c: 1283: else
  3114                           ;doprnt.c: 1286: val = (*(unsigned *)__va_arg((*(unsigned **)ap), (unsigned)0));
  3115                           
  3116                           ; BSR set to: 0
  3117  00073E  C089  FFD9         	movff	printf@ap,fsr2l
  3118  000742  C08A  FFDA         	movff	printf@ap+1,fsr2h
  3119  000746  CFDE F080          	movff	postinc2,??_printf
  3120  00074A  CFDD F081          	movff	postdec2,??_printf+1
  3121  00074E  C080  F084         	movff	??_printf,printf@val
  3122  000752  C081  F085         	movff	??_printf+1,printf@val+1
  3123  000756  6B86               	clrf	(printf@val+2)& (0+255),b
  3124  000758  6B87               	clrf	(printf@val+3)& (0+255),b
  3125                           
  3126                           ; BSR set to: 0
  3127  00075A  0E02               	movlw	2
  3128  00075C                     L5:
  3129  00075C  2789               	addwf	printf@ap& (0+255),f,b
  3130  00075E  0E00               	movlw	0
  3131  000760  238A               	addwfc	(printf@ap+1)& (0+255),f,b
  3132  000762                     l736:
  3133                           
  3134                           ; BSR set to: 0
  3135                           ;doprnt.c: 1287: }
  3136                           ;doprnt.c: 1305: for(c = 1 ; c != sizeof dpowers/sizeof dpowers[0] ; c++)
  3137                           
  3138                           ; BSR set to: 0
  3139                           
  3140                           ; BSR set to: 0
  3141  000762  0E01               	movlw	1
  3142  000764  6F8B               	movwf	printf@c& (0+255),b
  3143  000766                     l2767:
  3144                           
  3145                           ; BSR set to: 0
  3146  000766  0E0A               	movlw	10
  3147  000768  198B               	xorwf	printf@c& (0+255),w,b
  3148  00076A  B4D8               	btfsc	status,2,c
  3149  00076C  D01B               	goto	u1710
  3150                           
  3151                           ; BSR set to: 0
  3152                           ;doprnt.c: 1306: if(val < dpowers[c])
  3153                           
  3154                           ; BSR set to: 0
  3155                           
  3156                           ; BSR set to: 0
  3157  00076E  518B               	movf	printf@c& (0+255),w,b
  3158  000770  0D04               	mullw	4
  3159  000772  0E4B               	movlw	low _dpowers
  3160  000774  24F3               	addwf	prodl,w,c
  3161  000776  6EF6               	movwf	tblptrl,c
  3162  000778  0EFC               	movlw	high _dpowers
  3163  00077A  20F4               	addwfc	prodh,w,c
  3164  00077C  6EF7               	movwf	tblptrh,c
  3165  00077E                     	if	1	;There are 3 active tblptr bytes
  3166  00077E  6AF8               	clrf	tblptru,c
  3167  000780  0E00               	movlw	low (__mediumconst shr (0+16))
  3168  000782  22F8               	addwfc	tblptru,f,c
  3169  000784                     	endif
  3170  000784  0009               	tblrd		*+
  3171  000786  50F5               	movf	tablat,w,c
  3172  000788  5D84               	subwf	printf@val& (0+255),w,b
  3173  00078A  0009               	tblrd		*+
  3174  00078C  50F5               	movf	tablat,w,c
  3175  00078E  5985               	subwfb	(printf@val+1)& (0+255),w,b
  3176  000790  0009               	tblrd		*+
  3177  000792  50F5               	movf	tablat,w,c
  3178  000794  5986               	subwfb	(printf@val+2)& (0+255),w,b
  3179  000796  0009               	tblrd		*+
  3180  000798  50F5               	movf	tablat,w,c
  3181  00079A  5987               	subwfb	(printf@val+3)& (0+255),w,b
  3182  00079C  A0D8               	btfss	status,0,c
  3183  00079E  D002               	goto	u1710
  3184                           
  3185                           ; BSR set to: 0
  3186                           
  3187                           ; BSR set to: 0
  3188                           
  3189                           ; BSR set to: 0
  3190                           ;doprnt.c: 1307: break;
  3191  0007A0  2B8B               	incf	printf@c& (0+255),f,b
  3192  0007A2  D7E1               	goto	l2767
  3193  0007A4                     u1710:
  3194                           
  3195                           ; BSR set to: 0
  3196                           ;doprnt.c: 1422: {
  3197                           ;doprnt.c: 1438: if(flag & 0x03)
  3198                           
  3199                           ; BSR set to: 0
  3200  0007A4  C088  F080         	movff	printf@flag,??_printf
  3201  0007A8  0E03               	movlw	3
  3202  0007AA  1780               	andwf	??_printf& (0+255),f,b
  3203  0007AC  B4D8               	btfsc	status,2,c
  3204  0007AE  D003               	goto	l740
  3205                           
  3206                           ; BSR set to: 0
  3207                           ;doprnt.c: 1439: (putch('-') );
  3208  0007B0  0E2D               	movlw	45
  3209  0007B2  ECAF  F009         	call	_putch
  3210  0007B6                     l740:
  3211                           
  3212                           ;doprnt.c: 1469: }
  3213                           ;doprnt.c: 1472: prec = c;
  3214  0007B6  0100               	movlb	0	; () banked
  3215  0007B8  518B               	movf	printf@c& (0+255),w,b
  3216  0007BA  6F82               	movwf	printf@prec& (0+255),b
  3217  0007BC  6B83               	clrf	(printf@prec+1)& (0+255),b
  3218  0007BE  BF82               	btfsc	printf@prec& (0+255),7,b
  3219  0007C0  0783               	decf	(printf@prec+1)& (0+255),f,b
  3220                           
  3221                           ;doprnt.c: 1474: while(prec--) {
  3222  0007C2  D043               	goto	l741
  3223  0007C4                     l2785:
  3224                           
  3225                           ; BSR set to: 0
  3226                           ;doprnt.c: 1478: {
  3227                           ;doprnt.c: 1489: c = (val / dpowers[prec]) % 10 + '0';
  3228  0007C4  C082  F080         	movff	printf@prec,??_printf
  3229  0007C8  C083  F081         	movff	printf@prec+1,??_printf+1
  3230  0007CC  90D8               	bcf	status,0,c
  3231  0007CE  3780               	rlcf	??_printf& (0+255),f,b
  3232  0007D0  3781               	rlcf	(??_printf+1)& (0+255),f,b
  3233  0007D2  90D8               	bcf	status,0,c
  3234  0007D4  3780               	rlcf	??_printf& (0+255),f,b
  3235  0007D6  3781               	rlcf	(??_printf+1)& (0+255),f,b
  3236  0007D8  0E4B               	movlw	low _dpowers
  3237  0007DA  2580               	addwf	??_printf& (0+255),w,b
  3238  0007DC  6EF6               	movwf	tblptrl,c
  3239  0007DE  0EFC               	movlw	high _dpowers
  3240  0007E0  2181               	addwfc	(??_printf+1)& (0+255),w,b
  3241  0007E2  6EF7               	movwf	tblptrh,c
  3242  0007E4                     	if	1	;There are 3 active tblptr bytes
  3243  0007E4  6AF8               	clrf	tblptru,c
  3244  0007E6  0E00               	movlw	low (__mediumconst shr (0+16))
  3245  0007E8  22F8               	addwfc	tblptru,f,c
  3246  0007EA                     	endif
  3247  0007EA  0009               	tblrd		*+
  3248  0007EC  CFF5 F064          	movff	tablat,___lldiv@divisor
  3249  0007F0  0009               	tblrd		*+
  3250  0007F2  CFF5 F065          	movff	tablat,___lldiv@divisor+1
  3251  0007F6  0009               	tblrd		*+
  3252  0007F8  CFF5 F066          	movff	tablat,___lldiv@divisor+2
  3253  0007FC  000A               	tblrd		*-
  3254  0007FE  CFF5 F067          	movff	tablat,___lldiv@divisor+3
  3255  000802  C084  F060         	movff	printf@val,___lldiv@dividend
  3256  000806  C085  F061         	movff	printf@val+1,___lldiv@dividend+1
  3257  00080A  C086  F062         	movff	printf@val+2,___lldiv@dividend+2
  3258  00080E  C087  F063         	movff	printf@val+3,___lldiv@dividend+3
  3259  000812  EC06  F006         	call	___lldiv	;wreg free
  3260  000816  C060  F06D         	movff	?___lldiv,___llmod@dividend
  3261  00081A  C061  F06E         	movff	?___lldiv+1,___llmod@dividend+1
  3262  00081E  C062  F06F         	movff	?___lldiv+2,___llmod@dividend+2
  3263  000822  C063  F070         	movff	?___lldiv+3,___llmod@dividend+3
  3264  000826  0E0A               	movlw	10
  3265  000828  0100               	movlb	0	; () banked
  3266  00082A  6F71               	movwf	___llmod@divisor& (0+255),b
  3267  00082C  0E00               	movlw	0
  3268  00082E  6F72               	movwf	(___llmod@divisor+1)& (0+255),b
  3269  000830  0E00               	movlw	0
  3270  000832  6F73               	movwf	(___llmod@divisor+2)& (0+255),b
  3271  000834  0E00               	movlw	0
  3272  000836  6F74               	movwf	(___llmod@divisor+3)& (0+255),b
  3273  000838  ECC3  F006         	call	___llmod	;wreg free
  3274  00083C  0100               	movlb	0	; () banked
  3275  00083E  516D               	movf	?___llmod& (0+255),w,b
  3276  000840  0F30               	addlw	48
  3277  000842  6F8B               	movwf	printf@c& (0+255),b
  3278                           
  3279                           ; BSR set to: 0
  3280                           ;doprnt.c: 1523: }
  3281                           ;doprnt.c: 1524: (putch(c) );
  3282  000844  518B               	movf	printf@c& (0+255),w,b
  3283  000846  ECAF  F009         	call	_putch
  3284  00084A                     l741:
  3285  00084A  0100               	movlb	0	; () banked
  3286  00084C  0782               	decf	printf@prec& (0+255),f,b
  3287  00084E  A0D8               	btfss	status,0,c
  3288  000850  0783               	decf	(printf@prec+1)& (0+255),f,b
  3289  000852  2982               	incf	printf@prec& (0+255),w,b
  3290  000854  E1B7               	bnz	l2785
  3291  000856  2983               	incf	(printf@prec+1)& (0+255),w,b
  3292  000858  A4D8               	btfss	status,2,c
  3293  00085A  D7B4               	goto	l742
  3294  00085C                     u1730:
  3295                           
  3296                           ; BSR set to: 0
  3297                           
  3298                           ; BSR set to: 0
  3299  00085C  C076  FFF6         	movff	printf@f,tblptrl
  3300  000860  C077  FFF7         	movff	printf@f+1,tblptrh
  3301  000864  0100               	movlb	0	; () banked
  3302  000866  4B76               	infsnz	printf@f& (0+255),f,b
  3303  000868  2B77               	incf	(printf@f+1)& (0+255),f,b
  3304  00086A                     	if	1	;Program memory is < 0x10000, tblptru is always zero
  3305  00086A  6AF8               	clrf	tblptru,c
  3306  00086C                     	endif
  3307  00086C                     	if	0	;tblptru may be non-zero
  3308  00086C                     	endif
  3309  00086C  0008               	tblrd		*
  3310  00086E  CFF5 F08B          	movff	tablat,printf@c
  3311  000872  518B               	movf	printf@c& (0+255),w,b
  3312  000874  B4D8               	btfsc	status,2,c
  3313  000876  0012               	return	
  3314  000878  D6E5               	goto	l717
  3315  00087A                     __end_of_printf:
  3316                           	opt stack 0
  3317                           tblptru	equ	0xFF8
  3318                           tblptrh	equ	0xFF7
  3319                           tblptrl	equ	0xFF6
  3320                           tablat	equ	0xFF5
  3321                           prodh	equ	0xFF4
  3322                           prodl	equ	0xFF3
  3323                           intcon	equ	0xFF2
  3324                           postinc0	equ	0xFEE
  3325                           wreg	equ	0xFE8
  3326                           postdec1	equ	0xFE5
  3327                           fsr1l	equ	0xFE1
  3328                           indf2	equ	0xFDF
  3329                           postinc2	equ	0xFDE
  3330                           postdec2	equ	0xFDD
  3331                           fsr2h	equ	0xFDA
  3332                           fsr2l	equ	0xFD9
  3333                           status	equ	0xFD8
  3334                           
  3335 ;; *************** function _putch *****************
  3336 ;; Defined at:
  3337 ;;		line 125 in file "mcc_generated_files/eusart2.c"
  3338 ;; Parameters:    Size  Location     Type
  3339 ;;  txData          1    wreg     unsigned char 
  3340 ;; Auto vars:     Size  Location     Type
  3341 ;;  txData          1    1[BANK0 ] unsigned char 
  3342 ;; Return value:  Size  Location     Type
  3343 ;;                  1    wreg      void 
  3344 ;; Registers used:
  3345 ;;		wreg, status,2, cstack
  3346 ;; Tracked objects:
  3347 ;;		On entry : 0/0
  3348 ;;		On exit  : 0/0
  3349 ;;		Unchanged: 0/0
  3350 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3351 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3352 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3353 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3354 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3355 ;;Total ram usage:        1 bytes
  3356 ;; Hardware stack levels used:    1
  3357 ;; Hardware stack levels required when called:    7
  3358 ;; This function calls:
  3359 ;;		_EUSART2_Write
  3360 ;; This function is called by:
  3361 ;;		_printf
  3362 ;; This function uses a non-reentrant model
  3363 ;;
  3364                           
  3365                           	psect	text5
  3366  00135E                     __ptext5:
  3367                           	opt stack 0
  3368  00135E                     _putch:
  3369                           	opt stack 22
  3370                           
  3371                           ; BSR set to: 0
  3372                           ;incstack = 0
  3373                           ;putch@txData stored from wreg
  3374  00135E  0100               	movlb	0	; () banked
  3375  001360  6F61               	movwf	putch@txData& (0+255),b
  3376                           
  3377                           ;eusart2.c: 127: EUSART2_Write(txData);
  3378  001362  0100               	movlb	0	; () banked
  3379  001364  5161               	movf	putch@txData& (0+255),w,b
  3380  001366  ECB6  F009         	call	_EUSART2_Write
  3381  00136A  0012               	return		;funcret
  3382  00136C                     __end_of_putch:
  3383                           	opt stack 0
  3384                           tblptru	equ	0xFF8
  3385                           tblptrh	equ	0xFF7
  3386                           tblptrl	equ	0xFF6
  3387                           tablat	equ	0xFF5
  3388                           prodh	equ	0xFF4
  3389                           prodl	equ	0xFF3
  3390                           intcon	equ	0xFF2
  3391                           postinc0	equ	0xFEE
  3392                           wreg	equ	0xFE8
  3393                           postdec1	equ	0xFE5
  3394                           fsr1l	equ	0xFE1
  3395                           indf2	equ	0xFDF
  3396                           postinc2	equ	0xFDE
  3397                           postdec2	equ	0xFDD
  3398                           fsr2h	equ	0xFDA
  3399                           fsr2l	equ	0xFD9
  3400                           status	equ	0xFD8
  3401                           
  3402 ;; *************** function _EUSART2_Write *****************
  3403 ;; Defined at:
  3404 ;;		line 111 in file "mcc_generated_files/eusart2.c"
  3405 ;; Parameters:    Size  Location     Type
  3406 ;;  txData          1    wreg     unsigned char 
  3407 ;; Auto vars:     Size  Location     Type
  3408 ;;  txData          1    0[BANK0 ] unsigned char 
  3409 ;; Return value:  Size  Location     Type
  3410 ;;                  1    wreg      void 
  3411 ;; Registers used:
  3412 ;;		wreg
  3413 ;; Tracked objects:
  3414 ;;		On entry : 0/0
  3415 ;;		On exit  : 0/0
  3416 ;;		Unchanged: 0/0
  3417 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3418 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3419 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3420 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3421 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3422 ;;Total ram usage:        1 bytes
  3423 ;; Hardware stack levels used:    1
  3424 ;; Hardware stack levels required when called:    6
  3425 ;; This function calls:
  3426 ;;		Nothing
  3427 ;; This function is called by:
  3428 ;;		_putch
  3429 ;; This function uses a non-reentrant model
  3430 ;;
  3431                           
  3432                           	psect	text6
  3433  00136C                     __ptext6:
  3434                           	opt stack 0
  3435  00136C                     _EUSART2_Write:
  3436                           	opt stack 22
  3437                           
  3438                           ;incstack = 0
  3439                           ;EUSART2_Write@txData stored from wreg
  3440  00136C  0100               	movlb	0	; () banked
  3441  00136E  6F60               	movwf	EUSART2_Write@txData& (0+255),b
  3442  001370                     
  3443                           ;eusart2.c: 114: {
  3444                           
  3445                           ;eusart2.c: 113: while(0 == PIR3bits.TX2IF)
  3446  001370  A8A4               	btfss	4004,4,c	;volatile
  3447  001372  D7FE               	goto	l2287
  3448                           
  3449                           ;eusart2.c: 115: }
  3450                           ;eusart2.c: 117: TXREG2 = txData;
  3451  001374  C060  FF73         	movff	EUSART2_Write@txData,3955	;volatile
  3452  001378  0012               	return		;funcret
  3453  00137A                     __end_of_EUSART2_Write:
  3454                           	opt stack 0
  3455                           tblptru	equ	0xFF8
  3456                           tblptrh	equ	0xFF7
  3457                           tblptrl	equ	0xFF6
  3458                           tablat	equ	0xFF5
  3459                           prodh	equ	0xFF4
  3460                           prodl	equ	0xFF3
  3461                           intcon	equ	0xFF2
  3462                           postinc0	equ	0xFEE
  3463                           wreg	equ	0xFE8
  3464                           postdec1	equ	0xFE5
  3465                           fsr1l	equ	0xFE1
  3466                           indf2	equ	0xFDF
  3467                           postinc2	equ	0xFDE
  3468                           postdec2	equ	0xFDD
  3469                           fsr2h	equ	0xFDA
  3470                           fsr2l	equ	0xFD9
  3471                           status	equ	0xFD8
  3472                           
  3473 ;; *************** function ___llmod *****************
  3474 ;; Defined at:
  3475 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\llmod.c"
  3476 ;; Parameters:    Size  Location     Type
  3477 ;;  dividend        4   13[BANK0 ] unsigned long 
  3478 ;;  divisor         4   17[BANK0 ] unsigned long 
  3479 ;; Auto vars:     Size  Location     Type
  3480 ;;  counter         1   21[BANK0 ] unsigned char 
  3481 ;; Return value:  Size  Location     Type
  3482 ;;                  4   13[BANK0 ] unsigned long 
  3483 ;; Registers used:
  3484 ;;		wreg, status,2, status,0
  3485 ;; Tracked objects:
  3486 ;;		On entry : 0/0
  3487 ;;		On exit  : 0/0
  3488 ;;		Unchanged: 0/0
  3489 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3490 ;;      Params:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3491 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3492 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3493 ;;      Totals:         0       9       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3494 ;;Total ram usage:        9 bytes
  3495 ;; Hardware stack levels used:    1
  3496 ;; Hardware stack levels required when called:    6
  3497 ;; This function calls:
  3498 ;;		Nothing
  3499 ;; This function is called by:
  3500 ;;		_printf
  3501 ;; This function uses a non-reentrant model
  3502 ;;
  3503                           
  3504                           	psect	text7
  3505  000D86                     __ptext7:
  3506                           	opt stack 0
  3507  000D86                     ___llmod:
  3508                           	opt stack 23
  3509                           
  3510                           ;incstack = 0
  3511  000D86  0100               	movlb	0	; () banked
  3512  000D88  5171               	movf	___llmod@divisor& (0+255),w,b
  3513  000D8A  1172               	iorwf	(___llmod@divisor+1)& (0+255),w,b
  3514  000D8C  1173               	iorwf	(___llmod@divisor+2)& (0+255),w,b
  3515  000D8E  1174               	iorwf	(___llmod@divisor+3)& (0+255),w,b
  3516  000D90  B4D8               	btfsc	status,2,c
  3517  000D92  D024               	goto	l1111
  3518                           
  3519                           ; BSR set to: 0
  3520  000D94  0E01               	movlw	1
  3521  000D96  6F75               	movwf	___llmod@counter& (0+255),b
  3522  000D98  D006               	goto	l1106
  3523  000D9A                     
  3524                           ; BSR set to: 0
  3525                           
  3526                           ; BSR set to: 0
  3527  000D9A  90D8               	bcf	status,0,c
  3528  000D9C  3771               	rlcf	___llmod@divisor& (0+255),f,b
  3529  000D9E  3772               	rlcf	(___llmod@divisor+1)& (0+255),f,b
  3530  000DA0  3773               	rlcf	(___llmod@divisor+2)& (0+255),f,b
  3531  000DA2  3774               	rlcf	(___llmod@divisor+3)& (0+255),f,b
  3532  000DA4  2B75               	incf	___llmod@counter& (0+255),f,b
  3533  000DA6                     l1106:
  3534                           
  3535                           ; BSR set to: 0
  3536                           
  3537                           ; BSR set to: 0
  3538  000DA6  AF74               	btfss	(___llmod@divisor+3)& (0+255),7,b
  3539  000DA8  D7F8               	goto	l1107
  3540  000DAA                     u1510:
  3541                           
  3542                           ; BSR set to: 0
  3543                           
  3544                           ; BSR set to: 0
  3545                           
  3546                           ; BSR set to: 0
  3547  000DAA  5171               	movf	___llmod@divisor& (0+255),w,b
  3548  000DAC  5D6D               	subwf	___llmod@dividend& (0+255),w,b
  3549  000DAE  5172               	movf	(___llmod@divisor+1)& (0+255),w,b
  3550  000DB0  596E               	subwfb	(___llmod@dividend+1)& (0+255),w,b
  3551  000DB2  5173               	movf	(___llmod@divisor+2)& (0+255),w,b
  3552  000DB4  596F               	subwfb	(___llmod@dividend+2)& (0+255),w,b
  3553  000DB6  5174               	movf	(___llmod@divisor+3)& (0+255),w,b
  3554  000DB8  5970               	subwfb	(___llmod@dividend+3)& (0+255),w,b
  3555  000DBA  A0D8               	btfss	status,0,c
  3556  000DBC  D008               	goto	l1110
  3557                           
  3558                           ; BSR set to: 0
  3559  000DBE  5171               	movf	___llmod@divisor& (0+255),w,b
  3560  000DC0  5F6D               	subwf	___llmod@dividend& (0+255),f,b
  3561  000DC2  5172               	movf	(___llmod@divisor+1)& (0+255),w,b
  3562  000DC4  5B6E               	subwfb	(___llmod@dividend+1)& (0+255),f,b
  3563  000DC6  5173               	movf	(___llmod@divisor+2)& (0+255),w,b
  3564  000DC8  5B6F               	subwfb	(___llmod@dividend+2)& (0+255),f,b
  3565  000DCA  5174               	movf	(___llmod@divisor+3)& (0+255),w,b
  3566  000DCC  5B70               	subwfb	(___llmod@dividend+3)& (0+255),f,b
  3567  000DCE                     l1110:
  3568                           
  3569                           ; BSR set to: 0
  3570                           
  3571                           ; BSR set to: 0
  3572  000DCE  90D8               	bcf	status,0,c
  3573  000DD0  3374               	rrcf	(___llmod@divisor+3)& (0+255),f,b
  3574  000DD2  3373               	rrcf	(___llmod@divisor+2)& (0+255),f,b
  3575  000DD4  3372               	rrcf	(___llmod@divisor+1)& (0+255),f,b
  3576  000DD6  3371               	rrcf	___llmod@divisor& (0+255),f,b
  3577                           
  3578                           ; BSR set to: 0
  3579  000DD8  2F75               	decfsz	___llmod@counter& (0+255),f,b
  3580  000DDA  D7E7               	goto	u1510
  3581  000DDC                     l1111:
  3582                           
  3583                           ; BSR set to: 0
  3584                           
  3585                           ; BSR set to: 0
  3586  000DDC  C06D  F06D         	movff	___llmod@dividend,?___llmod
  3587  000DE0  C06E  F06E         	movff	___llmod@dividend+1,?___llmod+1
  3588  000DE4  C06F  F06F         	movff	___llmod@dividend+2,?___llmod+2
  3589  000DE8  C070  F070         	movff	___llmod@dividend+3,?___llmod+3
  3590                           
  3591                           ; BSR set to: 0
  3592  000DEC  0012               	return		;funcret
  3593  000DEE                     __end_of___llmod:
  3594                           	opt stack 0
  3595                           tblptru	equ	0xFF8
  3596                           tblptrh	equ	0xFF7
  3597                           tblptrl	equ	0xFF6
  3598                           tablat	equ	0xFF5
  3599                           prodh	equ	0xFF4
  3600                           prodl	equ	0xFF3
  3601                           intcon	equ	0xFF2
  3602                           postinc0	equ	0xFEE
  3603                           wreg	equ	0xFE8
  3604                           postdec1	equ	0xFE5
  3605                           fsr1l	equ	0xFE1
  3606                           indf2	equ	0xFDF
  3607                           postinc2	equ	0xFDE
  3608                           postdec2	equ	0xFDD
  3609                           fsr2h	equ	0xFDA
  3610                           fsr2l	equ	0xFD9
  3611                           status	equ	0xFD8
  3612                           
  3613 ;; *************** function ___lldiv *****************
  3614 ;; Defined at:
  3615 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\lldiv.c"
  3616 ;; Parameters:    Size  Location     Type
  3617 ;;  dividend        4    0[BANK0 ] unsigned long 
  3618 ;;  divisor         4    4[BANK0 ] unsigned long 
  3619 ;; Auto vars:     Size  Location     Type
  3620 ;;  quotient        4    8[BANK0 ] unsigned long 
  3621 ;;  counter         1   12[BANK0 ] unsigned char 
  3622 ;; Return value:  Size  Location     Type
  3623 ;;                  4    0[BANK0 ] unsigned long 
  3624 ;; Registers used:
  3625 ;;		wreg, status,2, status,0
  3626 ;; Tracked objects:
  3627 ;;		On entry : 0/0
  3628 ;;		On exit  : 0/0
  3629 ;;		Unchanged: 0/0
  3630 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3631 ;;      Params:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3632 ;;      Locals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3633 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3634 ;;      Totals:         0      13       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3635 ;;Total ram usage:       13 bytes
  3636 ;; Hardware stack levels used:    1
  3637 ;; Hardware stack levels required when called:    6
  3638 ;; This function calls:
  3639 ;;		Nothing
  3640 ;; This function is called by:
  3641 ;;		_printf
  3642 ;; This function uses a non-reentrant model
  3643 ;;
  3644                           
  3645                           	psect	text8
  3646  000C0C                     __ptext8:
  3647                           	opt stack 0
  3648  000C0C                     ___lldiv:
  3649                           	opt stack 23
  3650                           
  3651                           ; BSR set to: 0
  3652                           ;incstack = 0
  3653  000C0C  0E00               	movlw	0
  3654  000C0E  0100               	movlb	0	; () banked
  3655  000C10  6F68               	movwf	___lldiv@quotient& (0+255),b
  3656  000C12  0E00               	movlw	0
  3657  000C14  6F69               	movwf	(___lldiv@quotient+1)& (0+255),b
  3658  000C16  0E00               	movlw	0
  3659  000C18  6F6A               	movwf	(___lldiv@quotient+2)& (0+255),b
  3660  000C1A  0E00               	movlw	0
  3661  000C1C  6F6B               	movwf	(___lldiv@quotient+3)& (0+255),b
  3662                           
  3663                           ; BSR set to: 0
  3664  000C1E  5164               	movf	___lldiv@divisor& (0+255),w,b
  3665  000C20  1165               	iorwf	(___lldiv@divisor+1)& (0+255),w,b
  3666  000C22  1166               	iorwf	(___lldiv@divisor+2)& (0+255),w,b
  3667  000C24  1167               	iorwf	(___lldiv@divisor+3)& (0+255),w,b
  3668  000C26  B4D8               	btfsc	status,2,c
  3669  000C28  D02A               	goto	l1101
  3670                           
  3671                           ; BSR set to: 0
  3672  000C2A  0E01               	movlw	1
  3673  000C2C  6F6C               	movwf	___lldiv@counter& (0+255),b
  3674  000C2E  D006               	goto	l1096
  3675  000C30                     
  3676                           ; BSR set to: 0
  3677                           
  3678                           ; BSR set to: 0
  3679  000C30  90D8               	bcf	status,0,c
  3680  000C32  3764               	rlcf	___lldiv@divisor& (0+255),f,b
  3681  000C34  3765               	rlcf	(___lldiv@divisor+1)& (0+255),f,b
  3682  000C36  3766               	rlcf	(___lldiv@divisor+2)& (0+255),f,b
  3683  000C38  3767               	rlcf	(___lldiv@divisor+3)& (0+255),f,b
  3684  000C3A  2B6C               	incf	___lldiv@counter& (0+255),f,b
  3685  000C3C                     l1096:
  3686                           
  3687                           ; BSR set to: 0
  3688                           
  3689                           ; BSR set to: 0
  3690  000C3C  AF67               	btfss	(___lldiv@divisor+3)& (0+255),7,b
  3691  000C3E  D7F8               	goto	l1097
  3692  000C40                     u1480:
  3693                           
  3694                           ; BSR set to: 0
  3695                           
  3696                           ; BSR set to: 0
  3697                           
  3698                           ; BSR set to: 0
  3699  000C40  90D8               	bcf	status,0,c
  3700  000C42  3768               	rlcf	___lldiv@quotient& (0+255),f,b
  3701  000C44  3769               	rlcf	(___lldiv@quotient+1)& (0+255),f,b
  3702  000C46  376A               	rlcf	(___lldiv@quotient+2)& (0+255),f,b
  3703  000C48  376B               	rlcf	(___lldiv@quotient+3)& (0+255),f,b
  3704                           
  3705                           ; BSR set to: 0
  3706  000C4A  5164               	movf	___lldiv@divisor& (0+255),w,b
  3707  000C4C  5D60               	subwf	___lldiv@dividend& (0+255),w,b
  3708  000C4E  5165               	movf	(___lldiv@divisor+1)& (0+255),w,b
  3709  000C50  5961               	subwfb	(___lldiv@dividend+1)& (0+255),w,b
  3710  000C52  5166               	movf	(___lldiv@divisor+2)& (0+255),w,b
  3711  000C54  5962               	subwfb	(___lldiv@dividend+2)& (0+255),w,b
  3712  000C56  5167               	movf	(___lldiv@divisor+3)& (0+255),w,b
  3713  000C58  5963               	subwfb	(___lldiv@dividend+3)& (0+255),w,b
  3714  000C5A  A0D8               	btfss	status,0,c
  3715  000C5C  D009               	goto	l1100
  3716                           
  3717                           ; BSR set to: 0
  3718  000C5E  5164               	movf	___lldiv@divisor& (0+255),w,b
  3719  000C60  5F60               	subwf	___lldiv@dividend& (0+255),f,b
  3720  000C62  5165               	movf	(___lldiv@divisor+1)& (0+255),w,b
  3721  000C64  5B61               	subwfb	(___lldiv@dividend+1)& (0+255),f,b
  3722  000C66  5166               	movf	(___lldiv@divisor+2)& (0+255),w,b
  3723  000C68  5B62               	subwfb	(___lldiv@dividend+2)& (0+255),f,b
  3724  000C6A  5167               	movf	(___lldiv@divisor+3)& (0+255),w,b
  3725  000C6C  5B63               	subwfb	(___lldiv@dividend+3)& (0+255),f,b
  3726                           
  3727                           ; BSR set to: 0
  3728  000C6E  8168               	bsf	___lldiv@quotient& (0+255),0,b
  3729  000C70                     l1100:
  3730                           
  3731                           ; BSR set to: 0
  3732                           
  3733                           ; BSR set to: 0
  3734  000C70  90D8               	bcf	status,0,c
  3735  000C72  3367               	rrcf	(___lldiv@divisor+3)& (0+255),f,b
  3736  000C74  3366               	rrcf	(___lldiv@divisor+2)& (0+255),f,b
  3737  000C76  3365               	rrcf	(___lldiv@divisor+1)& (0+255),f,b
  3738  000C78  3364               	rrcf	___lldiv@divisor& (0+255),f,b
  3739                           
  3740                           ; BSR set to: 0
  3741  000C7A  2F6C               	decfsz	___lldiv@counter& (0+255),f,b
  3742  000C7C  D7E1               	goto	u1480
  3743  000C7E                     l1101:
  3744                           
  3745                           ; BSR set to: 0
  3746                           
  3747                           ; BSR set to: 0
  3748  000C7E  C068  F060         	movff	___lldiv@quotient,?___lldiv
  3749  000C82  C069  F061         	movff	___lldiv@quotient+1,?___lldiv+1
  3750  000C86  C06A  F062         	movff	___lldiv@quotient+2,?___lldiv+2
  3751  000C8A  C06B  F063         	movff	___lldiv@quotient+3,?___lldiv+3
  3752                           
  3753                           ; BSR set to: 0
  3754  000C8E  0012               	return		;funcret
  3755  000C90                     __end_of___lldiv:
  3756                           	opt stack 0
  3757                           tblptru	equ	0xFF8
  3758                           tblptrh	equ	0xFF7
  3759                           tblptrl	equ	0xFF6
  3760                           tablat	equ	0xFF5
  3761                           prodh	equ	0xFF4
  3762                           prodl	equ	0xFF3
  3763                           intcon	equ	0xFF2
  3764                           postinc0	equ	0xFEE
  3765                           wreg	equ	0xFE8
  3766                           postdec1	equ	0xFE5
  3767                           fsr1l	equ	0xFE1
  3768                           indf2	equ	0xFDF
  3769                           postinc2	equ	0xFDE
  3770                           postdec2	equ	0xFDD
  3771                           fsr2h	equ	0xFDA
  3772                           fsr2l	equ	0xFD9
  3773                           status	equ	0xFD8
  3774                           
  3775 ;; *************** function _parseInt *****************
  3776 ;; Defined at:
  3777 ;;		line 253 in file "main.c"
  3778 ;; Parameters:    Size  Location     Type
  3779 ;;		None
  3780 ;; Auto vars:     Size  Location     Type
  3781 ;;  position        2    3[BANK0 ] unsigned int 
  3782 ;; Return value:  Size  Location     Type
  3783 ;;                  2    0[BANK0 ] unsigned int 
  3784 ;; Registers used:
  3785 ;;		wreg, status,2, status,0, cstack
  3786 ;; Tracked objects:
  3787 ;;		On entry : 0/0
  3788 ;;		On exit  : 0/0
  3789 ;;		Unchanged: 0/0
  3790 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3791 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3792 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3793 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3794 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3795 ;;Total ram usage:        5 bytes
  3796 ;; Hardware stack levels used:    1
  3797 ;; Hardware stack levels required when called:    7
  3798 ;; This function calls:
  3799 ;;		_EUSART1_Read
  3800 ;;		_EUSART1_is_rx_ready
  3801 ;; This function is called by:
  3802 ;;		_main
  3803 ;; This function uses a non-reentrant model
  3804 ;;
  3805                           
  3806                           	psect	text9
  3807  0011D4                     __ptext9:
  3808                           	opt stack 0
  3809  0011D4                     _parseInt:
  3810                           	opt stack 23
  3811                           
  3812                           ;main.c: 254: while(!(EUSART1_is_rx_ready()));
  3813                           
  3814                           ; BSR set to: 0
  3815                           ;incstack = 0
  3816  0011D4  ECBD  F009         	call	_EUSART1_is_rx_ready	;wreg free
  3817  0011D8  0900               	iorlw	0
  3818  0011DA  B4D8               	btfsc	status,2,c
  3819  0011DC  D7FB               	goto	_parseInt
  3820                           
  3821                           ;main.c: 255: uint16_t position = EUSART1_Read();
  3822  0011DE  EC98  F009         	call	_EUSART1_Read	;wreg free
  3823  0011E2  0100               	movlb	0	; () banked
  3824  0011E4  6F62               	movwf	??_parseInt& (0+255),b
  3825  0011E6  5162               	movf	??_parseInt& (0+255),w,b
  3826  0011E8  6F63               	movwf	parseInt@position& (0+255),b
  3827  0011EA  6B64               	clrf	(parseInt@position+1)& (0+255),b
  3828                           
  3829                           ; BSR set to: 0
  3830                           ;main.c: 256: return position;
  3831  0011EC  C063  F060         	movff	parseInt@position,?_parseInt
  3832  0011F0  C064  F061         	movff	parseInt@position+1,?_parseInt+1
  3833  0011F4  0012               	return	
  3834  0011F6                     __end_of_parseInt:
  3835                           	opt stack 0
  3836                           tblptru	equ	0xFF8
  3837                           tblptrh	equ	0xFF7
  3838                           tblptrl	equ	0xFF6
  3839                           tablat	equ	0xFF5
  3840                           prodh	equ	0xFF4
  3841                           prodl	equ	0xFF3
  3842                           intcon	equ	0xFF2
  3843                           postinc0	equ	0xFEE
  3844                           wreg	equ	0xFE8
  3845                           postdec1	equ	0xFE5
  3846                           fsr1l	equ	0xFE1
  3847                           indf2	equ	0xFDF
  3848                           postinc2	equ	0xFDE
  3849                           postdec2	equ	0xFDD
  3850                           fsr2h	equ	0xFDA
  3851                           fsr2l	equ	0xFD9
  3852                           status	equ	0xFD8
  3853                           
  3854 ;; *************** function _EUSART1_is_rx_ready *****************
  3855 ;; Defined at:
  3856 ;;		line 83 in file "mcc_generated_files/eusart1.c"
  3857 ;; Parameters:    Size  Location     Type
  3858 ;;		None
  3859 ;; Auto vars:     Size  Location     Type
  3860 ;;		None
  3861 ;; Return value:  Size  Location     Type
  3862 ;;                  1    wreg      unsigned char 
  3863 ;; Registers used:
  3864 ;;		wreg
  3865 ;; Tracked objects:
  3866 ;;		On entry : 0/0
  3867 ;;		On exit  : 0/0
  3868 ;;		Unchanged: 0/0
  3869 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3870 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3871 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3872 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3873 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3874 ;;Total ram usage:        0 bytes
  3875 ;; Hardware stack levels used:    1
  3876 ;; Hardware stack levels required when called:    6
  3877 ;; This function calls:
  3878 ;;		Nothing
  3879 ;; This function is called by:
  3880 ;;		_main
  3881 ;;		_parseInt
  3882 ;; This function uses a non-reentrant model
  3883 ;;
  3884                           
  3885                           	psect	text10
  3886  00137A                     __ptext10:
  3887                           	opt stack 0
  3888  00137A                     _EUSART1_is_rx_ready:
  3889                           	opt stack 23
  3890                           
  3891                           ;eusart1.c: 85: return PIR1bits.RC1IF;
  3892                           
  3893                           ; BSR set to: 0
  3894                           ;incstack = 0
  3895  00137A  AA9E               	btfss	3998,5,c	;volatile
  3896  00137C  D002               	goto	u1310
  3897  00137E  0E01               	movlw	1
  3898  001380  0012               	return	
  3899  001382                     u1310:
  3900  001382  0E00               	movlw	0
  3901  001384  0012               	return	
  3902  001386                     __end_of_EUSART1_is_rx_ready:
  3903                           	opt stack 0
  3904                           tblptru	equ	0xFF8
  3905                           tblptrh	equ	0xFF7
  3906                           tblptrl	equ	0xFF6
  3907                           tablat	equ	0xFF5
  3908                           prodh	equ	0xFF4
  3909                           prodl	equ	0xFF3
  3910                           intcon	equ	0xFF2
  3911                           postinc0	equ	0xFEE
  3912                           wreg	equ	0xFE8
  3913                           postdec1	equ	0xFE5
  3914                           fsr1l	equ	0xFE1
  3915                           indf2	equ	0xFDF
  3916                           postinc2	equ	0xFDE
  3917                           postdec2	equ	0xFDD
  3918                           fsr2h	equ	0xFDA
  3919                           fsr2l	equ	0xFD9
  3920                           status	equ	0xFD8
  3921                           
  3922 ;; *************** function _EUSART1_Read *****************
  3923 ;; Defined at:
  3924 ;;		line 93 in file "mcc_generated_files/eusart1.c"
  3925 ;; Parameters:    Size  Location     Type
  3926 ;;		None
  3927 ;; Auto vars:     Size  Location     Type
  3928 ;;		None
  3929 ;; Return value:  Size  Location     Type
  3930 ;;                  1    wreg      unsigned char 
  3931 ;; Registers used:
  3932 ;;		wreg, status,2
  3933 ;; Tracked objects:
  3934 ;;		On entry : 0/0
  3935 ;;		On exit  : 0/0
  3936 ;;		Unchanged: 0/0
  3937 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3938 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3939 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3940 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3941 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3942 ;;Total ram usage:        0 bytes
  3943 ;; Hardware stack levels used:    1
  3944 ;; Hardware stack levels required when called:    6
  3945 ;; This function calls:
  3946 ;;		Nothing
  3947 ;; This function is called by:
  3948 ;;		_main
  3949 ;;		_parseInt
  3950 ;; This function uses a non-reentrant model
  3951 ;;
  3952                           
  3953                           	psect	text11
  3954  001330                     __ptext11:
  3955                           	opt stack 0
  3956  001330                     _EUSART1_Read:
  3957                           	opt stack 23
  3958                           
  3959                           ;eusart1.c: 96: {
  3960                           
  3961                           ;eusart1.c: 95: while(!PIR1bits.RC1IF)
  3962                           
  3963                           ;incstack = 0
  3964  001330  AA9E               	btfss	3998,5,c	;volatile
  3965  001332  D7FE               	goto	_EUSART1_Read
  3966                           
  3967                           ;eusart1.c: 97: }
  3968                           ;eusart1.c: 100: if(1 == RCSTA1bits.OERR)
  3969  001334  A2AB               	btfss	4011,1,c	;volatile
  3970  001336  D002               	goto	l344
  3971                           
  3972                           ;eusart1.c: 101: {
  3973                           ;eusart1.c: 104: RCSTA1bits.CREN = 0;
  3974  001338  98AB               	bcf	4011,4,c	;volatile
  3975                           
  3976                           ;eusart1.c: 105: RCSTA1bits.CREN = 1;
  3977  00133A  88AB               	bsf	4011,4,c	;volatile
  3978  00133C                     l344:
  3979                           
  3980                           ;eusart1.c: 106: }
  3981                           ;eusart1.c: 108: return RCREG1;
  3982  00133C  50AE               	movf	4014,w,c	;volatile
  3983  00133E  0012               	return	
  3984  001340                     __end_of_EUSART1_Read:
  3985                           	opt stack 0
  3986                           tblptru	equ	0xFF8
  3987                           tblptrh	equ	0xFF7
  3988                           tblptrl	equ	0xFF6
  3989                           tablat	equ	0xFF5
  3990                           prodh	equ	0xFF4
  3991                           prodl	equ	0xFF3
  3992                           intcon	equ	0xFF2
  3993                           postinc0	equ	0xFEE
  3994                           wreg	equ	0xFE8
  3995                           postdec1	equ	0xFE5
  3996                           fsr1l	equ	0xFE1
  3997                           indf2	equ	0xFDF
  3998                           postinc2	equ	0xFDE
  3999                           postdec2	equ	0xFDD
  4000                           fsr2h	equ	0xFDA
  4001                           fsr2l	equ	0xFD9
  4002                           status	equ	0xFD8
  4003                           
  4004 ;; *************** function _SYSTEM_Initialize *****************
  4005 ;; Defined at:
  4006 ;;		line 50 in file "mcc_generated_files/mcc.c"
  4007 ;; Parameters:    Size  Location     Type
  4008 ;;		None
  4009 ;; Auto vars:     Size  Location     Type
  4010 ;;		None
  4011 ;; Return value:  Size  Location     Type
  4012 ;;                  1    wreg      void 
  4013 ;; Registers used:
  4014 ;;		wreg, status,2, status,0, cstack
  4015 ;; Tracked objects:
  4016 ;;		On entry : 0/0
  4017 ;;		On exit  : 0/0
  4018 ;;		Unchanged: 0/0
  4019 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4020 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4021 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4022 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4023 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4024 ;;Total ram usage:        0 bytes
  4025 ;; Hardware stack levels used:    1
  4026 ;; Hardware stack levels required when called:    8
  4027 ;; This function calls:
  4028 ;;		_CCP4_Initialize
  4029 ;;		_CCP5_Initialize
  4030 ;;		_EUSART1_Initialize
  4031 ;;		_EUSART2_Initialize
  4032 ;;		_INTERRUPT_Initialize
  4033 ;;		_OSCILLATOR_Initialize
  4034 ;;		_PIN_MANAGER_Initialize
  4035 ;;		_TMR0_Initialize
  4036 ;;		_TMR1_Initialize
  4037 ;;		_TMR2_Initialize
  4038 ;;		_TMR3_Initialize
  4039 ;;		_TMR5_Initialize
  4040 ;; This function is called by:
  4041 ;;		_main
  4042 ;; This function uses a non-reentrant model
  4043 ;;
  4044                           
  4045                           	psect	text12
  4046  00103E                     __ptext12:
  4047                           	opt stack 0
  4048  00103E                     _SYSTEM_Initialize:
  4049                           	opt stack 22
  4050                           
  4051                           ;mcc.c: 53: INTERRUPT_Initialize();
  4052                           
  4053                           ;incstack = 0
  4054  00103E  ECF1  F009         	call	_INTERRUPT_Initialize	;wreg free
  4055                           
  4056                           ;mcc.c: 54: PIN_MANAGER_Initialize();
  4057  001042  EC69  F008         	call	_PIN_MANAGER_Initialize	;wreg free
  4058                           
  4059                           ;mcc.c: 55: OSCILLATOR_Initialize();
  4060  001046  EC8F  F009         	call	_OSCILLATOR_Initialize	;wreg free
  4061                           
  4062                           ;mcc.c: 56: CCP5_Initialize();
  4063  00104A  EC37  F009         	call	_CCP5_Initialize	;wreg free
  4064                           
  4065                           ;mcc.c: 57: CCP4_Initialize();
  4066  00104E  EC45  F009         	call	_CCP4_Initialize	;wreg free
  4067                           
  4068                           ;mcc.c: 58: TMR3_Initialize();
  4069  001052  EC29  F009         	call	_TMR3_Initialize	;wreg free
  4070                           
  4071                           ;mcc.c: 59: TMR5_Initialize();
  4072  001056  EC51  F008         	call	_TMR5_Initialize	;wreg free
  4073                           
  4074                           ;mcc.c: 60: TMR2_Initialize();
  4075  00105A  EC0B  F009         	call	_TMR2_Initialize	;wreg free
  4076                           
  4077                           ;mcc.c: 61: TMR1_Initialize();
  4078  00105E  EC80  F008         	call	_TMR1_Initialize	;wreg free
  4079                           
  4080                           ;mcc.c: 62: TMR0_Initialize();
  4081  001062  ECB6  F007         	call	_TMR0_Initialize	;wreg free
  4082                           
  4083                           ;mcc.c: 63: EUSART1_Initialize();
  4084  001066  EC84  F009         	call	_EUSART1_Initialize	;wreg free
  4085                           
  4086                           ;mcc.c: 64: EUSART2_Initialize();
  4087  00106A  EC79  F009         	call	_EUSART2_Initialize	;wreg free
  4088  00106E  0012               	return		;funcret
  4089  001070                     __end_of_SYSTEM_Initialize:
  4090                           	opt stack 0
  4091                           tblptru	equ	0xFF8
  4092                           tblptrh	equ	0xFF7
  4093                           tblptrl	equ	0xFF6
  4094                           tablat	equ	0xFF5
  4095                           prodh	equ	0xFF4
  4096                           prodl	equ	0xFF3
  4097                           intcon	equ	0xFF2
  4098                           postinc0	equ	0xFEE
  4099                           wreg	equ	0xFE8
  4100                           postdec1	equ	0xFE5
  4101                           fsr1l	equ	0xFE1
  4102                           indf2	equ	0xFDF
  4103                           postinc2	equ	0xFDE
  4104                           postdec2	equ	0xFDD
  4105                           fsr2h	equ	0xFDA
  4106                           fsr2l	equ	0xFD9
  4107                           status	equ	0xFD8
  4108                           
  4109 ;; *************** function _TMR5_Initialize *****************
  4110 ;; Defined at:
  4111 ;;		line 64 in file "mcc_generated_files/tmr5.c"
  4112 ;; Parameters:    Size  Location     Type
  4113 ;;		None
  4114 ;; Auto vars:     Size  Location     Type
  4115 ;;		None
  4116 ;; Return value:  Size  Location     Type
  4117 ;;                  1    wreg      void 
  4118 ;; Registers used:
  4119 ;;		wreg, status,2, status,0, cstack
  4120 ;; Tracked objects:
  4121 ;;		On entry : 0/0
  4122 ;;		On exit  : 0/0
  4123 ;;		Unchanged: 0/0
  4124 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4125 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4126 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4127 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4128 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4129 ;;Total ram usage:        0 bytes
  4130 ;; Hardware stack levels used:    1
  4131 ;; Hardware stack levels required when called:    7
  4132 ;; This function calls:
  4133 ;;		_TMR5_SetInterruptHandler
  4134 ;; This function is called by:
  4135 ;;		_SYSTEM_Initialize
  4136 ;; This function uses a non-reentrant model
  4137 ;;
  4138                           
  4139                           	psect	text13
  4140  0010A2                     __ptext13:
  4141                           	opt stack 0
  4142  0010A2                     _TMR5_Initialize:
  4143                           	opt stack 22
  4144                           
  4145                           ;tmr5.c: 69: T5GCON = 0x00;
  4146                           
  4147                           ;incstack = 0
  4148  0010A2  0E00               	movlw	0
  4149  0010A4  010F               	movlb	15	; () banked
  4150  0010A6  6F4D               	movwf	77,b	;volatile
  4151                           
  4152                           ;tmr5.c: 72: TMR5H = 0xE0;
  4153  0010A8  0EE0               	movlw	224
  4154  0010AA  6F50               	movwf	80,b	;volatile
  4155                           
  4156                           ;tmr5.c: 75: TMR5L = 0x00;
  4157  0010AC  0E00               	movlw	0
  4158  0010AE  6F4F               	movwf	79,b	;volatile
  4159                           
  4160                           ; BSR set to: 15
  4161                           ;tmr5.c: 78: timer5ReloadVal=TMR5;
  4162  0010B0  CF4F F045          	movff	3919,_timer5ReloadVal	;volatile
  4163  0010B4  CF50 F046          	movff	3920,_timer5ReloadVal+1	;volatile
  4164                           
  4165                           ; BSR set to: 15
  4166                           ;tmr5.c: 81: PIR5bits.TMR5IF = 0;
  4167  0010B8  927E               	bcf	3966,1,c	;volatile
  4168                           
  4169                           ; BSR set to: 15
  4170                           ;tmr5.c: 84: PIE5bits.TMR5IE = 1;
  4171  0010BA  827D               	bsf	3965,1,c	;volatile
  4172                           
  4173                           ; BSR set to: 15
  4174                           ;tmr5.c: 87: TMR5_SetInterruptHandler(TMR5_DefaultInterruptHandler);
  4175  0010BC  0EE8               	movlw	low _TMR5_DefaultInterruptHandler
  4176  0010BE  0100               	movlb	0	; () banked
  4177  0010C0  6F60               	movwf	TMR5_SetInterruptHandler@InterruptHandler& (0+255),b
  4178  0010C2  0E0E               	movlw	high _TMR5_DefaultInterruptHandler
  4179  0010C4  6F61               	movwf	(TMR5_SetInterruptHandler@InterruptHandler+1)& (0+255),b
  4180  0010C6  ECCF  F009         	call	_TMR5_SetInterruptHandler	;wreg free
  4181                           
  4182                           ;tmr5.c: 90: T5CON = 0x31;
  4183  0010CA  0E31               	movlw	49
  4184  0010CC  010F               	movlb	15	; () banked
  4185  0010CE  6F4E               	movwf	78,b	;volatile
  4186                           
  4187                           ; BSR set to: 15
  4188  0010D0  0012               	return		;funcret
  4189  0010D2                     __end_of_TMR5_Initialize:
  4190                           	opt stack 0
  4191                           tblptru	equ	0xFF8
  4192                           tblptrh	equ	0xFF7
  4193                           tblptrl	equ	0xFF6
  4194                           tablat	equ	0xFF5
  4195                           prodh	equ	0xFF4
  4196                           prodl	equ	0xFF3
  4197                           intcon	equ	0xFF2
  4198                           postinc0	equ	0xFEE
  4199                           wreg	equ	0xFE8
  4200                           postdec1	equ	0xFE5
  4201                           fsr1l	equ	0xFE1
  4202                           indf2	equ	0xFDF
  4203                           postinc2	equ	0xFDE
  4204                           postdec2	equ	0xFDD
  4205                           fsr2h	equ	0xFDA
  4206                           fsr2l	equ	0xFD9
  4207                           status	equ	0xFD8
  4208                           
  4209 ;; *************** function _TMR5_SetInterruptHandler *****************
  4210 ;; Defined at:
  4211 ;;		line 172 in file "mcc_generated_files/tmr5.c"
  4212 ;; Parameters:    Size  Location     Type
  4213 ;;  InterruptHan    2    0[BANK0 ] PTR FTN()void 
  4214 ;;		 -> TMR5_DefaultInterruptHandler(1), 
  4215 ;; Auto vars:     Size  Location     Type
  4216 ;;		None
  4217 ;; Return value:  Size  Location     Type
  4218 ;;                  1    wreg      void 
  4219 ;; Registers used:
  4220 ;;		wreg, status,2, status,0
  4221 ;; Tracked objects:
  4222 ;;		On entry : 0/0
  4223 ;;		On exit  : 0/0
  4224 ;;		Unchanged: 0/0
  4225 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4226 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4227 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4228 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4229 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4230 ;;Total ram usage:        2 bytes
  4231 ;; Hardware stack levels used:    1
  4232 ;; Hardware stack levels required when called:    6
  4233 ;; This function calls:
  4234 ;;		Nothing
  4235 ;; This function is called by:
  4236 ;;		_TMR5_Initialize
  4237 ;; This function uses a non-reentrant model
  4238 ;;
  4239                           
  4240                           	psect	text14
  4241  00139E                     __ptext14:
  4242                           	opt stack 0
  4243  00139E                     _TMR5_SetInterruptHandler:
  4244                           	opt stack 22
  4245                           
  4246                           ;tmr5.c: 173: TMR5_InterruptHandler = InterruptHandler;
  4247                           
  4248                           ; BSR set to: 15
  4249                           ;incstack = 0
  4250  00139E  C060  F043         	movff	TMR5_SetInterruptHandler@InterruptHandler,_TMR5_InterruptHandler
  4251  0013A2  C061  F044         	movff	TMR5_SetInterruptHandler@InterruptHandler+1,_TMR5_InterruptHandler+1
  4252  0013A6  0012               	return		;funcret
  4253  0013A8                     __end_of_TMR5_SetInterruptHandler:
  4254                           	opt stack 0
  4255                           tblptru	equ	0xFF8
  4256                           tblptrh	equ	0xFF7
  4257                           tblptrl	equ	0xFF6
  4258                           tablat	equ	0xFF5
  4259                           prodh	equ	0xFF4
  4260                           prodl	equ	0xFF3
  4261                           intcon	equ	0xFF2
  4262                           postinc0	equ	0xFEE
  4263                           wreg	equ	0xFE8
  4264                           postdec1	equ	0xFE5
  4265                           fsr1l	equ	0xFE1
  4266                           indf2	equ	0xFDF
  4267                           postinc2	equ	0xFDE
  4268                           postdec2	equ	0xFDD
  4269                           fsr2h	equ	0xFDA
  4270                           fsr2l	equ	0xFD9
  4271                           status	equ	0xFD8
  4272                           
  4273 ;; *************** function _TMR3_Initialize *****************
  4274 ;; Defined at:
  4275 ;;		line 63 in file "mcc_generated_files/tmr3.c"
  4276 ;; Parameters:    Size  Location     Type
  4277 ;;		None
  4278 ;; Auto vars:     Size  Location     Type
  4279 ;;		None
  4280 ;; Return value:  Size  Location     Type
  4281 ;;                  1    wreg      void 
  4282 ;; Registers used:
  4283 ;;		wreg, status,2
  4284 ;; Tracked objects:
  4285 ;;		On entry : 0/0
  4286 ;;		On exit  : 0/0
  4287 ;;		Unchanged: 0/0
  4288 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4289 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4290 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4291 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4292 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4293 ;;Total ram usage:        0 bytes
  4294 ;; Hardware stack levels used:    1
  4295 ;; Hardware stack levels required when called:    6
  4296 ;; This function calls:
  4297 ;;		Nothing
  4298 ;; This function is called by:
  4299 ;;		_SYSTEM_Initialize
  4300 ;; This function uses a non-reentrant model
  4301 ;;
  4302                           
  4303                           	psect	text15
  4304  001252                     __ptext15:
  4305                           	opt stack 0
  4306  001252                     _TMR3_Initialize:
  4307                           	opt stack 23
  4308                           
  4309                           ;tmr3.c: 68: T3GCON = 0x00;
  4310                           
  4311                           ;incstack = 0
  4312  001252  0E00               	movlw	0
  4313  001254  6EB4               	movwf	4020,c	;volatile
  4314                           
  4315                           ;tmr3.c: 71: TMR3H = 0x00;
  4316  001256  0E00               	movlw	0
  4317  001258  6EB3               	movwf	4019,c	;volatile
  4318                           
  4319                           ;tmr3.c: 74: TMR3L = 0x00;
  4320  00125A  0E00               	movlw	0
  4321  00125C  6EB2               	movwf	4018,c	;volatile
  4322                           
  4323                           ;tmr3.c: 77: timer3ReloadVal=TMR3;
  4324  00125E  CFB2 F04B          	movff	4018,_timer3ReloadVal	;volatile
  4325  001262  CFB3 F04C          	movff	4019,_timer3ReloadVal+1	;volatile
  4326                           
  4327                           ;tmr3.c: 80: PIR2bits.TMR3IF = 0;
  4328  001266  92A1               	bcf	4001,1,c	;volatile
  4329                           
  4330                           ;tmr3.c: 83: T3CON = 0x01;
  4331  001268  0E01               	movlw	1
  4332  00126A  6EB1               	movwf	4017,c	;volatile
  4333  00126C  0012               	return		;funcret
  4334  00126E                     __end_of_TMR3_Initialize:
  4335                           	opt stack 0
  4336                           tblptru	equ	0xFF8
  4337                           tblptrh	equ	0xFF7
  4338                           tblptrl	equ	0xFF6
  4339                           tablat	equ	0xFF5
  4340                           prodh	equ	0xFF4
  4341                           prodl	equ	0xFF3
  4342                           intcon	equ	0xFF2
  4343                           postinc0	equ	0xFEE
  4344                           wreg	equ	0xFE8
  4345                           postdec1	equ	0xFE5
  4346                           fsr1l	equ	0xFE1
  4347                           indf2	equ	0xFDF
  4348                           postinc2	equ	0xFDE
  4349                           postdec2	equ	0xFDD
  4350                           fsr2h	equ	0xFDA
  4351                           fsr2l	equ	0xFD9
  4352                           status	equ	0xFD8
  4353                           
  4354 ;; *************** function _TMR2_Initialize *****************
  4355 ;; Defined at:
  4356 ;;		line 64 in file "mcc_generated_files/tmr2.c"
  4357 ;; Parameters:    Size  Location     Type
  4358 ;;		None
  4359 ;; Auto vars:     Size  Location     Type
  4360 ;;		None
  4361 ;; Return value:  Size  Location     Type
  4362 ;;                  1    wreg      void 
  4363 ;; Registers used:
  4364 ;;		wreg, status,2, status,0, cstack
  4365 ;; Tracked objects:
  4366 ;;		On entry : 0/0
  4367 ;;		On exit  : 0/0
  4368 ;;		Unchanged: 0/0
  4369 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4370 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4371 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4372 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4373 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4374 ;;Total ram usage:        0 bytes
  4375 ;; Hardware stack levels used:    1
  4376 ;; Hardware stack levels required when called:    7
  4377 ;; This function calls:
  4378 ;;		_TMR2_SetInterruptHandler
  4379 ;; This function is called by:
  4380 ;;		_SYSTEM_Initialize
  4381 ;; This function uses a non-reentrant model
  4382 ;;
  4383                           
  4384                           	psect	text16
  4385  001216                     __ptext16:
  4386                           	opt stack 0
  4387  001216                     _TMR2_Initialize:
  4388                           	opt stack 22
  4389                           
  4390                           ;tmr2.c: 69: PR2 = 0xFF;
  4391                           
  4392                           ;incstack = 0
  4393  001216  68BB               	setf	4027,c	;volatile
  4394                           
  4395                           ;tmr2.c: 72: TMR2 = 0x00;
  4396  001218  0E00               	movlw	0
  4397  00121A  6EBC               	movwf	4028,c	;volatile
  4398                           
  4399                           ;tmr2.c: 75: PIR1bits.TMR2IF = 0;
  4400  00121C  929E               	bcf	3998,1,c	;volatile
  4401                           
  4402                           ;tmr2.c: 78: PIE1bits.TMR2IE = 1;
  4403  00121E  829D               	bsf	3997,1,c	;volatile
  4404                           
  4405                           ;tmr2.c: 81: TMR2_SetInterruptHandler(TMR2_DefaultInterruptHandler);
  4406  001220  0EAC               	movlw	low _TMR2_DefaultInterruptHandler
  4407  001222  0100               	movlb	0	; () banked
  4408  001224  6F60               	movwf	TMR2_SetInterruptHandler@InterruptHandler& (0+255),b
  4409  001226  0E0A               	movlw	high _TMR2_DefaultInterruptHandler
  4410  001228  6F61               	movwf	(TMR2_SetInterruptHandler@InterruptHandler+1)& (0+255),b
  4411  00122A  ECD4  F009         	call	_TMR2_SetInterruptHandler	;wreg free
  4412                           
  4413                           ;tmr2.c: 84: T2CON = 0x06;
  4414  00122E  0E06               	movlw	6
  4415  001230  6EBA               	movwf	4026,c	;volatile
  4416  001232  0012               	return		;funcret
  4417  001234                     __end_of_TMR2_Initialize:
  4418                           	opt stack 0
  4419                           tblptru	equ	0xFF8
  4420                           tblptrh	equ	0xFF7
  4421                           tblptrl	equ	0xFF6
  4422                           tablat	equ	0xFF5
  4423                           prodh	equ	0xFF4
  4424                           prodl	equ	0xFF3
  4425                           intcon	equ	0xFF2
  4426                           postinc0	equ	0xFEE
  4427                           wreg	equ	0xFE8
  4428                           postdec1	equ	0xFE5
  4429                           fsr1l	equ	0xFE1
  4430                           indf2	equ	0xFDF
  4431                           postinc2	equ	0xFDE
  4432                           postdec2	equ	0xFDD
  4433                           fsr2h	equ	0xFDA
  4434                           fsr2l	equ	0xFD9
  4435                           status	equ	0xFD8
  4436                           
  4437 ;; *************** function _TMR2_SetInterruptHandler *****************
  4438 ;; Defined at:
  4439 ;;		line 132 in file "mcc_generated_files/tmr2.c"
  4440 ;; Parameters:    Size  Location     Type
  4441 ;;  InterruptHan    2    0[BANK0 ] PTR FTN()void 
  4442 ;;		 -> TMR2_DefaultInterruptHandler(1), 
  4443 ;; Auto vars:     Size  Location     Type
  4444 ;;		None
  4445 ;; Return value:  Size  Location     Type
  4446 ;;                  1    wreg      void 
  4447 ;; Registers used:
  4448 ;;		wreg, status,2, status,0
  4449 ;; Tracked objects:
  4450 ;;		On entry : 0/0
  4451 ;;		On exit  : 0/0
  4452 ;;		Unchanged: 0/0
  4453 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4454 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4455 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4456 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4457 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4458 ;;Total ram usage:        2 bytes
  4459 ;; Hardware stack levels used:    1
  4460 ;; Hardware stack levels required when called:    6
  4461 ;; This function calls:
  4462 ;;		Nothing
  4463 ;; This function is called by:
  4464 ;;		_TMR2_Initialize
  4465 ;; This function uses a non-reentrant model
  4466 ;;
  4467                           
  4468                           	psect	text17
  4469  0013A8                     __ptext17:
  4470                           	opt stack 0
  4471  0013A8                     _TMR2_SetInterruptHandler:
  4472                           	opt stack 22
  4473                           
  4474                           ;tmr2.c: 133: TMR2_InterruptHandler = InterruptHandler;
  4475                           
  4476                           ;incstack = 0
  4477  0013A8  C060  F041         	movff	TMR2_SetInterruptHandler@InterruptHandler,_TMR2_InterruptHandler
  4478  0013AC  C061  F042         	movff	TMR2_SetInterruptHandler@InterruptHandler+1,_TMR2_InterruptHandler+1
  4479  0013B0  0012               	return		;funcret
  4480  0013B2                     __end_of_TMR2_SetInterruptHandler:
  4481                           	opt stack 0
  4482                           tblptru	equ	0xFF8
  4483                           tblptrh	equ	0xFF7
  4484                           tblptrl	equ	0xFF6
  4485                           tablat	equ	0xFF5
  4486                           prodh	equ	0xFF4
  4487                           prodl	equ	0xFF3
  4488                           intcon	equ	0xFF2
  4489                           postinc0	equ	0xFEE
  4490                           wreg	equ	0xFE8
  4491                           postdec1	equ	0xFE5
  4492                           fsr1l	equ	0xFE1
  4493                           indf2	equ	0xFDF
  4494                           postinc2	equ	0xFDE
  4495                           postdec2	equ	0xFDD
  4496                           fsr2h	equ	0xFDA
  4497                           fsr2l	equ	0xFD9
  4498                           status	equ	0xFD8
  4499                           
  4500 ;; *************** function _TMR1_Initialize *****************
  4501 ;; Defined at:
  4502 ;;		line 64 in file "mcc_generated_files/tmr1.c"
  4503 ;; Parameters:    Size  Location     Type
  4504 ;;		None
  4505 ;; Auto vars:     Size  Location     Type
  4506 ;;		None
  4507 ;; Return value:  Size  Location     Type
  4508 ;;                  1    wreg      void 
  4509 ;; Registers used:
  4510 ;;		wreg, status,2, status,0, cstack
  4511 ;; Tracked objects:
  4512 ;;		On entry : 0/0
  4513 ;;		On exit  : 0/0
  4514 ;;		Unchanged: 0/0
  4515 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4516 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4517 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4518 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4519 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4520 ;;Total ram usage:        0 bytes
  4521 ;; Hardware stack levels used:    1
  4522 ;; Hardware stack levels required when called:    7
  4523 ;; This function calls:
  4524 ;;		_TMR1_SetInterruptHandler
  4525 ;; This function is called by:
  4526 ;;		_SYSTEM_Initialize
  4527 ;; This function uses a non-reentrant model
  4528 ;;
  4529                           
  4530                           	psect	text18
  4531  001100                     __ptext18:
  4532                           	opt stack 0
  4533  001100                     _TMR1_Initialize:
  4534                           	opt stack 22
  4535                           
  4536                           ;tmr1.c: 69: T1GCON = 0x00;
  4537                           
  4538                           ;incstack = 0
  4539  001100  0E00               	movlw	0
  4540  001102  6ECC               	movwf	4044,c	;volatile
  4541                           
  4542                           ;tmr1.c: 72: TMR1H = 0x63;
  4543  001104  0E63               	movlw	99
  4544  001106  6ECF               	movwf	4047,c	;volatile
  4545                           
  4546                           ;tmr1.c: 75: TMR1L = 0xC0;
  4547  001108  0EC0               	movlw	192
  4548  00110A  6ECE               	movwf	4046,c	;volatile
  4549                           
  4550                           ;tmr1.c: 78: timer1ReloadVal=TMR1;
  4551  00110C  CFCE F049          	movff	4046,_timer1ReloadVal	;volatile
  4552  001110  CFCF F04A          	movff	4047,_timer1ReloadVal+1	;volatile
  4553                           
  4554                           ;tmr1.c: 81: PIR1bits.TMR1IF = 0;
  4555  001114  909E               	bcf	3998,0,c	;volatile
  4556                           
  4557                           ;tmr1.c: 84: PIE1bits.TMR1IE = 1;
  4558  001116  809D               	bsf	3997,0,c	;volatile
  4559                           
  4560                           ;tmr1.c: 87: TMR1_SetInterruptHandler(TMR1_DefaultInterruptHandler);
  4561  001118  0E2A               	movlw	low _TMR1_DefaultInterruptHandler
  4562  00111A  0100               	movlb	0	; () banked
  4563  00111C  6F60               	movwf	TMR1_SetInterruptHandler@InterruptHandler& (0+255),b
  4564  00111E  0E0F               	movlw	high _TMR1_DefaultInterruptHandler
  4565  001120  6F61               	movwf	(TMR1_SetInterruptHandler@InterruptHandler+1)& (0+255),b
  4566  001122  ECD9  F009         	call	_TMR1_SetInterruptHandler	;wreg free
  4567                           
  4568                           ;tmr1.c: 90: T1CON = 0x31;
  4569  001126  0E31               	movlw	49
  4570  001128  6ECD               	movwf	4045,c	;volatile
  4571  00112A  0012               	return		;funcret
  4572  00112C                     __end_of_TMR1_Initialize:
  4573                           	opt stack 0
  4574                           tblptru	equ	0xFF8
  4575                           tblptrh	equ	0xFF7
  4576                           tblptrl	equ	0xFF6
  4577                           tablat	equ	0xFF5
  4578                           prodh	equ	0xFF4
  4579                           prodl	equ	0xFF3
  4580                           intcon	equ	0xFF2
  4581                           postinc0	equ	0xFEE
  4582                           wreg	equ	0xFE8
  4583                           postdec1	equ	0xFE5
  4584                           fsr1l	equ	0xFE1
  4585                           indf2	equ	0xFDF
  4586                           postinc2	equ	0xFDE
  4587                           postdec2	equ	0xFDD
  4588                           fsr2h	equ	0xFDA
  4589                           fsr2l	equ	0xFD9
  4590                           status	equ	0xFD8
  4591                           
  4592 ;; *************** function _TMR1_SetInterruptHandler *****************
  4593 ;; Defined at:
  4594 ;;		line 172 in file "mcc_generated_files/tmr1.c"
  4595 ;; Parameters:    Size  Location     Type
  4596 ;;  InterruptHan    2    0[BANK0 ] PTR FTN()void 
  4597 ;;		 -> TMR1_DefaultInterruptHandler(1), 
  4598 ;; Auto vars:     Size  Location     Type
  4599 ;;		None
  4600 ;; Return value:  Size  Location     Type
  4601 ;;                  1    wreg      void 
  4602 ;; Registers used:
  4603 ;;		wreg, status,2, status,0
  4604 ;; Tracked objects:
  4605 ;;		On entry : 0/0
  4606 ;;		On exit  : 0/0
  4607 ;;		Unchanged: 0/0
  4608 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4609 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4610 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4611 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4612 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4613 ;;Total ram usage:        2 bytes
  4614 ;; Hardware stack levels used:    1
  4615 ;; Hardware stack levels required when called:    6
  4616 ;; This function calls:
  4617 ;;		Nothing
  4618 ;; This function is called by:
  4619 ;;		_TMR1_Initialize
  4620 ;; This function uses a non-reentrant model
  4621 ;;
  4622                           
  4623                           	psect	text19
  4624  0013B2                     __ptext19:
  4625                           	opt stack 0
  4626  0013B2                     _TMR1_SetInterruptHandler:
  4627                           	opt stack 22
  4628                           
  4629                           ;tmr1.c: 173: TMR1_InterruptHandler = InterruptHandler;
  4630                           
  4631                           ;incstack = 0
  4632  0013B2  C060  F047         	movff	TMR1_SetInterruptHandler@InterruptHandler,_TMR1_InterruptHandler
  4633  0013B6  C061  F048         	movff	TMR1_SetInterruptHandler@InterruptHandler+1,_TMR1_InterruptHandler+1
  4634  0013BA  0012               	return		;funcret
  4635  0013BC                     __end_of_TMR1_SetInterruptHandler:
  4636                           	opt stack 0
  4637                           tblptru	equ	0xFF8
  4638                           tblptrh	equ	0xFF7
  4639                           tblptrl	equ	0xFF6
  4640                           tablat	equ	0xFF5
  4641                           prodh	equ	0xFF4
  4642                           prodl	equ	0xFF3
  4643                           intcon	equ	0xFF2
  4644                           postinc0	equ	0xFEE
  4645                           wreg	equ	0xFE8
  4646                           postdec1	equ	0xFE5
  4647                           fsr1l	equ	0xFE1
  4648                           indf2	equ	0xFDF
  4649                           postinc2	equ	0xFDE
  4650                           postdec2	equ	0xFDD
  4651                           fsr2h	equ	0xFDA
  4652                           fsr2l	equ	0xFD9
  4653                           status	equ	0xFD8
  4654                           
  4655 ;; *************** function _TMR0_Initialize *****************
  4656 ;; Defined at:
  4657 ;;		line 67 in file "mcc_generated_files/tmr0.c"
  4658 ;; Parameters:    Size  Location     Type
  4659 ;;		None
  4660 ;; Auto vars:     Size  Location     Type
  4661 ;;		None
  4662 ;; Return value:  Size  Location     Type
  4663 ;;                  1    wreg      void 
  4664 ;; Registers used:
  4665 ;;		wreg, status,2, status,0, cstack
  4666 ;; Tracked objects:
  4667 ;;		On entry : 0/0
  4668 ;;		On exit  : 0/0
  4669 ;;		Unchanged: 0/0
  4670 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4671 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4672 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4673 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4674 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4675 ;;Total ram usage:        2 bytes
  4676 ;; Hardware stack levels used:    1
  4677 ;; Hardware stack levels required when called:    7
  4678 ;; This function calls:
  4679 ;;		_TMR0_SetInterruptHandler
  4680 ;; This function is called by:
  4681 ;;		_SYSTEM_Initialize
  4682 ;; This function uses a non-reentrant model
  4683 ;;
  4684                           
  4685                           	psect	text20
  4686  000F6C                     __ptext20:
  4687                           	opt stack 0
  4688  000F6C                     _TMR0_Initialize:
  4689                           	opt stack 22
  4690                           
  4691                           ;tmr0.c: 72: T0CONbits.T08BIT = 0;
  4692                           
  4693                           ;incstack = 0
  4694  000F6C  9CD5               	bcf	4053,6,c	;volatile
  4695                           
  4696                           ;tmr0.c: 75: TMR0H = 0xFF;
  4697  000F6E  68D7               	setf	4055,c	;volatile
  4698                           
  4699                           ;tmr0.c: 78: TMR0L = 0xFE;
  4700  000F70  0EFE               	movlw	254
  4701  000F72  6ED6               	movwf	4054,c	;volatile
  4702                           
  4703                           ;tmr0.c: 82: timer0ReloadVal = (uint16_t)((TMR0H << 8) | TMR0L);
  4704  000F74  50D6               	movf	4054,w,c	;volatile
  4705  000F76  CFD7 F062          	movff	4055,??_TMR0_Initialize	;volatile
  4706  000F7A  0100               	movlb	0	; () banked
  4707  000F7C  6B63               	clrf	(??_TMR0_Initialize+1)& (0+255),b
  4708  000F7E  C062  F063         	movff	??_TMR0_Initialize,??_TMR0_Initialize+1
  4709  000F82  6B62               	clrf	??_TMR0_Initialize& (0+255),b
  4710  000F84  1162               	iorwf	??_TMR0_Initialize& (0+255),w,b
  4711  000F86  6E4D               	movwf	_timer0ReloadVal,c	;volatile
  4712  000F88  5163               	movf	(??_TMR0_Initialize+1)& (0+255),w,b
  4713  000F8A  6E4E               	movwf	_timer0ReloadVal+1,c	;volatile
  4714                           
  4715                           ; BSR set to: 0
  4716                           ;tmr0.c: 85: INTCONbits.TMR0IF = 0;
  4717  000F8C  94F2               	bcf	intcon,2,c	;volatile
  4718                           
  4719                           ; BSR set to: 0
  4720                           ;tmr0.c: 88: INTCONbits.TMR0IE = 1;
  4721  000F8E  8AF2               	bsf	intcon,5,c	;volatile
  4722                           
  4723                           ; BSR set to: 0
  4724                           ;tmr0.c: 91: TMR0_SetInterruptHandler(TMR0_DefaultInterruptHandler);
  4725  000F90  0E12               	movlw	low _TMR0_DefaultInterruptHandler
  4726  000F92  6F60               	movwf	TMR0_SetInterruptHandler@InterruptHandler& (0+255),b
  4727  000F94  0E0D               	movlw	high _TMR0_DefaultInterruptHandler
  4728  000F96  6F61               	movwf	(TMR0_SetInterruptHandler@InterruptHandler+1)& (0+255),b
  4729  000F98  ECDE  F009         	call	_TMR0_SetInterruptHandler	;wreg free
  4730                           
  4731                           ;tmr0.c: 94: T0CON = 0x92;
  4732  000F9C  0E92               	movlw	146
  4733  000F9E  6ED5               	movwf	4053,c	;volatile
  4734  000FA0  0012               	return		;funcret
  4735  000FA2                     __end_of_TMR0_Initialize:
  4736                           	opt stack 0
  4737                           tblptru	equ	0xFF8
  4738                           tblptrh	equ	0xFF7
  4739                           tblptrl	equ	0xFF6
  4740                           tablat	equ	0xFF5
  4741                           prodh	equ	0xFF4
  4742                           prodl	equ	0xFF3
  4743                           intcon	equ	0xFF2
  4744                           postinc0	equ	0xFEE
  4745                           wreg	equ	0xFE8
  4746                           postdec1	equ	0xFE5
  4747                           fsr1l	equ	0xFE1
  4748                           indf2	equ	0xFDF
  4749                           postinc2	equ	0xFDE
  4750                           postdec2	equ	0xFDD
  4751                           fsr2h	equ	0xFDA
  4752                           fsr2l	equ	0xFD9
  4753                           status	equ	0xFD8
  4754                           
  4755 ;; *************** function _TMR0_SetInterruptHandler *****************
  4756 ;; Defined at:
  4757 ;;		line 156 in file "mcc_generated_files/tmr0.c"
  4758 ;; Parameters:    Size  Location     Type
  4759 ;;  InterruptHan    2    0[BANK0 ] PTR FTN()void 
  4760 ;;		 -> TMR0_DefaultInterruptHandler(1), 
  4761 ;; Auto vars:     Size  Location     Type
  4762 ;;		None
  4763 ;; Return value:  Size  Location     Type
  4764 ;;                  1    wreg      void 
  4765 ;; Registers used:
  4766 ;;		wreg, status,2, status,0
  4767 ;; Tracked objects:
  4768 ;;		On entry : 0/0
  4769 ;;		On exit  : 0/0
  4770 ;;		Unchanged: 0/0
  4771 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4772 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4773 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4774 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4775 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4776 ;;Total ram usage:        2 bytes
  4777 ;; Hardware stack levels used:    1
  4778 ;; Hardware stack levels required when called:    6
  4779 ;; This function calls:
  4780 ;;		Nothing
  4781 ;; This function is called by:
  4782 ;;		_TMR0_Initialize
  4783 ;; This function uses a non-reentrant model
  4784 ;;
  4785                           
  4786                           	psect	text21
  4787  0013BC                     __ptext21:
  4788                           	opt stack 0
  4789  0013BC                     _TMR0_SetInterruptHandler:
  4790                           	opt stack 22
  4791                           
  4792                           ;tmr0.c: 157: TMR0_InterruptHandler = InterruptHandler;
  4793                           
  4794                           ;incstack = 0
  4795  0013BC  C060  F04F         	movff	TMR0_SetInterruptHandler@InterruptHandler,_TMR0_InterruptHandler
  4796  0013C0  C061  F050         	movff	TMR0_SetInterruptHandler@InterruptHandler+1,_TMR0_InterruptHandler+1
  4797  0013C4  0012               	return		;funcret
  4798  0013C6                     __end_of_TMR0_SetInterruptHandler:
  4799                           	opt stack 0
  4800                           tblptru	equ	0xFF8
  4801                           tblptrh	equ	0xFF7
  4802                           tblptrl	equ	0xFF6
  4803                           tablat	equ	0xFF5
  4804                           prodh	equ	0xFF4
  4805                           prodl	equ	0xFF3
  4806                           intcon	equ	0xFF2
  4807                           postinc0	equ	0xFEE
  4808                           wreg	equ	0xFE8
  4809                           postdec1	equ	0xFE5
  4810                           fsr1l	equ	0xFE1
  4811                           indf2	equ	0xFDF
  4812                           postinc2	equ	0xFDE
  4813                           postdec2	equ	0xFDD
  4814                           fsr2h	equ	0xFDA
  4815                           fsr2l	equ	0xFD9
  4816                           status	equ	0xFD8
  4817                           
  4818 ;; *************** function _PIN_MANAGER_Initialize *****************
  4819 ;; Defined at:
  4820 ;;		line 57 in file "mcc_generated_files/pin_manager.c"
  4821 ;; Parameters:    Size  Location     Type
  4822 ;;		None
  4823 ;; Auto vars:     Size  Location     Type
  4824 ;;		None
  4825 ;; Return value:  Size  Location     Type
  4826 ;;                  1    wreg      void 
  4827 ;; Registers used:
  4828 ;;		wreg, status,2
  4829 ;; Tracked objects:
  4830 ;;		On entry : 0/0
  4831 ;;		On exit  : 0/0
  4832 ;;		Unchanged: 0/0
  4833 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4834 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4835 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4836 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4837 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4838 ;;Total ram usage:        0 bytes
  4839 ;; Hardware stack levels used:    1
  4840 ;; Hardware stack levels required when called:    6
  4841 ;; This function calls:
  4842 ;;		Nothing
  4843 ;; This function is called by:
  4844 ;;		_SYSTEM_Initialize
  4845 ;; This function uses a non-reentrant model
  4846 ;;
  4847                           
  4848                           	psect	text22
  4849  0010D2                     __ptext22:
  4850                           	opt stack 0
  4851  0010D2                     _PIN_MANAGER_Initialize:
  4852                           	opt stack 23
  4853                           
  4854                           ;pin_manager.c: 62: LATA = 0x00;
  4855                           
  4856                           ;incstack = 0
  4857  0010D2  0E00               	movlw	0
  4858  0010D4  6E89               	movwf	3977,c	;volatile
  4859                           
  4860                           ;pin_manager.c: 63: LATB = 0x00;
  4861  0010D6  0E00               	movlw	0
  4862  0010D8  6E8A               	movwf	3978,c	;volatile
  4863                           
  4864                           ;pin_manager.c: 64: LATC = 0x00;
  4865  0010DA  0E00               	movlw	0
  4866  0010DC  6E8B               	movwf	3979,c	;volatile
  4867                           
  4868                           ;pin_manager.c: 69: TRISA = 0xF8;
  4869  0010DE  0EF8               	movlw	248
  4870  0010E0  6E92               	movwf	3986,c	;volatile
  4871                           
  4872                           ;pin_manager.c: 70: TRISB = 0xBF;
  4873  0010E2  0EBF               	movlw	191
  4874  0010E4  6E93               	movwf	3987,c	;volatile
  4875                           
  4876                           ;pin_manager.c: 71: TRISC = 0xBF;
  4877  0010E6  0EBF               	movlw	191
  4878  0010E8  6E94               	movwf	3988,c	;volatile
  4879                           
  4880                           ;pin_manager.c: 76: ANSELC = 0x3C;
  4881  0010EA  0E3C               	movlw	60
  4882  0010EC  010F               	movlb	15	; () banked
  4883  0010EE  6F3A               	movwf	58,b	;volatile
  4884                           
  4885                           ;pin_manager.c: 77: ANSELB = 0x3E;
  4886  0010F0  0E3E               	movlw	62
  4887  0010F2  6F39               	movwf	57,b	;volatile
  4888                           
  4889                           ;pin_manager.c: 78: ANSELA = 0x2F;
  4890  0010F4  0E2F               	movlw	47
  4891  0010F6  6F38               	movwf	56,b	;volatile
  4892                           
  4893                           ;pin_manager.c: 83: WPUB = 0x00;
  4894  0010F8  0E00               	movlw	0
  4895  0010FA  6E61               	movwf	3937,c	;volatile
  4896                           
  4897                           ; BSR set to: 15
  4898                           ;pin_manager.c: 84: INTCON2bits.nRBPU = 1;
  4899  0010FC  8EF1               	bsf	intcon2,7,c	;volatile
  4900                           
  4901                           ; BSR set to: 15
  4902  0010FE  0012               	return		;funcret
  4903  001100                     __end_of_PIN_MANAGER_Initialize:
  4904                           	opt stack 0
  4905                           tblptru	equ	0xFF8
  4906                           tblptrh	equ	0xFF7
  4907                           tblptrl	equ	0xFF6
  4908                           tablat	equ	0xFF5
  4909                           prodh	equ	0xFF4
  4910                           prodl	equ	0xFF3
  4911                           intcon	equ	0xFF2
  4912                           intcon2	equ	0xFF1
  4913                           postinc0	equ	0xFEE
  4914                           wreg	equ	0xFE8
  4915                           postdec1	equ	0xFE5
  4916                           fsr1l	equ	0xFE1
  4917                           indf2	equ	0xFDF
  4918                           postinc2	equ	0xFDE
  4919                           postdec2	equ	0xFDD
  4920                           fsr2h	equ	0xFDA
  4921                           fsr2l	equ	0xFD9
  4922                           status	equ	0xFD8
  4923                           
  4924 ;; *************** function _OSCILLATOR_Initialize *****************
  4925 ;; Defined at:
  4926 ;;		line 67 in file "mcc_generated_files/mcc.c"
  4927 ;; Parameters:    Size  Location     Type
  4928 ;;		None
  4929 ;; Auto vars:     Size  Location     Type
  4930 ;;		None
  4931 ;; Return value:  Size  Location     Type
  4932 ;;                  1    wreg      void 
  4933 ;; Registers used:
  4934 ;;		wreg, status,2
  4935 ;; Tracked objects:
  4936 ;;		On entry : 0/0
  4937 ;;		On exit  : 0/0
  4938 ;;		Unchanged: 0/0
  4939 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4940 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4941 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4942 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4943 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4944 ;;Total ram usage:        0 bytes
  4945 ;; Hardware stack levels used:    1
  4946 ;; Hardware stack levels required when called:    6
  4947 ;; This function calls:
  4948 ;;		Nothing
  4949 ;; This function is called by:
  4950 ;;		_SYSTEM_Initialize
  4951 ;; This function uses a non-reentrant model
  4952 ;;
  4953                           
  4954                           	psect	text23
  4955  00131E                     __ptext23:
  4956                           	opt stack 0
  4957  00131E                     _OSCILLATOR_Initialize:
  4958                           	opt stack 23
  4959                           
  4960                           ;mcc.c: 70: OSCCON = 0x70;
  4961                           
  4962                           ; BSR set to: 15
  4963                           ;incstack = 0
  4964  00131E  0E70               	movlw	112
  4965  001320  6ED3               	movwf	4051,c	;volatile
  4966                           
  4967                           ;mcc.c: 72: OSCCON2 = 0x04;
  4968  001322  0E04               	movlw	4
  4969  001324  6ED2               	movwf	4050,c	;volatile
  4970                           
  4971                           ;mcc.c: 74: OSCTUNE = 0x40;
  4972  001326  0E40               	movlw	64
  4973  001328  6E9B               	movwf	3995,c	;volatile
  4974  00132A                     
  4975                           ;mcc.c: 77: {
  4976  00132A  BED2               	btfsc	4050,7,c	;volatile
  4977  00132C  0012               	return	
  4978  00132E  D7FD               	goto	l119
  4979  001330                     __end_of_OSCILLATOR_Initialize:
  4980                           	opt stack 0
  4981                           tblptru	equ	0xFF8
  4982                           tblptrh	equ	0xFF7
  4983                           tblptrl	equ	0xFF6
  4984                           tablat	equ	0xFF5
  4985                           prodh	equ	0xFF4
  4986                           prodl	equ	0xFF3
  4987                           intcon	equ	0xFF2
  4988                           intcon2	equ	0xFF1
  4989                           postinc0	equ	0xFEE
  4990                           wreg	equ	0xFE8
  4991                           postdec1	equ	0xFE5
  4992                           fsr1l	equ	0xFE1
  4993                           indf2	equ	0xFDF
  4994                           postinc2	equ	0xFDE
  4995                           postdec2	equ	0xFDD
  4996                           fsr2h	equ	0xFDA
  4997                           fsr2l	equ	0xFD9
  4998                           status	equ	0xFD8
  4999                           
  5000 ;; *************** function _INTERRUPT_Initialize *****************
  5001 ;; Defined at:
  5002 ;;		line 52 in file "mcc_generated_files/interrupt_manager.c"
  5003 ;; Parameters:    Size  Location     Type
  5004 ;;		None
  5005 ;; Auto vars:     Size  Location     Type
  5006 ;;		None
  5007 ;; Return value:  Size  Location     Type
  5008 ;;                  1    wreg      void 
  5009 ;; Registers used:
  5010 ;;		None
  5011 ;; Tracked objects:
  5012 ;;		On entry : 0/0
  5013 ;;		On exit  : 0/0
  5014 ;;		Unchanged: 0/0
  5015 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5016 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5017 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5018 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5019 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5020 ;;Total ram usage:        0 bytes
  5021 ;; Hardware stack levels used:    1
  5022 ;; Hardware stack levels required when called:    6
  5023 ;; This function calls:
  5024 ;;		Nothing
  5025 ;; This function is called by:
  5026 ;;		_SYSTEM_Initialize
  5027 ;; This function uses a non-reentrant model
  5028 ;;
  5029                           
  5030                           	psect	text24
  5031  0013E2                     __ptext24:
  5032                           	opt stack 0
  5033  0013E2                     _INTERRUPT_Initialize:
  5034                           	opt stack 23
  5035                           
  5036                           ;interrupt_manager.c: 55: RCONbits.IPEN = 0;
  5037                           
  5038                           ;incstack = 0
  5039  0013E2  9ED0               	bcf	4048,7,c	;volatile
  5040  0013E4  0012               	return		;funcret
  5041  0013E6                     __end_of_INTERRUPT_Initialize:
  5042                           	opt stack 0
  5043                           tblptru	equ	0xFF8
  5044                           tblptrh	equ	0xFF7
  5045                           tblptrl	equ	0xFF6
  5046                           tablat	equ	0xFF5
  5047                           prodh	equ	0xFF4
  5048                           prodl	equ	0xFF3
  5049                           intcon	equ	0xFF2
  5050                           intcon2	equ	0xFF1
  5051                           postinc0	equ	0xFEE
  5052                           wreg	equ	0xFE8
  5053                           postdec1	equ	0xFE5
  5054                           fsr1l	equ	0xFE1
  5055                           indf2	equ	0xFDF
  5056                           postinc2	equ	0xFDE
  5057                           postdec2	equ	0xFDD
  5058                           fsr2h	equ	0xFDA
  5059                           fsr2l	equ	0xFD9
  5060                           status	equ	0xFD8
  5061                           
  5062 ;; *************** function _EUSART2_Initialize *****************
  5063 ;; Defined at:
  5064 ;;		line 56 in file "mcc_generated_files/eusart2.c"
  5065 ;; Parameters:    Size  Location     Type
  5066 ;;		None
  5067 ;; Auto vars:     Size  Location     Type
  5068 ;;		None
  5069 ;; Return value:  Size  Location     Type
  5070 ;;                  1    wreg      void 
  5071 ;; Registers used:
  5072 ;;		wreg, status,2
  5073 ;; Tracked objects:
  5074 ;;		On entry : 0/0
  5075 ;;		On exit  : 0/0
  5076 ;;		Unchanged: 0/0
  5077 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5078 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5079 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5080 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5081 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5082 ;;Total ram usage:        0 bytes
  5083 ;; Hardware stack levels used:    1
  5084 ;; Hardware stack levels required when called:    6
  5085 ;; This function calls:
  5086 ;;		Nothing
  5087 ;; This function is called by:
  5088 ;;		_SYSTEM_Initialize
  5089 ;; This function uses a non-reentrant model
  5090 ;;
  5091                           
  5092                           	psect	text25
  5093  0012F2                     __ptext25:
  5094                           	opt stack 0
  5095  0012F2                     _EUSART2_Initialize:
  5096                           	opt stack 23
  5097                           
  5098                           ;eusart2.c: 61: BAUDCON2 = 0x08;
  5099                           
  5100                           ;incstack = 0
  5101  0012F2  0E08               	movlw	8
  5102  0012F4  6E70               	movwf	3952,c	;volatile
  5103                           
  5104                           ;eusart2.c: 64: RCSTA2 = 0x90;
  5105  0012F6  0E90               	movlw	144
  5106  0012F8  6E71               	movwf	3953,c	;volatile
  5107                           
  5108                           ;eusart2.c: 67: TXSTA2 = 0x24;
  5109  0012FA  0E24               	movlw	36
  5110  0012FC  6E72               	movwf	3954,c	;volatile
  5111                           
  5112                           ;eusart2.c: 70: SPBRG2 = 0x8A;
  5113  0012FE  0E8A               	movlw	138
  5114  001300  6E75               	movwf	3957,c	;volatile
  5115                           
  5116                           ;eusart2.c: 73: SPBRGH2 = 0x00;
  5117  001302  0E00               	movlw	0
  5118  001304  6E76               	movwf	3958,c	;volatile
  5119  001306  0012               	return		;funcret
  5120  001308                     __end_of_EUSART2_Initialize:
  5121                           	opt stack 0
  5122                           tblptru	equ	0xFF8
  5123                           tblptrh	equ	0xFF7
  5124                           tblptrl	equ	0xFF6
  5125                           tablat	equ	0xFF5
  5126                           prodh	equ	0xFF4
  5127                           prodl	equ	0xFF3
  5128                           intcon	equ	0xFF2
  5129                           intcon2	equ	0xFF1
  5130                           postinc0	equ	0xFEE
  5131                           wreg	equ	0xFE8
  5132                           postdec1	equ	0xFE5
  5133                           fsr1l	equ	0xFE1
  5134                           indf2	equ	0xFDF
  5135                           postinc2	equ	0xFDE
  5136                           postdec2	equ	0xFDD
  5137                           fsr2h	equ	0xFDA
  5138                           fsr2l	equ	0xFD9
  5139                           status	equ	0xFD8
  5140                           
  5141 ;; *************** function _EUSART1_Initialize *****************
  5142 ;; Defined at:
  5143 ;;		line 56 in file "mcc_generated_files/eusart1.c"
  5144 ;; Parameters:    Size  Location     Type
  5145 ;;		None
  5146 ;; Auto vars:     Size  Location     Type
  5147 ;;		None
  5148 ;; Return value:  Size  Location     Type
  5149 ;;                  1    wreg      void 
  5150 ;; Registers used:
  5151 ;;		wreg, status,2
  5152 ;; Tracked objects:
  5153 ;;		On entry : 0/0
  5154 ;;		On exit  : 0/0
  5155 ;;		Unchanged: 0/0
  5156 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5157 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5158 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5159 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5160 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5161 ;;Total ram usage:        0 bytes
  5162 ;; Hardware stack levels used:    1
  5163 ;; Hardware stack levels required when called:    6
  5164 ;; This function calls:
  5165 ;;		Nothing
  5166 ;; This function is called by:
  5167 ;;		_SYSTEM_Initialize
  5168 ;; This function uses a non-reentrant model
  5169 ;;
  5170                           
  5171                           	psect	text26
  5172  001308                     __ptext26:
  5173                           	opt stack 0
  5174  001308                     _EUSART1_Initialize:
  5175                           	opt stack 23
  5176                           
  5177                           ;eusart1.c: 61: BAUDCON1 = 0x08;
  5178                           
  5179                           ;incstack = 0
  5180  001308  0E08               	movlw	8
  5181  00130A  6EB8               	movwf	4024,c	;volatile
  5182                           
  5183                           ;eusart1.c: 64: RCSTA1 = 0x90;
  5184  00130C  0E90               	movlw	144
  5185  00130E  6EAB               	movwf	4011,c	;volatile
  5186                           
  5187                           ;eusart1.c: 67: TXSTA1 = 0x24;
  5188  001310  0E24               	movlw	36
  5189  001312  6EAC               	movwf	4012,c	;volatile
  5190                           
  5191                           ;eusart1.c: 70: SPBRG1 = 0x8A;
  5192  001314  0E8A               	movlw	138
  5193  001316  6EAF               	movwf	4015,c	;volatile
  5194                           
  5195                           ;eusart1.c: 73: SPBRGH1 = 0x00;
  5196  001318  0E00               	movlw	0
  5197  00131A  6EB0               	movwf	4016,c	;volatile
  5198  00131C  0012               	return		;funcret
  5199  00131E                     __end_of_EUSART1_Initialize:
  5200                           	opt stack 0
  5201                           tblptru	equ	0xFF8
  5202                           tblptrh	equ	0xFF7
  5203                           tblptrl	equ	0xFF6
  5204                           tablat	equ	0xFF5
  5205                           prodh	equ	0xFF4
  5206                           prodl	equ	0xFF3
  5207                           intcon	equ	0xFF2
  5208                           intcon2	equ	0xFF1
  5209                           postinc0	equ	0xFEE
  5210                           wreg	equ	0xFE8
  5211                           postdec1	equ	0xFE5
  5212                           fsr1l	equ	0xFE1
  5213                           indf2	equ	0xFDF
  5214                           postinc2	equ	0xFDE
  5215                           postdec2	equ	0xFDD
  5216                           fsr2h	equ	0xFDA
  5217                           fsr2l	equ	0xFD9
  5218                           status	equ	0xFD8
  5219                           
  5220 ;; *************** function _CCP5_Initialize *****************
  5221 ;; Defined at:
  5222 ;;		line 58 in file "mcc_generated_files/ccp5.c"
  5223 ;; Parameters:    Size  Location     Type
  5224 ;;		None
  5225 ;; Auto vars:     Size  Location     Type
  5226 ;;		None
  5227 ;; Return value:  Size  Location     Type
  5228 ;;                  1    wreg      void 
  5229 ;; Registers used:
  5230 ;;		wreg, status,2
  5231 ;; Tracked objects:
  5232 ;;		On entry : 0/0
  5233 ;;		On exit  : 0/0
  5234 ;;		Unchanged: 0/0
  5235 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5236 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5237 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5238 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5239 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5240 ;;Total ram usage:        0 bytes
  5241 ;; Hardware stack levels used:    1
  5242 ;; Hardware stack levels required when called:    6
  5243 ;; This function calls:
  5244 ;;		Nothing
  5245 ;; This function is called by:
  5246 ;;		_SYSTEM_Initialize
  5247 ;; This function uses a non-reentrant model
  5248 ;;
  5249                           
  5250                           	psect	text27
  5251  00126E                     __ptext27:
  5252                           	opt stack 0
  5253  00126E                     _CCP5_Initialize:
  5254                           	opt stack 23
  5255                           
  5256                           ;ccp5.c: 63: CCP5CON = 0x05;
  5257                           
  5258                           ;incstack = 0
  5259  00126E  0E05               	movlw	5
  5260  001270  010F               	movlb	15	; () banked
  5261  001272  6F54               	movwf	84,b	;volatile
  5262                           
  5263                           ;ccp5.c: 66: CCPR5L = 0x00;
  5264  001274  0E00               	movlw	0
  5265  001276  6F55               	movwf	85,b	;volatile
  5266                           
  5267                           ;ccp5.c: 69: CCPR5H = 0x00;
  5268  001278  0E00               	movlw	0
  5269  00127A  6F56               	movwf	86,b	;volatile
  5270                           
  5271                           ;ccp5.c: 72: CCPTMRS1bits.C5TSEL = 0x1;
  5272  00127C  5148               	movf	72,w,b	;volatile
  5273  00127E  0BF3               	andlw	-13
  5274  001280  0904               	iorlw	4
  5275  001282  6F48               	movwf	72,b	;volatile
  5276                           
  5277                           ; BSR set to: 15
  5278                           ;ccp5.c: 75: PIR4bits.CCP5IF = 0;
  5279  001284  947B               	bcf	3963,2,c	;volatile
  5280                           
  5281                           ; BSR set to: 15
  5282                           ;ccp5.c: 78: PIE4bits.CCP5IE = 1;
  5283  001286  847A               	bsf	3962,2,c	;volatile
  5284                           
  5285                           ; BSR set to: 15
  5286  001288  0012               	return		;funcret
  5287  00128A                     __end_of_CCP5_Initialize:
  5288                           	opt stack 0
  5289                           tblptru	equ	0xFF8
  5290                           tblptrh	equ	0xFF7
  5291                           tblptrl	equ	0xFF6
  5292                           tablat	equ	0xFF5
  5293                           prodh	equ	0xFF4
  5294                           prodl	equ	0xFF3
  5295                           intcon	equ	0xFF2
  5296                           intcon2	equ	0xFF1
  5297                           postinc0	equ	0xFEE
  5298                           wreg	equ	0xFE8
  5299                           postdec1	equ	0xFE5
  5300                           fsr1l	equ	0xFE1
  5301                           indf2	equ	0xFDF
  5302                           postinc2	equ	0xFDE
  5303                           postdec2	equ	0xFDD
  5304                           fsr2h	equ	0xFDA
  5305                           fsr2l	equ	0xFD9
  5306                           status	equ	0xFD8
  5307                           
  5308 ;; *************** function _CCP4_Initialize *****************
  5309 ;; Defined at:
  5310 ;;		line 58 in file "mcc_generated_files/ccp4.c"
  5311 ;; Parameters:    Size  Location     Type
  5312 ;;		None
  5313 ;; Auto vars:     Size  Location     Type
  5314 ;;		None
  5315 ;; Return value:  Size  Location     Type
  5316 ;;                  1    wreg      void 
  5317 ;; Registers used:
  5318 ;;		wreg, status,2
  5319 ;; Tracked objects:
  5320 ;;		On entry : 0/0
  5321 ;;		On exit  : 0/0
  5322 ;;		Unchanged: 0/0
  5323 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5324 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5325 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5326 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5327 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5328 ;;Total ram usage:        0 bytes
  5329 ;; Hardware stack levels used:    1
  5330 ;; Hardware stack levels required when called:    6
  5331 ;; This function calls:
  5332 ;;		Nothing
  5333 ;; This function is called by:
  5334 ;;		_SYSTEM_Initialize
  5335 ;; This function uses a non-reentrant model
  5336 ;;
  5337                           
  5338                           	psect	text28
  5339  00128A                     __ptext28:
  5340                           	opt stack 0
  5341  00128A                     _CCP4_Initialize:
  5342                           	opt stack 23
  5343                           
  5344                           ;ccp4.c: 63: CCP4CON = 0x05;
  5345                           
  5346                           ; BSR set to: 15
  5347                           ;incstack = 0
  5348  00128A  0E05               	movlw	5
  5349  00128C  010F               	movlb	15	; () banked
  5350  00128E  6F57               	movwf	87,b	;volatile
  5351                           
  5352                           ;ccp4.c: 66: CCPR4L = 0x00;
  5353  001290  0E00               	movlw	0
  5354  001292  6F58               	movwf	88,b	;volatile
  5355                           
  5356                           ;ccp4.c: 69: CCPR4H = 0x00;
  5357  001294  0E00               	movlw	0
  5358  001296  6F59               	movwf	89,b	;volatile
  5359                           
  5360                           ;ccp4.c: 72: CCPTMRS1bits.C4TSEL = 0x1;
  5361  001298  5148               	movf	72,w,b	;volatile
  5362  00129A  0BFC               	andlw	-4
  5363  00129C  0901               	iorlw	1
  5364  00129E  6F48               	movwf	72,b	;volatile
  5365                           
  5366                           ; BSR set to: 15
  5367                           ;ccp4.c: 75: PIR4bits.CCP4IF = 0;
  5368  0012A0  927B               	bcf	3963,1,c	;volatile
  5369                           
  5370                           ; BSR set to: 15
  5371                           ;ccp4.c: 78: PIE4bits.CCP4IE = 1;
  5372  0012A2  827A               	bsf	3962,1,c	;volatile
  5373                           
  5374                           ; BSR set to: 15
  5375  0012A4  0012               	return		;funcret
  5376  0012A6                     __end_of_CCP4_Initialize:
  5377                           	opt stack 0
  5378                           tblptru	equ	0xFF8
  5379                           tblptrh	equ	0xFF7
  5380                           tblptrl	equ	0xFF6
  5381                           tablat	equ	0xFF5
  5382                           prodh	equ	0xFF4
  5383                           prodl	equ	0xFF3
  5384                           intcon	equ	0xFF2
  5385                           intcon2	equ	0xFF1
  5386                           postinc0	equ	0xFEE
  5387                           wreg	equ	0xFE8
  5388                           postdec1	equ	0xFE5
  5389                           fsr1l	equ	0xFE1
  5390                           indf2	equ	0xFDF
  5391                           postinc2	equ	0xFDE
  5392                           postdec2	equ	0xFDD
  5393                           fsr2h	equ	0xFDA
  5394                           fsr2l	equ	0xFD9
  5395                           status	equ	0xFD8
  5396                           
  5397 ;; *************** function _EUSART2_is_rx_ready *****************
  5398 ;; Defined at:
  5399 ;;		line 83 in file "mcc_generated_files/eusart2.c"
  5400 ;; Parameters:    Size  Location     Type
  5401 ;;		None
  5402 ;; Auto vars:     Size  Location     Type
  5403 ;;		None
  5404 ;; Return value:  Size  Location     Type
  5405 ;;                  1    wreg      unsigned char 
  5406 ;; Registers used:
  5407 ;;		wreg
  5408 ;; Tracked objects:
  5409 ;;		On entry : 0/0
  5410 ;;		On exit  : 0/0
  5411 ;;		Unchanged: 0/0
  5412 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5413 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5414 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5415 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5416 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5417 ;;Total ram usage:        0 bytes
  5418 ;; Hardware stack levels used:    1
  5419 ;; Hardware stack levels required when called:    6
  5420 ;; This function calls:
  5421 ;;		Nothing
  5422 ;; This function is called by:
  5423 ;;		_main
  5424 ;; This function uses a non-reentrant model
  5425 ;;
  5426                           
  5427                           	psect	text29
  5428  001386                     __ptext29:
  5429                           	opt stack 0
  5430  001386                     _EUSART2_is_rx_ready:
  5431                           	opt stack 24
  5432                           
  5433                           ;eusart2.c: 85: return PIR3bits.RC2IF;
  5434                           
  5435                           ; BSR set to: 15
  5436                           ;incstack = 0
  5437  001386  AAA4               	btfss	4004,5,c	;volatile
  5438  001388  D002               	goto	u1610
  5439  00138A  0E01               	movlw	1
  5440  00138C  0012               	return	
  5441  00138E                     u1610:
  5442  00138E  0E00               	movlw	0
  5443  001390  0012               	return	
  5444  001392                     __end_of_EUSART2_is_rx_ready:
  5445                           	opt stack 0
  5446                           tblptru	equ	0xFF8
  5447                           tblptrh	equ	0xFF7
  5448                           tblptrl	equ	0xFF6
  5449                           tablat	equ	0xFF5
  5450                           prodh	equ	0xFF4
  5451                           prodl	equ	0xFF3
  5452                           intcon	equ	0xFF2
  5453                           intcon2	equ	0xFF1
  5454                           postinc0	equ	0xFEE
  5455                           wreg	equ	0xFE8
  5456                           postdec1	equ	0xFE5
  5457                           fsr1l	equ	0xFE1
  5458                           indf2	equ	0xFDF
  5459                           postinc2	equ	0xFDE
  5460                           postdec2	equ	0xFDD
  5461                           fsr2h	equ	0xFDA
  5462                           fsr2l	equ	0xFD9
  5463                           status	equ	0xFD8
  5464                           
  5465 ;; *************** function _EUSART2_Read *****************
  5466 ;; Defined at:
  5467 ;;		line 93 in file "mcc_generated_files/eusart2.c"
  5468 ;; Parameters:    Size  Location     Type
  5469 ;;		None
  5470 ;; Auto vars:     Size  Location     Type
  5471 ;;		None
  5472 ;; Return value:  Size  Location     Type
  5473 ;;                  1    wreg      unsigned char 
  5474 ;; Registers used:
  5475 ;;		wreg, status,2
  5476 ;; Tracked objects:
  5477 ;;		On entry : 0/0
  5478 ;;		On exit  : 0/0
  5479 ;;		Unchanged: 0/0
  5480 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5481 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5482 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5483 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5484 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5485 ;;Total ram usage:        0 bytes
  5486 ;; Hardware stack levels used:    1
  5487 ;; Hardware stack levels required when called:    6
  5488 ;; This function calls:
  5489 ;;		Nothing
  5490 ;; This function is called by:
  5491 ;;		_main
  5492 ;;		_getch
  5493 ;; This function uses a non-reentrant model
  5494 ;;
  5495                           
  5496                           	psect	text30
  5497  001340                     __ptext30:
  5498                           	opt stack 0
  5499  001340                     _EUSART2_Read:
  5500                           	opt stack 24
  5501                           
  5502                           ;eusart2.c: 96: {
  5503                           
  5504                           ;eusart2.c: 95: while(!PIR3bits.RC2IF)
  5505                           
  5506                           ;incstack = 0
  5507  001340  AAA4               	btfss	4004,5,c	;volatile
  5508  001342  D7FE               	goto	_EUSART2_Read
  5509                           
  5510                           ;eusart2.c: 97: }
  5511                           ;eusart2.c: 100: if(1 == RCSTA2bits.OERR)
  5512  001344  A271               	btfss	3953,1,c	;volatile
  5513  001346  D002               	goto	l161
  5514                           
  5515                           ;eusart2.c: 101: {
  5516                           ;eusart2.c: 104: RCSTA2bits.CREN = 0;
  5517  001348  9871               	bcf	3953,4,c	;volatile
  5518                           
  5519                           ;eusart2.c: 105: RCSTA2bits.CREN = 1;
  5520  00134A  8871               	bsf	3953,4,c	;volatile
  5521  00134C                     l161:
  5522                           
  5523                           ;eusart2.c: 106: }
  5524                           ;eusart2.c: 108: return RCREG2;
  5525  00134C  5074               	movf	3956,w,c	;volatile
  5526  00134E  0012               	return	
  5527  001350                     __end_of_EUSART2_Read:
  5528                           	opt stack 0
  5529                           tblptru	equ	0xFF8
  5530                           tblptrh	equ	0xFF7
  5531                           tblptrl	equ	0xFF6
  5532                           tablat	equ	0xFF5
  5533                           prodh	equ	0xFF4
  5534                           prodl	equ	0xFF3
  5535                           intcon	equ	0xFF2
  5536                           intcon2	equ	0xFF1
  5537                           postinc0	equ	0xFEE
  5538                           wreg	equ	0xFE8
  5539                           postdec1	equ	0xFE5
  5540                           fsr1l	equ	0xFE1
  5541                           indf2	equ	0xFDF
  5542                           postinc2	equ	0xFDE
  5543                           postdec2	equ	0xFDD
  5544                           fsr2h	equ	0xFDA
  5545                           fsr2l	equ	0xFD9
  5546                           status	equ	0xFD8
  5547                           
  5548 ;; *************** function _INTERRUPT_InterruptManager *****************
  5549 ;; Defined at:
  5550 ;;		line 58 in file "mcc_generated_files/interrupt_manager.c"
  5551 ;; Parameters:    Size  Location     Type
  5552 ;;		None
  5553 ;; Auto vars:     Size  Location     Type
  5554 ;;		None
  5555 ;; Return value:  Size  Location     Type
  5556 ;;                  1    wreg      void 
  5557 ;; Registers used:
  5558 ;;		wreg, fsr2l, fsr2h, status,2, status,0, pclath, tosl, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  5559 ;; Tracked objects:
  5560 ;;		On entry : 0/0
  5561 ;;		On exit  : 0/0
  5562 ;;		Unchanged: 0/0
  5563 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5564 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5565 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5566 ;;      Temps:         18       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5567 ;;      Totals:        18       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5568 ;;Total ram usage:       18 bytes
  5569 ;; Hardware stack levels used:    1
  5570 ;; Hardware stack levels required when called:    5
  5571 ;; This function calls:
  5572 ;;		_CCP4_CaptureISR
  5573 ;;		_CCP5_CaptureISR
  5574 ;;		_TMR0_ISR
  5575 ;;		_TMR1_ISR
  5576 ;;		_TMR2_ISR
  5577 ;;		_TMR5_ISR
  5578 ;; This function is called by:
  5579 ;;		Interrupt level 2
  5580 ;; This function uses a non-reentrant model
  5581 ;;
  5582                           
  5583                           	psect	intcode
  5584  000008                     __pintcode:
  5585                           	opt stack 0
  5586  000008                     _INTERRUPT_InterruptManager:
  5587                           	opt stack 22
  5588                           
  5589                           ;incstack = 0
  5590  000008  8257               	bsf	btemp,1,c	;set compiler interrupt flag (level 2)
  5591  00000A  CFFA F02F          	movff	pclath,??_INTERRUPT_InterruptManager
  5592  00000E  CFFB F030          	movff	pclatu,??_INTERRUPT_InterruptManager+1
  5593  000012  CFE9 F031          	movff	fsr0l,??_INTERRUPT_InterruptManager+2
  5594  000016  CFEA F032          	movff	fsr0h,??_INTERRUPT_InterruptManager+3
  5595  00001A  CFE1 F033          	movff	fsr1l,??_INTERRUPT_InterruptManager+4
  5596  00001E  CFE2 F034          	movff	fsr1h,??_INTERRUPT_InterruptManager+5
  5597  000022  CFD9 F035          	movff	fsr2l,??_INTERRUPT_InterruptManager+6
  5598  000026  CFDA F036          	movff	fsr2h,??_INTERRUPT_InterruptManager+7
  5599  00002A  CFF3 F037          	movff	prodl,??_INTERRUPT_InterruptManager+8
  5600  00002E  CFF4 F038          	movff	prodh,??_INTERRUPT_InterruptManager+9
  5601  000032  CFF6 F039          	movff	tblptrl,??_INTERRUPT_InterruptManager+10
  5602  000036  CFF7 F03A          	movff	tblptrh,??_INTERRUPT_InterruptManager+11
  5603  00003A  CFF8 F03B          	movff	tblptru,??_INTERRUPT_InterruptManager+12
  5604  00003E  CFF5 F03C          	movff	tablat,??_INTERRUPT_InterruptManager+13
  5605  000042  C057  F03D         	movff	btemp,??_INTERRUPT_InterruptManager+14
  5606  000046  C058  F03E         	movff	btemp+1,??_INTERRUPT_InterruptManager+15
  5607  00004A  C059  F03F         	movff	btemp+2,??_INTERRUPT_InterruptManager+16
  5608  00004E  C05A  F040         	movff	btemp+3,??_INTERRUPT_InterruptManager+17
  5609                           
  5610                           ;interrupt_manager.c: 61: if(INTCONbits.TMR0IE == 1 && INTCONbits.TMR0IF == 1)
  5611  000052  BAF2               	btfsc	intcon,5,c	;volatile
  5612  000054  A4F2               	btfss	intcon,2,c	;volatile
  5613  000056  D003               	goto	i2l66
  5614                           
  5615                           ;interrupt_manager.c: 62: {
  5616                           ;interrupt_manager.c: 63: TMR0_ISR();
  5617  000058  ECC2  F008         	call	_TMR0_ISR	;wreg free
  5618                           
  5619                           ;interrupt_manager.c: 64: }
  5620  00005C  D01F               	goto	i2l77
  5621  00005E                     i2l66:
  5622                           
  5623                           ;interrupt_manager.c: 65: else if(INTCONbits.PEIE == 1)
  5624  00005E  ACF2               	btfss	intcon,6,c	;volatile
  5625  000060  D01D               	goto	i2l77
  5626                           
  5627                           ;interrupt_manager.c: 66: {
  5628                           ;interrupt_manager.c: 67: if(PIE4bits.CCP5IE == 1 && PIR4bits.CCP5IF == 1)
  5629  000062  B47A               	btfsc	3962,2,c	;volatile
  5630  000064  A47B               	btfss	3963,2,c	;volatile
  5631  000066  D003               	goto	i2l69
  5632                           
  5633                           ;interrupt_manager.c: 68: {
  5634                           ;interrupt_manager.c: 69: CCP5_CaptureISR();
  5635  000068  EC61  F009         	call	_CCP5_CaptureISR	;wreg free
  5636                           
  5637                           ;interrupt_manager.c: 70: }
  5638  00006C  D017               	goto	i2l77
  5639  00006E                     i2l69:
  5640                           
  5641                           ;interrupt_manager.c: 71: else if(PIE5bits.TMR5IE == 1 && PIR5bits.TMR5IF == 1)
  5642  00006E  B27D               	btfsc	3965,1,c	;volatile
  5643  000070  A27E               	btfss	3966,1,c	;volatile
  5644  000072  D003               	goto	i2l71
  5645                           
  5646                           ;interrupt_manager.c: 72: {
  5647                           ;interrupt_manager.c: 73: TMR5_ISR();
  5648  000074  EC96  F008         	call	_TMR5_ISR	;wreg free
  5649                           
  5650                           ;interrupt_manager.c: 74: }
  5651  000078  D011               	goto	i2l77
  5652  00007A                     i2l71:
  5653                           
  5654                           ;interrupt_manager.c: 75: else if(PIE4bits.CCP4IE == 1 && PIR4bits.CCP4IF == 1)
  5655  00007A  B27A               	btfsc	3962,1,c	;volatile
  5656  00007C  A27B               	btfss	3963,1,c	;volatile
  5657  00007E  D003               	goto	i2l73
  5658                           
  5659                           ;interrupt_manager.c: 76: {
  5660                           ;interrupt_manager.c: 77: CCP4_CaptureISR();
  5661  000080  EC6D  F009         	call	_CCP4_CaptureISR	;wreg free
  5662                           
  5663                           ;interrupt_manager.c: 78: }
  5664  000084  D00B               	goto	i2l77
  5665  000086                     i2l73:
  5666                           
  5667                           ;interrupt_manager.c: 79: else if(PIE1bits.TMR2IE == 1 && PIR1bits.TMR2IF == 1)
  5668  000086  B29D               	btfsc	3997,1,c	;volatile
  5669  000088  A29E               	btfss	3998,1,c	;volatile
  5670  00008A  D003               	goto	i2l75
  5671                           
  5672                           ;interrupt_manager.c: 80: {
  5673                           ;interrupt_manager.c: 81: TMR2_ISR();
  5674  00008C  ECFB  F008         	call	_TMR2_ISR	;wreg free
  5675                           
  5676                           ;interrupt_manager.c: 82: }
  5677  000090  D005               	goto	i2l77
  5678  000092                     i2l75:
  5679                           
  5680                           ;interrupt_manager.c: 83: else if(PIE1bits.TMR1IE == 1 && PIR1bits.TMR1IF == 1)
  5681  000092  B09D               	btfsc	3997,0,c	;volatile
  5682  000094  A09E               	btfss	3998,0,c	;volatile
  5683  000096  D002               	goto	i2l77
  5684                           
  5685                           ;interrupt_manager.c: 84: {
  5686                           ;interrupt_manager.c: 85: TMR1_ISR();
  5687  000098  ECAC  F008         	call	_TMR1_ISR	;wreg free
  5688  00009C                     i2l77:
  5689                           
  5690                           ;interrupt_manager.c: 92: else
  5691                           ;interrupt_manager.c: 93: {
  5692                           
  5693                           ;interrupt_manager.c: 90: }
  5694                           ;interrupt_manager.c: 91: }
  5695                           
  5696                           ;interrupt_manager.c: 87: else
  5697                           ;interrupt_manager.c: 88: {
  5698  00009C  C040  F05A         	movff	??_INTERRUPT_InterruptManager+17,btemp+3
  5699  0000A0  C03F  F059         	movff	??_INTERRUPT_InterruptManager+16,btemp+2
  5700  0000A4  C03E  F058         	movff	??_INTERRUPT_InterruptManager+15,btemp+1
  5701  0000A8  C03D  F057         	movff	??_INTERRUPT_InterruptManager+14,btemp
  5702  0000AC  C03C  FFF5         	movff	??_INTERRUPT_InterruptManager+13,tablat
  5703  0000B0  C03B  FFF8         	movff	??_INTERRUPT_InterruptManager+12,tblptru
  5704  0000B4  C03A  FFF7         	movff	??_INTERRUPT_InterruptManager+11,tblptrh
  5705  0000B8  C039  FFF6         	movff	??_INTERRUPT_InterruptManager+10,tblptrl
  5706  0000BC  C038  FFF4         	movff	??_INTERRUPT_InterruptManager+9,prodh
  5707  0000C0  C037  FFF3         	movff	??_INTERRUPT_InterruptManager+8,prodl
  5708  0000C4  C036  FFDA         	movff	??_INTERRUPT_InterruptManager+7,fsr2h
  5709  0000C8  C035  FFD9         	movff	??_INTERRUPT_InterruptManager+6,fsr2l
  5710  0000CC  C034  FFE2         	movff	??_INTERRUPT_InterruptManager+5,fsr1h
  5711  0000D0  C033  FFE1         	movff	??_INTERRUPT_InterruptManager+4,fsr1l
  5712  0000D4  C032  FFEA         	movff	??_INTERRUPT_InterruptManager+3,fsr0h
  5713  0000D8  C031  FFE9         	movff	??_INTERRUPT_InterruptManager+2,fsr0l
  5714  0000DC  C030  FFFB         	movff	??_INTERRUPT_InterruptManager+1,pclatu
  5715  0000E0  C02F  FFFA         	movff	??_INTERRUPT_InterruptManager,pclath
  5716  0000E4  9257               	bcf	btemp,1,c	;clear compiler interrupt flag (level 2)
  5717  0000E6  0011               	retfie		f
  5718  0000E8                     __end_of_INTERRUPT_InterruptManager:
  5719                           	opt stack 0
  5720                           pclatu	equ	0xFFB
  5721                           pclath	equ	0xFFA
  5722                           tblptru	equ	0xFF8
  5723                           tblptrh	equ	0xFF7
  5724                           tblptrl	equ	0xFF6
  5725                           tablat	equ	0xFF5
  5726                           prodh	equ	0xFF4
  5727                           prodl	equ	0xFF3
  5728                           intcon	equ	0xFF2
  5729                           intcon2	equ	0xFF1
  5730                           postinc0	equ	0xFEE
  5731                           fsr0h	equ	0xFEA
  5732                           fsr0l	equ	0xFE9
  5733                           wreg	equ	0xFE8
  5734                           postdec1	equ	0xFE5
  5735                           fsr1h	equ	0xFE2
  5736                           fsr1l	equ	0xFE1
  5737                           indf2	equ	0xFDF
  5738                           postinc2	equ	0xFDE
  5739                           postdec2	equ	0xFDD
  5740                           fsr2h	equ	0xFDA
  5741                           fsr2l	equ	0xFD9
  5742                           status	equ	0xFD8
  5743                           
  5744 ;; *************** function _TMR5_ISR *****************
  5745 ;; Defined at:
  5746 ;;		line 158 in file "mcc_generated_files/tmr5.c"
  5747 ;; Parameters:    Size  Location     Type
  5748 ;;		None
  5749 ;; Auto vars:     Size  Location     Type
  5750 ;;		None
  5751 ;; Return value:  Size  Location     Type
  5752 ;;                  1    wreg      void 
  5753 ;; Registers used:
  5754 ;;		wreg, status,2, status,0, pclath, tosl, cstack
  5755 ;; Tracked objects:
  5756 ;;		On entry : 0/0
  5757 ;;		On exit  : 0/0
  5758 ;;		Unchanged: 0/0
  5759 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5760 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5761 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5762 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5763 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5764 ;;Total ram usage:        0 bytes
  5765 ;; Hardware stack levels used:    1
  5766 ;; Hardware stack levels required when called:    2
  5767 ;; This function calls:
  5768 ;;		Absolute function
  5769 ;;		_TMR5_DefaultInterruptHandler
  5770 ;;		_TMR5_WriteTimer
  5771 ;; This function is called by:
  5772 ;;		_INTERRUPT_InterruptManager
  5773 ;; This function uses a non-reentrant model
  5774 ;;
  5775                           
  5776                           	psect	text32
  5777  00112C                     __ptext32:
  5778                           	opt stack 0
  5779  00112C                     _TMR5_ISR:
  5780                           	opt stack 24
  5781                           
  5782                           ;tmr5.c: 162: PIR5bits.TMR5IF = 0;
  5783                           
  5784                           ;incstack = 0
  5785  00112C  927E               	bcf	3966,1,c	;volatile
  5786                           
  5787                           ;tmr5.c: 163: TMR5_WriteTimer(timer5ReloadVal);
  5788  00112E  C045  F001         	movff	_timer5ReloadVal,TMR5_WriteTimer@timerVal	;volatile
  5789  001132  C046  F002         	movff	_timer5ReloadVal+1,TMR5_WriteTimer@timerVal+1	;volatile
  5790  001136  EC1A  F009         	call	_TMR5_WriteTimer	;wreg free
  5791                           
  5792                           ;tmr5.c: 165: if(TMR5_InterruptHandler)
  5793  00113A  5043               	movf	_TMR5_InterruptHandler,w,c
  5794  00113C  1044               	iorwf	_TMR5_InterruptHandler+1,w,c
  5795  00113E  B4D8               	btfsc	status,2,c
  5796  001140  0012               	return	
  5797                           
  5798                           ;tmr5.c: 166: {
  5799                           ;tmr5.c: 167: TMR5_InterruptHandler();
  5800  001142  D801               	call	i2u156_48
  5801  001144  0012               	return	
  5802  001146                     i2u156_48:
  5803  001146  0005               	push	
  5804  001148  6EFA               	movwf	pclath,c
  5805  00114A  5043               	movf	_TMR5_InterruptHandler,w,c
  5806  00114C  6EFD               	movwf	tosl,c
  5807  00114E  5044               	movf	_TMR5_InterruptHandler+1,w,c
  5808  001150  6EFE               	movwf	tosh,c
  5809  001152  6AFF               	clrf	tosu,c
  5810  001154  50FA               	movf	pclath,w,c
  5811  001156  0012               	return		;indir
  5812  001158                     __end_of_TMR5_ISR:
  5813                           	opt stack 0
  5814                           tosu	equ	0xFFF
  5815                           tosh	equ	0xFFE
  5816                           tosl	equ	0xFFD
  5817                           pclatu	equ	0xFFB
  5818                           pclath	equ	0xFFA
  5819                           tblptru	equ	0xFF8
  5820                           tblptrh	equ	0xFF7
  5821                           tblptrl	equ	0xFF6
  5822                           tablat	equ	0xFF5
  5823                           prodh	equ	0xFF4
  5824                           prodl	equ	0xFF3
  5825                           intcon	equ	0xFF2
  5826                           intcon2	equ	0xFF1
  5827                           postinc0	equ	0xFEE
  5828                           fsr0h	equ	0xFEA
  5829                           fsr0l	equ	0xFE9
  5830                           wreg	equ	0xFE8
  5831                           postdec1	equ	0xFE5
  5832                           fsr1h	equ	0xFE2
  5833                           fsr1l	equ	0xFE1
  5834                           indf2	equ	0xFDF
  5835                           postinc2	equ	0xFDE
  5836                           postdec2	equ	0xFDD
  5837                           fsr2h	equ	0xFDA
  5838                           fsr2l	equ	0xFD9
  5839                           status	equ	0xFD8
  5840                           
  5841 ;; *************** function _TMR5_DefaultInterruptHandler *****************
  5842 ;; Defined at:
  5843 ;;		line 330 in file "main.c"
  5844 ;; Parameters:    Size  Location     Type
  5845 ;;		None
  5846 ;; Auto vars:     Size  Location     Type
  5847 ;;		None
  5848 ;; Return value:  Size  Location     Type
  5849 ;;                  1    wreg      void 
  5850 ;; Registers used:
  5851 ;;		wreg, status,2, status,0, cstack
  5852 ;; Tracked objects:
  5853 ;;		On entry : 0/0
  5854 ;;		On exit  : 0/0
  5855 ;;		Unchanged: 0/0
  5856 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5857 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5858 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5859 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5860 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5861 ;;Total ram usage:        2 bytes
  5862 ;; Hardware stack levels used:    1
  5863 ;; Hardware stack levels required when called:    1
  5864 ;; This function calls:
  5865 ;;		_TMR5_WriteTimer
  5866 ;; This function is called by:
  5867 ;;		_TMR5_Initialize
  5868 ;;		_TMR5_ISR
  5869 ;; This function uses a non-reentrant model
  5870 ;;
  5871                           
  5872                           	psect	text33
  5873  000EE8                     __ptext33:
  5874                           	opt stack 0
  5875  000EE8                     _TMR5_DefaultInterruptHandler:
  5876                           	opt stack 24
  5877                           
  5878                           ;main.c: 331: static uint8_t pulseHigh = 0;
  5879                           ;main.c: 332: if(!pulseHigh){
  5880                           
  5881                           ;incstack = 0
  5882  000EE8  5051               	movf	TMR5_DefaultInterruptHandler@pulseHigh,w,c
  5883  000EEA  A4D8               	btfss	status,2,c
  5884  000EEC  D013               	goto	i2l687
  5885                           
  5886                           ;main.c: 333: do { LATAbits.LATA2 = 1; } while(0);
  5887  000EEE  8489               	bsf	3977,2,c	;volatile
  5888                           
  5889                           ;main.c: 334: TMR5_WriteTimer(0xFFFF - motorSpeed );
  5890  000EF0  C09E  F003         	movff	_motorSpeed,??_TMR5_DefaultInterruptHandler
  5891  000EF4  C09F  F004         	movff	_motorSpeed+1,??_TMR5_DefaultInterruptHandler+1
  5892  000EF8  1E03               	comf	??_TMR5_DefaultInterruptHandler,f,c
  5893  000EFA  1E04               	comf	??_TMR5_DefaultInterruptHandler+1,f,c
  5894  000EFC  4A03               	infsnz	??_TMR5_DefaultInterruptHandler,f,c
  5895  000EFE  2A04               	incf	??_TMR5_DefaultInterruptHandler+1,f,c
  5896  000F00  0EFF               	movlw	255
  5897  000F02  2403               	addwf	??_TMR5_DefaultInterruptHandler,w,c
  5898  000F04  6E01               	movwf	TMR5_WriteTimer@timerVal,c
  5899  000F06  0EFF               	movlw	255
  5900  000F08  2004               	addwfc	??_TMR5_DefaultInterruptHandler+1,w,c
  5901  000F0A  6E02               	movwf	TMR5_WriteTimer@timerVal+1,c
  5902  000F0C  EC1A  F009         	call	_TMR5_WriteTimer	;wreg free
  5903                           
  5904                           ;main.c: 335: pulseHigh = 1;
  5905  000F10  0E01               	movlw	1
  5906  000F12  D008               	goto	L6
  5907  000F14                     i2l687:
  5908                           
  5909                           ;main.c: 337: else{
  5910                           ;main.c: 338: do { LATAbits.LATA2 = 0; } while(0);
  5911  000F14  9489               	bcf	3977,2,c	;volatile
  5912                           
  5913                           ;main.c: 339: TMR5_WriteTimer(0xFFFF - 40000 );
  5914  000F16  0E63               	movlw	99
  5915  000F18  6E02               	movwf	TMR5_WriteTimer@timerVal+1,c
  5916  000F1A  0EBF               	movlw	191
  5917  000F1C  6E01               	movwf	TMR5_WriteTimer@timerVal,c
  5918  000F1E  EC1A  F009         	call	_TMR5_WriteTimer	;wreg free
  5919                           
  5920                           ;main.c: 340: pulseHigh = 0;
  5921  000F22  0E00               	movlw	0
  5922  000F24                     L6:
  5923  000F24  6E51               	movwf	TMR5_DefaultInterruptHandler@pulseHigh,c
  5924                           
  5925                           ;main.c: 341: }
  5926                           ;main.c: 344: PIR5bits.TMR5IF = 0;
  5927  000F26  927E               	bcf	3966,1,c	;volatile
  5928  000F28  0012               	return		;funcret
  5929  000F2A                     __end_of_TMR5_DefaultInterruptHandler:
  5930                           	opt stack 0
  5931                           tosu	equ	0xFFF
  5932                           tosh	equ	0xFFE
  5933                           tosl	equ	0xFFD
  5934                           pclatu	equ	0xFFB
  5935                           pclath	equ	0xFFA
  5936                           tblptru	equ	0xFF8
  5937                           tblptrh	equ	0xFF7
  5938                           tblptrl	equ	0xFF6
  5939                           tablat	equ	0xFF5
  5940                           prodh	equ	0xFF4
  5941                           prodl	equ	0xFF3
  5942                           intcon	equ	0xFF2
  5943                           intcon2	equ	0xFF1
  5944                           postinc0	equ	0xFEE
  5945                           fsr0h	equ	0xFEA
  5946                           fsr0l	equ	0xFE9
  5947                           wreg	equ	0xFE8
  5948                           postdec1	equ	0xFE5
  5949                           fsr1h	equ	0xFE2
  5950                           fsr1l	equ	0xFE1
  5951                           indf2	equ	0xFDF
  5952                           postinc2	equ	0xFDE
  5953                           postdec2	equ	0xFDD
  5954                           fsr2h	equ	0xFDA
  5955                           fsr2l	equ	0xFD9
  5956                           status	equ	0xFD8
  5957                           
  5958 ;; *************** function _TMR5_WriteTimer *****************
  5959 ;; Defined at:
  5960 ;;		line 121 in file "mcc_generated_files/tmr5.c"
  5961 ;; Parameters:    Size  Location     Type
  5962 ;;  timerVal        2    0[COMRAM] unsigned int 
  5963 ;; Auto vars:     Size  Location     Type
  5964 ;;		None
  5965 ;; Return value:  Size  Location     Type
  5966 ;;                  1    wreg      void 
  5967 ;; Registers used:
  5968 ;;		wreg, status,2
  5969 ;; Tracked objects:
  5970 ;;		On entry : 0/0
  5971 ;;		On exit  : 0/0
  5972 ;;		Unchanged: 0/0
  5973 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5974 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5975 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5976 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5977 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5978 ;;Total ram usage:        2 bytes
  5979 ;; Hardware stack levels used:    1
  5980 ;; This function calls:
  5981 ;;		Nothing
  5982 ;; This function is called by:
  5983 ;;		_TMR5_ISR
  5984 ;;		_TMR5_DefaultInterruptHandler
  5985 ;;		_TMR5_Reload
  5986 ;; This function uses a non-reentrant model
  5987 ;;
  5988                           
  5989                           	psect	text34
  5990  001234                     __ptext34:
  5991                           	opt stack 0
  5992  001234                     _TMR5_WriteTimer:
  5993                           	opt stack 25
  5994                           
  5995                           ;tmr5.c: 123: if (T5CONbits.T5SYNC == 1)
  5996                           
  5997                           ;incstack = 0
  5998  001234  010F               	movlb	15	; () banked
  5999  001236  A54E               	btfss	78,2,b	;volatile
  6000  001238  D007               	goto	i2l451
  6001                           
  6002                           ; BSR set to: 15
  6003                           ;tmr5.c: 124: {
  6004                           ;tmr5.c: 126: T5CONbits.TMR5ON = 0;
  6005  00123A  914E               	bcf	78,0,b	;volatile
  6006                           
  6007                           ; BSR set to: 15
  6008                           ;tmr5.c: 129: TMR5H = (timerVal >> 8);
  6009  00123C  5002               	movf	TMR5_WriteTimer@timerVal+1,w,c
  6010  00123E  6F50               	movwf	80,b	;volatile
  6011                           
  6012                           ; BSR set to: 15
  6013                           ;tmr5.c: 130: TMR5L = (uint8_t) timerVal;
  6014  001240  C001  FF4F         	movff	TMR5_WriteTimer@timerVal,3919	;volatile
  6015                           
  6016                           ; BSR set to: 15
  6017                           ;tmr5.c: 133: T5CONbits.TMR5ON =1;
  6018  001244  814E               	bsf	78,0,b	;volatile
  6019                           
  6020                           ;tmr5.c: 134: }
  6021  001246  0012               	return	
  6022  001248                     i2l451:
  6023                           
  6024                           ; BSR set to: 15
  6025                           ;tmr5.c: 135: else
  6026                           ;tmr5.c: 136: {
  6027                           ;tmr5.c: 138: TMR5H = (timerVal >> 8);
  6028                           
  6029                           ; BSR set to: 15
  6030  001248  5002               	movf	TMR5_WriteTimer@timerVal+1,w,c
  6031  00124A  6F50               	movwf	80,b	;volatile
  6032                           
  6033                           ; BSR set to: 15
  6034                           ;tmr5.c: 139: TMR5L = (uint8_t) timerVal;
  6035  00124C  C001  FF4F         	movff	TMR5_WriteTimer@timerVal,3919	;volatile
  6036  001250  0012               	return	
  6037  001252                     __end_of_TMR5_WriteTimer:
  6038                           	opt stack 0
  6039                           tosu	equ	0xFFF
  6040                           tosh	equ	0xFFE
  6041                           tosl	equ	0xFFD
  6042                           pclatu	equ	0xFFB
  6043                           pclath	equ	0xFFA
  6044                           tblptru	equ	0xFF8
  6045                           tblptrh	equ	0xFF7
  6046                           tblptrl	equ	0xFF6
  6047                           tablat	equ	0xFF5
  6048                           prodh	equ	0xFF4
  6049                           prodl	equ	0xFF3
  6050                           intcon	equ	0xFF2
  6051                           intcon2	equ	0xFF1
  6052                           postinc0	equ	0xFEE
  6053                           fsr0h	equ	0xFEA
  6054                           fsr0l	equ	0xFE9
  6055                           wreg	equ	0xFE8
  6056                           postdec1	equ	0xFE5
  6057                           fsr1h	equ	0xFE2
  6058                           fsr1l	equ	0xFE1
  6059                           indf2	equ	0xFDF
  6060                           postinc2	equ	0xFDE
  6061                           postdec2	equ	0xFDD
  6062                           fsr2h	equ	0xFDA
  6063                           fsr2l	equ	0xFD9
  6064                           status	equ	0xFD8
  6065                           
  6066 ;; *************** function _TMR2_ISR *****************
  6067 ;; Defined at:
  6068 ;;		line 119 in file "mcc_generated_files/tmr2.c"
  6069 ;; Parameters:    Size  Location     Type
  6070 ;;		None
  6071 ;; Auto vars:     Size  Location     Type
  6072 ;;		None
  6073 ;; Return value:  Size  Location     Type
  6074 ;;                  1    wreg      void 
  6075 ;; Registers used:
  6076 ;;		wreg, status,2, status,0, pclath, tosl, cstack
  6077 ;; Tracked objects:
  6078 ;;		On entry : 0/0
  6079 ;;		On exit  : 0/0
  6080 ;;		Unchanged: 0/0
  6081 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6082 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6083 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6084 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6085 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6086 ;;Total ram usage:        0 bytes
  6087 ;; Hardware stack levels used:    1
  6088 ;; Hardware stack levels required when called:    2
  6089 ;; This function calls:
  6090 ;;		Absolute function
  6091 ;;		_TMR2_DefaultInterruptHandler
  6092 ;; This function is called by:
  6093 ;;		_INTERRUPT_InterruptManager
  6094 ;; This function uses a non-reentrant model
  6095 ;;
  6096                           
  6097                           	psect	text35
  6098  0011F6                     __ptext35:
  6099                           	opt stack 0
  6100  0011F6                     _TMR2_ISR:
  6101                           	opt stack 24
  6102                           
  6103                           ;tmr2.c: 123: PIR1bits.TMR2IF = 0;
  6104                           
  6105                           ; BSR set to: 15
  6106                           ;incstack = 0
  6107  0011F6  929E               	bcf	3998,1,c	;volatile
  6108                           
  6109                           ;tmr2.c: 125: if(TMR2_InterruptHandler)
  6110  0011F8  5041               	movf	_TMR2_InterruptHandler,w,c
  6111  0011FA  1042               	iorwf	_TMR2_InterruptHandler+1,w,c
  6112  0011FC  B4D8               	btfsc	status,2,c
  6113  0011FE  0012               	return	
  6114                           
  6115                           ;tmr2.c: 126: {
  6116                           ;tmr2.c: 127: TMR2_InterruptHandler();
  6117  001200  D801               	call	i2u158_48
  6118  001202  0012               	return	
  6119  001204                     i2u158_48:
  6120  001204  0005               	push	
  6121  001206  6EFA               	movwf	pclath,c
  6122  001208  5041               	movf	_TMR2_InterruptHandler,w,c
  6123  00120A  6EFD               	movwf	tosl,c
  6124  00120C  5042               	movf	_TMR2_InterruptHandler+1,w,c
  6125  00120E  6EFE               	movwf	tosh,c
  6126  001210  6AFF               	clrf	tosu,c
  6127  001212  50FA               	movf	pclath,w,c
  6128  001214  0012               	return		;indir
  6129  001216                     __end_of_TMR2_ISR:
  6130                           	opt stack 0
  6131                           tosu	equ	0xFFF
  6132                           tosh	equ	0xFFE
  6133                           tosl	equ	0xFFD
  6134                           pclatu	equ	0xFFB
  6135                           pclath	equ	0xFFA
  6136                           tblptru	equ	0xFF8
  6137                           tblptrh	equ	0xFF7
  6138                           tblptrl	equ	0xFF6
  6139                           tablat	equ	0xFF5
  6140                           prodh	equ	0xFF4
  6141                           prodl	equ	0xFF3
  6142                           intcon	equ	0xFF2
  6143                           intcon2	equ	0xFF1
  6144                           postinc0	equ	0xFEE
  6145                           fsr0h	equ	0xFEA
  6146                           fsr0l	equ	0xFE9
  6147                           wreg	equ	0xFE8
  6148                           postdec1	equ	0xFE5
  6149                           fsr1h	equ	0xFE2
  6150                           fsr1l	equ	0xFE1
  6151                           indf2	equ	0xFDF
  6152                           postinc2	equ	0xFDE
  6153                           postdec2	equ	0xFDD
  6154                           fsr2h	equ	0xFDA
  6155                           fsr2l	equ	0xFD9
  6156                           status	equ	0xFD8
  6157                           
  6158 ;; *************** function _TMR2_DefaultInterruptHandler *****************
  6159 ;; Defined at:
  6160 ;;		line 301 in file "main.c"
  6161 ;; Parameters:    Size  Location     Type
  6162 ;;		None
  6163 ;; Auto vars:     Size  Location     Type
  6164 ;;  error           4    6[COMRAM] long 
  6165 ;; Return value:  Size  Location     Type
  6166 ;;                  1    wreg      void 
  6167 ;; Registers used:
  6168 ;;		wreg, status,2, status,0, cstack
  6169 ;; Tracked objects:
  6170 ;;		On entry : 0/0
  6171 ;;		On exit  : 0/0
  6172 ;;		Unchanged: 0/0
  6173 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6174 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6175 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6176 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6177 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6178 ;;Total ram usage:        8 bytes
  6179 ;; Hardware stack levels used:    1
  6180 ;; Hardware stack levels required when called:    1
  6181 ;; This function calls:
  6182 ;;		_TMR2_WriteTimer
  6183 ;;		i2_setMotorSpeed
  6184 ;; This function is called by:
  6185 ;;		_TMR2_Initialize
  6186 ;;		_TMR2_ISR
  6187 ;; This function uses a non-reentrant model
  6188 ;;
  6189                           
  6190                           	psect	text36
  6191  000AAC                     __ptext36:
  6192                           	opt stack 0
  6193  000AAC                     _TMR2_DefaultInterruptHandler:
  6194                           	opt stack 24
  6195                           
  6196                           ;main.c: 302: if(motorControlMode == 1){
  6197                           
  6198                           ;incstack = 0
  6199  000AAC  0456               	decf	_motorControlMode,w,c
  6200  000AAE  A4D8               	btfss	status,2,c
  6201  000AB0  D072               	goto	i2l679
  6202                           
  6203                           ;main.c: 303: int32_t error = (encoderPosition - motorSetPoint);
  6204  000AB2  C0AC  F003         	movff	_motorSetPoint,??_TMR2_DefaultInterruptHandler
  6205  000AB6  C0AD  F004         	movff	_motorSetPoint+1,??_TMR2_DefaultInterruptHandler+1
  6206  000ABA  C0AE  F005         	movff	_motorSetPoint+2,??_TMR2_DefaultInterruptHandler+2
  6207  000ABE  C0AF  F006         	movff	_motorSetPoint+3,??_TMR2_DefaultInterruptHandler+3
  6208  000AC2  1E03               	comf	??_TMR2_DefaultInterruptHandler,f,c
  6209  000AC4  1E04               	comf	??_TMR2_DefaultInterruptHandler+1,f,c
  6210  000AC6  1E05               	comf	??_TMR2_DefaultInterruptHandler+2,f,c
  6211  000AC8  1E06               	comf	??_TMR2_DefaultInterruptHandler+3,f,c
  6212  000ACA  2A03               	incf	??_TMR2_DefaultInterruptHandler,f,c
  6213  000ACC  0E00               	movlw	0
  6214  000ACE  2204               	addwfc	??_TMR2_DefaultInterruptHandler+1,f,c
  6215  000AD0  2205               	addwfc	??_TMR2_DefaultInterruptHandler+2,f,c
  6216  000AD2  2206               	addwfc	??_TMR2_DefaultInterruptHandler+3,f,c
  6217  000AD4  0100               	movlb	0	; () banked
  6218  000AD6  51A8               	movf	_encoderPosition& (0+255),w,b
  6219  000AD8  2403               	addwf	??_TMR2_DefaultInterruptHandler,w,c
  6220  000ADA  6E07               	movwf	TMR2_DefaultInterruptHandler@error,c
  6221  000ADC  51A9               	movf	(_encoderPosition+1)& (0+255),w,b
  6222  000ADE  2004               	addwfc	??_TMR2_DefaultInterruptHandler+1,w,c
  6223  000AE0  6E08               	movwf	TMR2_DefaultInterruptHandler@error+1,c
  6224  000AE2  51AA               	movf	(_encoderPosition+2)& (0+255),w,b
  6225  000AE4  2005               	addwfc	??_TMR2_DefaultInterruptHandler+2,w,c
  6226  000AE6  6E09               	movwf	TMR2_DefaultInterruptHandler@error+2,c
  6227  000AE8  51AB               	movf	(_encoderPosition+3)& (0+255),w,b
  6228  000AEA  2006               	addwfc	??_TMR2_DefaultInterruptHandler+3,w,c
  6229  000AEC  6E0A               	movwf	TMR2_DefaultInterruptHandler@error+3,c
  6230                           
  6231                           ;main.c: 304: if(error > 500){
  6232  000AEE  BE0A               	btfsc	TMR2_DefaultInterruptHandler@error+3,7,c
  6233  000AF0  D011               	goto	i2l674
  6234  000AF2  500A               	movf	TMR2_DefaultInterruptHandler@error+3,w,c
  6235  000AF4  1009               	iorwf	TMR2_DefaultInterruptHandler@error+2,w,c
  6236  000AF6  E106               	bnz	i2u138_40
  6237  000AF8  0EF5               	movlw	245
  6238  000AFA  5C07               	subwf	TMR2_DefaultInterruptHandler@error,w,c
  6239  000AFC  0E01               	movlw	1
  6240  000AFE  5808               	subwfb	TMR2_DefaultInterruptHandler@error+1,w,c
  6241  000B00  A0D8               	btfss	status,0,c
  6242  000B02  D008               	goto	i2l674
  6243  000B04                     i2u138_40:
  6244                           
  6245                           ; BSR set to: 0
  6246                           ;main.c: 305: error = 500;
  6247  000B04  0EF4               	movlw	244
  6248  000B06  6E07               	movwf	TMR2_DefaultInterruptHandler@error,c
  6249  000B08  0E01               	movlw	1
  6250  000B0A  6E08               	movwf	TMR2_DefaultInterruptHandler@error+1,c
  6251  000B0C  0E00               	movlw	0
  6252  000B0E  6E09               	movwf	TMR2_DefaultInterruptHandler@error+2,c
  6253  000B10  0E00               	movlw	0
  6254  000B12  6E0A               	movwf	TMR2_DefaultInterruptHandler@error+3,c
  6255  000B14                     i2l674:
  6256                           
  6257                           ; BSR set to: 0
  6258                           ;main.c: 306: }
  6259                           ;main.c: 307: if(error < -500){
  6260                           
  6261                           ; BSR set to: 0
  6262  000B14  AE0A               	btfss	TMR2_DefaultInterruptHandler@error+3,7,c
  6263  000B16  D012               	goto	i2l675
  6264  000B18  0E0C               	movlw	12
  6265  000B1A  5C07               	subwf	TMR2_DefaultInterruptHandler@error,w,c
  6266  000B1C  0EFE               	movlw	254
  6267  000B1E  5808               	subwfb	TMR2_DefaultInterruptHandler@error+1,w,c
  6268  000B20  0EFF               	movlw	255
  6269  000B22  5809               	subwfb	TMR2_DefaultInterruptHandler@error+2,w,c
  6270  000B24  0EFF               	movlw	255
  6271  000B26  580A               	subwfb	TMR2_DefaultInterruptHandler@error+3,w,c
  6272  000B28  B0D8               	btfsc	status,0,c
  6273  000B2A  D008               	goto	i2l675
  6274                           
  6275                           ; BSR set to: 0
  6276                           ;main.c: 308: error = -500;
  6277  000B2C  0E0C               	movlw	12
  6278  000B2E  6E07               	movwf	TMR2_DefaultInterruptHandler@error,c
  6279  000B30  0EFE               	movlw	254
  6280  000B32  6E08               	movwf	TMR2_DefaultInterruptHandler@error+1,c
  6281  000B34  0EFF               	movlw	255
  6282  000B36  6E09               	movwf	TMR2_DefaultInterruptHandler@error+2,c
  6283  000B38  0EFF               	movlw	255
  6284  000B3A  6E0A               	movwf	TMR2_DefaultInterruptHandler@error+3,c
  6285  000B3C                     i2l675:
  6286                           
  6287                           ; BSR set to: 0
  6288                           ;main.c: 309: }
  6289                           ;main.c: 310: if(error >100 || error < -100){
  6290                           
  6291                           ; BSR set to: 0
  6292  000B3C  BE0A               	btfsc	TMR2_DefaultInterruptHandler@error+3,7,c
  6293  000B3E  D008               	goto	i2u140_40
  6294  000B40  500A               	movf	TMR2_DefaultInterruptHandler@error+3,w,c
  6295  000B42  1009               	iorwf	TMR2_DefaultInterruptHandler@error+2,w,c
  6296  000B44  1008               	iorwf	TMR2_DefaultInterruptHandler@error+1,w,c
  6297  000B46  E110               	bnz	i2l2573
  6298  000B48  0E65               	movlw	101
  6299  000B4A  5C07               	subwf	TMR2_DefaultInterruptHandler@error,w,c
  6300  000B4C  B0D8               	btfsc	status,0,c
  6301  000B4E  D00C               	goto	i2u141_40
  6302  000B50                     i2u140_40:
  6303                           
  6304                           ; BSR set to: 0
  6305  000B50  AE0A               	btfss	TMR2_DefaultInterruptHandler@error+3,7,c
  6306  000B52  D01B               	goto	i2l676
  6307  000B54  0E9C               	movlw	156
  6308  000B56  5C07               	subwf	TMR2_DefaultInterruptHandler@error,w,c
  6309  000B58  0EFF               	movlw	255
  6310  000B5A  5808               	subwfb	TMR2_DefaultInterruptHandler@error+1,w,c
  6311  000B5C  0EFF               	movlw	255
  6312  000B5E  5809               	subwfb	TMR2_DefaultInterruptHandler@error+2,w,c
  6313  000B60  0EFF               	movlw	255
  6314  000B62  580A               	subwfb	TMR2_DefaultInterruptHandler@error+3,w,c
  6315  000B64  B0D8               	btfsc	status,0,c
  6316  000B66  D011               	goto	i2l676
  6317  000B68                     i2u141_40:
  6318  000B68                     i2l2573:
  6319                           
  6320                           ; BSR set to: 0
  6321                           ;main.c: 311: setMotorSpeed(3000 - error);
  6322  000B68  C007  F003         	movff	TMR2_DefaultInterruptHandler@error,??_TMR2_DefaultInterruptHandler
  6323  000B6C  C008  F004         	movff	TMR2_DefaultInterruptHandler@error+1,??_TMR2_DefaultInterruptHandler+1
  6324  000B70  1E03               	comf	??_TMR2_DefaultInterruptHandler,f,c
  6325  000B72  1E04               	comf	??_TMR2_DefaultInterruptHandler+1,f,c
  6326  000B74  4A03               	infsnz	??_TMR2_DefaultInterruptHandler,f,c
  6327  000B76  2A04               	incf	??_TMR2_DefaultInterruptHandler+1,f,c
  6328  000B78  0EB8               	movlw	184
  6329  000B7A  2403               	addwf	??_TMR2_DefaultInterruptHandler,w,c
  6330  000B7C  6E01               	movwf	i2setMotorSpeed@speed,c
  6331  000B7E  0E0B               	movlw	11
  6332  000B80  2004               	addwfc	??_TMR2_DefaultInterruptHandler+1,w,c
  6333  000B82  6E02               	movwf	i2setMotorSpeed@speed+1,c
  6334  000B84  EC38  F008         	call	i2_setMotorSpeed	;wreg free
  6335                           
  6336                           ;main.c: 312: }
  6337  000B88  D006               	goto	i2l679
  6338  000B8A                     i2l676:
  6339                           
  6340                           ;main.c: 313: else{
  6341                           ;main.c: 314: setMotorSpeed(3000);
  6342  000B8A  0E0B               	movlw	11
  6343  000B8C  6E02               	movwf	i2setMotorSpeed@speed+1,c
  6344  000B8E  0EB8               	movlw	184
  6345  000B90  6E01               	movwf	i2setMotorSpeed@speed,c
  6346  000B92  EC38  F008         	call	i2_setMotorSpeed	;wreg free
  6347  000B96                     i2l679:
  6348                           
  6349                           ;main.c: 315: }
  6350                           ;main.c: 317: }
  6351                           ;main.c: 318: if(encoderPosition <leftLimit && motorSpeed <3000){
  6352  000B96  0100               	movlb	0	; () banked
  6353  000B98  519A               	movf	_leftLimit& (0+255),w,b
  6354  000B9A  5DA8               	subwf	_encoderPosition& (0+255),w,b
  6355  000B9C  519B               	movf	(_leftLimit+1)& (0+255),w,b
  6356  000B9E  59A9               	subwfb	(_encoderPosition+1)& (0+255),w,b
  6357  000BA0  519C               	movf	(_leftLimit+2)& (0+255),w,b
  6358  000BA2  59AA               	subwfb	(_encoderPosition+2)& (0+255),w,b
  6359  000BA4  51AB               	movf	(_encoderPosition+3)& (0+255),w,b
  6360  000BA6  0A80               	xorlw	128
  6361  000BA8  6E03               	movwf	??_TMR2_DefaultInterruptHandler& (0+255),c
  6362  000BAA  519D               	movf	(_leftLimit+3)& (0+255),w,b
  6363  000BAC  0A80               	xorlw	128
  6364  000BAE  5803               	subwfb	??_TMR2_DefaultInterruptHandler& (0+255),w,c
  6365  000BB0  B0D8               	btfsc	status,0,c
  6366  000BB2  D00C               	goto	i2l680
  6367                           
  6368                           ; BSR set to: 0
  6369  000BB4  0EB8               	movlw	184
  6370  000BB6  5D9E               	subwf	_motorSpeed& (0+255),w,b
  6371  000BB8  0E0B               	movlw	11
  6372  000BBA  599F               	subwfb	(_motorSpeed+1)& (0+255),w,b
  6373  000BBC  B0D8               	btfsc	status,0,c
  6374  000BBE  D006               	goto	i2l680
  6375                           
  6376                           ; BSR set to: 0
  6377                           ;main.c: 319: setMotorSpeed(3000);
  6378  000BC0  0E0B               	movlw	11
  6379  000BC2  6E02               	movwf	i2setMotorSpeed@speed+1,c
  6380  000BC4  0EB8               	movlw	184
  6381  000BC6  6E01               	movwf	i2setMotorSpeed@speed,c
  6382  000BC8  EC38  F008         	call	i2_setMotorSpeed	;wreg free
  6383  000BCC                     i2l680:
  6384                           
  6385                           ;main.c: 320: }
  6386                           ;main.c: 321: if(encoderPosition >rightLimit&& motorSpeed >3000){
  6387  000BCC  0100               	movlb	0	; () banked
  6388  000BCE  51A8               	movf	_encoderPosition& (0+255),w,b
  6389  000BD0  5D96               	subwf	_rightLimit& (0+255),w,b
  6390  000BD2  51A9               	movf	(_encoderPosition+1)& (0+255),w,b
  6391  000BD4  5997               	subwfb	(_rightLimit+1)& (0+255),w,b
  6392  000BD6  51AA               	movf	(_encoderPosition+2)& (0+255),w,b
  6393  000BD8  5998               	subwfb	(_rightLimit+2)& (0+255),w,b
  6394  000BDA  5199               	movf	(_rightLimit+3)& (0+255),w,b
  6395  000BDC  0A80               	xorlw	128
  6396  000BDE  6E03               	movwf	??_TMR2_DefaultInterruptHandler& (0+255),c
  6397  000BE0  51AB               	movf	(_encoderPosition+3)& (0+255),w,b
  6398  000BE2  0A80               	xorlw	128
  6399  000BE4  5803               	subwfb	??_TMR2_DefaultInterruptHandler& (0+255),w,c
  6400  000BE6  B0D8               	btfsc	status,0,c
  6401  000BE8  D00C               	goto	i2l681
  6402                           
  6403                           ; BSR set to: 0
  6404  000BEA  0EB9               	movlw	185
  6405  000BEC  5D9E               	subwf	_motorSpeed& (0+255),w,b
  6406  000BEE  0E0B               	movlw	11
  6407  000BF0  599F               	subwfb	(_motorSpeed+1)& (0+255),w,b
  6408  000BF2  A0D8               	btfss	status,0,c
  6409  000BF4  D006               	goto	i2l681
  6410                           
  6411                           ; BSR set to: 0
  6412                           ;main.c: 322: setMotorSpeed(3000);
  6413  000BF6  0E0B               	movlw	11
  6414  000BF8  6E02               	movwf	i2setMotorSpeed@speed+1,c
  6415  000BFA  0EB8               	movlw	184
  6416  000BFC  6E01               	movwf	i2setMotorSpeed@speed,c
  6417  000BFE  EC38  F008         	call	i2_setMotorSpeed	;wreg free
  6418  000C02                     i2l681:
  6419                           
  6420                           ;main.c: 323: }
  6421                           ;main.c: 325: TMR2_WriteTimer(0);
  6422  000C02  0E00               	movlw	0
  6423  000C04  ECED  F009         	call	_TMR2_WriteTimer
  6424                           
  6425                           ;main.c: 326: PIR1bits.TMR2IF = 0;
  6426  000C08  929E               	bcf	3998,1,c	;volatile
  6427  000C0A  0012               	return		;funcret
  6428  000C0C                     __end_of_TMR2_DefaultInterruptHandler:
  6429                           	opt stack 0
  6430                           tosu	equ	0xFFF
  6431                           tosh	equ	0xFFE
  6432                           tosl	equ	0xFFD
  6433                           pclatu	equ	0xFFB
  6434                           pclath	equ	0xFFA
  6435                           tblptru	equ	0xFF8
  6436                           tblptrh	equ	0xFF7
  6437                           tblptrl	equ	0xFF6
  6438                           tablat	equ	0xFF5
  6439                           prodh	equ	0xFF4
  6440                           prodl	equ	0xFF3
  6441                           intcon	equ	0xFF2
  6442                           intcon2	equ	0xFF1
  6443                           postinc0	equ	0xFEE
  6444                           fsr0h	equ	0xFEA
  6445                           fsr0l	equ	0xFE9
  6446                           wreg	equ	0xFE8
  6447                           postdec1	equ	0xFE5
  6448                           fsr1h	equ	0xFE2
  6449                           fsr1l	equ	0xFE1
  6450                           indf2	equ	0xFDF
  6451                           postinc2	equ	0xFDE
  6452                           postdec2	equ	0xFDD
  6453                           fsr2h	equ	0xFDA
  6454                           fsr2l	equ	0xFD9
  6455                           status	equ	0xFD8
  6456                           
  6457 ;; *************** function i2_setMotorSpeed *****************
  6458 ;; Defined at:
  6459 ;;		line 239 in file "main.c"
  6460 ;; Parameters:    Size  Location     Type
  6461 ;;  speed           2    0[COMRAM] unsigned int 
  6462 ;; Auto vars:     Size  Location     Type
  6463 ;;		None
  6464 ;; Return value:  Size  Location     Type
  6465 ;;                  1    wreg      void 
  6466 ;; Registers used:
  6467 ;;		wreg, status,2, status,0
  6468 ;; Tracked objects:
  6469 ;;		On entry : 0/0
  6470 ;;		On exit  : 0/0
  6471 ;;		Unchanged: 0/0
  6472 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6473 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6474 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6475 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6476 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6477 ;;Total ram usage:        2 bytes
  6478 ;; Hardware stack levels used:    1
  6479 ;; This function calls:
  6480 ;;		Nothing
  6481 ;; This function is called by:
  6482 ;;		_TMR2_DefaultInterruptHandler
  6483 ;; This function uses a non-reentrant model
  6484 ;;
  6485                           
  6486                           	psect	text37
  6487  001070                     __ptext37:
  6488                           	opt stack 0
  6489  001070                     i2_setMotorSpeed:
  6490                           	opt stack 24
  6491                           
  6492                           ;main.c: 242: if(speed< 2500){
  6493                           
  6494                           ;incstack = 0
  6495  001070  0EC4               	movlw	196
  6496  001072  5C01               	subwf	i2setMotorSpeed@speed,w,c
  6497  001074  0E09               	movlw	9
  6498  001076  5802               	subwfb	i2setMotorSpeed@speed+1,w,c
  6499  001078  B0D8               	btfsc	status,0,c
  6500  00107A  D004               	goto	i2l638
  6501                           
  6502                           ;main.c: 243: speed = 2500;
  6503  00107C  0E09               	movlw	9
  6504  00107E  6E02               	movwf	i2setMotorSpeed@speed+1,c
  6505  001080  0EC4               	movlw	196
  6506  001082  D009               	goto	L7
  6507  001084                     i2l638:
  6508                           
  6509                           ;main.c: 246: else if(speed > 3500){
  6510  001084  0EAD               	movlw	173
  6511  001086  5C01               	subwf	i2setMotorSpeed@speed,w,c
  6512  001088  0E0D               	movlw	13
  6513  00108A  5802               	subwfb	i2setMotorSpeed@speed+1,w,c
  6514  00108C  A0D8               	btfss	status,0,c
  6515  00108E  D004               	goto	i2l640
  6516                           
  6517                           ;main.c: 247: speed = 3500;
  6518  001090  0E0D               	movlw	13
  6519  001092  6E02               	movwf	i2setMotorSpeed@speed+1,c
  6520  001094  0EAC               	movlw	172
  6521  001096                     L7:
  6522  001096  6E01               	movwf	i2setMotorSpeed@speed,c
  6523  001098                     i2l640:
  6524                           
  6525                           ;main.c: 248: }
  6526                           ;main.c: 250: motorSpeed = speed;
  6527  001098  C001  F09E         	movff	i2setMotorSpeed@speed,_motorSpeed
  6528  00109C  C002  F09F         	movff	i2setMotorSpeed@speed+1,_motorSpeed+1
  6529  0010A0  0012               	return		;funcret
  6530  0010A2                     __end_ofi2_setMotorSpeed:
  6531                           	opt stack 0
  6532                           tosu	equ	0xFFF
  6533                           tosh	equ	0xFFE
  6534                           tosl	equ	0xFFD
  6535                           pclatu	equ	0xFFB
  6536                           pclath	equ	0xFFA
  6537                           tblptru	equ	0xFF8
  6538                           tblptrh	equ	0xFF7
  6539                           tblptrl	equ	0xFF6
  6540                           tablat	equ	0xFF5
  6541                           prodh	equ	0xFF4
  6542                           prodl	equ	0xFF3
  6543                           intcon	equ	0xFF2
  6544                           intcon2	equ	0xFF1
  6545                           postinc0	equ	0xFEE
  6546                           fsr0h	equ	0xFEA
  6547                           fsr0l	equ	0xFE9
  6548                           wreg	equ	0xFE8
  6549                           postdec1	equ	0xFE5
  6550                           fsr1h	equ	0xFE2
  6551                           fsr1l	equ	0xFE1
  6552                           indf2	equ	0xFDF
  6553                           postinc2	equ	0xFDE
  6554                           postdec2	equ	0xFDD
  6555                           fsr2h	equ	0xFDA
  6556                           fsr2l	equ	0xFD9
  6557                           status	equ	0xFD8
  6558                           
  6559 ;; *************** function _TMR2_WriteTimer *****************
  6560 ;; Defined at:
  6561 ;;		line 108 in file "mcc_generated_files/tmr2.c"
  6562 ;; Parameters:    Size  Location     Type
  6563 ;;  timerVal        1    wreg     unsigned char 
  6564 ;; Auto vars:     Size  Location     Type
  6565 ;;  timerVal        1    0[COMRAM] unsigned char 
  6566 ;; Return value:  Size  Location     Type
  6567 ;;                  1    wreg      void 
  6568 ;; Registers used:
  6569 ;;		wreg
  6570 ;; Tracked objects:
  6571 ;;		On entry : 0/0
  6572 ;;		On exit  : 0/0
  6573 ;;		Unchanged: 0/0
  6574 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6575 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6576 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6577 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6578 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6579 ;;Total ram usage:        1 bytes
  6580 ;; Hardware stack levels used:    1
  6581 ;; This function calls:
  6582 ;;		Nothing
  6583 ;; This function is called by:
  6584 ;;		_TMR2_DefaultInterruptHandler
  6585 ;; This function uses a non-reentrant model
  6586 ;;
  6587                           
  6588                           	psect	text38
  6589  0013DA                     __ptext38:
  6590                           	opt stack 0
  6591  0013DA                     _TMR2_WriteTimer:
  6592                           	opt stack 24
  6593                           
  6594                           ;incstack = 0
  6595                           ;TMR2_WriteTimer@timerVal stored from wreg
  6596  0013DA  6E01               	movwf	TMR2_WriteTimer@timerVal,c
  6597                           
  6598                           ;tmr2.c: 111: TMR2 = timerVal;
  6599  0013DC  C001  FFBC         	movff	TMR2_WriteTimer@timerVal,4028	;volatile
  6600  0013E0  0012               	return		;funcret
  6601  0013E2                     __end_of_TMR2_WriteTimer:
  6602                           	opt stack 0
  6603                           tosu	equ	0xFFF
  6604                           tosh	equ	0xFFE
  6605                           tosl	equ	0xFFD
  6606                           pclatu	equ	0xFFB
  6607                           pclath	equ	0xFFA
  6608                           tblptru	equ	0xFF8
  6609                           tblptrh	equ	0xFF7
  6610                           tblptrl	equ	0xFF6
  6611                           tablat	equ	0xFF5
  6612                           prodh	equ	0xFF4
  6613                           prodl	equ	0xFF3
  6614                           intcon	equ	0xFF2
  6615                           intcon2	equ	0xFF1
  6616                           postinc0	equ	0xFEE
  6617                           fsr0h	equ	0xFEA
  6618                           fsr0l	equ	0xFE9
  6619                           wreg	equ	0xFE8
  6620                           postdec1	equ	0xFE5
  6621                           fsr1h	equ	0xFE2
  6622                           fsr1l	equ	0xFE1
  6623                           indf2	equ	0xFDF
  6624                           postinc2	equ	0xFDE
  6625                           postdec2	equ	0xFDD
  6626                           fsr2h	equ	0xFDA
  6627                           fsr2l	equ	0xFD9
  6628                           status	equ	0xFD8
  6629                           
  6630 ;; *************** function _TMR1_ISR *****************
  6631 ;; Defined at:
  6632 ;;		line 158 in file "mcc_generated_files/tmr1.c"
  6633 ;; Parameters:    Size  Location     Type
  6634 ;;		None
  6635 ;; Auto vars:     Size  Location     Type
  6636 ;;		None
  6637 ;; Return value:  Size  Location     Type
  6638 ;;                  1    wreg      void 
  6639 ;; Registers used:
  6640 ;;		wreg, status,2, status,0, pclath, tosl, cstack
  6641 ;; Tracked objects:
  6642 ;;		On entry : 0/0
  6643 ;;		On exit  : 0/0
  6644 ;;		Unchanged: 0/0
  6645 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6646 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6647 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6648 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6649 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6650 ;;Total ram usage:        0 bytes
  6651 ;; Hardware stack levels used:    1
  6652 ;; Hardware stack levels required when called:    2
  6653 ;; This function calls:
  6654 ;;		Absolute function
  6655 ;;		_TMR1_DefaultInterruptHandler
  6656 ;;		_TMR1_WriteTimer
  6657 ;; This function is called by:
  6658 ;;		_INTERRUPT_InterruptManager
  6659 ;; This function uses a non-reentrant model
  6660 ;;
  6661                           
  6662                           	psect	text39
  6663  001158                     __ptext39:
  6664                           	opt stack 0
  6665  001158                     _TMR1_ISR:
  6666                           	opt stack 24
  6667                           
  6668                           ;tmr1.c: 162: PIR1bits.TMR1IF = 0;
  6669                           
  6670                           ;incstack = 0
  6671  001158  909E               	bcf	3998,0,c	;volatile
  6672                           
  6673                           ;tmr1.c: 163: TMR1_WriteTimer(timer1ReloadVal);
  6674  00115A  C049  F001         	movff	_timer1ReloadVal,TMR1_WriteTimer@timerVal	;volatile
  6675  00115E  C04A  F002         	movff	_timer1ReloadVal+1,TMR1_WriteTimer@timerVal+1	;volatile
  6676  001162  EC53  F009         	call	_TMR1_WriteTimer	;wreg free
  6677                           
  6678                           ;tmr1.c: 165: if(TMR1_InterruptHandler)
  6679  001166  5047               	movf	_TMR1_InterruptHandler,w,c
  6680  001168  1048               	iorwf	_TMR1_InterruptHandler+1,w,c
  6681  00116A  B4D8               	btfsc	status,2,c
  6682  00116C  0012               	return	
  6683                           
  6684                           ;tmr1.c: 166: {
  6685                           ;tmr1.c: 167: TMR1_InterruptHandler();
  6686  00116E  D801               	call	i2u160_48
  6687  001170  0012               	return	
  6688  001172                     i2u160_48:
  6689  001172  0005               	push	
  6690  001174  6EFA               	movwf	pclath,c
  6691  001176  5047               	movf	_TMR1_InterruptHandler,w,c
  6692  001178  6EFD               	movwf	tosl,c
  6693  00117A  5048               	movf	_TMR1_InterruptHandler+1,w,c
  6694  00117C  6EFE               	movwf	tosh,c
  6695  00117E  6AFF               	clrf	tosu,c
  6696  001180  50FA               	movf	pclath,w,c
  6697  001182  0012               	return		;indir
  6698  001184                     __end_of_TMR1_ISR:
  6699                           	opt stack 0
  6700                           tosu	equ	0xFFF
  6701                           tosh	equ	0xFFE
  6702                           tosl	equ	0xFFD
  6703                           pclatu	equ	0xFFB
  6704                           pclath	equ	0xFFA
  6705                           tblptru	equ	0xFF8
  6706                           tblptrh	equ	0xFF7
  6707                           tblptrl	equ	0xFF6
  6708                           tablat	equ	0xFF5
  6709                           prodh	equ	0xFF4
  6710                           prodl	equ	0xFF3
  6711                           intcon	equ	0xFF2
  6712                           intcon2	equ	0xFF1
  6713                           postinc0	equ	0xFEE
  6714                           fsr0h	equ	0xFEA
  6715                           fsr0l	equ	0xFE9
  6716                           wreg	equ	0xFE8
  6717                           postdec1	equ	0xFE5
  6718                           fsr1h	equ	0xFE2
  6719                           fsr1l	equ	0xFE1
  6720                           indf2	equ	0xFDF
  6721                           postinc2	equ	0xFDE
  6722                           postdec2	equ	0xFDD
  6723                           fsr2h	equ	0xFDA
  6724                           fsr2l	equ	0xFD9
  6725                           status	equ	0xFD8
  6726                           
  6727 ;; *************** function _TMR1_DefaultInterruptHandler *****************
  6728 ;; Defined at:
  6729 ;;		line 283 in file "main.c"
  6730 ;; Parameters:    Size  Location     Type
  6731 ;;		None
  6732 ;; Auto vars:     Size  Location     Type
  6733 ;;		None
  6734 ;; Return value:  Size  Location     Type
  6735 ;;                  1    wreg      void 
  6736 ;; Registers used:
  6737 ;;		wreg, status,2, status,0, cstack
  6738 ;; Tracked objects:
  6739 ;;		On entry : 0/0
  6740 ;;		On exit  : 0/0
  6741 ;;		Unchanged: 0/0
  6742 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6743 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6744 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6745 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6746 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6747 ;;Total ram usage:        2 bytes
  6748 ;; Hardware stack levels used:    1
  6749 ;; Hardware stack levels required when called:    1
  6750 ;; This function calls:
  6751 ;;		_TMR1_WriteTimer
  6752 ;; This function is called by:
  6753 ;;		_TMR1_Initialize
  6754 ;;		_TMR1_ISR
  6755 ;; This function uses a non-reentrant model
  6756 ;;
  6757                           
  6758                           	psect	text40
  6759  000F2A                     __ptext40:
  6760                           	opt stack 0
  6761  000F2A                     _TMR1_DefaultInterruptHandler:
  6762                           	opt stack 24
  6763                           
  6764                           ;main.c: 284: static uint8_t pulseHigh = 0;
  6765                           ;main.c: 285: if(!pulseHigh){
  6766                           
  6767                           ;incstack = 0
  6768  000F2A  5052               	movf	TMR1_DefaultInterruptHandler@pulseHigh,w,c
  6769  000F2C  A4D8               	btfss	status,2,c
  6770  000F2E  D013               	goto	i2l664
  6771                           
  6772                           ;main.c: 286: do { LATAbits.LATA0 = 1; } while(0);
  6773  000F30  8089               	bsf	3977,0,c	;volatile
  6774                           
  6775                           ;main.c: 287: TMR1_WriteTimer(0xFFFF -pitchPosition );
  6776  000F32  C0A0  F003         	movff	_pitchPosition,??_TMR1_DefaultInterruptHandler
  6777  000F36  C0A1  F004         	movff	_pitchPosition+1,??_TMR1_DefaultInterruptHandler+1
  6778  000F3A  1E03               	comf	??_TMR1_DefaultInterruptHandler,f,c
  6779  000F3C  1E04               	comf	??_TMR1_DefaultInterruptHandler+1,f,c
  6780  000F3E  4A03               	infsnz	??_TMR1_DefaultInterruptHandler,f,c
  6781  000F40  2A04               	incf	??_TMR1_DefaultInterruptHandler+1,f,c
  6782  000F42  0EFF               	movlw	255
  6783  000F44  2403               	addwf	??_TMR1_DefaultInterruptHandler,w,c
  6784  000F46  6E01               	movwf	TMR1_WriteTimer@timerVal,c
  6785  000F48  0EFF               	movlw	255
  6786  000F4A  2004               	addwfc	??_TMR1_DefaultInterruptHandler+1,w,c
  6787  000F4C  6E02               	movwf	TMR1_WriteTimer@timerVal+1,c
  6788  000F4E  EC53  F009         	call	_TMR1_WriteTimer	;wreg free
  6789                           
  6790                           ;main.c: 288: pulseHigh = 1;
  6791  000F52  0E01               	movlw	1
  6792  000F54  D008               	goto	L8
  6793  000F56                     i2l664:
  6794                           
  6795                           ;main.c: 290: else{
  6796                           ;main.c: 291: do { LATAbits.LATA0 = 0; } while(0);
  6797  000F56  9089               	bcf	3977,0,c	;volatile
  6798                           
  6799                           ;main.c: 292: TMR1_WriteTimer(0xFFFF -40000 );
  6800  000F58  0E63               	movlw	99
  6801  000F5A  6E02               	movwf	TMR1_WriteTimer@timerVal+1,c
  6802  000F5C  0EBF               	movlw	191
  6803  000F5E  6E01               	movwf	TMR1_WriteTimer@timerVal,c
  6804  000F60  EC53  F009         	call	_TMR1_WriteTimer	;wreg free
  6805                           
  6806                           ;main.c: 293: pulseHigh = 0;
  6807  000F64  0E00               	movlw	0
  6808  000F66                     L8:
  6809  000F66  6E52               	movwf	TMR1_DefaultInterruptHandler@pulseHigh,c
  6810                           
  6811                           ;main.c: 294: }
  6812                           ;main.c: 297: PIR1bits.TMR1IF = 0;
  6813  000F68  909E               	bcf	3998,0,c	;volatile
  6814  000F6A  0012               	return		;funcret
  6815  000F6C                     __end_of_TMR1_DefaultInterruptHandler:
  6816                           	opt stack 0
  6817                           tosu	equ	0xFFF
  6818                           tosh	equ	0xFFE
  6819                           tosl	equ	0xFFD
  6820                           pclatu	equ	0xFFB
  6821                           pclath	equ	0xFFA
  6822                           tblptru	equ	0xFF8
  6823                           tblptrh	equ	0xFF7
  6824                           tblptrl	equ	0xFF6
  6825                           tablat	equ	0xFF5
  6826                           prodh	equ	0xFF4
  6827                           prodl	equ	0xFF3
  6828                           intcon	equ	0xFF2
  6829                           intcon2	equ	0xFF1
  6830                           postinc0	equ	0xFEE
  6831                           fsr0h	equ	0xFEA
  6832                           fsr0l	equ	0xFE9
  6833                           wreg	equ	0xFE8
  6834                           postdec1	equ	0xFE5
  6835                           fsr1h	equ	0xFE2
  6836                           fsr1l	equ	0xFE1
  6837                           indf2	equ	0xFDF
  6838                           postinc2	equ	0xFDE
  6839                           postdec2	equ	0xFDD
  6840                           fsr2h	equ	0xFDA
  6841                           fsr2l	equ	0xFD9
  6842                           status	equ	0xFD8
  6843                           
  6844 ;; *************** function _TMR1_WriteTimer *****************
  6845 ;; Defined at:
  6846 ;;		line 121 in file "mcc_generated_files/tmr1.c"
  6847 ;; Parameters:    Size  Location     Type
  6848 ;;  timerVal        2    0[COMRAM] unsigned int 
  6849 ;; Auto vars:     Size  Location     Type
  6850 ;;		None
  6851 ;; Return value:  Size  Location     Type
  6852 ;;                  1    wreg      void 
  6853 ;; Registers used:
  6854 ;;		wreg, status,2
  6855 ;; Tracked objects:
  6856 ;;		On entry : 0/0
  6857 ;;		On exit  : 0/0
  6858 ;;		Unchanged: 0/0
  6859 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6860 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6861 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6862 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6863 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6864 ;;Total ram usage:        2 bytes
  6865 ;; Hardware stack levels used:    1
  6866 ;; This function calls:
  6867 ;;		Nothing
  6868 ;; This function is called by:
  6869 ;;		_TMR1_ISR
  6870 ;;		_TMR1_DefaultInterruptHandler
  6871 ;;		_TMR1_Reload
  6872 ;; This function uses a non-reentrant model
  6873 ;;
  6874                           
  6875                           	psect	text41
  6876  0012A6                     __ptext41:
  6877                           	opt stack 0
  6878  0012A6                     _TMR1_WriteTimer:
  6879                           	opt stack 25
  6880                           
  6881                           ;tmr1.c: 123: if (T1CONbits.T1SYNC == 1)
  6882                           
  6883                           ;incstack = 0
  6884  0012A6  A4CD               	btfss	4045,2,c	;volatile
  6885  0012A8  D007               	goto	i2l392
  6886                           
  6887                           ;tmr1.c: 124: {
  6888                           ;tmr1.c: 126: T1CONbits.TMR1ON = 0;
  6889  0012AA  90CD               	bcf	4045,0,c	;volatile
  6890                           
  6891                           ;tmr1.c: 129: TMR1H = (timerVal >> 8);
  6892  0012AC  5002               	movf	TMR1_WriteTimer@timerVal+1,w,c
  6893  0012AE  6ECF               	movwf	4047,c	;volatile
  6894                           
  6895                           ;tmr1.c: 130: TMR1L = (uint8_t) timerVal;
  6896  0012B0  C001  FFCE         	movff	TMR1_WriteTimer@timerVal,4046	;volatile
  6897                           
  6898                           ;tmr1.c: 133: T1CONbits.TMR1ON =1;
  6899  0012B4  80CD               	bsf	4045,0,c	;volatile
  6900                           
  6901                           ;tmr1.c: 134: }
  6902  0012B6  0012               	return	
  6903  0012B8                     i2l392:
  6904                           
  6905                           ;tmr1.c: 135: else
  6906                           ;tmr1.c: 136: {
  6907                           ;tmr1.c: 138: TMR1H = (timerVal >> 8);
  6908  0012B8  5002               	movf	TMR1_WriteTimer@timerVal+1,w,c
  6909  0012BA  6ECF               	movwf	4047,c	;volatile
  6910                           
  6911                           ;tmr1.c: 139: TMR1L = (uint8_t) timerVal;
  6912  0012BC  C001  FFCE         	movff	TMR1_WriteTimer@timerVal,4046	;volatile
  6913  0012C0  0012               	return	
  6914  0012C2                     __end_of_TMR1_WriteTimer:
  6915                           	opt stack 0
  6916                           tosu	equ	0xFFF
  6917                           tosh	equ	0xFFE
  6918                           tosl	equ	0xFFD
  6919                           pclatu	equ	0xFFB
  6920                           pclath	equ	0xFFA
  6921                           tblptru	equ	0xFF8
  6922                           tblptrh	equ	0xFF7
  6923                           tblptrl	equ	0xFF6
  6924                           tablat	equ	0xFF5
  6925                           prodh	equ	0xFF4
  6926                           prodl	equ	0xFF3
  6927                           intcon	equ	0xFF2
  6928                           intcon2	equ	0xFF1
  6929                           postinc0	equ	0xFEE
  6930                           fsr0h	equ	0xFEA
  6931                           fsr0l	equ	0xFE9
  6932                           wreg	equ	0xFE8
  6933                           postdec1	equ	0xFE5
  6934                           fsr1h	equ	0xFE2
  6935                           fsr1l	equ	0xFE1
  6936                           indf2	equ	0xFDF
  6937                           postinc2	equ	0xFDE
  6938                           postdec2	equ	0xFDD
  6939                           fsr2h	equ	0xFDA
  6940                           fsr2l	equ	0xFD9
  6941                           status	equ	0xFD8
  6942                           
  6943 ;; *************** function _TMR0_ISR *****************
  6944 ;; Defined at:
  6945 ;;		line 136 in file "mcc_generated_files/tmr0.c"
  6946 ;; Parameters:    Size  Location     Type
  6947 ;;		None
  6948 ;; Auto vars:     Size  Location     Type
  6949 ;;		None
  6950 ;; Return value:  Size  Location     Type
  6951 ;;                  1    wreg      void 
  6952 ;; Registers used:
  6953 ;;		wreg, fsr2l, fsr2h, status,2, status,0, pclath, tosl, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  6954 ;; Tracked objects:
  6955 ;;		On entry : 0/0
  6956 ;;		On exit  : 0/0
  6957 ;;		Unchanged: 0/0
  6958 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6959 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6960 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6961 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6962 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6963 ;;Total ram usage:        0 bytes
  6964 ;; Hardware stack levels used:    1
  6965 ;; Hardware stack levels required when called:    4
  6966 ;; This function calls:
  6967 ;;		Absolute function
  6968 ;;		_TMR0_DefaultInterruptHandler
  6969 ;; This function is called by:
  6970 ;;		_INTERRUPT_InterruptManager
  6971 ;; This function uses a non-reentrant model
  6972 ;;
  6973                           
  6974                           	psect	text42
  6975  001184                     __ptext42:
  6976                           	opt stack 0
  6977  001184                     _TMR0_ISR:
  6978                           	opt stack 22
  6979                           
  6980                           ;tmr0.c: 140: INTCONbits.TMR0IF = 0;
  6981                           
  6982                           ;incstack = 0
  6983  001184  94F2               	bcf	intcon,2,c	;volatile
  6984                           
  6985                           ;tmr0.c: 144: TMR0H = timer0ReloadVal >> 8;
  6986  001186  504E               	movf	_timer0ReloadVal+1,w,c	;volatile
  6987  001188  6ED7               	movwf	4055,c	;volatile
  6988                           
  6989                           ;tmr0.c: 145: TMR0L = (uint8_t) timer0ReloadVal;
  6990  00118A  C04D  FFD6         	movff	_timer0ReloadVal,4054	;volatile
  6991                           
  6992                           ;tmr0.c: 147: if(TMR0_InterruptHandler)
  6993  00118E  504F               	movf	_TMR0_InterruptHandler,w,c
  6994  001190  1050               	iorwf	_TMR0_InterruptHandler+1,w,c
  6995  001192  B4D8               	btfsc	status,2,c
  6996  001194  0012               	return	
  6997                           
  6998                           ;tmr0.c: 148: {
  6999                           ;tmr0.c: 149: TMR0_InterruptHandler();
  7000  001196  D801               	call	i2u154_48
  7001  001198  0012               	return	
  7002  00119A                     i2u154_48:
  7003  00119A  0005               	push	
  7004  00119C  6EFA               	movwf	pclath,c
  7005  00119E  504F               	movf	_TMR0_InterruptHandler,w,c
  7006  0011A0  6EFD               	movwf	tosl,c
  7007  0011A2  5050               	movf	_TMR0_InterruptHandler+1,w,c
  7008  0011A4  6EFE               	movwf	tosh,c
  7009  0011A6  6AFF               	clrf	tosu,c
  7010  0011A8  50FA               	movf	pclath,w,c
  7011  0011AA  0012               	return		;indir
  7012  0011AC                     __end_of_TMR0_ISR:
  7013                           	opt stack 0
  7014                           tosu	equ	0xFFF
  7015                           tosh	equ	0xFFE
  7016                           tosl	equ	0xFFD
  7017                           pclatu	equ	0xFFB
  7018                           pclath	equ	0xFFA
  7019                           tblptru	equ	0xFF8
  7020                           tblptrh	equ	0xFF7
  7021                           tblptrl	equ	0xFF6
  7022                           tablat	equ	0xFF5
  7023                           prodh	equ	0xFF4
  7024                           prodl	equ	0xFF3
  7025                           intcon	equ	0xFF2
  7026                           intcon2	equ	0xFF1
  7027                           postinc0	equ	0xFEE
  7028                           fsr0h	equ	0xFEA
  7029                           fsr0l	equ	0xFE9
  7030                           wreg	equ	0xFE8
  7031                           postdec1	equ	0xFE5
  7032                           fsr1h	equ	0xFE2
  7033                           fsr1l	equ	0xFE1
  7034                           indf2	equ	0xFDF
  7035                           postinc2	equ	0xFDE
  7036                           postdec2	equ	0xFDD
  7037                           fsr2h	equ	0xFDA
  7038                           fsr2l	equ	0xFD9
  7039                           status	equ	0xFD8
  7040                           
  7041 ;; *************** function _TMR0_DefaultInterruptHandler *****************
  7042 ;; Defined at:
  7043 ;;		line 261 in file "main.c"
  7044 ;; Parameters:    Size  Location     Type
  7045 ;;		None
  7046 ;; Auto vars:     Size  Location     Type
  7047 ;;		None
  7048 ;; Return value:  Size  Location     Type
  7049 ;;                  1    wreg      void 
  7050 ;; Registers used:
  7051 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  7052 ;; Tracked objects:
  7053 ;;		On entry : 0/0
  7054 ;;		On exit  : 0/0
  7055 ;;		Unchanged: 0/0
  7056 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7057 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7058 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7059 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7060 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7061 ;;Total ram usage:        2 bytes
  7062 ;; Hardware stack levels used:    1
  7063 ;; Hardware stack levels required when called:    3
  7064 ;; This function calls:
  7065 ;;		_TMR0_WriteTimer
  7066 ;;		i2_printf
  7067 ;; This function is called by:
  7068 ;;		_TMR0_Initialize
  7069 ;;		_TMR0_ISR
  7070 ;; This function uses a non-reentrant model
  7071 ;;
  7072                           
  7073                           	psect	text43
  7074  000D12                     __ptext43:
  7075                           	opt stack 0
  7076  000D12                     _TMR0_DefaultInterruptHandler:
  7077                           	opt stack 22
  7078                           
  7079                           ;main.c: 263: static uint8_t pulseHigh = 0;
  7080                           ;main.c: 264: if(!pulseHigh){
  7081                           
  7082                           ;incstack = 0
  7083  000D12  5053               	movf	TMR0_DefaultInterruptHandler@pulseHigh,w,c
  7084  000D14  A4D8               	btfss	status,2,c
  7085  000D16  D013               	goto	i2l652
  7086                           
  7087                           ;main.c: 265: do { LATAbits.LATA1 = 1; } while(0);
  7088  000D18  8289               	bsf	3977,1,c	;volatile
  7089                           
  7090                           ;main.c: 266: TMR0_WriteTimer(0xFFFF -yawPosition );
  7091  000D1A  C0A2  F02D         	movff	_yawPosition,??_TMR0_DefaultInterruptHandler
  7092  000D1E  C0A3  F02E         	movff	_yawPosition+1,??_TMR0_DefaultInterruptHandler+1
  7093  000D22  1E2D               	comf	??_TMR0_DefaultInterruptHandler,f,c
  7094  000D24  1E2E               	comf	??_TMR0_DefaultInterruptHandler+1,f,c
  7095  000D26  4A2D               	infsnz	??_TMR0_DefaultInterruptHandler,f,c
  7096  000D28  2A2E               	incf	??_TMR0_DefaultInterruptHandler+1,f,c
  7097  000D2A  0EFF               	movlw	255
  7098  000D2C  242D               	addwf	??_TMR0_DefaultInterruptHandler,w,c
  7099  000D2E  6E01               	movwf	TMR0_WriteTimer@timerVal,c
  7100  000D30  0EFF               	movlw	255
  7101  000D32  202E               	addwfc	??_TMR0_DefaultInterruptHandler+1,w,c
  7102  000D34  6E02               	movwf	TMR0_WriteTimer@timerVal+1,c
  7103  000D36  ECE8  F009         	call	_TMR0_WriteTimer	;wreg free
  7104                           
  7105                           ;main.c: 267: pulseHigh = 1;
  7106  000D3A  0E01               	movlw	1
  7107  000D3C  D008               	goto	L9
  7108  000D3E                     i2l652:
  7109                           
  7110                           ;main.c: 269: else{
  7111                           ;main.c: 270: do { LATAbits.LATA1 = 0; } while(0);
  7112  000D3E  9289               	bcf	3977,1,c	;volatile
  7113                           
  7114                           ;main.c: 271: TMR0_WriteTimer(0xFFFF -40000 );
  7115  000D40  0E63               	movlw	99
  7116  000D42  6E02               	movwf	TMR0_WriteTimer@timerVal+1,c
  7117  000D44  0EBF               	movlw	191
  7118  000D46  6E01               	movwf	TMR0_WriteTimer@timerVal,c
  7119  000D48  ECE8  F009         	call	_TMR0_WriteTimer	;wreg free
  7120                           
  7121                           ;main.c: 272: pulseHigh = 0;
  7122  000D4C  0E00               	movlw	0
  7123  000D4E                     L9:
  7124  000D4E  6E53               	movwf	TMR0_DefaultInterruptHandler@pulseHigh,c
  7125                           
  7126                           ;main.c: 273: }
  7127                           ;main.c: 274: if(motorControlMode == 1){
  7128  000D50  0456               	decf	_motorControlMode,w,c
  7129  000D52  A4D8               	btfss	status,2,c
  7130  000D54  D016               	goto	i2l658
  7131                           
  7132                           ;main.c: 275: printf("%ld,    %ld\r\n",motorSetPoint,encoderPosition);
  7133  000D56  0EE7               	movlw	low STR_35
  7134  000D58  6E17               	movwf	i2printf@f,c
  7135  000D5A  0EFF               	movlw	high STR_35
  7136  000D5C  6E18               	movwf	i2printf@f+1,c
  7137  000D5E  C0AC  F019         	movff	_motorSetPoint,?i2_printf+2
  7138  000D62  C0AD  F01A         	movff	_motorSetPoint+1,?i2_printf+3
  7139  000D66  C0AE  F01B         	movff	_motorSetPoint+2,?i2_printf+4
  7140  000D6A  C0AF  F01C         	movff	_motorSetPoint+3,?i2_printf+5
  7141  000D6E  C0A8  F01D         	movff	_encoderPosition,?i2_printf+6
  7142  000D72  C0A9  F01E         	movff	_encoderPosition+1,?i2_printf+7
  7143  000D76  C0AA  F01F         	movff	_encoderPosition+2,?i2_printf+8
  7144  000D7A  C0AB  F020         	movff	_encoderPosition+3,?i2_printf+9
  7145  000D7E  EC3D  F004         	call	i2_printf	;wreg free
  7146  000D82                     i2l658:
  7147                           
  7148                           ;main.c: 276: }
  7149                           ;main.c: 277: INTCONbits.TMR0IF = 0;
  7150  000D82  94F2               	bcf	intcon,2,c	;volatile
  7151  000D84  0012               	return		;funcret
  7152  000D86                     __end_of_TMR0_DefaultInterruptHandler:
  7153                           	opt stack 0
  7154                           tosu	equ	0xFFF
  7155                           tosh	equ	0xFFE
  7156                           tosl	equ	0xFFD
  7157                           pclatu	equ	0xFFB
  7158                           pclath	equ	0xFFA
  7159                           tblptru	equ	0xFF8
  7160                           tblptrh	equ	0xFF7
  7161                           tblptrl	equ	0xFF6
  7162                           tablat	equ	0xFF5
  7163                           prodh	equ	0xFF4
  7164                           prodl	equ	0xFF3
  7165                           intcon	equ	0xFF2
  7166                           intcon2	equ	0xFF1
  7167                           postinc0	equ	0xFEE
  7168                           fsr0h	equ	0xFEA
  7169                           fsr0l	equ	0xFE9
  7170                           wreg	equ	0xFE8
  7171                           postdec1	equ	0xFE5
  7172                           fsr1h	equ	0xFE2
  7173                           fsr1l	equ	0xFE1
  7174                           indf2	equ	0xFDF
  7175                           postinc2	equ	0xFDE
  7176                           postdec2	equ	0xFDD
  7177                           fsr2h	equ	0xFDA
  7178                           fsr2l	equ	0xFD9
  7179                           status	equ	0xFD8
  7180                           
  7181 ;; *************** function i2_printf *****************
  7182 ;; Defined at:
  7183 ;;		line 464 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\doprnt.c"
  7184 ;; Parameters:    Size  Location     Type
  7185 ;;  f               2   22[COMRAM] PTR const unsigned char 
  7186 ;;		 -> STR_35(14), STR_34(32), STR_33(1), STR_32(1), 
  7187 ;;		 -> STR_31(1), STR_30(17), STR_29(21), STR_28(27), 
  7188 ;;		 -> STR_27(5), STR_26(5), STR_25(39), STR_24(35), 
  7189 ;;		 -> STR_23(35), STR_22(31), STR_21(31), STR_20(38), 
  7190 ;;		 -> STR_19(38), STR_18(14), STR_17(19), STR_16(33), 
  7191 ;;		 -> STR_15(37), STR_14(37), STR_13(37), STR_12(37), 
  7192 ;;		 -> STR_11(22), STR_10(21), STR_9(19), STR_8(21), 
  7193 ;;		 -> STR_7(40), STR_6(40), STR_5(27), STR_4(27), 
  7194 ;;		 -> STR_3(43), STR_2(34), STR_1(32), 
  7195 ;; Auto vars:     Size  Location     Type
  7196 ;;  printf          4   36[COMRAM] unsigned long 
  7197 ;;  printf          4    0        struct .
  7198 ;;  printf          3    0        PTR const unsigned char 
  7199 ;;  printf          2   41[COMRAM] PTR void [1]
  7200 ;;		 -> ?i2_printf(2), ?_printf(2), 
  7201 ;;  printf          2   34[COMRAM] int 
  7202 ;;  printf          2    0        unsigned int 
  7203 ;;  printf          1   43[COMRAM] char 
  7204 ;;  printf          1   40[COMRAM] unsigned char 
  7205 ;; Return value:  Size  Location     Type
  7206 ;;                  2   22[COMRAM] int 
  7207 ;; Registers used:
  7208 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  7209 ;; Tracked objects:
  7210 ;;		On entry : 0/0
  7211 ;;		On exit  : 0/0
  7212 ;;		Unchanged: 0/0
  7213 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7214 ;;      Params:        10       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7215 ;;      Locals:        10       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7216 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7217 ;;      Totals:        22       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7218 ;;Total ram usage:       22 bytes
  7219 ;; Hardware stack levels used:    1
  7220 ;; Hardware stack levels required when called:    2
  7221 ;; This function calls:
  7222 ;;		i2___lldiv
  7223 ;;		i2___llmod
  7224 ;;		i2_putch
  7225 ;; This function is called by:
  7226 ;;		_TMR0_DefaultInterruptHandler
  7227 ;; This function uses a non-reentrant model
  7228 ;;
  7229                           
  7230                           	psect	text44
  7231  00087A                     __ptext44:
  7232                           	opt stack 0
  7233  00087A                     i2_printf:
  7234                           	opt stack 22
  7235                           
  7236                           ;doprnt.c: 466: va_list ap;
  7237                           ;doprnt.c: 499: signed char c;
  7238                           ;doprnt.c: 504: int prec;
  7239                           ;doprnt.c: 508: unsigned char flag;
  7240                           ;doprnt.c: 523: union {
  7241                           ;doprnt.c: 524: unsigned long vd;
  7242                           ;doprnt.c: 525: double integ;
  7243                           ;doprnt.c: 526: } tmpval;
  7244                           ;doprnt.c: 528: unsigned long val;
  7245                           ;doprnt.c: 529: unsigned len;
  7246                           ;doprnt.c: 530: const char * cp;
  7247                           ;doprnt.c: 533: *ap = __va_start();
  7248                           
  7249                           ;incstack = 0
  7250  00087A  0E19               	movlw	low (?i2_printf+2)
  7251  00087C  6E2A               	movwf	i2printf@ap,c
  7252  00087E  0E00               	movlw	high (?i2_printf+2)
  7253  000880  6E2B               	movwf	i2printf@ap+1,c
  7254                           
  7255                           ;doprnt.c: 536: while(c = *f++) {
  7256  000882  D106               	goto	i2u125_40
  7257  000884                     
  7258                           ;doprnt.c: 538: if(c != '%')
  7259  000884  0E25               	movlw	37
  7260  000886  182C               	xorwf	i2printf@c,w,c
  7261  000888  B4D8               	btfsc	status,2,c
  7262  00088A  D004               	goto	i2l718
  7263                           
  7264                           ;doprnt.c: 540: {
  7265                           ;doprnt.c: 541: (putch(c) );
  7266  00088C  502C               	movf	i2printf@c,w,c
  7267  00088E  ECE3  F009         	call	i2_putch
  7268                           
  7269                           ;doprnt.c: 542: continue;
  7270  000892  D0FE               	goto	i2u125_40
  7271  000894                     i2l718:
  7272                           
  7273                           ;doprnt.c: 543: }
  7274                           ;doprnt.c: 548: flag = 0;
  7275  000894  0E00               	movlw	0
  7276  000896  6E29               	movwf	i2printf@flag,c
  7277                           
  7278                           ;doprnt.c: 635: switch(c = *f++) {
  7279                           
  7280                           ;doprnt.c: 633: loop:
  7281  000898  D012               	goto	i2l720
  7282  00089A                     
  7283                           ;doprnt.c: 643: flag |= 0x10;
  7284  00089A  8829               	bsf	i2printf@flag,4,c
  7285                           
  7286                           ;doprnt.c: 644: goto loop;
  7287  00089C  D010               	goto	i2l720
  7288  00089E                     
  7289                           ;doprnt.c: 799: c = (*(int *)__va_arg((*(int **)ap), (int)0));
  7290  00089E  C02A  FFD9         	movff	i2printf@ap,fsr2l
  7291  0008A2  C02B  FFDA         	movff	i2printf@ap+1,fsr2h
  7292  0008A6  50DF               	movf	indf2,w,c
  7293  0008A8  6E2C               	movwf	i2printf@c,c
  7294  0008AA  0E02               	movlw	2
  7295  0008AC  262A               	addwf	i2printf@ap,f,c
  7296  0008AE  0E00               	movlw	0
  7297  0008B0  222B               	addwfc	i2printf@ap+1,f,c
  7298  0008B2                     
  7299                           ;doprnt.c: 809: (putch(c) );
  7300  0008B2  502C               	movf	i2printf@c,w,c
  7301  0008B4  ECE3  F009         	call	i2_putch
  7302                           
  7303                           ;doprnt.c: 810: continue;
  7304  0008B8  D0EB               	goto	i2u125_40
  7305  0008BA                     
  7306                           ;doprnt.c: 818: flag |= 0x40;
  7307  0008BA  8C29               	bsf	i2printf@flag,6,c
  7308                           
  7309                           ;doprnt.c: 822: }
  7310                           
  7311                           ;doprnt.c: 819: break;
  7312  0008BC  D01E               	goto	i2l726
  7313  0008BE                     i2l720:
  7314  0008BE  C017  FFF6         	movff	i2printf@f,tblptrl
  7315  0008C2  C018  FFF7         	movff	i2printf@f+1,tblptrh
  7316  0008C6  4A17               	infsnz	i2printf@f,f,c
  7317  0008C8  2A18               	incf	i2printf@f+1,f,c
  7318  0008CA                     	if	1	;Program memory is < 0x10000, tblptru is always zero
  7319  0008CA  6AF8               	clrf	tblptru,c
  7320  0008CC                     	endif
  7321  0008CC                     	if	0	;tblptru may be non-zero
  7322  0008CC                     	endif
  7323  0008CC  0008               	tblrd		*
  7324  0008CE  CFF5 F02C          	movff	tablat,i2printf@c
  7325  0008D2  502C               	movf	i2printf@c,w,c
  7326                           
  7327                           ; Switch size 1, requested type "space"
  7328                           ; Number of cases is 6, Range of values is 0 to 117
  7329                           ; switch strategies available:
  7330                           ; Name         Instructions Cycles
  7331                           ; simple_byte           19    10 (average)
  7332                           ;	Chosen strategy is simple_byte
  7333  0008D4  0A00               	xorlw	0	; case 0
  7334  0008D6  B4D8               	btfsc	status,2,c
  7335  0008D8  0012               	return	
  7336  0008DA  0A63               	xorlw	99	; case 99
  7337  0008DC  B4D8               	btfsc	status,2,c
  7338  0008DE  D7DF               	goto	i2l727
  7339  0008E0  0A07               	xorlw	7	; case 100
  7340  0008E2  B4D8               	btfsc	status,2,c
  7341  0008E4  D00A               	goto	i2l726
  7342  0008E6  0A0D               	xorlw	13	; case 105
  7343  0008E8  B4D8               	btfsc	status,2,c
  7344  0008EA  D007               	goto	i2l726
  7345  0008EC  0A05               	xorlw	5	; case 108
  7346  0008EE  B4D8               	btfsc	status,2,c
  7347  0008F0  D7D4               	goto	i2l723
  7348  0008F2  0A19               	xorlw	25	; case 117
  7349  0008F4  B4D8               	btfsc	status,2,c
  7350  0008F6  D7E1               	goto	i2l729
  7351  0008F8  D7DC               	goto	i2l728
  7352  0008FA                     i2l726:
  7353                           
  7354                           ;doprnt.c: 1251: if((flag & 0x40) == 0x00)
  7355  0008FA  BC29               	btfsc	i2printf@flag,6,c
  7356  0008FC  D02E               	goto	i2l730
  7357                           
  7358                           ;doprnt.c: 1253: {
  7359                           ;doprnt.c: 1255: if(flag & 0x10)
  7360  0008FE  A829               	btfss	i2printf@flag,4,c
  7361  000900  D00E               	goto	i2l731
  7362                           
  7363                           ;doprnt.c: 1256: val = (*(long *)__va_arg((*(long **)ap), (long)0));
  7364  000902  C02A  FFD9         	movff	i2printf@ap,fsr2l
  7365  000906  C02B  FFDA         	movff	i2printf@ap+1,fsr2h
  7366  00090A  CFDE F025          	movff	postinc2,i2printf@val
  7367  00090E  CFDE F026          	movff	postinc2,i2printf@val+1
  7368  000912  CFDE F027          	movff	postinc2,i2printf@val+2
  7369  000916  CFDE F028          	movff	postinc2,i2printf@val+3
  7370  00091A  0E04               	movlw	4
  7371  00091C  D00E               	goto	L10
  7372  00091E                     i2l731:
  7373                           
  7374                           ;doprnt.c: 1257: else
  7375                           ;doprnt.c: 1259: val = (long)(*(int *)__va_arg((*(int **)ap), (int)0));
  7376  00091E  C02A  FFD9         	movff	i2printf@ap,fsr2l
  7377  000922  C02B  FFDA         	movff	i2printf@ap+1,fsr2h
  7378  000926  CFDE F025          	movff	postinc2,i2printf@val
  7379  00092A  CFDD F026          	movff	postdec2,i2printf@val+1
  7380  00092E  0E00               	movlw	0
  7381  000930  BE26               	btfsc	i2printf@val+1,7,c
  7382  000932  0EFF               	movlw	-1
  7383  000934  6E27               	movwf	i2printf@val+2,c
  7384  000936  6E28               	movwf	i2printf@val+3,c
  7385  000938  0E02               	movlw	2
  7386  00093A                     L10:
  7387  00093A  262A               	addwf	i2printf@ap,f,c
  7388  00093C  0E00               	movlw	0
  7389  00093E  222B               	addwfc	i2printf@ap+1,f,c
  7390                           
  7391                           ;doprnt.c: 1261: if((long)val < 0) {
  7392  000940  AE28               	btfss	i2printf@val+3,7,c
  7393  000942  D02D               	goto	i2l736
  7394                           
  7395                           ;doprnt.c: 1262: flag |= 0x03;
  7396  000944  0E03               	movlw	3
  7397  000946  1229               	iorwf	i2printf@flag,f,c
  7398                           
  7399                           ;doprnt.c: 1263: val = -val;
  7400  000948  1E28               	comf	i2printf@val+3,f,c
  7401  00094A  1E27               	comf	i2printf@val+2,f,c
  7402  00094C  1E26               	comf	i2printf@val+1,f,c
  7403  00094E  6C25               	negf	i2printf@val,c
  7404  000950  0E00               	movlw	0
  7405  000952  2226               	addwfc	i2printf@val+1,f,c
  7406  000954  2227               	addwfc	i2printf@val+2,f,c
  7407  000956  2228               	addwfc	i2printf@val+3,f,c
  7408                           
  7409                           ;doprnt.c: 1264: }
  7410                           ;doprnt.c: 1266: }
  7411  000958  D022               	goto	i2l736
  7412  00095A                     i2l730:
  7413                           
  7414                           ;doprnt.c: 1268: else
  7415                           ;doprnt.c: 1273: {
  7416                           ;doprnt.c: 1281: if(flag & 0x10)
  7417  00095A  A829               	btfss	i2printf@flag,4,c
  7418  00095C  D00E               	goto	i2l735
  7419                           
  7420                           ;doprnt.c: 1282: val = (*(unsigned long *)__va_arg((*(unsigned long **)ap), (unsigned lo
      +                          ng)0));
  7421  00095E  C02A  FFD9         	movff	i2printf@ap,fsr2l
  7422  000962  C02B  FFDA         	movff	i2printf@ap+1,fsr2h
  7423  000966  CFDE F025          	movff	postinc2,i2printf@val
  7424  00096A  CFDE F026          	movff	postinc2,i2printf@val+1
  7425  00096E  CFDE F027          	movff	postinc2,i2printf@val+2
  7426  000972  CFDE F028          	movff	postinc2,i2printf@val+3
  7427  000976  0E04               	movlw	4
  7428  000978  D00F               	goto	L11
  7429  00097A                     i2l735:
  7430                           
  7431                           ;doprnt.c: 1283: else
  7432                           ;doprnt.c: 1286: val = (*(unsigned *)__va_arg((*(unsigned **)ap), (unsigned)0));
  7433  00097A  C02A  FFD9         	movff	i2printf@ap,fsr2l
  7434  00097E  C02B  FFDA         	movff	i2printf@ap+1,fsr2h
  7435  000982  CFDE F021          	movff	postinc2,??i2_printf
  7436  000986  CFDD F022          	movff	postdec2,??i2_printf+1
  7437  00098A  C021  F025         	movff	??i2_printf,i2printf@val
  7438  00098E  C022  F026         	movff	??i2_printf+1,i2printf@val+1
  7439  000992  6A27               	clrf	i2printf@val+2,c
  7440  000994  6A28               	clrf	i2printf@val+3,c
  7441  000996  0E02               	movlw	2
  7442  000998                     L11:
  7443  000998  262A               	addwf	i2printf@ap,f,c
  7444  00099A  0E00               	movlw	0
  7445  00099C  222B               	addwfc	i2printf@ap+1,f,c
  7446  00099E                     i2l736:
  7447                           
  7448                           ;doprnt.c: 1287: }
  7449                           ;doprnt.c: 1305: for(c = 1 ; c != sizeof dpowers/sizeof dpowers[0] ; c++)
  7450  00099E  0E01               	movlw	1
  7451  0009A0  6E2C               	movwf	i2printf@c,c
  7452  0009A2                     i2l2391:
  7453  0009A2  0E0A               	movlw	10
  7454  0009A4  182C               	xorwf	i2printf@c,w,c
  7455  0009A6  B4D8               	btfsc	status,2,c
  7456  0009A8  D01B               	goto	i2u123_40
  7457                           
  7458                           ;doprnt.c: 1306: if(val < dpowers[c])
  7459  0009AA  502C               	movf	i2printf@c,w,c
  7460  0009AC  0D04               	mullw	4
  7461  0009AE  0E4B               	movlw	low _dpowers
  7462  0009B0  24F3               	addwf	prodl,w,c
  7463  0009B2  6EF6               	movwf	tblptrl,c
  7464  0009B4  0EFC               	movlw	high _dpowers
  7465  0009B6  20F4               	addwfc	prodh,w,c
  7466  0009B8  6EF7               	movwf	tblptrh,c
  7467  0009BA                     	if	1	;There are 3 active tblptr bytes
  7468  0009BA  6AF8               	clrf	tblptru,c
  7469  0009BC  0E00               	movlw	low (__mediumconst shr (0+16))
  7470  0009BE  22F8               	addwfc	tblptru,f,c
  7471  0009C0                     	endif
  7472  0009C0  0009               	tblrd		*+
  7473  0009C2  50F5               	movf	tablat,w,c
  7474  0009C4  5C25               	subwf	i2printf@val,w,c
  7475  0009C6  0009               	tblrd		*+
  7476  0009C8  50F5               	movf	tablat,w,c
  7477  0009CA  5826               	subwfb	i2printf@val+1,w,c
  7478  0009CC  0009               	tblrd		*+
  7479  0009CE  50F5               	movf	tablat,w,c
  7480  0009D0  5827               	subwfb	i2printf@val+2,w,c
  7481  0009D2  0009               	tblrd		*+
  7482  0009D4  50F5               	movf	tablat,w,c
  7483  0009D6  5828               	subwfb	i2printf@val+3,w,c
  7484  0009D8  A0D8               	btfss	status,0,c
  7485  0009DA  D002               	goto	i2u123_40
  7486                           
  7487                           ;doprnt.c: 1307: break;
  7488  0009DC  2A2C               	incf	i2printf@c,f,c
  7489  0009DE  D7E1               	goto	i2l2391
  7490  0009E0                     i2u123_40:
  7491                           
  7492                           ;doprnt.c: 1422: {
  7493                           ;doprnt.c: 1438: if(flag & 0x03)
  7494  0009E0  C029  F021         	movff	i2printf@flag,??i2_printf
  7495  0009E4  0E03               	movlw	3
  7496  0009E6  1621               	andwf	??i2_printf,f,c
  7497  0009E8  B4D8               	btfsc	status,2,c
  7498  0009EA  D003               	goto	i2l740
  7499                           
  7500                           ;doprnt.c: 1439: (putch('-') );
  7501  0009EC  0E2D               	movlw	45
  7502  0009EE  ECE3  F009         	call	i2_putch
  7503  0009F2                     i2l740:
  7504                           
  7505                           ;doprnt.c: 1469: }
  7506                           ;doprnt.c: 1472: prec = c;
  7507  0009F2  502C               	movf	i2printf@c,w,c
  7508  0009F4  6E23               	movwf	i2printf@prec,c
  7509  0009F6  6A24               	clrf	i2printf@prec+1,c
  7510  0009F8  BE23               	btfsc	i2printf@prec,7,c
  7511  0009FA  0624               	decf	i2printf@prec+1,f,c
  7512                           
  7513                           ;doprnt.c: 1474: while(prec--) {
  7514  0009FC  D041               	goto	i2l741
  7515  0009FE                     i2l2409:
  7516                           
  7517                           ;doprnt.c: 1478: {
  7518                           ;doprnt.c: 1489: c = (val / dpowers[prec]) % 10 + '0';
  7519  0009FE  C023  F021         	movff	i2printf@prec,??i2_printf
  7520  000A02  C024  F022         	movff	i2printf@prec+1,??i2_printf+1
  7521  000A06  90D8               	bcf	status,0,c
  7522  000A08  3621               	rlcf	??i2_printf,f,c
  7523  000A0A  3622               	rlcf	??i2_printf+1,f,c
  7524  000A0C  90D8               	bcf	status,0,c
  7525  000A0E  3621               	rlcf	??i2_printf,f,c
  7526  000A10  3622               	rlcf	??i2_printf+1,f,c
  7527  000A12  0E4B               	movlw	low _dpowers
  7528  000A14  2421               	addwf	??i2_printf,w,c
  7529  000A16  6EF6               	movwf	tblptrl,c
  7530  000A18  0EFC               	movlw	high _dpowers
  7531  000A1A  2022               	addwfc	??i2_printf+1,w,c
  7532  000A1C  6EF7               	movwf	tblptrh,c
  7533  000A1E                     	if	1	;There are 3 active tblptr bytes
  7534  000A1E  6AF8               	clrf	tblptru,c
  7535  000A20  0E00               	movlw	low (__mediumconst shr (0+16))
  7536  000A22  22F8               	addwfc	tblptru,f,c
  7537  000A24                     	endif
  7538  000A24  0009               	tblrd		*+
  7539  000A26  CFF5 F005          	movff	tablat,i2___lldiv@divisor
  7540  000A2A  0009               	tblrd		*+
  7541  000A2C  CFF5 F006          	movff	tablat,i2___lldiv@divisor+1
  7542  000A30  0009               	tblrd		*+
  7543  000A32  CFF5 F007          	movff	tablat,i2___lldiv@divisor+2
  7544  000A36  000A               	tblrd		*-
  7545  000A38  CFF5 F008          	movff	tablat,i2___lldiv@divisor+3
  7546  000A3C  C025  F001         	movff	i2printf@val,i2___lldiv@dividend
  7547  000A40  C026  F002         	movff	i2printf@val+1,i2___lldiv@dividend+1
  7548  000A44  C027  F003         	movff	i2printf@val+2,i2___lldiv@dividend+2
  7549  000A48  C028  F004         	movff	i2printf@val+3,i2___lldiv@dividend+3
  7550  000A4C  EC48  F006         	call	i2___lldiv	;wreg free
  7551  000A50  C001  F00E         	movff	?i2___lldiv,i2___llmod@dividend
  7552  000A54  C002  F00F         	movff	?i2___lldiv+1,i2___llmod@dividend+1
  7553  000A58  C003  F010         	movff	?i2___lldiv+2,i2___llmod@dividend+2
  7554  000A5C  C004  F011         	movff	?i2___lldiv+3,i2___llmod@dividend+3
  7555  000A60  0E0A               	movlw	10
  7556  000A62  6E12               	movwf	i2___llmod@divisor,c
  7557  000A64  0E00               	movlw	0
  7558  000A66  6E13               	movwf	i2___llmod@divisor+1,c
  7559  000A68  0E00               	movlw	0
  7560  000A6A  6E14               	movwf	i2___llmod@divisor+2,c
  7561  000A6C  0E00               	movlw	0
  7562  000A6E  6E15               	movwf	i2___llmod@divisor+3,c
  7563  000A70  ECF7  F006         	call	i2___llmod	;wreg free
  7564  000A74  500E               	movf	?i2___llmod,w,c
  7565  000A76  0F30               	addlw	48
  7566  000A78  6E2C               	movwf	i2printf@c,c
  7567                           
  7568                           ;doprnt.c: 1523: }
  7569                           ;doprnt.c: 1524: (putch(c) );
  7570  000A7A  502C               	movf	i2printf@c,w,c
  7571  000A7C  ECE3  F009         	call	i2_putch
  7572  000A80                     i2l741:
  7573  000A80  0623               	decf	i2printf@prec,f,c
  7574  000A82  A0D8               	btfss	status,0,c
  7575  000A84  0624               	decf	i2printf@prec+1,f,c
  7576  000A86  2823               	incf	i2printf@prec,w,c
  7577  000A88  E1BA               	bnz	i2l2409
  7578  000A8A  2824               	incf	i2printf@prec+1,w,c
  7579  000A8C  A4D8               	btfss	status,2,c
  7580  000A8E  D7B7               	goto	i2l742
  7581  000A90                     i2u125_40:
  7582  000A90  C017  FFF6         	movff	i2printf@f,tblptrl
  7583  000A94  C018  FFF7         	movff	i2printf@f+1,tblptrh
  7584  000A98  4A17               	infsnz	i2printf@f,f,c
  7585  000A9A  2A18               	incf	i2printf@f+1,f,c
  7586  000A9C                     	if	1	;Program memory is < 0x10000, tblptru is always zero
  7587  000A9C  6AF8               	clrf	tblptru,c
  7588  000A9E                     	endif
  7589  000A9E                     	if	0	;tblptru may be non-zero
  7590  000A9E                     	endif
  7591  000A9E  0008               	tblrd		*
  7592  000AA0  CFF5 F02C          	movff	tablat,i2printf@c
  7593  000AA4  502C               	movf	i2printf@c,w,c
  7594  000AA6  B4D8               	btfsc	status,2,c
  7595  000AA8  0012               	return	
  7596  000AAA  D6EC               	goto	i2l717
  7597  000AAC                     __end_ofi2_printf:
  7598                           	opt stack 0
  7599                           tosu	equ	0xFFF
  7600                           tosh	equ	0xFFE
  7601                           tosl	equ	0xFFD
  7602                           pclatu	equ	0xFFB
  7603                           pclath	equ	0xFFA
  7604                           tblptru	equ	0xFF8
  7605                           tblptrh	equ	0xFF7
  7606                           tblptrl	equ	0xFF6
  7607                           tablat	equ	0xFF5
  7608                           prodh	equ	0xFF4
  7609                           prodl	equ	0xFF3
  7610                           intcon	equ	0xFF2
  7611                           intcon2	equ	0xFF1
  7612                           postinc0	equ	0xFEE
  7613                           fsr0h	equ	0xFEA
  7614                           fsr0l	equ	0xFE9
  7615                           wreg	equ	0xFE8
  7616                           postdec1	equ	0xFE5
  7617                           fsr1h	equ	0xFE2
  7618                           fsr1l	equ	0xFE1
  7619                           indf2	equ	0xFDF
  7620                           postinc2	equ	0xFDE
  7621                           postdec2	equ	0xFDD
  7622                           fsr2h	equ	0xFDA
  7623                           fsr2l	equ	0xFD9
  7624                           status	equ	0xFD8
  7625                           
  7626 ;; *************** function i2_putch *****************
  7627 ;; Defined at:
  7628 ;;		line 125 in file "mcc_generated_files/eusart2.c"
  7629 ;; Parameters:    Size  Location     Type
  7630 ;;  txData          1    wreg     unsigned char 
  7631 ;; Auto vars:     Size  Location     Type
  7632 ;;  txData          1    1[COMRAM] unsigned char 
  7633 ;; Return value:  Size  Location     Type
  7634 ;;                  1    wreg      void 
  7635 ;; Registers used:
  7636 ;;		wreg, status,2, cstack
  7637 ;; Tracked objects:
  7638 ;;		On entry : 0/0
  7639 ;;		On exit  : 0/0
  7640 ;;		Unchanged: 0/0
  7641 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7642 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7643 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7644 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7645 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7646 ;;Total ram usage:        1 bytes
  7647 ;; Hardware stack levels used:    1
  7648 ;; Hardware stack levels required when called:    1
  7649 ;; This function calls:
  7650 ;;		i2_EUSART2_Write
  7651 ;; This function is called by:
  7652 ;;		i2_printf
  7653 ;; This function uses a non-reentrant model
  7654 ;;
  7655                           
  7656                           	psect	text45
  7657  0013C6                     __ptext45:
  7658                           	opt stack 0
  7659  0013C6                     i2_putch:
  7660                           	opt stack 22
  7661                           
  7662                           ;incstack = 0
  7663                           ;i2putch@txData stored from wreg
  7664  0013C6  6E02               	movwf	i2putch@txData,c
  7665                           
  7666                           ;eusart2.c: 127: EUSART2_Write(txData);
  7667  0013C8  5002               	movf	i2putch@txData,w,c
  7668  0013CA  ECC9  F009         	call	i2_EUSART2_Write
  7669  0013CE  0012               	return		;funcret
  7670  0013D0                     __end_ofi2_putch:
  7671                           	opt stack 0
  7672                           tosu	equ	0xFFF
  7673                           tosh	equ	0xFFE
  7674                           tosl	equ	0xFFD
  7675                           pclatu	equ	0xFFB
  7676                           pclath	equ	0xFFA
  7677                           tblptru	equ	0xFF8
  7678                           tblptrh	equ	0xFF7
  7679                           tblptrl	equ	0xFF6
  7680                           tablat	equ	0xFF5
  7681                           prodh	equ	0xFF4
  7682                           prodl	equ	0xFF3
  7683                           intcon	equ	0xFF2
  7684                           intcon2	equ	0xFF1
  7685                           postinc0	equ	0xFEE
  7686                           fsr0h	equ	0xFEA
  7687                           fsr0l	equ	0xFE9
  7688                           wreg	equ	0xFE8
  7689                           postdec1	equ	0xFE5
  7690                           fsr1h	equ	0xFE2
  7691                           fsr1l	equ	0xFE1
  7692                           indf2	equ	0xFDF
  7693                           postinc2	equ	0xFDE
  7694                           postdec2	equ	0xFDD
  7695                           fsr2h	equ	0xFDA
  7696                           fsr2l	equ	0xFD9
  7697                           status	equ	0xFD8
  7698                           
  7699 ;; *************** function i2_EUSART2_Write *****************
  7700 ;; Defined at:
  7701 ;;		line 111 in file "mcc_generated_files/eusart2.c"
  7702 ;; Parameters:    Size  Location     Type
  7703 ;;  txData          1    wreg     unsigned char 
  7704 ;; Auto vars:     Size  Location     Type
  7705 ;;  txData          1    0[COMRAM] unsigned char 
  7706 ;; Return value:  Size  Location     Type
  7707 ;;                  1    wreg      void 
  7708 ;; Registers used:
  7709 ;;		wreg
  7710 ;; Tracked objects:
  7711 ;;		On entry : 0/0
  7712 ;;		On exit  : 0/0
  7713 ;;		Unchanged: 0/0
  7714 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7715 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7716 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7717 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7718 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7719 ;;Total ram usage:        1 bytes
  7720 ;; Hardware stack levels used:    1
  7721 ;; This function calls:
  7722 ;;		Nothing
  7723 ;; This function is called by:
  7724 ;;		i2_putch
  7725 ;; This function uses a non-reentrant model
  7726 ;;
  7727                           
  7728                           	psect	text46
  7729  001392                     __ptext46:
  7730                           	opt stack 0
  7731  001392                     i2_EUSART2_Write:
  7732                           	opt stack 22
  7733                           
  7734                           ;incstack = 0
  7735                           ;i2EUSART2_Write@txData stored from wreg
  7736  001392  6E01               	movwf	i2EUSART2_Write@txData,c
  7737  001394                     
  7738                           ;eusart2.c: 114: {
  7739                           
  7740                           ;eusart2.c: 113: while(0 == PIR3bits.TX2IF)
  7741  001394  A8A4               	btfss	4004,4,c	;volatile
  7742  001396  D7FE               	goto	i2l2243
  7743                           
  7744                           ;eusart2.c: 115: }
  7745                           ;eusart2.c: 117: TXREG2 = txData;
  7746  001398  C001  FF73         	movff	i2EUSART2_Write@txData,3955	;volatile
  7747  00139C  0012               	return		;funcret
  7748  00139E                     __end_ofi2_EUSART2_Write:
  7749                           	opt stack 0
  7750                           tosu	equ	0xFFF
  7751                           tosh	equ	0xFFE
  7752                           tosl	equ	0xFFD
  7753                           pclatu	equ	0xFFB
  7754                           pclath	equ	0xFFA
  7755                           tblptru	equ	0xFF8
  7756                           tblptrh	equ	0xFF7
  7757                           tblptrl	equ	0xFF6
  7758                           tablat	equ	0xFF5
  7759                           prodh	equ	0xFF4
  7760                           prodl	equ	0xFF3
  7761                           intcon	equ	0xFF2
  7762                           intcon2	equ	0xFF1
  7763                           postinc0	equ	0xFEE
  7764                           fsr0h	equ	0xFEA
  7765                           fsr0l	equ	0xFE9
  7766                           wreg	equ	0xFE8
  7767                           postdec1	equ	0xFE5
  7768                           fsr1h	equ	0xFE2
  7769                           fsr1l	equ	0xFE1
  7770                           indf2	equ	0xFDF
  7771                           postinc2	equ	0xFDE
  7772                           postdec2	equ	0xFDD
  7773                           fsr2h	equ	0xFDA
  7774                           fsr2l	equ	0xFD9
  7775                           status	equ	0xFD8
  7776                           
  7777 ;; *************** function i2___llmod *****************
  7778 ;; Defined at:
  7779 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\llmod.c"
  7780 ;; Parameters:    Size  Location     Type
  7781 ;;  dividend        4   13[COMRAM] unsigned long 
  7782 ;;  divisor         4   17[COMRAM] unsigned long 
  7783 ;; Auto vars:     Size  Location     Type
  7784 ;;  __llmod         1   21[COMRAM] unsigned char 
  7785 ;; Return value:  Size  Location     Type
  7786 ;;                  4   13[COMRAM] unsigned long 
  7787 ;; Registers used:
  7788 ;;		wreg, status,2, status,0
  7789 ;; Tracked objects:
  7790 ;;		On entry : 0/0
  7791 ;;		On exit  : 0/0
  7792 ;;		Unchanged: 0/0
  7793 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7794 ;;      Params:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7795 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7796 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7797 ;;      Totals:         9       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7798 ;;Total ram usage:        9 bytes
  7799 ;; Hardware stack levels used:    1
  7800 ;; This function calls:
  7801 ;;		Nothing
  7802 ;; This function is called by:
  7803 ;;		i2_printf
  7804 ;; This function uses a non-reentrant model
  7805 ;;
  7806                           
  7807                           	psect	text47
  7808  000DEE                     __ptext47:
  7809                           	opt stack 0
  7810  000DEE                     i2___llmod:
  7811                           	opt stack 23
  7812                           
  7813                           ;incstack = 0
  7814  000DEE  5012               	movf	i2___llmod@divisor,w,c
  7815  000DF0  1013               	iorwf	i2___llmod@divisor+1,w,c
  7816  000DF2  1014               	iorwf	i2___llmod@divisor+2,w,c
  7817  000DF4  1015               	iorwf	i2___llmod@divisor+3,w,c
  7818  000DF6  B4D8               	btfsc	status,2,c
  7819  000DF8  D024               	goto	i2l1111
  7820  000DFA  0E01               	movlw	1
  7821  000DFC  6E16               	movwf	i2___llmod@counter,c
  7822  000DFE  D006               	goto	i2l1106
  7823  000E00  90D8               	bcf	status,0,c
  7824  000E02  3612               	rlcf	i2___llmod@divisor,f,c
  7825  000E04  3613               	rlcf	i2___llmod@divisor+1,f,c
  7826  000E06  3614               	rlcf	i2___llmod@divisor+2,f,c
  7827  000E08  3615               	rlcf	i2___llmod@divisor+3,f,c
  7828  000E0A  2A16               	incf	i2___llmod@counter,f,c
  7829  000E0C                     i2l1106:
  7830  000E0C  AE15               	btfss	i2___llmod@divisor+3,7,c
  7831  000E0E  D7F8               	goto	i2l1107
  7832  000E10                     i2u109_40:
  7833  000E10  5012               	movf	i2___llmod@divisor,w,c
  7834  000E12  5C0E               	subwf	i2___llmod@dividend,w,c
  7835  000E14  5013               	movf	i2___llmod@divisor+1,w,c
  7836  000E16  580F               	subwfb	i2___llmod@dividend+1,w,c
  7837  000E18  5014               	movf	i2___llmod@divisor+2,w,c
  7838  000E1A  5810               	subwfb	i2___llmod@dividend+2,w,c
  7839  000E1C  5015               	movf	i2___llmod@divisor+3,w,c
  7840  000E1E  5811               	subwfb	i2___llmod@dividend+3,w,c
  7841  000E20  A0D8               	btfss	status,0,c
  7842  000E22  D008               	goto	i2l1110
  7843  000E24  5012               	movf	i2___llmod@divisor,w,c
  7844  000E26  5E0E               	subwf	i2___llmod@dividend,f,c
  7845  000E28  5013               	movf	i2___llmod@divisor+1,w,c
  7846  000E2A  5A0F               	subwfb	i2___llmod@dividend+1,f,c
  7847  000E2C  5014               	movf	i2___llmod@divisor+2,w,c
  7848  000E2E  5A10               	subwfb	i2___llmod@dividend+2,f,c
  7849  000E30  5015               	movf	i2___llmod@divisor+3,w,c
  7850  000E32  5A11               	subwfb	i2___llmod@dividend+3,f,c
  7851  000E34                     i2l1110:
  7852  000E34  90D8               	bcf	status,0,c
  7853  000E36  3215               	rrcf	i2___llmod@divisor+3,f,c
  7854  000E38  3214               	rrcf	i2___llmod@divisor+2,f,c
  7855  000E3A  3213               	rrcf	i2___llmod@divisor+1,f,c
  7856  000E3C  3212               	rrcf	i2___llmod@divisor,f,c
  7857  000E3E  2E16               	decfsz	i2___llmod@counter,f,c
  7858  000E40  D7E7               	goto	i2u109_40
  7859  000E42                     i2l1111:
  7860  000E42  C00E  F00E         	movff	i2___llmod@dividend,?i2___llmod
  7861  000E46  C00F  F00F         	movff	i2___llmod@dividend+1,?i2___llmod+1
  7862  000E4A  C010  F010         	movff	i2___llmod@dividend+2,?i2___llmod+2
  7863  000E4E  C011  F011         	movff	i2___llmod@dividend+3,?i2___llmod+3
  7864  000E52  0012               	return		;funcret
  7865  000E54                     __end_ofi2___llmod:
  7866                           	opt stack 0
  7867                           tosu	equ	0xFFF
  7868                           tosh	equ	0xFFE
  7869                           tosl	equ	0xFFD
  7870                           pclatu	equ	0xFFB
  7871                           pclath	equ	0xFFA
  7872                           tblptru	equ	0xFF8
  7873                           tblptrh	equ	0xFF7
  7874                           tblptrl	equ	0xFF6
  7875                           tablat	equ	0xFF5
  7876                           prodh	equ	0xFF4
  7877                           prodl	equ	0xFF3
  7878                           intcon	equ	0xFF2
  7879                           intcon2	equ	0xFF1
  7880                           postinc0	equ	0xFEE
  7881                           fsr0h	equ	0xFEA
  7882                           fsr0l	equ	0xFE9
  7883                           wreg	equ	0xFE8
  7884                           postdec1	equ	0xFE5
  7885                           fsr1h	equ	0xFE2
  7886                           fsr1l	equ	0xFE1
  7887                           indf2	equ	0xFDF
  7888                           postinc2	equ	0xFDE
  7889                           postdec2	equ	0xFDD
  7890                           fsr2h	equ	0xFDA
  7891                           fsr2l	equ	0xFD9
  7892                           status	equ	0xFD8
  7893                           
  7894 ;; *************** function i2___lldiv *****************
  7895 ;; Defined at:
  7896 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\lldiv.c"
  7897 ;; Parameters:    Size  Location     Type
  7898 ;;  dividend        4    0[COMRAM] unsigned long 
  7899 ;;  divisor         4    4[COMRAM] unsigned long 
  7900 ;; Auto vars:     Size  Location     Type
  7901 ;;  __lldiv         4    8[COMRAM] unsigned long 
  7902 ;;  __lldiv         1   12[COMRAM] unsigned char 
  7903 ;; Return value:  Size  Location     Type
  7904 ;;                  4    0[COMRAM] unsigned long 
  7905 ;; Registers used:
  7906 ;;		wreg, status,2, status,0
  7907 ;; Tracked objects:
  7908 ;;		On entry : 0/0
  7909 ;;		On exit  : 0/0
  7910 ;;		Unchanged: 0/0
  7911 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7912 ;;      Params:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7913 ;;      Locals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7914 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7915 ;;      Totals:        13       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7916 ;;Total ram usage:       13 bytes
  7917 ;; Hardware stack levels used:    1
  7918 ;; This function calls:
  7919 ;;		Nothing
  7920 ;; This function is called by:
  7921 ;;		i2_printf
  7922 ;; This function uses a non-reentrant model
  7923 ;;
  7924                           
  7925                           	psect	text48
  7926  000C90                     __ptext48:
  7927                           	opt stack 0
  7928  000C90                     i2___lldiv:
  7929                           	opt stack 23
  7930                           
  7931                           ;incstack = 0
  7932  000C90  0E00               	movlw	0
  7933  000C92  6E09               	movwf	i2___lldiv@quotient,c
  7934  000C94  0E00               	movlw	0
  7935  000C96  6E0A               	movwf	i2___lldiv@quotient+1,c
  7936  000C98  0E00               	movlw	0
  7937  000C9A  6E0B               	movwf	i2___lldiv@quotient+2,c
  7938  000C9C  0E00               	movlw	0
  7939  000C9E  6E0C               	movwf	i2___lldiv@quotient+3,c
  7940  000CA0  5005               	movf	i2___lldiv@divisor,w,c
  7941  000CA2  1006               	iorwf	i2___lldiv@divisor+1,w,c
  7942  000CA4  1007               	iorwf	i2___lldiv@divisor+2,w,c
  7943  000CA6  1008               	iorwf	i2___lldiv@divisor+3,w,c
  7944  000CA8  B4D8               	btfsc	status,2,c
  7945  000CAA  D02A               	goto	i2l1101
  7946  000CAC  0E01               	movlw	1
  7947  000CAE  6E0D               	movwf	i2___lldiv@counter,c
  7948  000CB0  D006               	goto	i2l1096
  7949  000CB2  90D8               	bcf	status,0,c
  7950  000CB4  3605               	rlcf	i2___lldiv@divisor,f,c
  7951  000CB6  3606               	rlcf	i2___lldiv@divisor+1,f,c
  7952  000CB8  3607               	rlcf	i2___lldiv@divisor+2,f,c
  7953  000CBA  3608               	rlcf	i2___lldiv@divisor+3,f,c
  7954  000CBC  2A0D               	incf	i2___lldiv@counter,f,c
  7955  000CBE                     i2l1096:
  7956  000CBE  AE08               	btfss	i2___lldiv@divisor+3,7,c
  7957  000CC0  D7F8               	goto	i2l1097
  7958  000CC2                     i2u106_40:
  7959  000CC2  90D8               	bcf	status,0,c
  7960  000CC4  3609               	rlcf	i2___lldiv@quotient,f,c
  7961  000CC6  360A               	rlcf	i2___lldiv@quotient+1,f,c
  7962  000CC8  360B               	rlcf	i2___lldiv@quotient+2,f,c
  7963  000CCA  360C               	rlcf	i2___lldiv@quotient+3,f,c
  7964  000CCC  5005               	movf	i2___lldiv@divisor,w,c
  7965  000CCE  5C01               	subwf	i2___lldiv@dividend,w,c
  7966  000CD0  5006               	movf	i2___lldiv@divisor+1,w,c
  7967  000CD2  5802               	subwfb	i2___lldiv@dividend+1,w,c
  7968  000CD4  5007               	movf	i2___lldiv@divisor+2,w,c
  7969  000CD6  5803               	subwfb	i2___lldiv@dividend+2,w,c
  7970  000CD8  5008               	movf	i2___lldiv@divisor+3,w,c
  7971  000CDA  5804               	subwfb	i2___lldiv@dividend+3,w,c
  7972  000CDC  A0D8               	btfss	status,0,c
  7973  000CDE  D009               	goto	i2l1100
  7974  000CE0  5005               	movf	i2___lldiv@divisor,w,c
  7975  000CE2  5E01               	subwf	i2___lldiv@dividend,f,c
  7976  000CE4  5006               	movf	i2___lldiv@divisor+1,w,c
  7977  000CE6  5A02               	subwfb	i2___lldiv@dividend+1,f,c
  7978  000CE8  5007               	movf	i2___lldiv@divisor+2,w,c
  7979  000CEA  5A03               	subwfb	i2___lldiv@dividend+2,f,c
  7980  000CEC  5008               	movf	i2___lldiv@divisor+3,w,c
  7981  000CEE  5A04               	subwfb	i2___lldiv@dividend+3,f,c
  7982  000CF0  8009               	bsf	i2___lldiv@quotient,0,c
  7983  000CF2                     i2l1100:
  7984  000CF2  90D8               	bcf	status,0,c
  7985  000CF4  3208               	rrcf	i2___lldiv@divisor+3,f,c
  7986  000CF6  3207               	rrcf	i2___lldiv@divisor+2,f,c
  7987  000CF8  3206               	rrcf	i2___lldiv@divisor+1,f,c
  7988  000CFA  3205               	rrcf	i2___lldiv@divisor,f,c
  7989  000CFC  2E0D               	decfsz	i2___lldiv@counter,f,c
  7990  000CFE  D7E1               	goto	i2u106_40
  7991  000D00                     i2l1101:
  7992  000D00  C009  F001         	movff	i2___lldiv@quotient,?i2___lldiv
  7993  000D04  C00A  F002         	movff	i2___lldiv@quotient+1,?i2___lldiv+1
  7994  000D08  C00B  F003         	movff	i2___lldiv@quotient+2,?i2___lldiv+2
  7995  000D0C  C00C  F004         	movff	i2___lldiv@quotient+3,?i2___lldiv+3
  7996  000D10  0012               	return		;funcret
  7997  000D12                     __end_ofi2___lldiv:
  7998                           	opt stack 0
  7999                           tosu	equ	0xFFF
  8000                           tosh	equ	0xFFE
  8001                           tosl	equ	0xFFD
  8002                           pclatu	equ	0xFFB
  8003                           pclath	equ	0xFFA
  8004                           tblptru	equ	0xFF8
  8005                           tblptrh	equ	0xFF7
  8006                           tblptrl	equ	0xFF6
  8007                           tablat	equ	0xFF5
  8008                           prodh	equ	0xFF4
  8009                           prodl	equ	0xFF3
  8010                           intcon	equ	0xFF2
  8011                           intcon2	equ	0xFF1
  8012                           postinc0	equ	0xFEE
  8013                           fsr0h	equ	0xFEA
  8014                           fsr0l	equ	0xFE9
  8015                           wreg	equ	0xFE8
  8016                           postdec1	equ	0xFE5
  8017                           fsr1h	equ	0xFE2
  8018                           fsr1l	equ	0xFE1
  8019                           indf2	equ	0xFDF
  8020                           postinc2	equ	0xFDE
  8021                           postdec2	equ	0xFDD
  8022                           fsr2h	equ	0xFDA
  8023                           fsr2l	equ	0xFD9
  8024                           status	equ	0xFD8
  8025                           
  8026 ;; *************** function _TMR0_WriteTimer *****************
  8027 ;; Defined at:
  8028 ;;		line 122 in file "mcc_generated_files/tmr0.c"
  8029 ;; Parameters:    Size  Location     Type
  8030 ;;  timerVal        2    0[COMRAM] unsigned int 
  8031 ;; Auto vars:     Size  Location     Type
  8032 ;;		None
  8033 ;; Return value:  Size  Location     Type
  8034 ;;                  1    wreg      void 
  8035 ;; Registers used:
  8036 ;;		wreg, status,2
  8037 ;; Tracked objects:
  8038 ;;		On entry : 0/0
  8039 ;;		On exit  : 0/0
  8040 ;;		Unchanged: 0/0
  8041 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8042 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8043 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8044 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8045 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8046 ;;Total ram usage:        2 bytes
  8047 ;; Hardware stack levels used:    1
  8048 ;; This function calls:
  8049 ;;		Nothing
  8050 ;; This function is called by:
  8051 ;;		_TMR0_DefaultInterruptHandler
  8052 ;; This function uses a non-reentrant model
  8053 ;;
  8054                           
  8055                           	psect	text49
  8056  0013D0                     __ptext49:
  8057                           	opt stack 0
  8058  0013D0                     _TMR0_WriteTimer:
  8059                           	opt stack 24
  8060                           
  8061                           ;tmr0.c: 125: TMR0H = timerVal >> 8;
  8062                           
  8063                           ;incstack = 0
  8064  0013D0  5002               	movf	TMR0_WriteTimer@timerVal+1,w,c
  8065  0013D2  6ED7               	movwf	4055,c	;volatile
  8066                           
  8067                           ;tmr0.c: 126: TMR0L = (uint8_t) timerVal;
  8068  0013D4  C001  FFD6         	movff	TMR0_WriteTimer@timerVal,4054	;volatile
  8069  0013D8  0012               	return		;funcret
  8070  0013DA                     __end_of_TMR0_WriteTimer:
  8071                           	opt stack 0
  8072                           tosu	equ	0xFFF
  8073                           tosh	equ	0xFFE
  8074                           tosl	equ	0xFFD
  8075                           pclatu	equ	0xFFB
  8076                           pclath	equ	0xFFA
  8077                           tblptru	equ	0xFF8
  8078                           tblptrh	equ	0xFF7
  8079                           tblptrl	equ	0xFF6
  8080                           tablat	equ	0xFF5
  8081                           prodh	equ	0xFF4
  8082                           prodl	equ	0xFF3
  8083                           intcon	equ	0xFF2
  8084                           intcon2	equ	0xFF1
  8085                           postinc0	equ	0xFEE
  8086                           fsr0h	equ	0xFEA
  8087                           fsr0l	equ	0xFE9
  8088                           wreg	equ	0xFE8
  8089                           postdec1	equ	0xFE5
  8090                           fsr1h	equ	0xFE2
  8091                           fsr1l	equ	0xFE1
  8092                           indf2	equ	0xFDF
  8093                           postinc2	equ	0xFDE
  8094                           postdec2	equ	0xFDD
  8095                           fsr2h	equ	0xFDA
  8096                           fsr2l	equ	0xFD9
  8097                           status	equ	0xFD8
  8098                           
  8099 ;; *************** function _CCP5_CaptureISR *****************
  8100 ;; Defined at:
  8101 ;;		line 81 in file "mcc_generated_files/ccp5.c"
  8102 ;; Parameters:    Size  Location     Type
  8103 ;;		None
  8104 ;; Auto vars:     Size  Location     Type
  8105 ;;  module          2    2[COMRAM] struct CCPR5Reg_tag
  8106 ;; Return value:  Size  Location     Type
  8107 ;;                  1    wreg      void 
  8108 ;; Registers used:
  8109 ;;		wreg, status,2, status,0, cstack
  8110 ;; Tracked objects:
  8111 ;;		On entry : 0/0
  8112 ;;		On exit  : 0/0
  8113 ;;		Unchanged: 0/0
  8114 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8115 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8116 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8117 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8118 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8119 ;;Total ram usage:        2 bytes
  8120 ;; Hardware stack levels used:    1
  8121 ;; Hardware stack levels required when called:    1
  8122 ;; This function calls:
  8123 ;;		_CCP5_CallBack
  8124 ;; This function is called by:
  8125 ;;		_INTERRUPT_InterruptManager
  8126 ;; This function uses a non-reentrant model
  8127 ;;
  8128                           
  8129                           	psect	text50
  8130  0012C2                     __ptext50:
  8131                           	opt stack 0
  8132  0012C2                     _CCP5_CaptureISR:
  8133                           	opt stack 25
  8134                           
  8135                           ;ccp5.c: 83: CCP_PERIOD_REG_T module;
  8136                           ;ccp5.c: 86: PIR4bits.CCP5IF = 0;
  8137                           
  8138                           ;incstack = 0
  8139  0012C2  947B               	bcf	3963,2,c	;volatile
  8140                           
  8141                           ;ccp5.c: 89: module.ccpr5l = CCPR5L;
  8142  0012C4  CF55 F003          	movff	3925,CCP5_CaptureISR@module	;volatile
  8143                           
  8144                           ;ccp5.c: 90: module.ccpr5h = CCPR5H;
  8145  0012C8  CF56 F004          	movff	3926,CCP5_CaptureISR@module+1	;volatile
  8146                           
  8147                           ;ccp5.c: 93: CCP5_CallBack(module.ccpr5_16Bit);
  8148  0012CC  C003  F001         	movff	CCP5_CaptureISR@module,CCP5_CallBack@capturedValue
  8149  0012D0  C004  F002         	movff	CCP5_CaptureISR@module+1,CCP5_CallBack@capturedValue+1
  8150  0012D4  ECD6  F008         	call	_CCP5_CallBack	;wreg free
  8151  0012D8  0012               	return		;funcret
  8152  0012DA                     __end_of_CCP5_CaptureISR:
  8153                           	opt stack 0
  8154                           tosu	equ	0xFFF
  8155                           tosh	equ	0xFFE
  8156                           tosl	equ	0xFFD
  8157                           pclatu	equ	0xFFB
  8158                           pclath	equ	0xFFA
  8159                           tblptru	equ	0xFF8
  8160                           tblptrh	equ	0xFF7
  8161                           tblptrl	equ	0xFF6
  8162                           tablat	equ	0xFF5
  8163                           prodh	equ	0xFF4
  8164                           prodl	equ	0xFF3
  8165                           intcon	equ	0xFF2
  8166                           intcon2	equ	0xFF1
  8167                           postinc0	equ	0xFEE
  8168                           fsr0h	equ	0xFEA
  8169                           fsr0l	equ	0xFE9
  8170                           wreg	equ	0xFE8
  8171                           postdec1	equ	0xFE5
  8172                           fsr1h	equ	0xFE2
  8173                           fsr1l	equ	0xFE1
  8174                           indf2	equ	0xFDF
  8175                           postinc2	equ	0xFDE
  8176                           postdec2	equ	0xFDD
  8177                           fsr2h	equ	0xFDA
  8178                           fsr2l	equ	0xFD9
  8179                           status	equ	0xFD8
  8180                           
  8181 ;; *************** function _CCP5_CallBack *****************
  8182 ;; Defined at:
  8183 ;;		line 369 in file "main.c"
  8184 ;; Parameters:    Size  Location     Type
  8185 ;;  capturedValu    2    0[COMRAM] unsigned int 
  8186 ;; Auto vars:     Size  Location     Type
  8187 ;;		None
  8188 ;; Return value:  Size  Location     Type
  8189 ;;                  1    wreg      void 
  8190 ;; Registers used:
  8191 ;;		wreg, status,2, status,0
  8192 ;; Tracked objects:
  8193 ;;		On entry : 0/0
  8194 ;;		On exit  : 0/0
  8195 ;;		Unchanged: 0/0
  8196 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8197 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8198 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8199 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8200 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8201 ;;Total ram usage:        2 bytes
  8202 ;; Hardware stack levels used:    1
  8203 ;; This function calls:
  8204 ;;		Nothing
  8205 ;; This function is called by:
  8206 ;;		_CCP5_CaptureISR
  8207 ;; This function uses a non-reentrant model
  8208 ;;
  8209                           
  8210                           	psect	text51
  8211  0011AC                     __ptext51:
  8212                           	opt stack 0
  8213  0011AC                     _CCP5_CallBack:
  8214                           	opt stack 25
  8215                           
  8216                           ;main.c: 371: if(CCP5CONbits.CCP5M == 0b0101){
  8217                           
  8218                           ;incstack = 0
  8219  0011AC  010F               	movlb	15	; () banked
  8220  0011AE  5154               	movf	84,w,b	;volatile
  8221  0011B0  0B0F               	andlw	15
  8222  0011B2  0A05               	xorlw	5
  8223  0011B4  A4D8               	btfss	status,2,c
  8224  0011B6  D006               	goto	i2l703
  8225                           
  8226                           ; BSR set to: 15
  8227                           ;main.c: 372: CCP5CONbits.CCP5M = 0b0100;
  8228  0011B8  5154               	movf	84,w,b	;volatile
  8229  0011BA  0BF0               	andlw	-16
  8230  0011BC  0904               	iorlw	4
  8231  0011BE  6F54               	movwf	84,b	;volatile
  8232                           
  8233                           ;main.c: 373: encoderB = 1;
  8234  0011C0  0E01               	movlw	1
  8235  0011C2  D005               	goto	L12
  8236  0011C4                     i2l703:
  8237                           
  8238                           ; BSR set to: 15
  8239                           ;main.c: 376: else{
  8240                           ;main.c: 377: CCP5CONbits.CCP5M = 0b0101;
  8241                           
  8242                           ; BSR set to: 15
  8243  0011C4  5154               	movf	84,w,b	;volatile
  8244  0011C6  0BF0               	andlw	-16
  8245  0011C8  0905               	iorlw	5
  8246  0011CA  6F54               	movwf	84,b	;volatile
  8247                           
  8248                           ;main.c: 378: encoderB = 0;
  8249  0011CC  0E00               	movlw	0
  8250  0011CE                     L12:
  8251  0011CE  6E54               	movwf	_encoderB,c
  8252                           
  8253                           ; BSR set to: 15
  8254                           ;main.c: 379: }
  8255                           ;main.c: 381: PIR4bits.CCP5IF = 0;
  8256                           
  8257                           ; BSR set to: 15
  8258  0011D0  947B               	bcf	3963,2,c	;volatile
  8259                           
  8260                           ; BSR set to: 15
  8261  0011D2  0012               	return		;funcret
  8262  0011D4                     __end_of_CCP5_CallBack:
  8263                           	opt stack 0
  8264                           tosu	equ	0xFFF
  8265                           tosh	equ	0xFFE
  8266                           tosl	equ	0xFFD
  8267                           pclatu	equ	0xFFB
  8268                           pclath	equ	0xFFA
  8269                           tblptru	equ	0xFF8
  8270                           tblptrh	equ	0xFF7
  8271                           tblptrl	equ	0xFF6
  8272                           tablat	equ	0xFF5
  8273                           prodh	equ	0xFF4
  8274                           prodl	equ	0xFF3
  8275                           intcon	equ	0xFF2
  8276                           intcon2	equ	0xFF1
  8277                           postinc0	equ	0xFEE
  8278                           fsr0h	equ	0xFEA
  8279                           fsr0l	equ	0xFE9
  8280                           wreg	equ	0xFE8
  8281                           postdec1	equ	0xFE5
  8282                           fsr1h	equ	0xFE2
  8283                           fsr1l	equ	0xFE1
  8284                           indf2	equ	0xFDF
  8285                           postinc2	equ	0xFDE
  8286                           postdec2	equ	0xFDD
  8287                           fsr2h	equ	0xFDA
  8288                           fsr2l	equ	0xFD9
  8289                           status	equ	0xFD8
  8290                           
  8291 ;; *************** function _CCP4_CaptureISR *****************
  8292 ;; Defined at:
  8293 ;;		line 81 in file "mcc_generated_files/ccp4.c"
  8294 ;; Parameters:    Size  Location     Type
  8295 ;;		None
  8296 ;; Auto vars:     Size  Location     Type
  8297 ;;  module          2    2[COMRAM] struct CCPR4Reg_tag
  8298 ;; Return value:  Size  Location     Type
  8299 ;;                  1    wreg      void 
  8300 ;; Registers used:
  8301 ;;		wreg, status,2, status,0, cstack
  8302 ;; Tracked objects:
  8303 ;;		On entry : 0/0
  8304 ;;		On exit  : 0/0
  8305 ;;		Unchanged: 0/0
  8306 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8307 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8308 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8309 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8310 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8311 ;;Total ram usage:        2 bytes
  8312 ;; Hardware stack levels used:    1
  8313 ;; Hardware stack levels required when called:    1
  8314 ;; This function calls:
  8315 ;;		_CCP4_CallBack
  8316 ;; This function is called by:
  8317 ;;		_INTERRUPT_InterruptManager
  8318 ;; This function uses a non-reentrant model
  8319 ;;
  8320                           
  8321                           	psect	text52
  8322  0012DA                     __ptext52:
  8323                           	opt stack 0
  8324  0012DA                     _CCP4_CaptureISR:
  8325                           	opt stack 25
  8326                           
  8327                           ;ccp4.c: 83: CCP_PERIOD_REG_T module;
  8328                           ;ccp4.c: 86: PIR4bits.CCP4IF = 0;
  8329                           
  8330                           ; BSR set to: 15
  8331                           ;incstack = 0
  8332  0012DA  927B               	bcf	3963,1,c	;volatile
  8333                           
  8334                           ;ccp4.c: 89: module.ccpr4l = CCPR4L;
  8335  0012DC  CF58 F003          	movff	3928,CCP4_CaptureISR@module	;volatile
  8336                           
  8337                           ;ccp4.c: 90: module.ccpr4h = CCPR4H;
  8338  0012E0  CF59 F004          	movff	3929,CCP4_CaptureISR@module+1	;volatile
  8339                           
  8340                           ;ccp4.c: 93: CCP4_CallBack(module.ccpr4_16Bit);
  8341  0012E4  C003  F001         	movff	CCP4_CaptureISR@module,CCP4_CallBack@capturedValue
  8342  0012E8  C004  F002         	movff	CCP4_CaptureISR@module+1,CCP4_CallBack@capturedValue+1
  8343  0012EC  EC2A  F007         	call	_CCP4_CallBack	;wreg free
  8344  0012F0  0012               	return		;funcret
  8345  0012F2                     __end_of_CCP4_CaptureISR:
  8346                           	opt stack 0
  8347                           tosu	equ	0xFFF
  8348                           tosh	equ	0xFFE
  8349                           tosl	equ	0xFFD
  8350                           pclatu	equ	0xFFB
  8351                           pclath	equ	0xFFA
  8352                           tblptru	equ	0xFF8
  8353                           tblptrh	equ	0xFF7
  8354                           tblptrl	equ	0xFF6
  8355                           tablat	equ	0xFF5
  8356                           prodh	equ	0xFF4
  8357                           prodl	equ	0xFF3
  8358                           intcon	equ	0xFF2
  8359                           intcon2	equ	0xFF1
  8360                           postinc0	equ	0xFEE
  8361                           fsr0h	equ	0xFEA
  8362                           fsr0l	equ	0xFE9
  8363                           wreg	equ	0xFE8
  8364                           postdec1	equ	0xFE5
  8365                           fsr1h	equ	0xFE2
  8366                           fsr1l	equ	0xFE1
  8367                           indf2	equ	0xFDF
  8368                           postinc2	equ	0xFDE
  8369                           postdec2	equ	0xFDD
  8370                           fsr2h	equ	0xFDA
  8371                           fsr2l	equ	0xFD9
  8372                           status	equ	0xFD8
  8373                           
  8374 ;; *************** function _CCP4_CallBack *****************
  8375 ;; Defined at:
  8376 ;;		line 348 in file "main.c"
  8377 ;; Parameters:    Size  Location     Type
  8378 ;;  capturedValu    2    0[COMRAM] unsigned int 
  8379 ;; Auto vars:     Size  Location     Type
  8380 ;;		None
  8381 ;; Return value:  Size  Location     Type
  8382 ;;                  1    wreg      void 
  8383 ;; Registers used:
  8384 ;;		wreg, status,2, status,0
  8385 ;; Tracked objects:
  8386 ;;		On entry : 0/0
  8387 ;;		On exit  : 0/0
  8388 ;;		Unchanged: 0/0
  8389 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8390 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8391 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8392 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8393 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8394 ;;Total ram usage:        2 bytes
  8395 ;; Hardware stack levels used:    1
  8396 ;; This function calls:
  8397 ;;		Nothing
  8398 ;; This function is called by:
  8399 ;;		_CCP4_CaptureISR
  8400 ;; This function uses a non-reentrant model
  8401 ;;
  8402                           
  8403                           	psect	text53
  8404  000E54                     __ptext53:
  8405                           	opt stack 0
  8406  000E54                     _CCP4_CallBack:
  8407                           	opt stack 25
  8408                           
  8409                           ;main.c: 350: if(CCP4CONbits.CCP4M == 0b0101){
  8410                           
  8411                           ;incstack = 0
  8412  000E54  010F               	movlb	15	; () banked
  8413  000E56  5157               	movf	87,w,b	;volatile
  8414  000E58  0B0F               	andlw	15
  8415  000E5A  0A05               	xorlw	5
  8416  000E5C  A4D8               	btfss	status,2,c
  8417  000E5E  D01A               	goto	i2l696
  8418                           
  8419                           ; BSR set to: 15
  8420                           ;main.c: 351: CCP4CONbits.CCP4M = 0b0100;
  8421  000E60  5157               	movf	87,w,b	;volatile
  8422  000E62  0BF0               	andlw	-16
  8423  000E64  0904               	iorlw	4
  8424  000E66  6F57               	movwf	87,b	;volatile
  8425                           
  8426                           ;main.c: 352: encoderA = 1;
  8427  000E68  0E01               	movlw	1
  8428  000E6A  6E55               	movwf	_encoderA,c
  8429                           
  8430                           ;main.c: 353: if(encoderB==0){
  8431  000E6C  5054               	movf	_encoderB,w,c
  8432  000E6E  A4D8               	btfss	status,2,c
  8433  000E70  D007               	goto	i2l697
  8434                           
  8435                           ; BSR set to: 15
  8436                           ;main.c: 354: encoderPosition++;
  8437  000E72  0E01               	movlw	1
  8438  000E74  0100               	movlb	0	; () banked
  8439  000E76  27A8               	addwf	_encoderPosition& (0+255),f,b
  8440  000E78  0E00               	movlw	0
  8441  000E7A  23A9               	addwfc	(_encoderPosition+1)& (0+255),f,b
  8442  000E7C  23AA               	addwfc	(_encoderPosition+2)& (0+255),f,b
  8443  000E7E  D008               	goto	L13
  8444  000E80                     i2l697:
  8445                           
  8446                           ;main.c: 356: else{
  8447                           ;main.c: 357: encoderPosition--;
  8448                           
  8449                           ; BSR set to: 0
  8450  000E80  0EFF               	movlw	255
  8451  000E82  0100               	movlb	0	; () banked
  8452  000E84  27A8               	addwf	_encoderPosition& (0+255),f,b
  8453  000E86  0EFF               	movlw	255
  8454  000E88  23A9               	addwfc	(_encoderPosition+1)& (0+255),f,b
  8455  000E8A  0EFF               	movlw	255
  8456  000E8C  23AA               	addwfc	(_encoderPosition+2)& (0+255),f,b
  8457  000E8E  0EFF               	movlw	255
  8458  000E90                     L13:
  8459  000E90  23AB               	addwfc	(_encoderPosition+3)& (0+255),f,b
  8460                           
  8461                           ; BSR set to: 0
  8462                           ;main.c: 358: }
  8463                           ;main.c: 359: }
  8464  000E92  D007               	goto	i2l699
  8465  000E94                     i2l696:
  8466                           
  8467                           ;main.c: 360: else{
  8468                           ;main.c: 361: CCP4CONbits.CCP4M = 0b0101;
  8469                           
  8470                           ; BSR set to: 0
  8471  000E94  010F               	movlb	15	; () banked
  8472  000E96  5157               	movf	87,w,b	;volatile
  8473  000E98  0BF0               	andlw	-16
  8474  000E9A  0905               	iorlw	5
  8475  000E9C  6F57               	movwf	87,b	;volatile
  8476                           
  8477                           ;main.c: 362: encoderA = 0;
  8478  000E9E  0E00               	movlw	0
  8479  000EA0  6E55               	movwf	_encoderA,c
  8480  000EA2                     i2l699:
  8481                           
  8482                           ;main.c: 363: }
  8483                           ;main.c: 365: PIR4bits.CCP4IF = 0;
  8484                           
  8485                           ; BSR set to: 15
  8486  000EA2  927B               	bcf	3963,1,c	;volatile
  8487  000EA4  0012               	return		;funcret
  8488  000EA6                     __end_of_CCP4_CallBack:
  8489                           	opt stack 0
  8490                           tosu	equ	0xFFF
  8491                           tosh	equ	0xFFE
  8492                           tosl	equ	0xFFD
  8493                           pclatu	equ	0xFFB
  8494                           pclath	equ	0xFFA
  8495                           tblptru	equ	0xFF8
  8496                           tblptrh	equ	0xFF7
  8497                           tblptrl	equ	0xFF6
  8498                           tablat	equ	0xFF5
  8499                           prodh	equ	0xFF4
  8500                           prodl	equ	0xFF3
  8501                           intcon	equ	0xFF2
  8502                           intcon2	equ	0xFF1
  8503                           postinc0	equ	0xFEE
  8504                           fsr0h	equ	0xFEA
  8505                           fsr0l	equ	0xFE9
  8506                           wreg	equ	0xFE8
  8507                           postdec1	equ	0xFE5
  8508                           fsr1h	equ	0xFE2
  8509                           fsr1l	equ	0xFE1
  8510                           indf2	equ	0xFDF
  8511                           postinc2	equ	0xFDE
  8512                           postdec2	equ	0xFDD
  8513                           fsr2h	equ	0xFDA
  8514                           fsr2l	equ	0xFD9
  8515                           status	equ	0xFD8
  8516                           tosu	equ	0xFFF
  8517                           tosh	equ	0xFFE
  8518                           tosl	equ	0xFFD
  8519                           pclatu	equ	0xFFB
  8520                           pclath	equ	0xFFA
  8521                           tblptru	equ	0xFF8
  8522                           tblptrh	equ	0xFF7
  8523                           tblptrl	equ	0xFF6
  8524                           tablat	equ	0xFF5
  8525                           prodh	equ	0xFF4
  8526                           prodl	equ	0xFF3
  8527                           intcon	equ	0xFF2
  8528                           intcon2	equ	0xFF1
  8529                           postinc0	equ	0xFEE
  8530                           fsr0h	equ	0xFEA
  8531                           fsr0l	equ	0xFE9
  8532                           wreg	equ	0xFE8
  8533                           postdec1	equ	0xFE5
  8534                           fsr1h	equ	0xFE2
  8535                           fsr1l	equ	0xFE1
  8536                           indf2	equ	0xFDF
  8537                           postinc2	equ	0xFDE
  8538                           postdec2	equ	0xFDD
  8539                           fsr2h	equ	0xFDA
  8540                           fsr2l	equ	0xFD9
  8541                           status	equ	0xFD8
  8542                           
  8543                           	psect	text54
  8544  000000                     __ptext54:
  8545                           	opt stack 0
  8546                           tosu	equ	0xFFF
  8547                           tosh	equ	0xFFE
  8548                           tosl	equ	0xFFD
  8549                           pclatu	equ	0xFFB
  8550                           pclath	equ	0xFFA
  8551                           tblptru	equ	0xFF8
  8552                           tblptrh	equ	0xFF7
  8553                           tblptrl	equ	0xFF6
  8554                           tablat	equ	0xFF5
  8555                           prodh	equ	0xFF4
  8556                           prodl	equ	0xFF3
  8557                           intcon	equ	0xFF2
  8558                           intcon2	equ	0xFF1
  8559                           postinc0	equ	0xFEE
  8560                           fsr0h	equ	0xFEA
  8561                           fsr0l	equ	0xFE9
  8562                           wreg	equ	0xFE8
  8563                           postdec1	equ	0xFE5
  8564                           fsr1h	equ	0xFE2
  8565                           fsr1l	equ	0xFE1
  8566                           indf2	equ	0xFDF
  8567                           postinc2	equ	0xFDE
  8568                           postdec2	equ	0xFDD
  8569                           fsr2h	equ	0xFDA
  8570                           fsr2l	equ	0xFD9
  8571                           status	equ	0xFD8
  8572                           
  8573                           	psect	rparam
  8574  0000                     tosu	equ	0xFFF
  8575                           tosh	equ	0xFFE
  8576                           tosl	equ	0xFFD
  8577                           pclatu	equ	0xFFB
  8578                           pclath	equ	0xFFA
  8579                           tblptru	equ	0xFF8
  8580                           tblptrh	equ	0xFF7
  8581                           tblptrl	equ	0xFF6
  8582                           tablat	equ	0xFF5
  8583                           prodh	equ	0xFF4
  8584                           prodl	equ	0xFF3
  8585                           intcon	equ	0xFF2
  8586                           intcon2	equ	0xFF1
  8587                           postinc0	equ	0xFEE
  8588                           fsr0h	equ	0xFEA
  8589                           fsr0l	equ	0xFE9
  8590                           wreg	equ	0xFE8
  8591                           postdec1	equ	0xFE5
  8592                           fsr1h	equ	0xFE2
  8593                           fsr1l	equ	0xFE1
  8594                           indf2	equ	0xFDF
  8595                           postinc2	equ	0xFDE
  8596                           postdec2	equ	0xFDD
  8597                           fsr2h	equ	0xFDA
  8598                           fsr2l	equ	0xFD9
  8599                           status	equ	0xFD8
  8600                           
  8601                           	psect	temp
  8602  000057                     btemp:
  8603                           	opt stack 0
  8604  000057                     	ds	1
  8605  0000                     int$flags	set	btemp
  8606  0000                     wtemp6	set	btemp+1
  8607                           tosu	equ	0xFFF
  8608                           tosh	equ	0xFFE
  8609                           tosl	equ	0xFFD
  8610                           pclatu	equ	0xFFB
  8611                           pclath	equ	0xFFA
  8612                           tblptru	equ	0xFF8
  8613                           tblptrh	equ	0xFF7
  8614                           tblptrl	equ	0xFF6
  8615                           tablat	equ	0xFF5
  8616                           prodh	equ	0xFF4
  8617                           prodl	equ	0xFF3
  8618                           intcon	equ	0xFF2
  8619                           intcon2	equ	0xFF1
  8620                           postinc0	equ	0xFEE
  8621                           fsr0h	equ	0xFEA
  8622                           fsr0l	equ	0xFE9
  8623                           wreg	equ	0xFE8
  8624                           postdec1	equ	0xFE5
  8625                           fsr1h	equ	0xFE2
  8626                           fsr1l	equ	0xFE1
  8627                           indf2	equ	0xFDF
  8628                           postinc2	equ	0xFDE
  8629                           postdec2	equ	0xFDD
  8630                           fsr2h	equ	0xFDA
  8631                           fsr2l	equ	0xFD9
  8632                           status	equ	0xFD8


Data Sizes:
    Strings     908
    Constant    40
    Data        14
    BSS         34
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           94     64      86
    BANK0           160     54      80
    BANK1           256      0       0
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0
    BANK8           256      0       0
    BANK9           256      0       0
    BANK10          256      0       0
    BANK11          256      0       0
    BANK12          256      0       0
    BANK13          256      0       0
    BANK14          256      0       0
    BANK15           56      0       0

Pointer List with Targets:

    printf@f	PTR const unsigned char  size(2) Largest target is 43
		 -> STR_35(CODE[14]), STR_34(CODE[32]), STR_33(CODE[1]), STR_32(CODE[1]), 
		 -> STR_31(CODE[1]), STR_30(CODE[17]), STR_29(CODE[21]), STR_28(CODE[27]), 
		 -> STR_27(CODE[5]), STR_26(CODE[5]), STR_25(CODE[39]), STR_24(CODE[35]), 
		 -> STR_23(CODE[35]), STR_22(CODE[31]), STR_21(CODE[31]), STR_20(CODE[38]), 
		 -> STR_19(CODE[38]), STR_18(CODE[14]), STR_17(CODE[19]), STR_16(CODE[33]), 
		 -> STR_15(CODE[37]), STR_14(CODE[37]), STR_13(CODE[37]), STR_12(CODE[37]), 
		 -> STR_11(CODE[22]), STR_10(CODE[21]), STR_9(CODE[19]), STR_8(CODE[21]), 
		 -> STR_7(CODE[40]), STR_6(CODE[40]), STR_5(CODE[27]), STR_4(CODE[27]), 
		 -> STR_3(CODE[43]), STR_2(CODE[34]), STR_1(CODE[32]), 

    printf@ap	PTR void [1] size(2) Largest target is 2
		 -> ?i2_printf(COMRAM[2]), ?_printf(BANK0[2]), 

    TMR2_SetInterruptHandler@InterruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> TMR2_DefaultInterruptHandler(), 

    TMR2_InterruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> TMR2_DefaultInterruptHandler(), Absolute function(), 

    TMR5_SetInterruptHandler@InterruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> TMR5_DefaultInterruptHandler(), 

    TMR5_InterruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> TMR5_DefaultInterruptHandler(), Absolute function(), 

    TMR1_SetInterruptHandler@InterruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> TMR1_DefaultInterruptHandler(), 

    TMR1_InterruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> TMR1_DefaultInterruptHandler(), Absolute function(), 

    TMR0_SetInterruptHandler@InterruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> TMR0_DefaultInterruptHandler(), 

    TMR0_InterruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> Absolute function(), TMR0_DefaultInterruptHandler(), 


Critical Paths under _main in COMRAM

    None.

Critical Paths under _INTERRUPT_InterruptManager in COMRAM

    _TMR5_ISR->_TMR5_DefaultInterruptHandler
    _TMR5_DefaultInterruptHandler->_TMR5_WriteTimer
    _TMR2_ISR->_TMR2_DefaultInterruptHandler
    _TMR2_DefaultInterruptHandler->i2_setMotorSpeed
    _TMR1_ISR->_TMR1_DefaultInterruptHandler
    _TMR1_DefaultInterruptHandler->_TMR1_WriteTimer
    _TMR0_ISR->_TMR0_DefaultInterruptHandler
    _TMR0_DefaultInterruptHandler->i2_printf
    i2_printf->i2___llmod
    i2_putch->i2_EUSART2_Write
    i2___llmod->i2___lldiv
    _CCP5_CaptureISR->_CCP5_CallBack
    _CCP4_CaptureISR->_CCP4_CallBack

Critical Paths under _main in BANK0

    _main->_printf
    _printf->___llmod
    _putch->_EUSART2_Write
    ___llmod->___lldiv
    _SYSTEM_Initialize->_TMR0_Initialize
    _TMR5_Initialize->_TMR5_SetInterruptHandler
    _TMR2_Initialize->_TMR2_SetInterruptHandler
    _TMR1_Initialize->_TMR1_SetInterruptHandler
    _TMR0_Initialize->_TMR0_SetInterruptHandler

Critical Paths under _INTERRUPT_InterruptManager in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK12

    None.

Critical Paths under _main in BANK13

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK13

    None.

Critical Paths under _main in BANK14

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK14

    None.

Critical Paths under _main in BANK15

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK15

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                10    10      0    5627
                                             44 BANK0     10    10      0
                       _EUSART1_Read
                _EUSART1_is_rx_ready
                       _EUSART2_Read
                _EUSART2_is_rx_ready
                  _SYSTEM_Initialize
                           _parseInt
                             _printf
                      _setMotorSpeed
                      _setPitchServo
                        _setYawServo
 ---------------------------------------------------------------------------------
 (1) _setYawServo                                          2     0      2     296
                                              0 BANK0      2     0      2
 ---------------------------------------------------------------------------------
 (1) _setPitchServo                                        2     0      2     296
                                              0 BANK0      2     0      2
 ---------------------------------------------------------------------------------
 (1) _setMotorSpeed                                        2     0      2     496
                                              0 BANK0      2     0      2
 ---------------------------------------------------------------------------------
 (1) _printf                                              31    21     10    3875
                                             22 BANK0     22    12     10
                            ___lldiv
                            ___llmod
                              _putch
 ---------------------------------------------------------------------------------
 (2) _putch                                                1     1      0      44
                                              1 BANK0      1     1      0
                      _EUSART2_Write
 ---------------------------------------------------------------------------------
 (3) _EUSART2_Write                                        1     1      0      22
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (2) ___llmod                                              9     1      8     311
                                             13 BANK0      9     1      8
                            ___lldiv (ARG)
 ---------------------------------------------------------------------------------
 (2) ___lldiv                                             13     5      8     314
                                              0 BANK0     13     5      8
 ---------------------------------------------------------------------------------
 (1) _parseInt                                             5     3      2      23
                                              0 BANK0      5     3      2
                       _EUSART1_Read
                _EUSART1_is_rx_ready
 ---------------------------------------------------------------------------------
 (2) _EUSART1_is_rx_ready                                  0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _EUSART1_Read                                         0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _SYSTEM_Initialize                                    0     0      0     392
                    _CCP4_Initialize
                    _CCP5_Initialize
                 _EUSART1_Initialize
                 _EUSART2_Initialize
               _INTERRUPT_Initialize
              _OSCILLATOR_Initialize
             _PIN_MANAGER_Initialize
                    _TMR0_Initialize
                    _TMR1_Initialize
                    _TMR2_Initialize
                    _TMR3_Initialize
                    _TMR5_Initialize
 ---------------------------------------------------------------------------------
 (2) _TMR5_Initialize                                      0     0      0      98
           _TMR5_SetInterruptHandler
 ---------------------------------------------------------------------------------
 (3) _TMR5_SetInterruptHandler                             2     0      2      98
                                              0 BANK0      2     0      2
 ---------------------------------------------------------------------------------
 (2) _TMR3_Initialize                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _TMR2_Initialize                                      0     0      0      98
           _TMR2_SetInterruptHandler
 ---------------------------------------------------------------------------------
 (3) _TMR2_SetInterruptHandler                             2     0      2      98
                                              0 BANK0      2     0      2
 ---------------------------------------------------------------------------------
 (2) _TMR1_Initialize                                      0     0      0      98
           _TMR1_SetInterruptHandler
 ---------------------------------------------------------------------------------
 (3) _TMR1_SetInterruptHandler                             2     0      2      98
                                              0 BANK0      2     0      2
 ---------------------------------------------------------------------------------
 (2) _TMR0_Initialize                                      2     2      0      98
                                              2 BANK0      2     2      0
           _TMR0_SetInterruptHandler
 ---------------------------------------------------------------------------------
 (3) _TMR0_SetInterruptHandler                             2     0      2      98
                                              0 BANK0      2     0      2
 ---------------------------------------------------------------------------------
 (2) _PIN_MANAGER_Initialize                               0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _OSCILLATOR_Initialize                                0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _INTERRUPT_Initialize                                 0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _EUSART2_Initialize                                   0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _EUSART1_Initialize                                   0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _CCP5_Initialize                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _CCP4_Initialize                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _EUSART2_is_rx_ready                                  0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _EUSART2_Read                                         0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 3
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (4) _INTERRUPT_InterruptManager                          18    18      0    3384
                                             46 COMRAM    18    18      0
                    _CCP4_CaptureISR
                    _CCP5_CaptureISR
                           _TMR0_ISR
                           _TMR1_ISR
                           _TMR2_ISR
                           _TMR5_ISR
 ---------------------------------------------------------------------------------
 (5) _TMR5_ISR                                             0     0      0     784
                   Absolute function *
       _TMR5_DefaultInterruptHandler *
                    _TMR5_WriteTimer
 ---------------------------------------------------------------------------------
 (6) _TMR5_DefaultInterruptHandler                         2     2      0     392
                                              2 COMRAM     2     2      0
                    _TMR5_WriteTimer
 ---------------------------------------------------------------------------------
 (6) _TMR5_WriteTimer                                      2     0      2     392
                                              0 COMRAM     2     0      2
 ---------------------------------------------------------------------------------
 (5) _TMR2_ISR                                             0     0      0     307
                   Absolute function *
       _TMR2_DefaultInterruptHandler *
 ---------------------------------------------------------------------------------
 (6) _TMR2_DefaultInterruptHandler                         8     8      0     307
                                              2 COMRAM     8     8      0
                    _TMR2_WriteTimer
                    i2_setMotorSpeed
 ---------------------------------------------------------------------------------
 (7) i2_setMotorSpeed                                      2     0      2     172
                                              0 COMRAM     2     0      2
 ---------------------------------------------------------------------------------
 (7) _TMR2_WriteTimer                                      1     1      0      22
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (5) _TMR1_ISR                                             0     0      0     784
                   Absolute function *
       _TMR1_DefaultInterruptHandler *
                    _TMR1_WriteTimer
 ---------------------------------------------------------------------------------
 (6) _TMR1_DefaultInterruptHandler                         2     2      0     392
                                              2 COMRAM     2     2      0
                    _TMR1_WriteTimer
 ---------------------------------------------------------------------------------
 (6) _TMR1_WriteTimer                                      2     0      2     392
                                              0 COMRAM     2     0      2
 ---------------------------------------------------------------------------------
 (5) _TMR0_ISR                                             0     0      0    1263
                   Absolute function *
       _TMR0_DefaultInterruptHandler *
 ---------------------------------------------------------------------------------
 (6) _TMR0_DefaultInterruptHandler                         2     2      0    1263
                                             44 COMRAM     2     2      0
                    _TMR0_WriteTimer
                           i2_printf
 ---------------------------------------------------------------------------------
 (7) i2_printf                                            31    21     10    1067
                                             22 COMRAM    22    12     10
                          i2___lldiv
                          i2___llmod
                            i2_putch
 ---------------------------------------------------------------------------------
 (8) i2_putch                                              1     1      0      44
                                              1 COMRAM     1     1      0
                    i2_EUSART2_Write
 ---------------------------------------------------------------------------------
 (9) i2_EUSART2_Write                                      1     1      0      22
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (8) i2___llmod                                            9     1      8     211
                                             13 COMRAM     9     1      8
                          i2___lldiv (ARG)
 ---------------------------------------------------------------------------------
 (8) i2___lldiv                                           13     5      8     214
                                              0 COMRAM    13     5      8
 ---------------------------------------------------------------------------------
 (7) _TMR0_WriteTimer                                      2     0      2     196
                                              0 COMRAM     2     0      2
 ---------------------------------------------------------------------------------
 (6) Absolute function(Fake)                               0     0      0       0
 ---------------------------------------------------------------------------------
 (5) _CCP5_CaptureISR                                      2     2      0     123
                                              2 COMRAM     2     2      0
                      _CCP5_CallBack
 ---------------------------------------------------------------------------------
 (6) _CCP5_CallBack                                        2     0      2      76
                                              0 COMRAM     2     0      2
 ---------------------------------------------------------------------------------
 (5) _CCP4_CaptureISR                                      2     2      0     123
                                              2 COMRAM     2     2      0
                      _CCP4_CallBack
 ---------------------------------------------------------------------------------
 (6) _CCP4_CallBack                                        2     0      2      76
                                              0 COMRAM     2     0      2
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 9
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _EUSART1_Read
   _EUSART1_is_rx_ready
   _EUSART2_Read
   _EUSART2_is_rx_ready
   _SYSTEM_Initialize
     _CCP4_Initialize
     _CCP5_Initialize
     _EUSART1_Initialize
     _EUSART2_Initialize
     _INTERRUPT_Initialize
     _OSCILLATOR_Initialize
     _PIN_MANAGER_Initialize
     _TMR0_Initialize
       _TMR0_SetInterruptHandler
     _TMR1_Initialize
       _TMR1_SetInterruptHandler
     _TMR2_Initialize
       _TMR2_SetInterruptHandler
     _TMR3_Initialize
     _TMR5_Initialize
       _TMR5_SetInterruptHandler
   _parseInt
     _EUSART1_Read
     _EUSART1_is_rx_ready
   _printf
     ___lldiv
     ___llmod
       ___lldiv (ARG)
     _putch
       _EUSART2_Write
   _setMotorSpeed
   _setPitchServo
   _setYawServo

 _INTERRUPT_InterruptManager (ROOT)
   _CCP4_CaptureISR
     _CCP4_CallBack
   _CCP5_CaptureISR
     _CCP5_CallBack
   _TMR0_ISR
     Absolute function(Fake) *
     _TMR0_DefaultInterruptHandler *
       _TMR0_WriteTimer
       i2_printf
         i2___lldiv
         i2___llmod
           i2___lldiv (ARG)
         i2_putch
           i2_EUSART2_Write
   _TMR1_ISR
     Absolute function(Fake) *
     _TMR1_DefaultInterruptHandler *
       _TMR1_WriteTimer
     _TMR1_WriteTimer *
   _TMR2_ISR
     Absolute function(Fake) *
     _TMR2_DefaultInterruptHandler *
       _TMR2_WriteTimer
       i2_setMotorSpeed
   _TMR5_ISR
     Absolute function(Fake) *
     _TMR5_DefaultInterruptHandler *
       _TMR5_WriteTimer
     _TMR5_WriteTimer *

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             F37      0       0      37        0.0%
EEDATA             400      0       0       0        0.0%
BITBANK14          100      0       0      33        0.0%
BANK14             100      0       0      34        0.0%
BITBANK13          100      0       0      31        0.0%
BANK13             100      0       0      32        0.0%
BITBANK12          100      0       0      29        0.0%
BANK12             100      0       0      30        0.0%
BITBANK11          100      0       0      27        0.0%
BANK11             100      0       0      28        0.0%
BITBANK10          100      0       0      25        0.0%
BANK10             100      0       0      26        0.0%
BITBANK9           100      0       0      23        0.0%
BANK9              100      0       0      24        0.0%
BITBANK8           100      0       0      21        0.0%
BANK8              100      0       0      22        0.0%
BITBANK7           100      0       0      19        0.0%
BANK7              100      0       0      20        0.0%
BITBANK6           100      0       0      17        0.0%
BANK6              100      0       0      18        0.0%
BITBANK5           100      0       0      15        0.0%
BANK5              100      0       0      16        0.0%
BITBANK4           100      0       0      13        0.0%
BANK4              100      0       0      14        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0       0       9        0.0%
BITBANK1           100      0       0       6        0.0%
BANK1              100      0       0       7        0.0%
BITBANK0            A0      0       0       4        0.0%
BANK0               A0     36      50       5       50.0%
BITCOMRAM           5E      0       0       0        0.0%
COMRAM              5E     40      56       1       91.5%
BITBANK15           38      0       0      35        0.0%
BANK15              38      0       0      36        0.0%
BITSFR_1             0      0       0     200        0.0%
SFR_1                0      0       0     200        0.0%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0      A6      12        0.0%
DATA                 0      0      A6       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V1.45 build -152302408 
Symbol Table                                                                                   Mon May 07 21:15:30 2018

                         _CCP4_Initialize 128A          __end_of_TMR2_SetInterruptHandler 13B2  
        __end_of_TMR5_SetInterruptHandler 13A8                         ??_TMR5_WriteTimer 0003  
                         _timer0ReloadVal 004D                              __CFG_CP0$OFF 000000  
                            __CFG_CP1$OFF 000000                              __CFG_CP2$OFF 000000  
                            __CFG_CP3$OFF 000000                               __CFG_LVP$ON 000000  
                                     l119 132A                                       l161 134C  
                                     l344 133C                                       l601 03A2  
                                     l610 05FC                                       l611 0486  
                                     l603 03CA                                       l620 05D2  
                                     l604 03DE                                       l621 05E8  
                                     l613 04C4                                       l614 0504  
                                     l606 03EE                                       l615 0570  
                                     l607 03FE                                       l720 0682  
                                     l640 1034                                       l632 0FEC  
                                     l616 0582                                       l608 0402  
                                     l617 0594                                       l730 071E  
                                     l634 1000                                       l626 0FB8  
                                     l618 05A6                                       l731 06E2  
                                     l723 065C                                       l619 05BC  
                                     l740 07B6                                       l628 0FCC  
                                     l741 084A                                       l717 0644  
                                     l581 013A                                       l742 07C4  
                                     l726 06BE                                       l718 0654  
                                     l638 1020                                       l590 0290  
                                     l735 073E                                       l727 0660  
                                     l583 0418                                       l591 02BE  
                                     l736 0762                                       l728 0674  
                                     l592 02EC                                       l584 014E  
                                     l729 067C                                       l585 0472  
                                     l593 0320                                       l586 0176  
                                     l595 0382                                       l587 01A0  
                                     l596 0354                                       l588 023C  
                                     l589 0266                                       l598 0392  
                            __CFG_CPB$OFF 000000                                       _PR2 000FBB  
                            __CFG_CPD$OFF 000000                           _timer1ReloadVal 0049  
                         _TMR2_Initialize 1216                                       tosl 000FFD  
                                     wreg 000FE8                                _TXSTA1bits 000FAC  
                              _TXSTA2bits 000F72                   __end_of_CCP4_CaptureISR 12F2  
                         _CCP5_Initialize 126E                                      l1100 0C70  
                                    l1101 0C7E                                      l1110 0DCE  
                                    l1111 0DDC                                      l1106 0DA6  
                                    l1107 0D9A                                      l1096 0C3C  
                                    l1097 0C30                           _timer3ReloadVal 004B  
                                    l2287 1370                                      l2767 0766  
                                    l2785 07C4                                      STR_1 FE7E  
                                    STR_2 FE3B                                      STR_3 FC73  
                                    STR_4 FF17                                      STR_5 FF32  
                                    STR_6 FCC6                                      STR_7 FC9E  
                                    STR_8 FF8D                                      STR_9 FFB5  
                                    u1310 1382                                      _LATA 000F89  
                                    u1510 0DAA                                      _LATB 000F8A  
                                    _LATC 000F8B                                      u1610 138E  
                                    u1710 07A4                                      u1480 0C40  
                                    u1730 085C                                      i2l71 007A  
                                    i2l73 0086                                      i2l66 005E  
                                    i2l75 0092                                      i2l77 009C  
                                    i2l69 006E                                      _TMR1 000FCE  
                                    _TMR2 000FBC                                      _TMR3 000FB2  
                                    _TMR5 000F4F                                      _WPUB 000F61  
                         i2_setMotorSpeed 1070                             _EUSART2_Write 136C  
                                    _main 00EC                                      _home 00A4  
                           ?_EUSART1_Read 0001                             ?_EUSART2_Read 0001  
                                    fsr0h 000FEA                                      fsr1h 000FE2  
                                    fsr2h 000FDA                                      fsr0l 000FE9  
                                    indf2 000FDF                                      fsr1l 000FE1  
                                    fsr2l 000FD9                                      btemp 0057  
                           __CFG_BORV$190 000000                                      prodh 000FF4  
                                    prodl 000FF3                                      start 00E8  
                         _timer5ReloadVal 0045                             __CFG_IESO$OFF 000000  
                         _TMR3_Initialize 1252                           __end_ofi2_putch 13D0  
              ??_TMR1_SetInterruptHandler 0062                              ___param_bank 000000  
                 __end_of_CCP5_CaptureISR 12DA                  __size_ofi2_EUSART2_Write 000C  
                 __end_of_TMR0_Initialize 0FA2            ??_TMR0_DefaultInterruptHandler 002D  
          __size_of_OSCILLATOR_Initialize 0012             __end_of_OSCILLATOR_Initialize 1330  
                                   ?_main 0001                                     STR_10 FF78  
                                   STR_11 FF4D                                     STR_12 FD61  
                                   STR_20 FD15                                     STR_21 FEDD  
                                   STR_13 FDD0                                     STR_30 FFC8  
                                   STR_22 FEBE                                     STR_14 FD86  
                                   STR_31 FF77                                     STR_23 FE18  
                                   STR_15 FDAB                                     STR_32 FF77  
                                   STR_16 FE5D                                     STR_24 FDF5  
                                   STR_33 FF77                                     STR_17 FFA2  
                                   STR_25 FCEE                                     STR_26 FFF5  
                                   STR_18 FFD9                                     STR_34 FE9E  
                                   STR_27 FFFA                                     STR_35 FFE7  
                                   STR_19 FD3B                                     STR_28 FEFC  
                                   STR_29 FF63                           __end_of___lldiv 0C90  
                                   _T0CON 000FD5                                     _T1CON 000FCD  
                         __end_of___llmod 0DEE                                     _T2CON 000FBA  
                                   _T3CON 000FB1                                     _T5CON 000F4E  
                          __CFG_DEBUG$OFF 000000                           _TMR0_WriteTimer 13D0  
                                   i2l451 1248                                     i2l703 11C4  
                                   i2l720 08BE                                     i2l392 12B8  
                                   i2l640 1098                                     i2l730 095A  
                                   i2l731 091E                                     i2l723 089A  
                                   i2l740 09F2                                     i2l652 0D3E  
                                   i2l741 0A80                                     i2l717 0884  
                                   i2l742 09FE                                     i2l726 08FA  
                                   i2l718 0894                                     i2l638 1084  
                                   i2l735 097A                                     i2l727 089E  
                                   i2l736 099E                                     i2l728 08B2  
                                   i2l664 0F56                                     i2l680 0BCC  
                                   i2l729 08BA                                     i2l681 0C02  
                                   i2l658 0D82                                     i2l674 0B14  
                                   i2l675 0B3C                                     i2l676 0B8A  
                                   i2l679 0B96                                     i2l687 0F14  
                                   i2l696 0E94                                     i2l697 0E80  
                                   i2l699 0EA2                                     _TMR0H 000FD7  
                                   _TMR1H 000FCF                                     _TMR0L 000FD6  
                                   _TMR3H 000FB3                                     _TMR1L 000FCE  
                                   _TMR3L 000FB2                                     _TMR5H 000F50  
                                   _TMR5L 000F4F                                     _TRISA 000F92  
                                   _TRISB 000F93                                     _TRISC 000F94  
       __size_of_TMR0_SetInterruptHandler 000A                             __CFG_WRT0$OFF 000000  
                           __CFG_WRT1$OFF 000000                             __CFG_WRT2$OFF 000000  
               ?_TMR0_SetInterruptHandler 0060                             __CFG_WRT3$OFF 000000  
                          __CFG_EBTR0$OFF 000000                            __CFG_FCMEN$OFF 000000  
                          __CFG_EBTR1$OFF 000000                            __CFG_EBTR2$OFF 000000  
                          __CFG_EBTR3$OFF 000000                          __end_of_TMR0_ISR 11AC  
                        __end_of_TMR1_ISR 1184                          __end_of_TMR2_ISR 1216  
                           __CFG_WRTB$OFF 000000                             __CFG_WRTC$OFF 000000  
                           __CFG_WRTD$OFF 000000                          __end_of_TMR5_ISR 1158  
                          __CFG_EBTRB$OFF 000000                           __end_of_dpowers FC73  
                      __CFG_MCLRE$EXTMCLR 000000                                     _putch 135E  
                 __end_of_TMR1_Initialize 112C                            ?_EUSART2_Write 0001  
                                   pclath 000FFA                                     tablat 000FF5  
                          ??_EUSART1_Read 0060                            ??_EUSART2_Read 0060  
                  __size_of_CCP4_CallBack 0052                                     status 000FD8  
                 __end_of_CCP4_Initialize 12A6                                     wtemp6 0058  
                          __CFG_HFOFST$ON 000000                           _TMR1_WriteTimer 12A6  
                          __CFG_PBADEN$ON 000000                          _motorControlMode 0056  
                      __size_ofi2___lldiv 0082                    __size_of_CCP5_CallBack 0028  
                      __size_ofi2___llmod 0066                          __end_ofi2_printf 0AAC  
                         _TMR5_Initialize 10A2                           __initialization 0EA6  
                       i2___lldiv@divisor 0005                __end_of_EUSART1_Initialize 131E  
                            __end_of_main 0638                         i2___lldiv@counter 000D  
                              i2printf@ap 002A                     __end_of_setPitchServo 100A  
                          setYawServo@pos 0060                   __end_of_TMR2_Initialize 1234  
             ?_INTERRUPT_InterruptManager 0001                  _TMR2_SetInterruptHandler 13A8  
                                  ??_main 008C                   __end_of_CCP5_Initialize 128A  
                _TMR5_SetInterruptHandler 139E                             __activetblptr 000003  
                         _TMR2_WriteTimer 13DA                     __end_of_setMotorSpeed 103E  
                 __end_ofi2_setMotorSpeed 10A2                          ?_CCP4_CaptureISR 0001  
              __end_of_EUSART2_Initialize 1308                          ___llmod@dividend 006D  
                                  _CCPR4H 000F59                                    _CCPR5H 000F56  
                                  _CCPR4L 000F58                                    _CCPR5L 000F55  
                                  _ANSELA 000F38                                    ?_putch 0001  
                                  _ANSELB 000F39                                    _ANSELC 000F3A  
                                  _T1GCON 000FCC                                    _T3GCON 000FB4  
                                  _T5GCON 000F4D                              ?_setYawServo 0060  
                 TMR1_WriteTimer@timerVal 0001              __size_of_EUSART1_is_rx_ready 000C  
                                  i2l1100 0CF2                                    i2l1101 0D00  
                                  i2l1110 0E34                                    i2l1111 0E42  
                                  i2l1106 0E0C                                    i2l1107 0E00  
                 __end_of_TMR3_Initialize 126E                                    i2l1096 0CBE  
                                  i2l1097 0CB2                                    i2l2243 1394  
                                  i2l2409 09FE                            __CFG_WDTEN$OFF 000000  
                                  i2l2391 09A2                                    i2l2573 0B68  
                           i2putch@txData 0002                                    _RCREG1 000FAE  
                                  _RCREG2 000F74                                    _RCSTA1 000FAB  
                                  _RCSTA2 000F71                                    _OSCCON 000FD3  
                                  _PLLRDY 007E97                                    _SPBRG1 000FAF  
                                  _SPBRG2 000F75                                 ??i2_putch 0002  
                                  _TXREG1 000FAD                                    _TXREG2 000F73  
                                  _TXSTA1 000FAC                                    _TXSTA2 000F72  
                          __CFG_XINST$OFF 000000      __end_of_TMR1_DefaultInterruptHandler 0F6C  
   __size_of_TMR1_DefaultInterruptHandler 0042              _TMR1_DefaultInterruptHandler 0F2A  
                            _CCPTMRS1bits 000F48                          ?_CCP5_CaptureISR 0001  
                          __CFG_STVREN$ON 000000                   __end_of_TMR0_WriteTimer 13DA  
                               ??___lldiv 0068                                 ??___llmod 0075  
                        ?_TMR0_Initialize 0001                                    clear_0 0ECC  
                                  clear_1 0ED8                          __end_of_parseInt 11F6  
                           _CCP4_CallBack 0E54                                    _printf 0638  
                       ??i2_EUSART2_Write 0001                             _CCP5_CallBack 11AC  
                        parseInt@position 0063                         __end_ofi2___lldiv 0D12  
                       __end_ofi2___llmod 0E54                              __mediumconst FC4A  
                                  tblptrh 000FF7                                    tblptrl 000FF6  
                                  tblptru 000FF8                           ??_EUSART2_Write 0060  
TMR2_SetInterruptHandler@InterruptHandler 0060  TMR5_SetInterruptHandler@InterruptHandler 0060  
TMR1_SetInterruptHandler@InterruptHandler 0060  TMR0_SetInterruptHandler@InterruptHandler 0060  
                 __end_of_TMR1_WriteTimer 12C2             __size_of_INTERRUPT_Initialize 0004  
                        ?_TMR1_Initialize 0001              __size_of_EUSART2_is_rx_ready 000C  
                 __end_of_TMR5_Initialize 10D2                         _SYSTEM_Initialize 103E  
                              __accesstop 0060                   __end_of__initialization 0EDE  
                        ?_CCP4_Initialize 0001                        ?_SYSTEM_Initialize 0001  
                           ___rparam_used 000001                           _TMR5_WriteTimer 1234  
                       i2___llmod@divisor 0012                         i2___llmod@counter 0016  
                          __pcstackCOMRAM 0001                        i2___lldiv@dividend 0001  
                            __pidataBANK0 1350                       ??_SYSTEM_Initialize 0064  
                               ?_TMR0_ISR 0001                                 ?_TMR1_ISR 0001  
                               ?_TMR2_ISR 0001             ?_TMR1_DefaultInterruptHandler 0001  
                               ?_TMR5_ISR 0001                   __end_of_TMR2_WriteTimer 13E2  
                           __end_of_putch 136C                          ?_TMR2_Initialize 0001  
                          ?_CCP4_CallBack 0001                               i2printf@val 0025  
                    __end_of_EUSART1_Read 1340                      __end_of_EUSART2_Read 1350  
                        ?_CCP5_Initialize 0001                            ?_CCP5_CallBack 0001  
                        ?i2_setMotorSpeed 0001                                 ?i2_printf 0017  
                    i2setMotorSpeed@speed 0001                 __end_of_SYSTEM_Initialize 1070  
                                 ??_putch 0061                        i2___lldiv@quotient 0009  
                              __pbssBANK0 00A4                          ?_TMR3_Initialize 0001  
                         __CFG_PLLCFG$OFF 000000                        __CFG_CCP2MX$PORTC1 000000  
        __end_of_TMR0_SetInterruptHandler 13C6                                ??_TMR0_ISR 002F  
                              ??_TMR1_ISR 0005                                ??_TMR2_ISR 000B  
                      __CFG_CCP3MX$PORTB5 000000                                ??_TMR5_ISR 0005  
                        ?_TMR0_WriteTimer 0001                                   _CCP4CON 000F57  
                                 _CCP5CON 000F54                                   ?_printf 0076  
                                 _OSCCON2 000FD2                                ??i2_printf 0021  
                                 _OSCTUNE 000F9B                                   _SPBRGH1 000FB0  
                                 _SPBRGH2 000F76                          ?_TMR1_WriteTimer 0001  
                 __end_of_TMR5_WriteTimer 1252                          ?_TMR5_Initialize 0001  
                                 i2_putch 13C6                      __size_of_setYawServo 0034  
                               ?_parseInt 0060                           __CFG_PWRTEN$OFF 000000  
                                 __Hparam 0000                                   __Lparam 0000  
              ??_TMR2_SetInterruptHandler 0062                ??_TMR5_SetInterruptHandler 0062  
                         ??_CCP4_CallBack 0003                                   ___lldiv 0C0C  
                                 ___llmod 0D86                          ?_TMR2_WriteTimer 0001  
                     _EUSART1_is_rx_ready 137A                                   __pcinit 0EA6  
                         ??_CCP5_CallBack 0003                                   __ramtop 1000  
                                 __ptext0 00EC                                   __ptext1 0FA2  
                                 __ptext2 0FD6                                   __ptext3 100A  
                                 __ptext4 0638                                   __ptext5 135E  
                                 __ptext6 136C                                   __ptext7 0D86  
                                 __ptext8 0C0C                                   __ptext9 11D4  
                         __size_of_printf 0242                                 _T0CONbits 000FD5  
          ??_TMR1_DefaultInterruptHandler 0003                                 _T1CONbits 000FCD  
                                 _dpowers FC4B                     _OSCILLATOR_Initialize 131E  
                               _T2CONbits 000FBA                                 _T3CONbits 000FB1  
       __size_of_TMR1_SetInterruptHandler 000A                        _EUSART1_Initialize 1308  
                ??_PIN_MANAGER_Initialize 0060                 ?_TMR1_SetInterruptHandler 0060  
                               _T5CONbits 000F4E                                   main@cmd 0095  
              __size_of_SYSTEM_Initialize 0032                                   main@pos 0090  
                   i2EUSART2_Write@txData 0001                      end_of_initialization 0EDE  
                    ?_EUSART1_is_rx_ready 0001                       ?_EUSART1_Initialize 0001  
                              _rightLimit 0096                                ??_parseInt 0062  
                         ___lldiv@divisor 0064                           ___lldiv@counter 006C  
                      _EUSART2_Initialize 12F2                           i2_EUSART2_Write 1392  
                                 printf@c 008B                                   printf@f 0076  
                                 postdec1 000FE5                                   postdec2 000FDD  
                                 postinc0 000FEE                                   postinc2 000FDE  
                   __size_of_EUSART1_Read 0010                     __size_of_EUSART2_Read 0010  
                              _motorSpeed 009E                      ??_EUSART1_Initialize 0060  
                     ?_EUSART2_Initialize 0001                       _EUSART2_is_rx_ready 1386  
                _TMR0_SetInterruptHandler 13BC                     _TMR5_InterruptHandler 0043  
              CCP5_CallBack@capturedValue 0001                                 i2___lldiv 0C90  
                               i2___llmod 0DEE                     ??_EUSART1_is_rx_ready 0060  
                        ?_TMR5_WriteTimer 0001                      ??_EUSART2_Initialize 0060  
                  __size_of_setPitchServo 0034                      ?_EUSART2_is_rx_ready 0001  
                 TMR2_WriteTimer@timerVal 0001                   TMR5_WriteTimer@timerVal 0001  
                            _EUSART1_Read 1330                              _EUSART2_Read 1340  
                __size_of_CCP4_CaptureISR 0018                        i2___llmod@dividend 000E  
                             _CCP4CONbits 000F57                               _CCP5CONbits 000F54  
                  __size_of_setMotorSpeed 0034              __end_of_INTERRUPT_Initialize 13E6  
    __end_of_TMR2_DefaultInterruptHandler 0C0C     __size_of_TMR2_DefaultInterruptHandler 0160  
            _TMR2_DefaultInterruptHandler 0AAC                         __size_of_TMR0_ISR 0028  
                       __size_of_TMR1_ISR 002C                         __size_of_TMR2_ISR 0020  
                       __size_of_TMR5_ISR 002C                    ?_OSCILLATOR_Initialize 0001  
                __size_of_CCP5_CaptureISR 0018                            __end_of_printf 087A  
                            i2printf@flag 0029                              i2printf@prec 0023  
                     start_initialization 0EA6      __end_of_TMR5_DefaultInterruptHandler 0F2A  
   __size_of_TMR5_DefaultInterruptHandler 0042              _TMR5_DefaultInterruptHandler 0EE8  
                __size_of_TMR0_Initialize 0036           __size_of_PIN_MANAGER_Initialize 002E  
                               i2printf@c 002C                                 i2printf@f 0017  
                              ?i2___lldiv 0001                                ?i2___llmod 000E  
                             putch@txData 0061                     ??_EUSART2_is_rx_ready 0060  
                       __size_ofi2_printf 0232                     __end_of_EUSART2_Write 137A  
                 __end_ofi2_EUSART2_Write 139E                           ___llmod@divisor 0071  
                         ___llmod@counter 0075                  __size_of_TMR1_Initialize 002C  
                         _encoderPosition 00A8                  __size_of_CCP4_Initialize 001C  
                             __pdataBANK0 0096                             _setPitchServo 0FD6  
           ?_TMR2_DefaultInterruptHandler 0001                                  ??_printf 0080  
                   CCP4_CaptureISR@module 0003                               __pbssCOMRAM 0041  
                           _setMotorSpeed 100A                             __pcstackBANK0 0060  
                __size_of_TMR2_Initialize 001E             ?_TMR5_DefaultInterruptHandler 0001  
                __size_of_CCP5_Initialize 001C                       EUSART2_Write@txData 0060  
                           _pitchPosition 00A0                                  ?i2_putch 0001  
                __size_ofi2_setMotorSpeed 0032                     _TMR0_InterruptHandler 004F  
                  _PIN_MANAGER_Initialize 10D2                         __size_of_parseInt 0022  
                __size_of_TMR3_Initialize 001C                                 __pintcode 0008  
        __end_of_TMR1_SetInterruptHandler 13BC                             __pmediumconst FC4A  
       TMR2_DefaultInterruptHandler@error 0007                         ??_CCP4_CaptureISR 0003  
                          ?_setPitchServo 0060                                  ?___lldiv 0060  
                                ?___llmod 006D              ??_INTERRUPT_InterruptManager 002F  
                        __CFG_PRICLKEN$ON 000000                                 _leftLimit 009A  
                          ?_setMotorSpeed 0060                                  _BAUDCON1 000FB8  
                                _BAUDCON2 000F70                  __size_of_TMR0_WriteTimer 000A  
                       ??_CCP5_CaptureISR 0003                               ??i2___lldiv 0009  
                             ??i2___llmod 0016                             ??_setYawServo 0062  
                          __size_of_putch 000E                      _INTERRUPT_Initialize 13E2  
                       ??_TMR0_Initialize 0062                                  _LATAbits 000F89  
                        ?i2_EUSART2_Write 0001                                  _PIE1bits 000F9D  
                                _PIE4bits 000F7A                                  _PIE5bits 000F7D  
                __size_of_TMR1_WriteTimer 001C                                  i2u106_40 0CC2  
                                i2u123_40 09E0                                  i2u140_40 0B50  
                                i2u109_40 0E10                                  i2u125_40 0A90  
                                i2u141_40 0B68       __size_of_INTERRUPT_InterruptManager 00E0  
                                i2u160_48 1172                                  i2u138_40 0B04  
                                i2u154_48 119A                                  i2u156_48 1146  
              ??_TMR0_SetInterruptHandler 0062                                  i2u158_48 1204  
                                _PIR1bits 000F9E                                  _PIR2bits 000FA1  
                                _PIR3bits 000FA4                                  _PIR4bits 000F7B  
                                _PIR5bits 000F7E                  __size_of_TMR5_Initialize 0030  
                                _RCONbits 000FD0                          __CFG_WDTPS$32768 000000  
                                _TMR0_ISR 1184                                  _TMR1_ISR 1158  
                                _TMR2_ISR 11F6                                  _TMR5_ISR 112C  
                   __end_of_CCP4_CallBack 0EA6                         ??_TMR1_Initialize 0062  
                   __end_of_CCP5_CallBack 11D4                                printf@flag 0088  
                       ??_CCP4_Initialize 0060                                printf@prec 0082  
          ??_TMR2_DefaultInterruptHandler 0003         __size_of_TMR2_SetInterruptHandler 000A  
                __size_of_TMR2_WriteTimer 0008                                 main@speed 0093  
       __size_of_TMR5_SetInterruptHandler 000A                 ?_TMR2_SetInterruptHandler 0060  
               ?_TMR5_SetInterruptHandler 0060                                  i2_printf 087A  
                             _INTCON2bits 000FF1                                 copy_data0 0EBA  
                   ?_INTERRUPT_Initialize 0001                             _motorSetPoint 00AC  
                       ??_TMR2_Initialize 0062            ??_TMR5_DefaultInterruptHandler 0003  
                        __size_ofi2_putch 000A                         ??_CCP5_Initialize 0060  
                     __end_of_setYawServo 0FD6                                  __Hrparam 0000  
                                __Lrparam 0000                           ??_setPitchServo 0062  
                      __CFG_BOREN$SBORDIS 000000                         ??i2_setMotorSpeed 0003  
                       __CFG_P2BMX$PORTB5 000000                   ??_OSCILLATOR_Initialize 0060  
                        __size_of___lldiv 0084                          __size_of___llmod 0068  
             __size_of_EUSART1_Initialize 0016     TMR0_DefaultInterruptHandler@pulseHigh 0053  
   TMR1_DefaultInterruptHandler@pulseHigh 0052     TMR5_DefaultInterruptHandler@pulseHigh 0051  
                         ??_setMotorSpeed 0062                         ??_TMR3_Initialize 0060  
                _TMR1_SetInterruptHandler 13B2                     _TMR1_InterruptHandler 0047  
              CCP4_CallBack@capturedValue 0001               __end_of_EUSART1_is_rx_ready 1386  
                                __ptext10 137A                                  __ptext11 1330  
                                __ptext20 0F6C                                  __ptext12 103E  
                                __ptext21 13BC                                  __ptext13 10A2  
                              _T1GCONbits 000FCC                                  __ptext30 1340  
                                __ptext22 10D2                                  __ptext14 139E  
                                __ptext23 131E                                  __ptext15 1252  
                                __ptext40 0F2A                                  __ptext32 112C  
                                __ptext24 13E2                                  __ptext16 1216  
                                __ptext41 12A6                                  __ptext33 0EE8  
                                __ptext25 12F2                                  __ptext17 13A8  
                                __ptext50 12C2                                  __ptext42 1184  
                                __ptext34 1234                                  __ptext26 1308  
                                __ptext18 1100                                  __ptext51 11AC  
                                __ptext43 0D12                                  __ptext35 11F6  
                                __ptext27 126E                                  __ptext19 13B2  
                                __ptext52 12DA                                  __ptext44 087A  
                                __ptext36 0AAC                                  __ptext28 128A  
                                __ptext53 0E54                                  __ptext45 13C6  
                                __ptext37 1070                                  __ptext29 1386  
                                __ptext54 0000                                  __ptext46 1392  
                                __ptext38 13DA                                  __ptext47 0DEE  
                                __ptext39 1158                                  __ptext48 0C90  
                                __ptext49 13D0                                  _encoderA 0055  
                                _encoderB 0054                   TMR0_WriteTimer@timerVal 0001  
                              _T3GCONbits 000FB4                         ??_TMR0_WriteTimer 0003  
             __size_of_EUSART2_Initialize 0016                             __size_of_main 054C  
                              _T5GCONbits 000F4D                                  _parseInt 11D4  
    __end_of_TMR0_DefaultInterruptHandler 0D86     __size_of_TMR0_DefaultInterruptHandler 0074  
            _TMR0_DefaultInterruptHandler 0D12                  __size_of_TMR5_WriteTimer 001E  
                                int$flags 0057        __end_of_INTERRUPT_InterruptManager 00E8  
              _INTERRUPT_InterruptManager 0008                                  main@cmd2 0092  
                               printf@val 0084                         ??_TMR1_WriteTimer 0003  
                       ??_TMR5_Initialize 0062                                _INTCONbits 000FF2  
             __end_of_EUSART2_is_rx_ready 1392                    ??_INTERRUPT_Initialize 0060  
                      setMotorSpeed@speed 0060                                  intlevel2 0000  
                             _setYawServo 0FA2                         ??_TMR2_WriteTimer 0001  
                         _CCP4_CaptureISR 12DA                          ___lldiv@dividend 0060  
                 ?_PIN_MANAGER_Initialize 0001                                _RCSTA1bits 000FAB  
                              _RCSTA2bits 000F71             ?_TMR0_DefaultInterruptHandler 0001  
                                printf@ap 0089                          setPitchServo@pos 0060  
                  __size_of_EUSART2_Write 000E                           _CCP5_CaptureISR 12C2  
                   CCP5_CaptureISR@module 0003                          ___lldiv@quotient 0068  
                         _TMR0_Initialize 0F6C                         __CFG_T3CMX$PORTC0 000000  
          __end_of_PIN_MANAGER_Initialize 1100                         __CFG_FOSC$INTIO67 000000  
                   _TMR2_InterruptHandler 0041                               _yawPosition 00A2  
                         _TMR1_Initialize 1100  
