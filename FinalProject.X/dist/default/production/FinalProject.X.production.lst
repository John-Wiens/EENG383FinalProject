

Microchip Technology PIC18 LITE Macro Assembler V1.45 build -152302408 
                                                                                               Tue Apr 24 11:04:53 2018

Microchip Technology Omniscient Code Generator v1.45 (Free mode) build 201711160504
     1                           	processor	18F26K22
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	lm
     5                           	psect	idataCOMRAM,global,class=CODE,delta=1,noexec
     6                           	psect	mediumconst,global,reloc=2,class=MEDIUMCONST,delta=1,noexec
     7                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     8                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
     9                           	psect	dataCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    10                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1,noexec
    11                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    12                           	psect	text0,global,reloc=2,class=CODE,delta=1
    13                           	psect	text1,global,reloc=2,class=CODE,delta=1
    14                           	psect	text2,global,reloc=2,class=CODE,delta=1
    15                           	psect	text3,global,reloc=2,class=CODE,delta=1
    16                           	psect	text4,global,reloc=2,class=CODE,delta=1
    17                           	psect	text5,global,reloc=2,class=CODE,delta=1,group=1
    18                           	psect	text6,global,reloc=2,class=CODE,delta=1,group=1
    19                           	psect	text7,global,reloc=2,class=CODE,delta=1
    20                           	psect	text8,global,reloc=2,class=CODE,delta=1
    21                           	psect	text9,global,reloc=2,class=CODE,delta=1
    22                           	psect	text10,global,reloc=2,class=CODE,delta=1
    23                           	psect	text11,global,reloc=2,class=CODE,delta=1
    24                           	psect	text12,global,reloc=2,class=CODE,delta=1
    25                           	psect	text13,global,reloc=2,class=CODE,delta=1
    26                           	psect	text14,global,reloc=2,class=CODE,delta=1
    27                           	psect	text15,global,reloc=2,class=CODE,delta=1
    28                           	psect	text16,global,reloc=2,class=CODE,delta=1
    29                           	psect	text17,global,reloc=2,class=CODE,delta=1
    30                           	psect	text18,global,reloc=2,class=CODE,delta=1
    31                           	psect	text19,global,reloc=2,class=CODE,delta=1
    32                           	psect	text20,global,reloc=2,class=CODE,delta=1
    33                           	psect	text21,global,reloc=2,class=CODE,delta=1
    34                           	psect	intcode,global,reloc=2,class=CODE,delta=1
    35                           	psect	text23,global,reloc=2,class=CODE,delta=1
    36                           	psect	text24,global,reloc=2,class=CODE,delta=1
    37                           	psect	text25,global,reloc=2,class=CODE,delta=1
    38                           	psect	text26,global,reloc=2,class=CODE,delta=1
    39                           	psect	text27,global,reloc=2,class=CODE,delta=1
    40                           	psect	text28,global,reloc=2,class=CODE,delta=1
    41                           	psect	text29,global,reloc=2,class=CODE,delta=1
    42                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
    43                           	psect	text30,global,reloc=2,class=CODE,delta=1
    44                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
    45                           	psect	temp,global,ovrld,common,class=COMRAM,space=1,delta=1
    46  0000                     
    47                           ; Version 1.45
    48                           ; Generated 16/11/2017 GMT
    49                           ; 
    50                           ; Copyright Â© 2017, Microchip Technology Inc. and its subsidiaries ("Microchip")
    51                           ; All rights reserved.
    52                           ; 
    53                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    54                           ; 
    55                           ; Redistribution and use in source and binary forms, with or without modification, are
    56                           ; permitted provided that the following conditions are met:
    57                           ; 
    58                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    59                           ;        conditions and the following disclaimer.
    60                           ; 
    61                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    62                           ;        of conditions and the following disclaimer in the documentation and/or other
    63                           ;        materials provided with the distribution.
    64                           ; 
    65                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    66                           ;        software without specific prior written permission.
    67                           ; 
    68                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    69                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    70                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    71                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    72                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    73                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    74                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    75                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    76                           ; 
    77                           ; 
    78                           ; Code-generator required, PIC18F26K22 Definitions
    79                           ; 
    80                           ; SFR Addresses
    81  0000                     
    82                           	psect	idataCOMRAM
    83  000846                     __pidataCOMRAM:
    84                           	opt stack 0
    85                           
    86                           ;initializer for _yawPosition
    87  000846  0BB8               	dw	3000
    88                           
    89                           	psect	mediumconst
    90  00FEDC                     __pmediumconst:
    91                           	opt stack 0
    92  00FEDC  00                 	db	0
    93  00FEDD                     _dpowers:
    94                           	opt stack 0
    95  00FEDD  0001               	dw	1
    96  00FEDF  0000               	dw	0
    97  00FEE1  000A               	dw	10
    98  00FEE3  0000               	dw	0
    99  00FEE5  0064               	dw	100
   100  00FEE7  0000               	dw	0
   101  00FEE9  03E8               	dw	1000
   102  00FEEB  0000               	dw	0
   103  00FEED  2710               	dw	10000
   104  00FEEF  0000               	dw	0
   105  00FEF1  86A0               	dw	34464
   106  00FEF3  0001               	dw	1
   107  00FEF5  4240               	dw	16960
   108  00FEF7  000F               	dw	15
   109  00FEF9  9680               	dw	38528
   110  00FEFB  0098               	dw	152
   111  00FEFD  E100               	dw	57600
   112  00FEFF  05F5               	dw	1525
   113  00FF01  CA00               	dw	51712
   114  00FF03  3B9A               	dw	15258
   115  00FF05                     __end_of_dpowers:
   116                           	opt stack 0
   117  0000                     _CCP5CONbits	set	3924
   118  0000                     _CCP4CONbits	set	3927
   119  0000                     _CCPR4H	set	3929
   120  0000                     _CCPR4L	set	3928
   121  0000                     _CCP4CON	set	3927
   122  0000                     _CCPTMRS1bits	set	3912
   123  0000                     _CCPR5H	set	3926
   124  0000                     _CCPR5L	set	3925
   125  0000                     _CCP5CON	set	3924
   126  0000                     _ANSELA	set	3896
   127  0000                     _ANSELB	set	3897
   128  0000                     _ANSELC	set	3898
   129  0000                     _TMR3	set	4018
   130  0000                     _TXREG1	set	4013
   131  0000                     _RCREG1	set	4014
   132  0000                     _RCSTA1bits	set	4011
   133  0000                     _TXSTA1bits	set	4012
   134  0000                     _PIR1bits	set	3998
   135  0000                     _SPBRGH1	set	4016
   136  0000                     _SPBRG1	set	4015
   137  0000                     _TXSTA1	set	4012
   138  0000                     _RCSTA1	set	4011
   139  0000                     _BAUDCON1	set	4024
   140  0000                     _LATAbits	set	3977
   141  0000                     _T3GCONbits	set	4020
   142  0000                     _T3CONbits	set	4017
   143  0000                     _T3CON	set	4017
   144  0000                     _PIR2bits	set	4001
   145  0000                     _TMR3L	set	4018
   146  0000                     _TMR3H	set	4019
   147  0000                     _T3GCON	set	4020
   148  0000                     _T0CON	set	4053
   149  0000                     _TMR0L	set	4054
   150  0000                     _TMR0H	set	4055
   151  0000                     _T0CONbits	set	4053
   152  0000                     _TXREG2	set	3955
   153  0000                     _RCREG2	set	3956
   154  0000                     _RCSTA2bits	set	3953
   155  0000                     _TXSTA2bits	set	3954
   156  0000                     _PIR3bits	set	4004
   157  0000                     _SPBRGH2	set	3958
   158  0000                     _SPBRG2	set	3957
   159  0000                     _TXSTA2	set	3954
   160  0000                     _RCSTA2	set	3953
   161  0000                     _BAUDCON2	set	3952
   162  0000                     _OSCTUNE	set	3995
   163  0000                     _OSCCON2	set	4050
   164  0000                     _OSCCON	set	4051
   165  0000                     _PIR4bits	set	3963
   166  0000                     _PIE4bits	set	3962
   167  0000                     _RCONbits	set	4048
   168  0000                     _INTCONbits	set	4082
   169  0000                     _INTCON2bits	set	4081
   170  0000                     _WPUB	set	3937
   171  0000                     _TRISC	set	3988
   172  0000                     _TRISB	set	3987
   173  0000                     _TRISA	set	3986
   174  0000                     _LATC	set	3979
   175  0000                     _LATB	set	3978
   176  0000                     _LATA	set	3977
   177  0000                     _PLLRDY	set	32407
   178  00FF05                     STR_5:
   179                           
   180                           ; BSR set to: 15
   181  00FF05  44                 	db	68	;'D'
   182  00FF06  65                 	db	101	;'e'
   183  00FF07  63                 	db	99	;'c'
   184  00FF08  72                 	db	114	;'r'
   185  00FF09  65                 	db	101	;'e'
   186  00FF0A  6D                 	db	109	;'m'
   187  00FF0B  65                 	db	101	;'e'
   188  00FF0C  6E                 	db	110	;'n'
   189  00FF0D  74                 	db	116	;'t'
   190  00FF0E  69                 	db	105	;'i'
   191  00FF0F  6E                 	db	110	;'n'
   192  00FF10  67                 	db	103	;'g'
   193  00FF11  20                 	db	32
   194  00FF12  53                 	db	83	;'S'
   195  00FF13  65                 	db	101	;'e'
   196  00FF14  72                 	db	114	;'r'
   197  00FF15  76                 	db	118	;'v'
   198  00FF16  6F                 	db	111	;'o'
   199  00FF17  20                 	db	32
   200  00FF18  50                 	db	80	;'P'
   201  00FF19  6F                 	db	111	;'o'
   202  00FF1A  73                 	db	115	;'s'
   203  00FF1B  69                 	db	105	;'i'
   204  00FF1C  74                 	db	116	;'t'
   205  00FF1D  69                 	db	105	;'i'
   206  00FF1E  6F                 	db	111	;'o'
   207  00FF1F  6E                 	db	110	;'n'
   208  00FF20  3A                 	db	58	;':'
   209  00FF21  20                 	db	32
   210  00FF22  25                 	db	37
   211  00FF23  75                 	db	117	;'u'
   212  00FF24  0D                 	db	13
   213  00FF25  0A                 	db	10
   214  00FF26  00                 	db	0
   215  00FF27                     STR_4:
   216                           
   217                           ; BSR set to: 15
   218  00FF27  49                 	db	73	;'I'
   219  00FF28  6E                 	db	110	;'n'
   220  00FF29  63                 	db	99	;'c'
   221  00FF2A  72                 	db	114	;'r'
   222  00FF2B  65                 	db	101	;'e'
   223  00FF2C  6D                 	db	109	;'m'
   224  00FF2D  65                 	db	101	;'e'
   225  00FF2E  6E                 	db	110	;'n'
   226  00FF2F  74                 	db	116	;'t'
   227  00FF30  69                 	db	105	;'i'
   228  00FF31  6E                 	db	110	;'n'
   229  00FF32  67                 	db	103	;'g'
   230  00FF33  20                 	db	32
   231  00FF34  53                 	db	83	;'S'
   232  00FF35  65                 	db	101	;'e'
   233  00FF36  72                 	db	114	;'r'
   234  00FF37  76                 	db	118	;'v'
   235  00FF38  6F                 	db	111	;'o'
   236  00FF39  20                 	db	32
   237  00FF3A  50                 	db	80	;'P'
   238  00FF3B  6F                 	db	111	;'o'
   239  00FF3C  73                 	db	115	;'s'
   240  00FF3D  69                 	db	105	;'i'
   241  00FF3E  74                 	db	116	;'t'
   242  00FF3F  69                 	db	105	;'i'
   243  00FF40  6F                 	db	111	;'o'
   244  00FF41  6E                 	db	110	;'n'
   245  00FF42  3A                 	db	58	;':'
   246  00FF43  20                 	db	32
   247  00FF44  25                 	db	37
   248  00FF45  75                 	db	117	;'u'
   249  00FF46  0D                 	db	13
   250  00FF47  0A                 	db	10
   251  00FF48  00                 	db	0
   252  00FF49                     STR_1:
   253                           
   254                           ; BSR set to: 15
   255  00FF49  43                 	db	67	;'C'
   256  00FF4A  6F                 	db	111	;'o'
   257  00FF4B  6E                 	db	110	;'n'
   258  00FF4C  6E                 	db	110	;'n'
   259  00FF4D  65                 	db	101	;'e'
   260  00FF4E  63                 	db	99	;'c'
   261  00FF4F  74                 	db	116	;'t'
   262  00FF50  20                 	db	32
   263  00FF51  52                 	db	82	;'R'
   264  00FF52  41                 	db	65	;'A'
   265  00FF53  31                 	db	49	;'1'
   266  00FF54  20                 	db	32
   267  00FF55  74                 	db	116	;'t'
   268  00FF56  6F                 	db	111	;'o'
   269  00FF57  20                 	db	32
   270  00FF58  53                 	db	83	;'S'
   271  00FF59  65                 	db	101	;'e'
   272  00FF5A  72                 	db	114	;'r'
   273  00FF5B  76                 	db	118	;'v'
   274  00FF5C  6F                 	db	111	;'o'
   275  00FF5D  20                 	db	32
   276  00FF5E  44                 	db	68	;'D'
   277  00FF5F  61                 	db	97	;'a'
   278  00FF60  74                 	db	116	;'t'
   279  00FF61  61                 	db	97	;'a'
   280  00FF62  0D                 	db	13
   281  00FF63  0A                 	db	10
   282  00FF64  00                 	db	0
   283  00FF65                     STR_9:
   284                           
   285                           ; BSR set to: 15
   286  00FF65  52                 	db	82	;'R'
   287  00FF66  65                 	db	101	;'e'
   288  00FF67  63                 	db	99	;'c'
   289  00FF68  69                 	db	105	;'i'
   290  00FF69  65                 	db	101	;'e'
   291  00FF6A  76                 	db	118	;'v'
   292  00FF6B  65                 	db	101	;'e'
   293  00FF6C  64                 	db	100	;'d'
   294  00FF6D  20                 	db	32
   295  00FF6E  25                 	db	37
   296  00FF6F  75                 	db	117	;'u'
   297  00FF70  20                 	db	32
   298  00FF71  66                 	db	102	;'f'
   299  00FF72  72                 	db	114	;'r'
   300  00FF73  6F                 	db	111	;'o'
   301  00FF74  6D                 	db	109	;'m'
   302  00FF75  20                 	db	32
   303  00FF76  45                 	db	69	;'E'
   304  00FF77  55                 	db	85	;'U'
   305  00FF78  53                 	db	83	;'S'
   306  00FF79  41                 	db	65	;'A'
   307  00FF7A  52                 	db	82	;'R'
   308  00FF7B  54                 	db	84	;'T'
   309  00FF7C  31                 	db	49	;'1'
   310  00FF7D  0D                 	db	13
   311  00FF7E  0A                 	db	10
   312  00FF7F  00                 	db	0
   313  00FF80                     STR_2:
   314                           
   315                           ; BSR set to: 15
   316  00FF80  43                 	db	67	;'C'
   317  00FF81  6F                 	db	111	;'o'
   318  00FF82  6E                 	db	110	;'n'
   319  00FF83  6E                 	db	110	;'n'
   320  00FF84  65                 	db	101	;'e'
   321  00FF85  63                 	db	99	;'c'
   322  00FF86  74                 	db	116	;'t'
   323  00FF87  20                 	db	32
   324  00FF88  52                 	db	82	;'R'
   325  00FF89  42                 	db	66	;'B'
   326  00FF8A  30                 	db	48	;'0'
   327  00FF8B  20                 	db	32
   328  00FF8C  74                 	db	116	;'t'
   329  00FF8D  6F                 	db	111	;'o'
   330  00FF8E  20                 	db	32
   331  00FF8F  45                 	db	69	;'E'
   332  00FF90  6E                 	db	110	;'n'
   333  00FF91  63                 	db	99	;'c'
   334  00FF92  6F                 	db	111	;'o'
   335  00FF93  64                 	db	100	;'d'
   336  00FF94  65                 	db	101	;'e'
   337  00FF95  72                 	db	114	;'r'
   338  00FF96  20                 	db	32
   339  00FF97  41                 	db	65	;'A'
   340  00FF98  0D                 	db	13
   341  00FF99  0A                 	db	10
   342  00FF9A  00                 	db	0
   343  00FF9B                     STR_3:
   344                           
   345                           ; BSR set to: 15
   346  00FF9B  43                 	db	67	;'C'
   347  00FF9C  6F                 	db	111	;'o'
   348  00FF9D  6E                 	db	110	;'n'
   349  00FF9E  6E                 	db	110	;'n'
   350  00FF9F  65                 	db	101	;'e'
   351  00FFA0  63                 	db	99	;'c'
   352  00FFA1  74                 	db	116	;'t'
   353  00FFA2  20                 	db	32
   354  00FFA3  52                 	db	82	;'R'
   355  00FFA4  41                 	db	65	;'A'
   356  00FFA5  34                 	db	52	;'4'
   357  00FFA6  20                 	db	32
   358  00FFA7  74                 	db	116	;'t'
   359  00FFA8  6F                 	db	111	;'o'
   360  00FFA9  20                 	db	32
   361  00FFAA  45                 	db	69	;'E'
   362  00FFAB  6E                 	db	110	;'n'
   363  00FFAC  63                 	db	99	;'c'
   364  00FFAD  6F                 	db	111	;'o'
   365  00FFAE  64                 	db	100	;'d'
   366  00FFAF  65                 	db	101	;'e'
   367  00FFB0  72                 	db	114	;'r'
   368  00FFB1  20                 	db	32
   369  00FFB2  42                 	db	66	;'B'
   370  00FFB3  0D                 	db	13
   371  00FFB4  0A                 	db	10
   372  00FFB5  00                 	db	0
   373  00FFB6                     STR_6:
   374                           
   375                           ; BSR set to: 15
   376  00FFB6  45                 	db	69	;'E'
   377  00FFB7  6E                 	db	110	;'n'
   378  00FFB8  63                 	db	99	;'c'
   379  00FFB9  6F                 	db	111	;'o'
   380  00FFBA  64                 	db	100	;'d'
   381  00FFBB  65                 	db	101	;'e'
   382  00FFBC  72                 	db	114	;'r'
   383  00FFBD  20                 	db	32
   384  00FFBE  50                 	db	80	;'P'
   385  00FFBF  6F                 	db	111	;'o'
   386  00FFC0  73                 	db	115	;'s'
   387  00FFC1  69                 	db	105	;'i'
   388  00FFC2  74                 	db	116	;'t'
   389  00FFC3  69                 	db	105	;'i'
   390  00FFC4  6F                 	db	111	;'o'
   391  00FFC5  6E                 	db	110	;'n'
   392  00FFC6  3A                 	db	58	;':'
   393  00FFC7  20                 	db	32
   394  00FFC8  25                 	db	37
   395  00FFC9  6C                 	db	108	;'l'
   396  00FFCA  64                 	db	100	;'d'
   397  00FFCB  0D                 	db	13
   398  00FFCC  0A                 	db	10
   399  00FFCD  00                 	db	0
   400  00FFCE                     STR_10:
   401                           
   402                           ; BSR set to: 15
   403  00FFCE  0A                 	db	10
   404  00FFCF  0A                 	db	10
   405  00FFD0  0A                 	db	10
   406  00FFD1  0A                 	db	10
   407  00FFD2  0A                 	db	10
   408  00FFD3  0A                 	db	10
   409  00FFD4  0A                 	db	10
   410  00FFD5  0A                 	db	10
   411  00FFD6  0A                 	db	10
   412  00FFD7  0A                 	db	10
   413  00FFD8  0A                 	db	10
   414  00FFD9  0A                 	db	10
   415  00FFDA  0A                 	db	10
   416  00FFDB  0A                 	db	10
   417  00FFDC  0A                 	db	10
   418  00FFDD  0A                 	db	10
   419  00FFDE  0A                 	db	10
   420  00FFDF  0A                 	db	10
   421  00FFE0  0A                 	db	10
   422  00FFE1  0A                 	db	10
   423  00FFE2  00                 	db	0
   424  00FFE3                     STR_11:
   425                           
   426                           ; BSR set to: 15
   427  00FFE3  55                 	db	85	;'U'
   428  00FFE4  6E                 	db	110	;'n'
   429  00FFE5  6B                 	db	107	;'k'
   430  00FFE6  6E                 	db	110	;'n'
   431  00FFE7  6F                 	db	111	;'o'
   432  00FFE8  77                 	db	119	;'w'
   433  00FFE9  6E                 	db	110	;'n'
   434  00FFEA  20                 	db	32
   435  00FFEB  6B                 	db	107	;'k'
   436  00FFEC  65                 	db	101	;'e'
   437  00FFED  79                 	db	121	;'y'
   438  00FFEE  20                 	db	32
   439  00FFEF  25                 	db	37
   440  00FFF0  63                 	db	99	;'c'
   441  00FFF1  0D                 	db	13
   442  00FFF2  0A                 	db	10
   443  00FFF3  00                 	db	0
   444  00FFF4                     STR_7:
   445                           
   446                           ; BSR set to: 15
   447  00FFF4  20                 	db	32
   448  00FFF5  6B                 	db	107	;'k'
   449  00FFF6  0D                 	db	13
   450  00FFF7  0A                 	db	10
   451  00FFF8  00                 	db	0
   452  00FFF9                     STR_8:
   453                           
   454                           ; BSR set to: 15
   455  00FFF9  6F                 	db	111	;'o'
   456  00FFFA  6B                 	db	107	;'k'
   457  00FFFB  0D                 	db	13
   458  00FFFC  0A                 	db	10
   459  00FFFD  00                 	db	0
   460                           
   461                           ; #config settings
   462  00FFFE  00                 	db	0	; dummy byte at the end
   463  0000                     
   464                           	psect	cinit
   465  00064C                     __pcinit:
   466                           	opt stack 0
   467  00064C                     start_initialization:
   468                           	opt stack 0
   469  00064C                     __initialization:
   470                           	opt stack 0
   471                           
   472                           ; Initialize objects allocated to COMRAM (2 bytes)
   473                           ; load TBLPTR registers with __pidataCOMRAM
   474  00064C  0E46               	movlw	low __pidataCOMRAM
   475  00064E  6EF6               	movwf	tblptrl,c
   476  000650  0E08               	movlw	high __pidataCOMRAM
   477  000652  6EF7               	movwf	tblptrh,c
   478  000654  0E00               	movlw	low (__pidataCOMRAM shr (0+16))
   479  000656  6EF8               	movwf	tblptru,c
   480  000658  0009               	tblrd		*+	;fetch initializer
   481  00065A  CFF5 F044          	movff	tablat,__pdataCOMRAM
   482  00065E  0009               	tblrd		*+	;fetch initializer
   483  000660  CFF5 F045          	movff	tablat,__pdataCOMRAM+1
   484                           
   485                           ; Clear objects allocated to COMRAM (13 bytes)
   486  000664  EE00  F037         	lfsr	0,__pbssCOMRAM
   487  000668  0E0D               	movlw	13
   488  00066A                     clear_0:
   489  00066A  6AEE               	clrf	postinc0,c
   490  00066C  06E8               	decf	wreg,f,c
   491  00066E  E1FD               	bnz	clear_0
   492  000670                     end_of_initialization:
   493                           	opt stack 0
   494  000670                     __end_of__initialization:
   495                           	opt stack 0
   496  000670  9046               	bcf	int$flags,0,c	;clear compiler interrupt flag (level 1)
   497  000672  9246               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
   498  000674  0100               	movlb	0
   499  000676  EF84  F001         	goto	_main	;jump to C main() function
   500                           tblptru	equ	0xFF8
   501                           tblptrh	equ	0xFF7
   502                           tblptrl	equ	0xFF6
   503                           tablat	equ	0xFF5
   504                           postinc0	equ	0xFEE
   505                           wreg	equ	0xFE8
   506                           
   507                           	psect	bssCOMRAM
   508  000037                     __pbssCOMRAM:
   509                           	opt stack 0
   510  000037                     _encoderPosition:
   511                           	opt stack 0
   512  000037                     	ds	4
   513  00003B                     _timer3ReloadVal:
   514                           	opt stack 0
   515  00003B                     	ds	2
   516  00003D                     _timer0ReloadVal:
   517                           	opt stack 0
   518  00003D                     	ds	2
   519  00003F                     _TMR0_InterruptHandler:
   520                           	opt stack 0
   521  00003F                     	ds	2
   522  000041                     TMR0_DefaultInterruptHandler@pulseHigh:
   523                           	opt stack 0
   524  000041                     	ds	1
   525  000042                     _encoderB:
   526                           	opt stack 0
   527  000042                     	ds	1
   528  000043                     _encoderA:
   529                           	opt stack 0
   530  000043                     	ds	1
   531                           tblptru	equ	0xFF8
   532                           tblptrh	equ	0xFF7
   533                           tblptrl	equ	0xFF6
   534                           tablat	equ	0xFF5
   535                           postinc0	equ	0xFEE
   536                           wreg	equ	0xFE8
   537                           
   538                           	psect	dataCOMRAM
   539  000044                     __pdataCOMRAM:
   540                           	opt stack 0
   541  000044                     _yawPosition:
   542                           	opt stack 0
   543  000044                     	ds	2
   544                           tblptru	equ	0xFF8
   545                           tblptrh	equ	0xFF7
   546                           tblptrl	equ	0xFF6
   547                           tablat	equ	0xFF5
   548                           postinc0	equ	0xFEE
   549                           wreg	equ	0xFE8
   550                           
   551                           	psect	cstackBANK0
   552  000060                     __pcstackBANK0:
   553                           	opt stack 0
   554  000060                     printf@prec:
   555                           	opt stack 0
   556                           
   557                           ; 2 bytes @ 0x0
   558  000060                     	ds	2
   559  000062                     printf@val:
   560                           	opt stack 0
   561                           
   562                           ; 4 bytes @ 0x2
   563  000062                     	ds	4
   564  000066                     printf@flag:
   565                           	opt stack 0
   566                           
   567                           ; 1 bytes @ 0x6
   568  000066                     	ds	1
   569  000067                     printf@ap:
   570                           	opt stack 0
   571                           
   572                           ; 2 bytes @ 0x7
   573  000067                     	ds	2
   574  000069                     printf@c:
   575                           	opt stack 0
   576                           
   577                           ; 1 bytes @ 0x9
   578  000069                     	ds	1
   579                           tblptru	equ	0xFF8
   580                           tblptrh	equ	0xFF7
   581                           tblptrl	equ	0xFF6
   582                           tablat	equ	0xFF5
   583                           postinc0	equ	0xFEE
   584                           wreg	equ	0xFE8
   585                           
   586                           	psect	cstackCOMRAM
   587  000001                     __pcstackCOMRAM:
   588                           	opt stack 0
   589  000001                     TMR0_WriteTimer@timerVal:
   590                           	opt stack 0
   591  000001                     CCP4_CallBack@capturedValue:
   592                           	opt stack 0
   593  000001                     CCP5_CallBack@capturedValue:
   594                           	opt stack 0
   595                           
   596                           ; 2 bytes @ 0x0
   597  000001                     	ds	2
   598  000003                     ??_TMR0_DefaultInterruptHandler:
   599  000003                     CCP5_CaptureISR@module:
   600                           	opt stack 0
   601  000003                     CCP4_CaptureISR@module:
   602                           	opt stack 0
   603                           
   604                           ; 2 bytes @ 0x2
   605  000003                     	ds	2
   606  000005                     ??_INTERRUPT_InterruptManager:
   607                           
   608                           ; 1 bytes @ 0x4
   609  000005                     	ds	18
   610  000017                     ?___lldiv:
   611                           	opt stack 0
   612  000017                     EUSART2_Write@txData:
   613                           	opt stack 0
   614  000017                     TMR0_SetInterruptHandler@InterruptHandler:
   615                           	opt stack 0
   616  000017                     setYawServo@pos:
   617                           	opt stack 0
   618  000017                     ___lldiv@dividend:
   619                           	opt stack 0
   620                           
   621                           ; 4 bytes @ 0x16
   622  000017                     	ds	1
   623  000018                     putch@txData:
   624                           	opt stack 0
   625                           
   626                           ; 1 bytes @ 0x17
   627  000018                     	ds	1
   628  000019                     ??_TMR0_Initialize:
   629  000019                     
   630                           ; 1 bytes @ 0x18
   631  000019                     	ds	2
   632  00001B                     ___lldiv@divisor:
   633                           	opt stack 0
   634                           
   635                           ; 4 bytes @ 0x1A
   636  00001B                     	ds	4
   637  00001F                     ___lldiv@quotient:
   638                           	opt stack 0
   639                           
   640                           ; 4 bytes @ 0x1E
   641  00001F                     	ds	4
   642  000023                     ___lldiv@counter:
   643                           	opt stack 0
   644                           
   645                           ; 1 bytes @ 0x22
   646  000023                     	ds	1
   647  000024                     ?___llmod:
   648                           	opt stack 0
   649  000024                     ___llmod@dividend:
   650                           	opt stack 0
   651                           
   652                           ; 4 bytes @ 0x23
   653  000024                     	ds	4
   654  000028                     ___llmod@divisor:
   655                           	opt stack 0
   656                           
   657                           ; 4 bytes @ 0x27
   658  000028                     	ds	4
   659  00002C                     ___llmod@counter:
   660                           	opt stack 0
   661                           
   662                           ; 1 bytes @ 0x2B
   663  00002C                     	ds	1
   664  00002D                     ?_printf:
   665                           	opt stack 0
   666  00002D                     printf@f:
   667                           	opt stack 0
   668                           
   669                           ; 2 bytes @ 0x2C
   670  00002D                     	ds	6
   671  000033                     ??_printf:
   672                           
   673                           ; 1 bytes @ 0x32
   674  000033                     	ds	2
   675  000035                     main@cmd:
   676                           	opt stack 0
   677                           
   678                           ; 1 bytes @ 0x34
   679  000035                     	ds	1
   680  000036                     main@cmd2:
   681                           	opt stack 0
   682                           
   683                           ; 1 bytes @ 0x35
   684  000036                     	ds	1
   685                           tblptru	equ	0xFF8
   686                           tblptrh	equ	0xFF7
   687                           tblptrl	equ	0xFF6
   688                           tablat	equ	0xFF5
   689                           postinc0	equ	0xFEE
   690                           wreg	equ	0xFE8
   691                           
   692 ;;
   693 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
   694 ;;
   695 ;; *************** function _main *****************
   696 ;; Defined at:
   697 ;;		line 20 in file "main.c"
   698 ;; Parameters:    Size  Location     Type
   699 ;;		None
   700 ;; Auto vars:     Size  Location     Type
   701 ;;  cmd2            1   53[COMRAM] unsigned char 
   702 ;;  cmd             1   52[COMRAM] unsigned char 
   703 ;; Return value:  Size  Location     Type
   704 ;;                  1    wreg      void 
   705 ;; Registers used:
   706 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
   707 ;; Tracked objects:
   708 ;;		On entry : 0/0
   709 ;;		On exit  : 0/0
   710 ;;		Unchanged: 0/0
   711 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
   712 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   713 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   714 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   715 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   716 ;;Total ram usage:        2 bytes
   717 ;; Hardware stack levels required when called:    7
   718 ;; This function calls:
   719 ;;		_EUSART1_Read
   720 ;;		_EUSART1_is_rx_ready
   721 ;;		_EUSART2_Read
   722 ;;		_EUSART2_is_rx_ready
   723 ;;		_SYSTEM_Initialize
   724 ;;		_printf
   725 ;;		_setYawServo
   726 ;; This function is called by:
   727 ;;		Startup code after reset
   728 ;; This function uses a non-reentrant model
   729 ;;
   730                           
   731                           	psect	text0
   732  000308                     __ptext0:
   733                           	opt stack 0
   734  000308                     _main:
   735                           	opt stack 24
   736                           
   737                           ;main.c: 21: char cmd, cmd2;
   738                           ;main.c: 22: (INTCONbits.GIE = 1);
   739                           
   740                           ;incstack = 0
   741  000308  8EF2               	bsf	intcon,7,c	;volatile
   742                           
   743                           ;main.c: 23: (INTCONbits.PEIE = 1);
   744  00030A  8CF2               	bsf	intcon,6,c	;volatile
   745                           
   746                           ;main.c: 25: SYSTEM_Initialize();
   747  00030C  EC7C  F003         	call	_SYSTEM_Initialize	;wreg free
   748  000310                     
   749                           ;main.c: 29: if ((EUSART2_is_rx_ready())) {
   750  000310  EC06  F004         	call	_EUSART2_is_rx_ready	;wreg free
   751  000314  0900               	iorlw	0
   752  000316  B4D8               	btfsc	status,2,c
   753  000318  D7FB               	goto	l317
   754                           
   755                           ;main.c: 30: cmd = EUSART2_Read();
   756  00031A  ECF0  F003         	call	_EUSART2_Read	;wreg free
   757  00031E  6E35               	movwf	main@cmd,c
   758                           
   759                           ;main.c: 31: switch (cmd) {
   760  000320  D08D               	goto	l319
   761  000322                     
   762                           ;main.c: 33: printf("Connect RA1 to Servo Data\r\n");
   763  000322  0E49               	movlw	low STR_1
   764  000324  6E2D               	movwf	printf@f,c
   765  000326  0EFF               	movlw	high STR_1
   766  000328  6E2E               	movwf	printf@f+1,c
   767  00032A  EC64  F000         	call	_printf	;wreg free
   768                           
   769                           ;main.c: 34: printf("Connect RB0 to Encoder A\r\n");
   770  00032E  0E80               	movlw	low STR_2
   771  000330  6E2D               	movwf	printf@f,c
   772  000332  0EFF               	movlw	high STR_2
   773  000334  6E2E               	movwf	printf@f+1,c
   774  000336  EC64  F000         	call	_printf	;wreg free
   775                           
   776                           ;main.c: 35: printf("Connect RA4 to Encoder B\r\n");
   777  00033A  0E9B               	movlw	low STR_3
   778  00033C  6E2D               	movwf	printf@f,c
   779  00033E  0EFF               	movlw	high STR_3
   780  000340  6E2E               	movwf	printf@f+1,c
   781  000342  EC64  F000         	call	_printf	;wreg free
   782                           
   783                           ;main.c: 36: break;
   784  000346  D7E4               	goto	l317
   785  000348                     
   786                           ;main.c: 38: setYawServo(yawPosition+100);
   787  000348  0E64               	movlw	100
   788  00034A  2444               	addwf	_yawPosition,w,c
   789  00034C  6E17               	movwf	setYawServo@pos,c
   790  00034E  0E00               	movlw	0
   791  000350  2045               	addwfc	_yawPosition+1,w,c
   792  000352  6E18               	movwf	setYawServo@pos+1,c
   793  000354  EC0D  F003         	call	_setYawServo	;wreg free
   794                           
   795                           ;main.c: 39: printf("Incrementing Servo Position: %u\r\n",yawPosition);
   796  000358  0E27               	movlw	low STR_4
   797  00035A  6E2D               	movwf	printf@f,c
   798  00035C  0EFF               	movlw	high STR_4
   799  00035E  6E2E               	movwf	printf@f+1,c
   800  000360  C044  F02F         	movff	_yawPosition,?_printf+2
   801  000364  C045  F030         	movff	_yawPosition+1,?_printf+3
   802  000368  EC64  F000         	call	_printf	;wreg free
   803                           
   804                           ;main.c: 40: break;
   805  00036C  D7D1               	goto	l317
   806  00036E                     
   807                           ;main.c: 42: setYawServo(yawPosition-100);
   808  00036E  0E9C               	movlw	156
   809  000370  2444               	addwf	_yawPosition,w,c
   810  000372  6E17               	movwf	setYawServo@pos,c
   811  000374  0EFF               	movlw	255
   812  000376  2045               	addwfc	_yawPosition+1,w,c
   813  000378  6E18               	movwf	setYawServo@pos+1,c
   814  00037A  EC0D  F003         	call	_setYawServo	;wreg free
   815                           
   816                           ;main.c: 43: printf("Decrementing Servo Position: %u\r\n",yawPosition);
   817  00037E  0E05               	movlw	low STR_5
   818  000380  6E2D               	movwf	printf@f,c
   819  000382  0EFF               	movlw	high STR_5
   820  000384  6E2E               	movwf	printf@f+1,c
   821  000386  C044  F02F         	movff	_yawPosition,?_printf+2
   822  00038A  C045  F030         	movff	_yawPosition+1,?_printf+3
   823  00038E  EC64  F000         	call	_printf	;wreg free
   824                           
   825                           ;main.c: 44: break;
   826  000392  D7BE               	goto	l317
   827  000394                     
   828                           ;main.c: 47: printf("Encoder Position: %ld\r\n",encoderPosition);
   829  000394  0EB6               	movlw	low STR_6
   830  000396  6E2D               	movwf	printf@f,c
   831  000398  0EFF               	movlw	high STR_6
   832  00039A  6E2E               	movwf	printf@f+1,c
   833  00039C  C037  F02F         	movff	_encoderPosition,?_printf+2
   834  0003A0  C038  F030         	movff	_encoderPosition+1,?_printf+3
   835  0003A4  C039  F031         	movff	_encoderPosition+2,?_printf+4
   836  0003A8  C03A  F032         	movff	_encoderPosition+3,?_printf+5
   837  0003AC  EC64  F000         	call	_printf	;wreg free
   838  0003B0  EC06  F004         	call	_EUSART2_is_rx_ready	;wreg free
   839  0003B4  0900               	iorlw	0
   840  0003B6  B4D8               	btfsc	status,2,c
   841  0003B8  D7ED               	goto	l326
   842                           
   843                           ;main.c: 48: }
   844                           ;main.c: 49: EUSART2_Read();
   845  0003BA  ECF0  F003         	call	_EUSART2_Read	;wreg free
   846                           
   847                           ;main.c: 50: break;
   848  0003BE  D7A8               	goto	l317
   849  0003C0                     
   850                           ;main.c: 52: printf(" k\r\n");
   851  0003C0  0EF4               	movlw	low STR_7
   852  0003C2  6E2D               	movwf	printf@f,c
   853  0003C4  0EFF               	movlw	high STR_7
   854  0003C6  6E2E               	movwf	printf@f+1,c
   855  0003C8  EC64  F000         	call	_printf	;wreg free
   856                           
   857                           ;main.c: 53: break;
   858  0003CC  D7A1               	goto	l317
   859  0003CE                     
   860                           ;main.c: 56: if ((EUSART1_is_rx_ready())) {
   861  0003CE  EC0C  F004         	call	_EUSART1_is_rx_ready	;wreg free
   862  0003D2  0900               	iorlw	0
   863  0003D4  B4D8               	btfsc	status,2,c
   864  0003D6  D017               	goto	l334
   865                           
   866                           ;main.c: 57: cmd2 = EUSART1_Read();
   867  0003D8  ECF8  F003         	call	_EUSART1_Read	;wreg free
   868  0003DC  6E36               	movwf	main@cmd2,c
   869                           
   870                           ;main.c: 58: if (cmd2 == 'o') {
   871  0003DE  0E6F               	movlw	111
   872  0003E0  1836               	xorwf	main@cmd2,w,c
   873  0003E2  A4D8               	btfss	status,2,c
   874  0003E4  D007               	goto	l333
   875                           
   876                           ;main.c: 59: printf("ok\r\n");
   877  0003E6  0EF9               	movlw	low STR_8
   878  0003E8  6E2D               	movwf	printf@f,c
   879  0003EA  0EFF               	movlw	high STR_8
   880  0003EC  6E2E               	movwf	printf@f+1,c
   881  0003EE  EC64  F000         	call	_printf	;wreg free
   882                           
   883                           ;main.c: 60: }
   884  0003F2  D009               	goto	l334
   885  0003F4                     l333:
   886                           
   887                           ;main.c: 61: else {
   888                           ;main.c: 62: printf("Recieved %u from EUSART1\r\n", cmd2);
   889  0003F4  0E65               	movlw	low STR_9
   890  0003F6  6E2D               	movwf	printf@f,c
   891  0003F8  0EFF               	movlw	high STR_9
   892  0003FA  6E2E               	movwf	printf@f+1,c
   893  0003FC  C036  F02F         	movff	main@cmd2,?_printf+2
   894  000400  6A30               	clrf	?_printf+3,c
   895  000402  EC64  F000         	call	_printf	;wreg free
   896  000406                     l334:
   897  000406  EC06  F004         	call	_EUSART2_is_rx_ready	;wreg free
   898  00040A  0900               	iorlw	0
   899  00040C  B4D8               	btfsc	status,2,c
   900  00040E  D7DF               	goto	l331
   901                           
   902                           ;main.c: 63: }
   903                           ;main.c: 64: }
   904                           ;main.c: 65: }
   905                           ;main.c: 66: EUSART2_Read();
   906  000410  ECF0  F003         	call	_EUSART2_Read	;wreg free
   907                           
   908                           ;main.c: 67: break;
   909  000414  D77D               	goto	l317
   910  000416                     
   911                           ;main.c: 69: printf("\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n");
   912  000416  0ECE               	movlw	low STR_10
   913  000418  6E2D               	movwf	printf@f,c
   914  00041A  0EFF               	movlw	high STR_10
   915  00041C  6E2E               	movwf	printf@f+1,c
   916  00041E  EC64  F000         	call	_printf	;wreg free
   917                           
   918                           ;main.c: 70: break;
   919  000422  D776               	goto	l317
   920  000424                     l337:
   921  000424  00FF               	reset		;# 
   922                           
   923                           ;main.c: 73: break;
   924  000426  D774               	goto	l317
   925  000428                     
   926                           ;main.c: 75: printf("Unknown key %c\r\n",cmd);
   927  000428  0EE3               	movlw	low STR_11
   928  00042A  6E2D               	movwf	printf@f,c
   929  00042C  0EFF               	movlw	high STR_11
   930  00042E  6E2E               	movwf	printf@f+1,c
   931  000430  C035  F02F         	movff	main@cmd,?_printf+2
   932  000434  6A30               	clrf	?_printf+3,c
   933  000436  EC64  F000         	call	_printf	;wreg free
   934                           
   935                           ;main.c: 77: }
   936                           
   937                           ;main.c: 76: break;
   938  00043A  D76A               	goto	l317
   939  00043C                     l319:
   940  00043C  5035               	movf	main@cmd,w,c
   941                           
   942                           ; Switch size 1, requested type "space"
   943                           ; Number of cases is 8, Range of values is 63 to 122
   944                           ; switch strategies available:
   945                           ; Name         Instructions Cycles
   946                           ; simple_byte           25    13 (average)
   947                           ;	Chosen strategy is simple_byte
   948  00043E  0A3F               	xorlw	63	; case 63
   949  000440  B4D8               	btfsc	status,2,c
   950  000442  D76F               	goto	l320
   951  000444  0A7A               	xorlw	122	; case 69
   952  000446  B4D8               	btfsc	status,2,c
   953  000448  D7B3               	goto	l325
   954  00044A  0A16               	xorlw	22	; case 83
   955  00044C  B4D8               	btfsc	status,2,c
   956  00044E  D77C               	goto	l322
   957  000450  0A09               	xorlw	9	; case 90
   958  000452  B4D8               	btfsc	status,2,c
   959  000454  D7E7               	goto	l337
   960  000456  0A35               	xorlw	53	; case 111
   961  000458  B4D8               	btfsc	status,2,c
   962  00045A  D7B2               	goto	l328
   963  00045C  0A1C               	xorlw	28	; case 115
   964  00045E  B4D8               	btfsc	status,2,c
   965  000460  D786               	goto	l323
   966  000462  0A06               	xorlw	6	; case 117
   967  000464  B4D8               	btfsc	status,2,c
   968  000466  D7CF               	goto	l334
   969  000468  0A0F               	xorlw	15	; case 122
   970  00046A  B4D8               	btfsc	status,2,c
   971  00046C  D7D4               	goto	l336
   972  00046E  D7DC               	goto	l338
   973  000470                     __end_of_main:
   974                           	opt stack 0
   975                           tblptru	equ	0xFF8
   976                           tblptrh	equ	0xFF7
   977                           tblptrl	equ	0xFF6
   978                           tablat	equ	0xFF5
   979                           intcon	equ	0xFF2
   980                           postinc0	equ	0xFEE
   981                           wreg	equ	0xFE8
   982                           status	equ	0xFD8
   983                           
   984 ;; *************** function _setYawServo *****************
   985 ;; Defined at:
   986 ;;		line 83 in file "main.c"
   987 ;; Parameters:    Size  Location     Type
   988 ;;  pos             2   22[COMRAM] unsigned int 
   989 ;; Auto vars:     Size  Location     Type
   990 ;;		None
   991 ;; Return value:  Size  Location     Type
   992 ;;                  1    wreg      void 
   993 ;; Registers used:
   994 ;;		wreg, status,2, status,0
   995 ;; Tracked objects:
   996 ;;		On entry : 0/0
   997 ;;		On exit  : 0/0
   998 ;;		Unchanged: 0/0
   999 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1000 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1001 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1002 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1003 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1004 ;;Total ram usage:        2 bytes
  1005 ;; Hardware stack levels used:    1
  1006 ;; Hardware stack levels required when called:    4
  1007 ;; This function calls:
  1008 ;;		Nothing
  1009 ;; This function is called by:
  1010 ;;		_main
  1011 ;; This function uses a non-reentrant model
  1012 ;;
  1013                           
  1014                           	psect	text1
  1015  00061A                     __ptext1:
  1016                           	opt stack 0
  1017  00061A                     _setYawServo:
  1018                           	opt stack 26
  1019                           
  1020                           ;main.c: 85: if(pos < 1106){
  1021                           
  1022                           ;incstack = 0
  1023  00061A  0E52               	movlw	82
  1024  00061C  5C17               	subwf	setYawServo@pos,w,c
  1025  00061E  0E04               	movlw	4
  1026  000620  5818               	subwfb	setYawServo@pos+1,w,c
  1027  000622  B0D8               	btfsc	status,0,c
  1028  000624  D004               	goto	l343
  1029                           
  1030                           ;main.c: 86: pos = 1106;
  1031  000626  0E04               	movlw	4
  1032  000628  6E18               	movwf	setYawServo@pos+1,c
  1033  00062A  0E52               	movlw	82
  1034  00062C  D009               	goto	L1
  1035  00062E                     l343:
  1036                           
  1037                           ;main.c: 88: else if(pos > 4900){
  1038  00062E  0E25               	movlw	37
  1039  000630  5C17               	subwf	setYawServo@pos,w,c
  1040  000632  0E13               	movlw	19
  1041  000634  5818               	subwfb	setYawServo@pos+1,w,c
  1042  000636  A0D8               	btfss	status,0,c
  1043  000638  D004               	goto	l345
  1044                           
  1045                           ;main.c: 89: pos = 4900;
  1046  00063A  0E13               	movlw	19
  1047  00063C  6E18               	movwf	setYawServo@pos+1,c
  1048  00063E  0E24               	movlw	36
  1049  000640                     L1:
  1050  000640  6E17               	movwf	setYawServo@pos,c
  1051  000642                     l345:
  1052                           
  1053                           ;main.c: 90: }
  1054                           ;main.c: 92: yawPosition = pos;
  1055  000642  C017  F044         	movff	setYawServo@pos,_yawPosition
  1056  000646  C018  F045         	movff	setYawServo@pos+1,_yawPosition+1
  1057  00064A  0012               	return		;funcret
  1058  00064C                     __end_of_setYawServo:
  1059                           	opt stack 0
  1060                           tblptru	equ	0xFF8
  1061                           tblptrh	equ	0xFF7
  1062                           tblptrl	equ	0xFF6
  1063                           tablat	equ	0xFF5
  1064                           intcon	equ	0xFF2
  1065                           postinc0	equ	0xFEE
  1066                           wreg	equ	0xFE8
  1067                           status	equ	0xFD8
  1068                           
  1069 ;; *************** function _printf *****************
  1070 ;; Defined at:
  1071 ;;		line 464 in file "/Applications/microchip/xc8/v1.45/sources/common/doprnt.c"
  1072 ;; Parameters:    Size  Location     Type
  1073 ;;  f               2   44[COMRAM] PTR const unsigned char 
  1074 ;;		 -> STR_11(17), STR_10(21), STR_9(27), STR_8(5), 
  1075 ;;		 -> STR_7(5), STR_6(24), STR_5(34), STR_4(34), 
  1076 ;;		 -> STR_3(27), STR_2(27), STR_1(28), 
  1077 ;; Auto vars:     Size  Location     Type
  1078 ;;  val             4    2[BANK0 ] unsigned long 
  1079 ;;  tmpval          4    0        struct .
  1080 ;;  cp              3    0        PTR const unsigned char 
  1081 ;;  ap              2    7[BANK0 ] PTR void [1]
  1082 ;;		 -> ?_printf(2), 
  1083 ;;  prec            2    0[BANK0 ] int 
  1084 ;;  len             2    0        unsigned int 
  1085 ;;  c               1    9[BANK0 ] char 
  1086 ;;  flag            1    6[BANK0 ] unsigned char 
  1087 ;; Return value:  Size  Location     Type
  1088 ;;                  2   44[COMRAM] int 
  1089 ;; Registers used:
  1090 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1091 ;; Tracked objects:
  1092 ;;		On entry : 0/0
  1093 ;;		On exit  : 0/0
  1094 ;;		Unchanged: 0/0
  1095 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1096 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1097 ;;      Locals:         0      10       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1098 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1099 ;;      Totals:         8      10       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1100 ;;Total ram usage:       18 bytes
  1101 ;; Hardware stack levels used:    1
  1102 ;; Hardware stack levels required when called:    6
  1103 ;; This function calls:
  1104 ;;		___lldiv
  1105 ;;		___llmod
  1106 ;;		_putch
  1107 ;; This function is called by:
  1108 ;;		_main
  1109 ;; This function uses a non-reentrant model
  1110 ;;
  1111                           
  1112                           	psect	text2
  1113  0000C8                     __ptext2:
  1114                           	opt stack 0
  1115  0000C8                     _printf:
  1116                           	opt stack 24
  1117                           
  1118                           ;doprnt.c: 466: va_list ap;
  1119                           ;doprnt.c: 499: signed char c;
  1120                           ;doprnt.c: 504: int prec;
  1121                           ;doprnt.c: 508: unsigned char flag;
  1122                           ;doprnt.c: 523: union {
  1123                           ;doprnt.c: 524: unsigned long vd;
  1124                           ;doprnt.c: 525: double integ;
  1125                           ;doprnt.c: 526: } tmpval;
  1126                           ;doprnt.c: 528: unsigned long val;
  1127                           ;doprnt.c: 529: unsigned len;
  1128                           ;doprnt.c: 530: const char * cp;
  1129                           ;doprnt.c: 533: *ap = __va_start();
  1130                           
  1131                           ;incstack = 0
  1132  0000C8  0E2F               	movlw	low (?_printf+2)
  1133  0000CA  0100               	movlb	0	; () banked
  1134  0000CC  6F67               	movwf	printf@ap& (0+255),b
  1135  0000CE  0E00               	movlw	high (?_printf+2)
  1136  0000D0  6F68               	movwf	(printf@ap+1)& (0+255),b
  1137                           
  1138                           ;doprnt.c: 536: while(c = *f++) {
  1139  0000D2  D10B               	goto	u1050
  1140  0000D4                     
  1141                           ; BSR set to: 0
  1142                           ;doprnt.c: 538: if(c != '%')
  1143                           
  1144                           ; BSR set to: 0
  1145  0000D4  0E25               	movlw	37
  1146  0000D6  1969               	xorwf	printf@c& (0+255),w,b
  1147  0000D8  B4D8               	btfsc	status,2,c
  1148  0000DA  D004               	goto	l429
  1149                           
  1150                           ; BSR set to: 0
  1151                           ;doprnt.c: 540: {
  1152                           ;doprnt.c: 541: (putch(c) );
  1153  0000DC  5169               	movf	printf@c& (0+255),w,b
  1154  0000DE  EC12  F004         	call	_putch
  1155                           
  1156                           ;doprnt.c: 542: continue;
  1157  0000E2  D103               	goto	u1050
  1158  0000E4                     l429:
  1159                           
  1160                           ;doprnt.c: 543: }
  1161                           ;doprnt.c: 548: flag = 0;
  1162  0000E4  0E00               	movlw	0
  1163  0000E6  0100               	movlb	0	; () banked
  1164  0000E8  6F66               	movwf	printf@flag& (0+255),b
  1165                           
  1166                           ; BSR set to: 0
  1167                           ;doprnt.c: 635: switch(c = *f++) {
  1168                           
  1169                           ;doprnt.c: 633: loop:
  1170  0000EA  D013               	goto	l431
  1171  0000EC                     
  1172                           ; BSR set to: 0
  1173                           ;doprnt.c: 643: flag |= 0x10;
  1174                           
  1175                           ; BSR set to: 0
  1176  0000EC  8966               	bsf	printf@flag& (0+255),4,b
  1177                           
  1178                           ;doprnt.c: 644: goto loop;
  1179  0000EE  D011               	goto	l431
  1180  0000F0                     
  1181                           ; BSR set to: 0
  1182                           ;doprnt.c: 799: c = (*(int *)__va_arg((*(int **)ap), (int)0));
  1183                           
  1184                           ; BSR set to: 0
  1185  0000F0  C067  FFD9         	movff	printf@ap,fsr2l
  1186  0000F4  C068  FFDA         	movff	printf@ap+1,fsr2h
  1187  0000F8  50DF               	movf	indf2,w,c
  1188  0000FA  6F69               	movwf	printf@c& (0+255),b
  1189                           
  1190                           ; BSR set to: 0
  1191  0000FC  0E02               	movlw	2
  1192  0000FE  2767               	addwf	printf@ap& (0+255),f,b
  1193  000100  0E00               	movlw	0
  1194  000102  2368               	addwfc	(printf@ap+1)& (0+255),f,b
  1195  000104                     
  1196                           ; BSR set to: 0
  1197                           ;doprnt.c: 809: (putch(c) );
  1198                           
  1199                           ; BSR set to: 0
  1200  000104  5169               	movf	printf@c& (0+255),w,b
  1201  000106  EC12  F004         	call	_putch
  1202                           
  1203                           ;doprnt.c: 810: continue;
  1204  00010A  D0EF               	goto	u1050
  1205  00010C                     
  1206                           ;doprnt.c: 818: flag |= 0x40;
  1207  00010C  0100               	movlb	0	; () banked
  1208  00010E  8D66               	bsf	printf@flag& (0+255),6,b
  1209                           
  1210                           ; BSR set to: 0
  1211                           ;doprnt.c: 822: }
  1212                           
  1213                           ;doprnt.c: 819: break;
  1214  000110  D01E               	goto	l437
  1215  000112                     l431:
  1216                           
  1217                           ; BSR set to: 0
  1218                           
  1219                           ; BSR set to: 0
  1220  000112  C02D  FFF6         	movff	printf@f,tblptrl
  1221  000116  C02E  FFF7         	movff	printf@f+1,tblptrh
  1222  00011A  4A2D               	infsnz	printf@f,f,c
  1223  00011C  2A2E               	incf	printf@f+1,f,c
  1224  00011E                     	if	1	;Program memory is < 0x10000, tblptru is always zero
  1225  00011E  6AF8               	clrf	tblptru,c
  1226  000120                     	endif
  1227  000120                     	if	0	;tblptru may be non-zero
  1228  000120                     	endif
  1229  000120  0008               	tblrd		*
  1230  000122  CFF5 F069          	movff	tablat,printf@c
  1231  000126  5169               	movf	printf@c& (0+255),w,b
  1232                           
  1233                           ; Switch size 1, requested type "space"
  1234                           ; Number of cases is 6, Range of values is 0 to 117
  1235                           ; switch strategies available:
  1236                           ; Name         Instructions Cycles
  1237                           ; simple_byte           19    10 (average)
  1238                           ;	Chosen strategy is simple_byte
  1239  000128  0A00               	xorlw	0	; case 0
  1240  00012A  B4D8               	btfsc	status,2,c
  1241  00012C  0012               	return	
  1242  00012E  0A63               	xorlw	99	; case 99
  1243  000130  B4D8               	btfsc	status,2,c
  1244  000132  D7DE               	goto	l438
  1245  000134  0A07               	xorlw	7	; case 100
  1246  000136  B4D8               	btfsc	status,2,c
  1247  000138  D00A               	goto	l437
  1248  00013A  0A0D               	xorlw	13	; case 105
  1249  00013C  B4D8               	btfsc	status,2,c
  1250  00013E  D007               	goto	l437
  1251  000140  0A05               	xorlw	5	; case 108
  1252  000142  B4D8               	btfsc	status,2,c
  1253  000144  D7D3               	goto	l434
  1254  000146  0A19               	xorlw	25	; case 117
  1255  000148  B4D8               	btfsc	status,2,c
  1256  00014A  D7E0               	goto	l440
  1257  00014C  D7DB               	goto	l439
  1258  00014E                     l437:
  1259                           
  1260                           ; BSR set to: 0
  1261                           ;doprnt.c: 1251: if((flag & 0x40) == 0x00)
  1262  00014E  BD66               	btfsc	printf@flag& (0+255),6,b
  1263  000150  D02E               	goto	l441
  1264                           
  1265                           ; BSR set to: 0
  1266                           ;doprnt.c: 1253: {
  1267                           ;doprnt.c: 1255: if(flag & 0x10)
  1268  000152  A966               	btfss	printf@flag& (0+255),4,b
  1269  000154  D00E               	goto	l442
  1270                           
  1271                           ; BSR set to: 0
  1272                           ;doprnt.c: 1256: val = (*(long *)__va_arg((*(long **)ap), (long)0));
  1273  000156  C067  FFD9         	movff	printf@ap,fsr2l
  1274  00015A  C068  FFDA         	movff	printf@ap+1,fsr2h
  1275  00015E  CFDE F062          	movff	postinc2,printf@val
  1276  000162  CFDE F063          	movff	postinc2,printf@val+1
  1277  000166  CFDE F064          	movff	postinc2,printf@val+2
  1278  00016A  CFDE F065          	movff	postinc2,printf@val+3
  1279                           
  1280                           ; BSR set to: 0
  1281  00016E  0E04               	movlw	4
  1282  000170  D00E               	goto	L2
  1283  000172                     l442:
  1284                           
  1285                           ; BSR set to: 0
  1286                           ;doprnt.c: 1257: else
  1287                           ;doprnt.c: 1259: val = (long)(*(int *)__va_arg((*(int **)ap), (int)0));
  1288                           
  1289                           ; BSR set to: 0
  1290  000172  C067  FFD9         	movff	printf@ap,fsr2l
  1291  000176  C068  FFDA         	movff	printf@ap+1,fsr2h
  1292  00017A  CFDE F062          	movff	postinc2,printf@val
  1293  00017E  CFDD F063          	movff	postdec2,printf@val+1
  1294  000182  0E00               	movlw	0
  1295  000184  BF63               	btfsc	(printf@val+1)& (0+255),7,b
  1296  000186  0EFF               	movlw	-1
  1297  000188  6F64               	movwf	(printf@val+2)& (0+255),b
  1298  00018A  6F65               	movwf	(printf@val+3)& (0+255),b
  1299                           
  1300                           ; BSR set to: 0
  1301  00018C  0E02               	movlw	2
  1302  00018E                     L2:
  1303  00018E  2767               	addwf	printf@ap& (0+255),f,b
  1304  000190  0E00               	movlw	0
  1305  000192  2368               	addwfc	(printf@ap+1)& (0+255),f,b
  1306                           
  1307                           ; BSR set to: 0
  1308                           ;doprnt.c: 1261: if((long)val < 0) {
  1309                           
  1310                           ; BSR set to: 0
  1311  000194  AF65               	btfss	(printf@val+3)& (0+255),7,b
  1312  000196  D02D               	goto	l447
  1313                           
  1314                           ; BSR set to: 0
  1315                           ;doprnt.c: 1262: flag |= 0x03;
  1316  000198  0E03               	movlw	3
  1317  00019A  1366               	iorwf	printf@flag& (0+255),f,b
  1318                           
  1319                           ; BSR set to: 0
  1320                           ;doprnt.c: 1263: val = -val;
  1321  00019C  1F65               	comf	(printf@val+3)& (0+255),f,b
  1322  00019E  1F64               	comf	(printf@val+2)& (0+255),f,b
  1323  0001A0  1F63               	comf	(printf@val+1)& (0+255),f,b
  1324  0001A2  6D62               	negf	printf@val& (0+255),b
  1325  0001A4  0E00               	movlw	0
  1326  0001A6  2363               	addwfc	(printf@val+1)& (0+255),f,b
  1327  0001A8  2364               	addwfc	(printf@val+2)& (0+255),f,b
  1328  0001AA  2365               	addwfc	(printf@val+3)& (0+255),f,b
  1329                           
  1330                           ; BSR set to: 0
  1331                           ;doprnt.c: 1264: }
  1332                           ;doprnt.c: 1266: }
  1333  0001AC  D022               	goto	l447
  1334  0001AE                     l441:
  1335                           
  1336                           ; BSR set to: 0
  1337                           ;doprnt.c: 1268: else
  1338                           ;doprnt.c: 1273: {
  1339                           ;doprnt.c: 1281: if(flag & 0x10)
  1340  0001AE  A966               	btfss	printf@flag& (0+255),4,b
  1341  0001B0  D00E               	goto	l446
  1342                           
  1343                           ; BSR set to: 0
  1344                           ;doprnt.c: 1282: val = (*(unsigned long *)__va_arg((*(unsigned long **)ap), (unsigned lo
      +                          ng)0));
  1345  0001B2  C067  FFD9         	movff	printf@ap,fsr2l
  1346  0001B6  C068  FFDA         	movff	printf@ap+1,fsr2h
  1347  0001BA  CFDE F062          	movff	postinc2,printf@val
  1348  0001BE  CFDE F063          	movff	postinc2,printf@val+1
  1349  0001C2  CFDE F064          	movff	postinc2,printf@val+2
  1350  0001C6  CFDE F065          	movff	postinc2,printf@val+3
  1351                           
  1352                           ; BSR set to: 0
  1353  0001CA  0E04               	movlw	4
  1354  0001CC  D00F               	goto	L3
  1355  0001CE                     l446:
  1356                           
  1357                           ; BSR set to: 0
  1358                           ;doprnt.c: 1283: else
  1359                           ;doprnt.c: 1286: val = (*(unsigned *)__va_arg((*(unsigned **)ap), (unsigned)0));
  1360                           
  1361                           ; BSR set to: 0
  1362  0001CE  C067  FFD9         	movff	printf@ap,fsr2l
  1363  0001D2  C068  FFDA         	movff	printf@ap+1,fsr2h
  1364  0001D6  CFDE F033          	movff	postinc2,??_printf
  1365  0001DA  CFDD F034          	movff	postdec2,??_printf+1
  1366  0001DE  C033  F062         	movff	??_printf,printf@val
  1367  0001E2  C034  F063         	movff	??_printf+1,printf@val+1
  1368  0001E6  6B64               	clrf	(printf@val+2)& (0+255),b
  1369  0001E8  6B65               	clrf	(printf@val+3)& (0+255),b
  1370                           
  1371                           ; BSR set to: 0
  1372  0001EA  0E02               	movlw	2
  1373  0001EC                     L3:
  1374  0001EC  2767               	addwf	printf@ap& (0+255),f,b
  1375  0001EE  0E00               	movlw	0
  1376  0001F0  2368               	addwfc	(printf@ap+1)& (0+255),f,b
  1377  0001F2                     l447:
  1378                           
  1379                           ; BSR set to: 0
  1380                           ;doprnt.c: 1287: }
  1381                           ;doprnt.c: 1305: for(c = 1 ; c != sizeof dpowers/sizeof dpowers[0] ; c++)
  1382                           
  1383                           ; BSR set to: 0
  1384                           
  1385                           ; BSR set to: 0
  1386  0001F2  0E01               	movlw	1
  1387  0001F4  6F69               	movwf	printf@c& (0+255),b
  1388  0001F6                     l1858:
  1389                           
  1390                           ; BSR set to: 0
  1391  0001F6  0E0A               	movlw	10
  1392  0001F8  1969               	xorwf	printf@c& (0+255),w,b
  1393  0001FA  B4D8               	btfsc	status,2,c
  1394  0001FC  D01B               	goto	u1030
  1395                           
  1396                           ; BSR set to: 0
  1397                           ;doprnt.c: 1306: if(val < dpowers[c])
  1398                           
  1399                           ; BSR set to: 0
  1400                           
  1401                           ; BSR set to: 0
  1402  0001FE  5169               	movf	printf@c& (0+255),w,b
  1403  000200  0D04               	mullw	4
  1404  000202  0EDD               	movlw	low _dpowers
  1405  000204  24F3               	addwf	prodl,w,c
  1406  000206  6EF6               	movwf	tblptrl,c
  1407  000208  0EFE               	movlw	high _dpowers
  1408  00020A  20F4               	addwfc	prodh,w,c
  1409  00020C  6EF7               	movwf	tblptrh,c
  1410  00020E                     	if	1	;There are 3 active tblptr bytes
  1411  00020E  6AF8               	clrf	tblptru,c
  1412  000210  0E00               	movlw	low (__mediumconst shr (0+16))
  1413  000212  22F8               	addwfc	tblptru,f,c
  1414  000214                     	endif
  1415  000214  0009               	tblrd		*+
  1416  000216  50F5               	movf	tablat,w,c
  1417  000218  5D62               	subwf	printf@val& (0+255),w,b
  1418  00021A  0009               	tblrd		*+
  1419  00021C  50F5               	movf	tablat,w,c
  1420  00021E  5963               	subwfb	(printf@val+1)& (0+255),w,b
  1421  000220  0009               	tblrd		*+
  1422  000222  50F5               	movf	tablat,w,c
  1423  000224  5964               	subwfb	(printf@val+2)& (0+255),w,b
  1424  000226  0009               	tblrd		*+
  1425  000228  50F5               	movf	tablat,w,c
  1426  00022A  5965               	subwfb	(printf@val+3)& (0+255),w,b
  1427  00022C  A0D8               	btfss	status,0,c
  1428  00022E  D002               	goto	u1030
  1429                           
  1430                           ; BSR set to: 0
  1431                           
  1432                           ; BSR set to: 0
  1433                           
  1434                           ; BSR set to: 0
  1435                           ;doprnt.c: 1307: break;
  1436  000230  2B69               	incf	printf@c& (0+255),f,b
  1437  000232  D7E1               	goto	l1858
  1438  000234                     u1030:
  1439                           
  1440                           ; BSR set to: 0
  1441                           ;doprnt.c: 1422: {
  1442                           ;doprnt.c: 1438: if(flag & 0x03)
  1443                           
  1444                           ; BSR set to: 0
  1445  000234  C066  F033         	movff	printf@flag,??_printf
  1446  000238  0E03               	movlw	3
  1447  00023A  1633               	andwf	??_printf,f,c
  1448  00023C  B4D8               	btfsc	status,2,c
  1449  00023E  D003               	goto	l451
  1450                           
  1451                           ; BSR set to: 0
  1452                           ;doprnt.c: 1439: (putch('-') );
  1453  000240  0E2D               	movlw	45
  1454  000242  EC12  F004         	call	_putch
  1455  000246                     l451:
  1456                           
  1457                           ;doprnt.c: 1469: }
  1458                           ;doprnt.c: 1472: prec = c;
  1459  000246  0100               	movlb	0	; () banked
  1460  000248  5169               	movf	printf@c& (0+255),w,b
  1461  00024A  6F60               	movwf	printf@prec& (0+255),b
  1462  00024C  6B61               	clrf	(printf@prec+1)& (0+255),b
  1463  00024E  BF60               	btfsc	printf@prec& (0+255),7,b
  1464  000250  0761               	decf	(printf@prec+1)& (0+255),f,b
  1465                           
  1466                           ;doprnt.c: 1474: while(prec--) {
  1467  000252  D042               	goto	l452
  1468  000254                     l1876:
  1469                           
  1470                           ; BSR set to: 0
  1471                           ;doprnt.c: 1478: {
  1472                           ;doprnt.c: 1489: c = (val / dpowers[prec]) % 10 + '0';
  1473  000254  C060  F033         	movff	printf@prec,??_printf
  1474  000258  C061  F034         	movff	printf@prec+1,??_printf+1
  1475  00025C  90D8               	bcf	status,0,c
  1476  00025E  3633               	rlcf	??_printf,f,c
  1477  000260  3634               	rlcf	??_printf+1,f,c
  1478  000262  90D8               	bcf	status,0,c
  1479  000264  3633               	rlcf	??_printf,f,c
  1480  000266  3634               	rlcf	??_printf+1,f,c
  1481  000268  0EDD               	movlw	low _dpowers
  1482  00026A  2433               	addwf	??_printf,w,c
  1483  00026C  6EF6               	movwf	tblptrl,c
  1484  00026E  0EFE               	movlw	high _dpowers
  1485  000270  2034               	addwfc	??_printf+1,w,c
  1486  000272  6EF7               	movwf	tblptrh,c
  1487  000274                     	if	1	;There are 3 active tblptr bytes
  1488  000274  6AF8               	clrf	tblptru,c
  1489  000276  0E00               	movlw	low (__mediumconst shr (0+16))
  1490  000278  22F8               	addwfc	tblptru,f,c
  1491  00027A                     	endif
  1492  00027A  0009               	tblrd		*+
  1493  00027C  CFF5 F01B          	movff	tablat,___lldiv@divisor
  1494  000280  0009               	tblrd		*+
  1495  000282  CFF5 F01C          	movff	tablat,___lldiv@divisor+1
  1496  000286  0009               	tblrd		*+
  1497  000288  CFF5 F01D          	movff	tablat,___lldiv@divisor+2
  1498  00028C  000A               	tblrd		*-
  1499  00028E  CFF5 F01E          	movff	tablat,___lldiv@divisor+3
  1500  000292  C062  F017         	movff	printf@val,___lldiv@dividend
  1501  000296  C063  F018         	movff	printf@val+1,___lldiv@dividend+1
  1502  00029A  C064  F019         	movff	printf@val+2,___lldiv@dividend+2
  1503  00029E  C065  F01A         	movff	printf@val+3,___lldiv@dividend+3
  1504  0002A2  EC38  F002         	call	___lldiv	;wreg free
  1505  0002A6  C017  F024         	movff	?___lldiv,___llmod@dividend
  1506  0002AA  C018  F025         	movff	?___lldiv+1,___llmod@dividend+1
  1507  0002AE  C019  F026         	movff	?___lldiv+2,___llmod@dividend+2
  1508  0002B2  C01A  F027         	movff	?___lldiv+3,___llmod@dividend+3
  1509  0002B6  0E0A               	movlw	10
  1510  0002B8  6E28               	movwf	___llmod@divisor,c
  1511  0002BA  0E00               	movlw	0
  1512  0002BC  6E29               	movwf	___llmod@divisor+1,c
  1513  0002BE  0E00               	movlw	0
  1514  0002C0  6E2A               	movwf	___llmod@divisor+2,c
  1515  0002C2  0E00               	movlw	0
  1516  0002C4  6E2B               	movwf	___llmod@divisor+3,c
  1517  0002C6  EC79  F002         	call	___llmod	;wreg free
  1518  0002CA  5024               	movf	?___llmod,w,c
  1519  0002CC  0F30               	addlw	48
  1520  0002CE  0100               	movlb	0	; () banked
  1521  0002D0  6F69               	movwf	printf@c& (0+255),b
  1522                           
  1523                           ; BSR set to: 0
  1524                           ;doprnt.c: 1523: }
  1525                           ;doprnt.c: 1524: (putch(c) );
  1526  0002D2  5169               	movf	printf@c& (0+255),w,b
  1527  0002D4  EC12  F004         	call	_putch
  1528  0002D8                     l452:
  1529  0002D8  0100               	movlb	0	; () banked
  1530  0002DA  0760               	decf	printf@prec& (0+255),f,b
  1531  0002DC  A0D8               	btfss	status,0,c
  1532  0002DE  0761               	decf	(printf@prec+1)& (0+255),f,b
  1533  0002E0  2960               	incf	printf@prec& (0+255),w,b
  1534  0002E2  E1B8               	bnz	l1876
  1535  0002E4  2961               	incf	(printf@prec+1)& (0+255),w,b
  1536  0002E6  A4D8               	btfss	status,2,c
  1537  0002E8  D7B5               	goto	l453
  1538  0002EA                     u1050:
  1539                           
  1540                           ; BSR set to: 0
  1541                           
  1542                           ; BSR set to: 0
  1543  0002EA  C02D  FFF6         	movff	printf@f,tblptrl
  1544  0002EE  C02E  FFF7         	movff	printf@f+1,tblptrh
  1545  0002F2  4A2D               	infsnz	printf@f,f,c
  1546  0002F4  2A2E               	incf	printf@f+1,f,c
  1547  0002F6                     	if	1	;Program memory is < 0x10000, tblptru is always zero
  1548  0002F6  6AF8               	clrf	tblptru,c
  1549  0002F8                     	endif
  1550  0002F8                     	if	0	;tblptru may be non-zero
  1551  0002F8                     	endif
  1552  0002F8  0008               	tblrd		*
  1553  0002FA  CFF5 F069          	movff	tablat,printf@c
  1554  0002FE  0100               	movlb	0	; () banked
  1555  000300  5169               	movf	printf@c& (0+255),w,b
  1556  000302  B4D8               	btfsc	status,2,c
  1557  000304  0012               	return	
  1558  000306  D6E6               	goto	l428
  1559  000308                     __end_of_printf:
  1560                           	opt stack 0
  1561                           tblptru	equ	0xFF8
  1562                           tblptrh	equ	0xFF7
  1563                           tblptrl	equ	0xFF6
  1564                           tablat	equ	0xFF5
  1565                           prodh	equ	0xFF4
  1566                           prodl	equ	0xFF3
  1567                           intcon	equ	0xFF2
  1568                           postinc0	equ	0xFEE
  1569                           wreg	equ	0xFE8
  1570                           indf2	equ	0xFDF
  1571                           postinc2	equ	0xFDE
  1572                           postdec2	equ	0xFDD
  1573                           fsr2h	equ	0xFDA
  1574                           fsr2l	equ	0xFD9
  1575                           status	equ	0xFD8
  1576                           
  1577 ;; *************** function _putch *****************
  1578 ;; Defined at:
  1579 ;;		line 125 in file "mcc_generated_files/eusart2.c"
  1580 ;; Parameters:    Size  Location     Type
  1581 ;;  txData          1    wreg     unsigned char 
  1582 ;; Auto vars:     Size  Location     Type
  1583 ;;  txData          1   23[COMRAM] unsigned char 
  1584 ;; Return value:  Size  Location     Type
  1585 ;;                  1    wreg      void 
  1586 ;; Registers used:
  1587 ;;		wreg, status,2, cstack
  1588 ;; Tracked objects:
  1589 ;;		On entry : 0/0
  1590 ;;		On exit  : 0/0
  1591 ;;		Unchanged: 0/0
  1592 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1593 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1594 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1595 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1596 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1597 ;;Total ram usage:        1 bytes
  1598 ;; Hardware stack levels used:    1
  1599 ;; Hardware stack levels required when called:    5
  1600 ;; This function calls:
  1601 ;;		_EUSART2_Write
  1602 ;; This function is called by:
  1603 ;;		_printf
  1604 ;; This function uses a non-reentrant model
  1605 ;;
  1606                           
  1607                           	psect	text3
  1608  000824                     __ptext3:
  1609                           	opt stack 0
  1610  000824                     _putch:
  1611                           	opt stack 24
  1612                           
  1613                           ; BSR set to: 0
  1614                           ;incstack = 0
  1615                           ;putch@txData stored from wreg
  1616  000824  6E18               	movwf	putch@txData,c
  1617                           
  1618                           ;eusart2.c: 127: EUSART2_Write(txData);
  1619  000826  5018               	movf	putch@txData,w,c
  1620  000828  EC00  F004         	call	_EUSART2_Write
  1621  00082C  0012               	return		;funcret
  1622  00082E                     __end_of_putch:
  1623                           	opt stack 0
  1624                           tblptru	equ	0xFF8
  1625                           tblptrh	equ	0xFF7
  1626                           tblptrl	equ	0xFF6
  1627                           tablat	equ	0xFF5
  1628                           prodh	equ	0xFF4
  1629                           prodl	equ	0xFF3
  1630                           intcon	equ	0xFF2
  1631                           postinc0	equ	0xFEE
  1632                           wreg	equ	0xFE8
  1633                           indf2	equ	0xFDF
  1634                           postinc2	equ	0xFDE
  1635                           postdec2	equ	0xFDD
  1636                           fsr2h	equ	0xFDA
  1637                           fsr2l	equ	0xFD9
  1638                           status	equ	0xFD8
  1639                           
  1640 ;; *************** function _EUSART2_Write *****************
  1641 ;; Defined at:
  1642 ;;		line 111 in file "mcc_generated_files/eusart2.c"
  1643 ;; Parameters:    Size  Location     Type
  1644 ;;  txData          1    wreg     unsigned char 
  1645 ;; Auto vars:     Size  Location     Type
  1646 ;;  txData          1   22[COMRAM] unsigned char 
  1647 ;; Return value:  Size  Location     Type
  1648 ;;                  1    wreg      void 
  1649 ;; Registers used:
  1650 ;;		wreg
  1651 ;; Tracked objects:
  1652 ;;		On entry : 0/0
  1653 ;;		On exit  : 0/0
  1654 ;;		Unchanged: 0/0
  1655 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1656 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1657 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1658 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1659 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1660 ;;Total ram usage:        1 bytes
  1661 ;; Hardware stack levels used:    1
  1662 ;; Hardware stack levels required when called:    4
  1663 ;; This function calls:
  1664 ;;		Nothing
  1665 ;; This function is called by:
  1666 ;;		_putch
  1667 ;; This function uses a non-reentrant model
  1668 ;;
  1669                           
  1670                           	psect	text4
  1671  000800                     __ptext4:
  1672                           	opt stack 0
  1673  000800                     _EUSART2_Write:
  1674                           	opt stack 24
  1675                           
  1676                           ;incstack = 0
  1677                           ;EUSART2_Write@txData stored from wreg
  1678  000800  6E17               	movwf	EUSART2_Write@txData,c
  1679  000802                     
  1680                           ;eusart2.c: 114: {
  1681                           
  1682                           ;eusart2.c: 113: while(0 == PIR3bits.TX2IF)
  1683  000802  A8A4               	btfss	4004,4,c	;volatile
  1684  000804  D7FE               	goto	l1766
  1685                           
  1686                           ;eusart2.c: 115: }
  1687                           ;eusart2.c: 117: TXREG2 = txData;
  1688  000806  C017  FF73         	movff	EUSART2_Write@txData,3955	;volatile
  1689  00080A  0012               	return		;funcret
  1690  00080C                     __end_of_EUSART2_Write:
  1691                           	opt stack 0
  1692                           tblptru	equ	0xFF8
  1693                           tblptrh	equ	0xFF7
  1694                           tblptrl	equ	0xFF6
  1695                           tablat	equ	0xFF5
  1696                           prodh	equ	0xFF4
  1697                           prodl	equ	0xFF3
  1698                           intcon	equ	0xFF2
  1699                           postinc0	equ	0xFEE
  1700                           wreg	equ	0xFE8
  1701                           indf2	equ	0xFDF
  1702                           postinc2	equ	0xFDE
  1703                           postdec2	equ	0xFDD
  1704                           fsr2h	equ	0xFDA
  1705                           fsr2l	equ	0xFD9
  1706                           status	equ	0xFD8
  1707                           
  1708 ;; *************** function ___llmod *****************
  1709 ;; Defined at:
  1710 ;;		line 8 in file "/Applications/microchip/xc8/v1.45/sources/common/llmod.c"
  1711 ;; Parameters:    Size  Location     Type
  1712 ;;  dividend        4   35[COMRAM] unsigned long 
  1713 ;;  divisor         4   39[COMRAM] unsigned long 
  1714 ;; Auto vars:     Size  Location     Type
  1715 ;;  counter         1   43[COMRAM] unsigned char 
  1716 ;; Return value:  Size  Location     Type
  1717 ;;                  4   35[COMRAM] unsigned long 
  1718 ;; Registers used:
  1719 ;;		wreg, status,2, status,0
  1720 ;; Tracked objects:
  1721 ;;		On entry : 0/0
  1722 ;;		On exit  : 0/0
  1723 ;;		Unchanged: 0/0
  1724 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1725 ;;      Params:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1726 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1727 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1728 ;;      Totals:         9       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1729 ;;Total ram usage:        9 bytes
  1730 ;; Hardware stack levels used:    1
  1731 ;; Hardware stack levels required when called:    4
  1732 ;; This function calls:
  1733 ;;		Nothing
  1734 ;; This function is called by:
  1735 ;;		_printf
  1736 ;; This function uses a non-reentrant model
  1737 ;;
  1738                           
  1739                           	psect	text5
  1740  0004F2                     __ptext5:
  1741                           	opt stack 0
  1742  0004F2                     ___llmod:
  1743                           	opt stack 25
  1744                           
  1745                           ;incstack = 0
  1746  0004F2  5028               	movf	___llmod@divisor,w,c
  1747  0004F4  1029               	iorwf	___llmod@divisor+1,w,c
  1748  0004F6  102A               	iorwf	___llmod@divisor+2,w,c
  1749  0004F8  102B               	iorwf	___llmod@divisor+3,w,c
  1750  0004FA  B4D8               	btfsc	status,2,c
  1751  0004FC  D024               	goto	l822
  1752  0004FE  0E01               	movlw	1
  1753  000500  6E2C               	movwf	___llmod@counter,c
  1754  000502  D006               	goto	l817
  1755  000504  90D8               	bcf	status,0,c
  1756  000506  3628               	rlcf	___llmod@divisor,f,c
  1757  000508  3629               	rlcf	___llmod@divisor+1,f,c
  1758  00050A  362A               	rlcf	___llmod@divisor+2,f,c
  1759  00050C  362B               	rlcf	___llmod@divisor+3,f,c
  1760  00050E  2A2C               	incf	___llmod@counter,f,c
  1761  000510                     l817:
  1762  000510  AE2B               	btfss	___llmod@divisor+3,7,c
  1763  000512  D7F8               	goto	l818
  1764  000514                     u940:
  1765  000514  5028               	movf	___llmod@divisor,w,c
  1766  000516  5C24               	subwf	___llmod@dividend,w,c
  1767  000518  5029               	movf	___llmod@divisor+1,w,c
  1768  00051A  5825               	subwfb	___llmod@dividend+1,w,c
  1769  00051C  502A               	movf	___llmod@divisor+2,w,c
  1770  00051E  5826               	subwfb	___llmod@dividend+2,w,c
  1771  000520  502B               	movf	___llmod@divisor+3,w,c
  1772  000522  5827               	subwfb	___llmod@dividend+3,w,c
  1773  000524  A0D8               	btfss	status,0,c
  1774  000526  D008               	goto	l821
  1775  000528  5028               	movf	___llmod@divisor,w,c
  1776  00052A  5E24               	subwf	___llmod@dividend,f,c
  1777  00052C  5029               	movf	___llmod@divisor+1,w,c
  1778  00052E  5A25               	subwfb	___llmod@dividend+1,f,c
  1779  000530  502A               	movf	___llmod@divisor+2,w,c
  1780  000532  5A26               	subwfb	___llmod@dividend+2,f,c
  1781  000534  502B               	movf	___llmod@divisor+3,w,c
  1782  000536  5A27               	subwfb	___llmod@dividend+3,f,c
  1783  000538                     l821:
  1784  000538  90D8               	bcf	status,0,c
  1785  00053A  322B               	rrcf	___llmod@divisor+3,f,c
  1786  00053C  322A               	rrcf	___llmod@divisor+2,f,c
  1787  00053E  3229               	rrcf	___llmod@divisor+1,f,c
  1788  000540  3228               	rrcf	___llmod@divisor,f,c
  1789  000542  2E2C               	decfsz	___llmod@counter,f,c
  1790  000544  D7E7               	goto	u940
  1791  000546                     l822:
  1792  000546  C024  F024         	movff	___llmod@dividend,?___llmod
  1793  00054A  C025  F025         	movff	___llmod@dividend+1,?___llmod+1
  1794  00054E  C026  F026         	movff	___llmod@dividend+2,?___llmod+2
  1795  000552  C027  F027         	movff	___llmod@dividend+3,?___llmod+3
  1796  000556  0012               	return		;funcret
  1797  000558                     __end_of___llmod:
  1798                           	opt stack 0
  1799                           tblptru	equ	0xFF8
  1800                           tblptrh	equ	0xFF7
  1801                           tblptrl	equ	0xFF6
  1802                           tablat	equ	0xFF5
  1803                           prodh	equ	0xFF4
  1804                           prodl	equ	0xFF3
  1805                           intcon	equ	0xFF2
  1806                           postinc0	equ	0xFEE
  1807                           wreg	equ	0xFE8
  1808                           indf2	equ	0xFDF
  1809                           postinc2	equ	0xFDE
  1810                           postdec2	equ	0xFDD
  1811                           fsr2h	equ	0xFDA
  1812                           fsr2l	equ	0xFD9
  1813                           status	equ	0xFD8
  1814                           
  1815 ;; *************** function ___lldiv *****************
  1816 ;; Defined at:
  1817 ;;		line 8 in file "/Applications/microchip/xc8/v1.45/sources/common/lldiv.c"
  1818 ;; Parameters:    Size  Location     Type
  1819 ;;  dividend        4   22[COMRAM] unsigned long 
  1820 ;;  divisor         4   26[COMRAM] unsigned long 
  1821 ;; Auto vars:     Size  Location     Type
  1822 ;;  quotient        4   30[COMRAM] unsigned long 
  1823 ;;  counter         1   34[COMRAM] unsigned char 
  1824 ;; Return value:  Size  Location     Type
  1825 ;;                  4   22[COMRAM] unsigned long 
  1826 ;; Registers used:
  1827 ;;		wreg, status,2, status,0
  1828 ;; Tracked objects:
  1829 ;;		On entry : 0/0
  1830 ;;		On exit  : 0/0
  1831 ;;		Unchanged: 0/0
  1832 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1833 ;;      Params:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1834 ;;      Locals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1835 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1836 ;;      Totals:        13       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1837 ;;Total ram usage:       13 bytes
  1838 ;; Hardware stack levels used:    1
  1839 ;; Hardware stack levels required when called:    4
  1840 ;; This function calls:
  1841 ;;		Nothing
  1842 ;; This function is called by:
  1843 ;;		_printf
  1844 ;; This function uses a non-reentrant model
  1845 ;;
  1846                           
  1847                           	psect	text6
  1848  000470                     __ptext6:
  1849                           	opt stack 0
  1850  000470                     ___lldiv:
  1851                           	opt stack 25
  1852                           
  1853                           ;incstack = 0
  1854  000470  0E00               	movlw	0
  1855  000472  6E1F               	movwf	___lldiv@quotient,c
  1856  000474  0E00               	movlw	0
  1857  000476  6E20               	movwf	___lldiv@quotient+1,c
  1858  000478  0E00               	movlw	0
  1859  00047A  6E21               	movwf	___lldiv@quotient+2,c
  1860  00047C  0E00               	movlw	0
  1861  00047E  6E22               	movwf	___lldiv@quotient+3,c
  1862  000480  501B               	movf	___lldiv@divisor,w,c
  1863  000482  101C               	iorwf	___lldiv@divisor+1,w,c
  1864  000484  101D               	iorwf	___lldiv@divisor+2,w,c
  1865  000486  101E               	iorwf	___lldiv@divisor+3,w,c
  1866  000488  B4D8               	btfsc	status,2,c
  1867  00048A  D02A               	goto	l812
  1868  00048C  0E01               	movlw	1
  1869  00048E  6E23               	movwf	___lldiv@counter,c
  1870  000490  D006               	goto	l807
  1871  000492  90D8               	bcf	status,0,c
  1872  000494  361B               	rlcf	___lldiv@divisor,f,c
  1873  000496  361C               	rlcf	___lldiv@divisor+1,f,c
  1874  000498  361D               	rlcf	___lldiv@divisor+2,f,c
  1875  00049A  361E               	rlcf	___lldiv@divisor+3,f,c
  1876  00049C  2A23               	incf	___lldiv@counter,f,c
  1877  00049E                     l807:
  1878  00049E  AE1E               	btfss	___lldiv@divisor+3,7,c
  1879  0004A0  D7F8               	goto	l808
  1880  0004A2                     u910:
  1881  0004A2  90D8               	bcf	status,0,c
  1882  0004A4  361F               	rlcf	___lldiv@quotient,f,c
  1883  0004A6  3620               	rlcf	___lldiv@quotient+1,f,c
  1884  0004A8  3621               	rlcf	___lldiv@quotient+2,f,c
  1885  0004AA  3622               	rlcf	___lldiv@quotient+3,f,c
  1886  0004AC  501B               	movf	___lldiv@divisor,w,c
  1887  0004AE  5C17               	subwf	___lldiv@dividend,w,c
  1888  0004B0  501C               	movf	___lldiv@divisor+1,w,c
  1889  0004B2  5818               	subwfb	___lldiv@dividend+1,w,c
  1890  0004B4  501D               	movf	___lldiv@divisor+2,w,c
  1891  0004B6  5819               	subwfb	___lldiv@dividend+2,w,c
  1892  0004B8  501E               	movf	___lldiv@divisor+3,w,c
  1893  0004BA  581A               	subwfb	___lldiv@dividend+3,w,c
  1894  0004BC  A0D8               	btfss	status,0,c
  1895  0004BE  D009               	goto	l811
  1896  0004C0  501B               	movf	___lldiv@divisor,w,c
  1897  0004C2  5E17               	subwf	___lldiv@dividend,f,c
  1898  0004C4  501C               	movf	___lldiv@divisor+1,w,c
  1899  0004C6  5A18               	subwfb	___lldiv@dividend+1,f,c
  1900  0004C8  501D               	movf	___lldiv@divisor+2,w,c
  1901  0004CA  5A19               	subwfb	___lldiv@dividend+2,f,c
  1902  0004CC  501E               	movf	___lldiv@divisor+3,w,c
  1903  0004CE  5A1A               	subwfb	___lldiv@dividend+3,f,c
  1904  0004D0  801F               	bsf	___lldiv@quotient,0,c
  1905  0004D2                     l811:
  1906  0004D2  90D8               	bcf	status,0,c
  1907  0004D4  321E               	rrcf	___lldiv@divisor+3,f,c
  1908  0004D6  321D               	rrcf	___lldiv@divisor+2,f,c
  1909  0004D8  321C               	rrcf	___lldiv@divisor+1,f,c
  1910  0004DA  321B               	rrcf	___lldiv@divisor,f,c
  1911  0004DC  2E23               	decfsz	___lldiv@counter,f,c
  1912  0004DE  D7E1               	goto	u910
  1913  0004E0                     l812:
  1914  0004E0  C01F  F017         	movff	___lldiv@quotient,?___lldiv
  1915  0004E4  C020  F018         	movff	___lldiv@quotient+1,?___lldiv+1
  1916  0004E8  C021  F019         	movff	___lldiv@quotient+2,?___lldiv+2
  1917  0004EC  C022  F01A         	movff	___lldiv@quotient+3,?___lldiv+3
  1918  0004F0  0012               	return		;funcret
  1919  0004F2                     __end_of___lldiv:
  1920                           	opt stack 0
  1921                           tblptru	equ	0xFF8
  1922                           tblptrh	equ	0xFF7
  1923                           tblptrl	equ	0xFF6
  1924                           tablat	equ	0xFF5
  1925                           prodh	equ	0xFF4
  1926                           prodl	equ	0xFF3
  1927                           intcon	equ	0xFF2
  1928                           postinc0	equ	0xFEE
  1929                           wreg	equ	0xFE8
  1930                           indf2	equ	0xFDF
  1931                           postinc2	equ	0xFDE
  1932                           postdec2	equ	0xFDD
  1933                           fsr2h	equ	0xFDA
  1934                           fsr2l	equ	0xFD9
  1935                           status	equ	0xFD8
  1936                           
  1937 ;; *************** function _SYSTEM_Initialize *****************
  1938 ;; Defined at:
  1939 ;;		line 50 in file "mcc_generated_files/mcc.c"
  1940 ;; Parameters:    Size  Location     Type
  1941 ;;		None
  1942 ;; Auto vars:     Size  Location     Type
  1943 ;;		None
  1944 ;; Return value:  Size  Location     Type
  1945 ;;                  1    wreg      void 
  1946 ;; Registers used:
  1947 ;;		wreg, status,2, status,0, cstack
  1948 ;; Tracked objects:
  1949 ;;		On entry : 0/0
  1950 ;;		On exit  : 0/0
  1951 ;;		Unchanged: 0/0
  1952 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1953 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1954 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1955 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1956 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1957 ;;Total ram usage:        0 bytes
  1958 ;; Hardware stack levels used:    1
  1959 ;; Hardware stack levels required when called:    6
  1960 ;; This function calls:
  1961 ;;		_CCP4_Initialize
  1962 ;;		_CCP5_Initialize
  1963 ;;		_EUSART1_Initialize
  1964 ;;		_EUSART2_Initialize
  1965 ;;		_INTERRUPT_Initialize
  1966 ;;		_OSCILLATOR_Initialize
  1967 ;;		_PIN_MANAGER_Initialize
  1968 ;;		_TMR0_Initialize
  1969 ;;		_TMR3_Initialize
  1970 ;; This function is called by:
  1971 ;;		_main
  1972 ;; This function uses a non-reentrant model
  1973 ;;
  1974                           
  1975                           	psect	text7
  1976  0006F8                     __ptext7:
  1977                           	opt stack 0
  1978  0006F8                     _SYSTEM_Initialize:
  1979                           	opt stack 24
  1980                           
  1981                           ;mcc.c: 53: INTERRUPT_Initialize();
  1982                           
  1983                           ;incstack = 0
  1984  0006F8  EC21  F004         	call	_INTERRUPT_Initialize	;wreg free
  1985                           
  1986                           ;mcc.c: 54: PIN_MANAGER_Initialize();
  1987  0006FC  EC3D  F003         	call	_PIN_MANAGER_Initialize	;wreg free
  1988                           
  1989                           ;mcc.c: 55: OSCILLATOR_Initialize();
  1990  000700  ECE7  F003         	call	_OSCILLATOR_Initialize	;wreg free
  1991                           
  1992                           ;mcc.c: 56: CCP4_Initialize();
  1993  000704  ECAB  F003         	call	_CCP4_Initialize	;wreg free
  1994                           
  1995                           ;mcc.c: 57: CCP5_Initialize();
  1996  000708  EC9D  F003         	call	_CCP5_Initialize	;wreg free
  1997                           
  1998                           ;mcc.c: 58: TMR3_Initialize();
  1999  00070C  EC8F  F003         	call	_TMR3_Initialize	;wreg free
  2000                           
  2001                           ;mcc.c: 59: TMR0_Initialize();
  2002  000710  ECF3  F002         	call	_TMR0_Initialize	;wreg free
  2003                           
  2004                           ;mcc.c: 60: EUSART1_Initialize();
  2005  000714  ECDC  F003         	call	_EUSART1_Initialize	;wreg free
  2006                           
  2007                           ;mcc.c: 61: EUSART2_Initialize();
  2008  000718  ECD1  F003         	call	_EUSART2_Initialize	;wreg free
  2009  00071C  0012               	return		;funcret
  2010  00071E                     __end_of_SYSTEM_Initialize:
  2011                           	opt stack 0
  2012                           tblptru	equ	0xFF8
  2013                           tblptrh	equ	0xFF7
  2014                           tblptrl	equ	0xFF6
  2015                           tablat	equ	0xFF5
  2016                           prodh	equ	0xFF4
  2017                           prodl	equ	0xFF3
  2018                           intcon	equ	0xFF2
  2019                           postinc0	equ	0xFEE
  2020                           wreg	equ	0xFE8
  2021                           indf2	equ	0xFDF
  2022                           postinc2	equ	0xFDE
  2023                           postdec2	equ	0xFDD
  2024                           fsr2h	equ	0xFDA
  2025                           fsr2l	equ	0xFD9
  2026                           status	equ	0xFD8
  2027                           
  2028 ;; *************** function _TMR3_Initialize *****************
  2029 ;; Defined at:
  2030 ;;		line 63 in file "mcc_generated_files/tmr3.c"
  2031 ;; Parameters:    Size  Location     Type
  2032 ;;		None
  2033 ;; Auto vars:     Size  Location     Type
  2034 ;;		None
  2035 ;; Return value:  Size  Location     Type
  2036 ;;                  1    wreg      void 
  2037 ;; Registers used:
  2038 ;;		wreg, status,2
  2039 ;; Tracked objects:
  2040 ;;		On entry : 0/0
  2041 ;;		On exit  : 0/0
  2042 ;;		Unchanged: 0/0
  2043 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2044 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2045 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2046 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2047 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2048 ;;Total ram usage:        0 bytes
  2049 ;; Hardware stack levels used:    1
  2050 ;; Hardware stack levels required when called:    4
  2051 ;; This function calls:
  2052 ;;		Nothing
  2053 ;; This function is called by:
  2054 ;;		_SYSTEM_Initialize
  2055 ;; This function uses a non-reentrant model
  2056 ;;
  2057                           
  2058                           	psect	text8
  2059  00071E                     __ptext8:
  2060                           	opt stack 0
  2061  00071E                     _TMR3_Initialize:
  2062                           	opt stack 25
  2063                           
  2064                           ;tmr3.c: 68: T3GCON = 0x00;
  2065                           
  2066                           ;incstack = 0
  2067  00071E  0E00               	movlw	0
  2068  000720  6EB4               	movwf	4020,c	;volatile
  2069                           
  2070                           ;tmr3.c: 71: TMR3H = 0x00;
  2071  000722  0E00               	movlw	0
  2072  000724  6EB3               	movwf	4019,c	;volatile
  2073                           
  2074                           ;tmr3.c: 74: TMR3L = 0x00;
  2075  000726  0E00               	movlw	0
  2076  000728  6EB2               	movwf	4018,c	;volatile
  2077                           
  2078                           ;tmr3.c: 77: timer3ReloadVal=TMR3;
  2079  00072A  CFB2 F03B          	movff	4018,_timer3ReloadVal	;volatile
  2080  00072E  CFB3 F03C          	movff	4019,_timer3ReloadVal+1	;volatile
  2081                           
  2082                           ;tmr3.c: 80: PIR2bits.TMR3IF = 0;
  2083  000732  92A1               	bcf	4001,1,c	;volatile
  2084                           
  2085                           ;tmr3.c: 83: T3CON = 0x01;
  2086  000734  0E01               	movlw	1
  2087  000736  6EB1               	movwf	4017,c	;volatile
  2088  000738  0012               	return		;funcret
  2089  00073A                     __end_of_TMR3_Initialize:
  2090                           	opt stack 0
  2091                           tblptru	equ	0xFF8
  2092                           tblptrh	equ	0xFF7
  2093                           tblptrl	equ	0xFF6
  2094                           tablat	equ	0xFF5
  2095                           prodh	equ	0xFF4
  2096                           prodl	equ	0xFF3
  2097                           intcon	equ	0xFF2
  2098                           postinc0	equ	0xFEE
  2099                           wreg	equ	0xFE8
  2100                           indf2	equ	0xFDF
  2101                           postinc2	equ	0xFDE
  2102                           postdec2	equ	0xFDD
  2103                           fsr2h	equ	0xFDA
  2104                           fsr2l	equ	0xFD9
  2105                           status	equ	0xFD8
  2106                           
  2107 ;; *************** function _TMR0_Initialize *****************
  2108 ;; Defined at:
  2109 ;;		line 67 in file "mcc_generated_files/tmr0.c"
  2110 ;; Parameters:    Size  Location     Type
  2111 ;;		None
  2112 ;; Auto vars:     Size  Location     Type
  2113 ;;		None
  2114 ;; Return value:  Size  Location     Type
  2115 ;;                  1    wreg      void 
  2116 ;; Registers used:
  2117 ;;		wreg, status,2, status,0, cstack
  2118 ;; Tracked objects:
  2119 ;;		On entry : 0/0
  2120 ;;		On exit  : 0/0
  2121 ;;		Unchanged: 0/0
  2122 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2123 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2124 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2125 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2126 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2127 ;;Total ram usage:        2 bytes
  2128 ;; Hardware stack levels used:    1
  2129 ;; Hardware stack levels required when called:    5
  2130 ;; This function calls:
  2131 ;;		_TMR0_SetInterruptHandler
  2132 ;; This function is called by:
  2133 ;;		_SYSTEM_Initialize
  2134 ;; This function uses a non-reentrant model
  2135 ;;
  2136                           
  2137                           	psect	text9
  2138  0005E6                     __ptext9:
  2139                           	opt stack 0
  2140  0005E6                     _TMR0_Initialize:
  2141                           	opt stack 24
  2142                           
  2143                           ;tmr0.c: 72: T0CONbits.T08BIT = 0;
  2144                           
  2145                           ;incstack = 0
  2146  0005E6  9CD5               	bcf	4053,6,c	;volatile
  2147                           
  2148                           ;tmr0.c: 75: TMR0H = 0xFF;
  2149  0005E8  68D7               	setf	4055,c	;volatile
  2150                           
  2151                           ;tmr0.c: 78: TMR0L = 0xFE;
  2152  0005EA  0EFE               	movlw	254
  2153  0005EC  6ED6               	movwf	4054,c	;volatile
  2154                           
  2155                           ;tmr0.c: 82: timer0ReloadVal = (uint16_t)((TMR0H << 8) | TMR0L);
  2156  0005EE  50D6               	movf	4054,w,c	;volatile
  2157  0005F0  CFD7 F019          	movff	4055,??_TMR0_Initialize	;volatile
  2158  0005F4  6A1A               	clrf	(??_TMR0_Initialize+1)& (0+255),c
  2159  0005F6  C019  F01A         	movff	??_TMR0_Initialize,??_TMR0_Initialize+1
  2160  0005FA  6A19               	clrf	??_TMR0_Initialize,c
  2161  0005FC  1019               	iorwf	??_TMR0_Initialize,w,c
  2162  0005FE  6E3D               	movwf	_timer0ReloadVal,c	;volatile
  2163  000600  501A               	movf	??_TMR0_Initialize+1,w,c
  2164  000602  6E3E               	movwf	_timer0ReloadVal+1,c	;volatile
  2165                           
  2166                           ;tmr0.c: 85: INTCONbits.TMR0IF = 0;
  2167  000604  94F2               	bcf	intcon,2,c	;volatile
  2168                           
  2169                           ;tmr0.c: 88: INTCONbits.TMR0IE = 1;
  2170  000606  8AF2               	bsf	intcon,5,c	;volatile
  2171                           
  2172                           ;tmr0.c: 91: TMR0_SetInterruptHandler(TMR0_DefaultInterruptHandler);
  2173  000608  0EA4               	movlw	low _TMR0_DefaultInterruptHandler
  2174  00060A  6E17               	movwf	TMR0_SetInterruptHandler@InterruptHandler,c
  2175  00060C  0E05               	movlw	high _TMR0_DefaultInterruptHandler
  2176  00060E  6E18               	movwf	TMR0_SetInterruptHandler@InterruptHandler+1,c
  2177  000610  EC17  F004         	call	_TMR0_SetInterruptHandler	;wreg free
  2178                           
  2179                           ;tmr0.c: 94: T0CON = 0x92;
  2180  000614  0E92               	movlw	146
  2181  000616  6ED5               	movwf	4053,c	;volatile
  2182  000618  0012               	return		;funcret
  2183  00061A                     __end_of_TMR0_Initialize:
  2184                           	opt stack 0
  2185                           tblptru	equ	0xFF8
  2186                           tblptrh	equ	0xFF7
  2187                           tblptrl	equ	0xFF6
  2188                           tablat	equ	0xFF5
  2189                           prodh	equ	0xFF4
  2190                           prodl	equ	0xFF3
  2191                           intcon	equ	0xFF2
  2192                           postinc0	equ	0xFEE
  2193                           wreg	equ	0xFE8
  2194                           indf2	equ	0xFDF
  2195                           postinc2	equ	0xFDE
  2196                           postdec2	equ	0xFDD
  2197                           fsr2h	equ	0xFDA
  2198                           fsr2l	equ	0xFD9
  2199                           status	equ	0xFD8
  2200                           
  2201 ;; *************** function _TMR0_SetInterruptHandler *****************
  2202 ;; Defined at:
  2203 ;;		line 156 in file "mcc_generated_files/tmr0.c"
  2204 ;; Parameters:    Size  Location     Type
  2205 ;;  InterruptHan    2   22[COMRAM] PTR FTN()void 
  2206 ;;		 -> TMR0_DefaultInterruptHandler(1), 
  2207 ;; Auto vars:     Size  Location     Type
  2208 ;;		None
  2209 ;; Return value:  Size  Location     Type
  2210 ;;                  1    wreg      void 
  2211 ;; Registers used:
  2212 ;;		wreg, status,2, status,0
  2213 ;; Tracked objects:
  2214 ;;		On entry : 0/0
  2215 ;;		On exit  : 0/0
  2216 ;;		Unchanged: 0/0
  2217 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2218 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2219 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2220 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2221 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2222 ;;Total ram usage:        2 bytes
  2223 ;; Hardware stack levels used:    1
  2224 ;; Hardware stack levels required when called:    4
  2225 ;; This function calls:
  2226 ;;		Nothing
  2227 ;; This function is called by:
  2228 ;;		_TMR0_Initialize
  2229 ;; This function uses a non-reentrant model
  2230 ;;
  2231                           
  2232                           	psect	text10
  2233  00082E                     __ptext10:
  2234                           	opt stack 0
  2235  00082E                     _TMR0_SetInterruptHandler:
  2236                           	opt stack 24
  2237                           
  2238                           ;tmr0.c: 157: TMR0_InterruptHandler = InterruptHandler;
  2239                           
  2240                           ;incstack = 0
  2241  00082E  C017  F03F         	movff	TMR0_SetInterruptHandler@InterruptHandler,_TMR0_InterruptHandler
  2242  000832  C018  F040         	movff	TMR0_SetInterruptHandler@InterruptHandler+1,_TMR0_InterruptHandler+1
  2243  000836  0012               	return		;funcret
  2244  000838                     __end_of_TMR0_SetInterruptHandler:
  2245                           	opt stack 0
  2246                           tblptru	equ	0xFF8
  2247                           tblptrh	equ	0xFF7
  2248                           tblptrl	equ	0xFF6
  2249                           tablat	equ	0xFF5
  2250                           prodh	equ	0xFF4
  2251                           prodl	equ	0xFF3
  2252                           intcon	equ	0xFF2
  2253                           postinc0	equ	0xFEE
  2254                           wreg	equ	0xFE8
  2255                           indf2	equ	0xFDF
  2256                           postinc2	equ	0xFDE
  2257                           postdec2	equ	0xFDD
  2258                           fsr2h	equ	0xFDA
  2259                           fsr2l	equ	0xFD9
  2260                           status	equ	0xFD8
  2261                           
  2262 ;; *************** function _PIN_MANAGER_Initialize *****************
  2263 ;; Defined at:
  2264 ;;		line 57 in file "mcc_generated_files/pin_manager.c"
  2265 ;; Parameters:    Size  Location     Type
  2266 ;;		None
  2267 ;; Auto vars:     Size  Location     Type
  2268 ;;		None
  2269 ;; Return value:  Size  Location     Type
  2270 ;;                  1    wreg      void 
  2271 ;; Registers used:
  2272 ;;		wreg, status,2
  2273 ;; Tracked objects:
  2274 ;;		On entry : 0/0
  2275 ;;		On exit  : 0/0
  2276 ;;		Unchanged: 0/0
  2277 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2278 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2279 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2280 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2281 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2282 ;;Total ram usage:        0 bytes
  2283 ;; Hardware stack levels used:    1
  2284 ;; Hardware stack levels required when called:    4
  2285 ;; This function calls:
  2286 ;;		Nothing
  2287 ;; This function is called by:
  2288 ;;		_SYSTEM_Initialize
  2289 ;; This function uses a non-reentrant model
  2290 ;;
  2291                           
  2292                           	psect	text11
  2293  00067A                     __ptext11:
  2294                           	opt stack 0
  2295  00067A                     _PIN_MANAGER_Initialize:
  2296                           	opt stack 25
  2297                           
  2298                           ;pin_manager.c: 62: LATA = 0x00;
  2299                           
  2300                           ;incstack = 0
  2301  00067A  0E00               	movlw	0
  2302  00067C  6E89               	movwf	3977,c	;volatile
  2303                           
  2304                           ;pin_manager.c: 63: LATB = 0x00;
  2305  00067E  0E00               	movlw	0
  2306  000680  6E8A               	movwf	3978,c	;volatile
  2307                           
  2308                           ;pin_manager.c: 64: LATC = 0x00;
  2309  000682  0E00               	movlw	0
  2310  000684  6E8B               	movwf	3979,c	;volatile
  2311                           
  2312                           ;pin_manager.c: 69: TRISA = 0xFD;
  2313  000686  0EFD               	movlw	253
  2314  000688  6E92               	movwf	3986,c	;volatile
  2315                           
  2316                           ;pin_manager.c: 70: TRISB = 0xBF;
  2317  00068A  0EBF               	movlw	191
  2318  00068C  6E93               	movwf	3987,c	;volatile
  2319                           
  2320                           ;pin_manager.c: 71: TRISC = 0xBF;
  2321  00068E  0EBF               	movlw	191
  2322  000690  6E94               	movwf	3988,c	;volatile
  2323                           
  2324                           ;pin_manager.c: 76: ANSELC = 0x3C;
  2325  000692  0E3C               	movlw	60
  2326  000694  010F               	movlb	15	; () banked
  2327  000696  6F3A               	movwf	58,b	;volatile
  2328                           
  2329                           ;pin_manager.c: 77: ANSELB = 0x3E;
  2330  000698  0E3E               	movlw	62
  2331  00069A  6F39               	movwf	57,b	;volatile
  2332                           
  2333                           ;pin_manager.c: 78: ANSELA = 0x2F;
  2334  00069C  0E2F               	movlw	47
  2335  00069E  6F38               	movwf	56,b	;volatile
  2336                           
  2337                           ;pin_manager.c: 83: WPUB = 0x00;
  2338  0006A0  0E00               	movlw	0
  2339  0006A2  6E61               	movwf	3937,c	;volatile
  2340                           
  2341                           ; BSR set to: 15
  2342                           ;pin_manager.c: 84: INTCON2bits.nRBPU = 1;
  2343  0006A4  8EF1               	bsf	intcon2,7,c	;volatile
  2344                           
  2345                           ; BSR set to: 15
  2346  0006A6  0012               	return		;funcret
  2347  0006A8                     __end_of_PIN_MANAGER_Initialize:
  2348                           	opt stack 0
  2349                           tblptru	equ	0xFF8
  2350                           tblptrh	equ	0xFF7
  2351                           tblptrl	equ	0xFF6
  2352                           tablat	equ	0xFF5
  2353                           prodh	equ	0xFF4
  2354                           prodl	equ	0xFF3
  2355                           intcon	equ	0xFF2
  2356                           intcon2	equ	0xFF1
  2357                           postinc0	equ	0xFEE
  2358                           wreg	equ	0xFE8
  2359                           indf2	equ	0xFDF
  2360                           postinc2	equ	0xFDE
  2361                           postdec2	equ	0xFDD
  2362                           fsr2h	equ	0xFDA
  2363                           fsr2l	equ	0xFD9
  2364                           status	equ	0xFD8
  2365                           
  2366 ;; *************** function _OSCILLATOR_Initialize *****************
  2367 ;; Defined at:
  2368 ;;		line 64 in file "mcc_generated_files/mcc.c"
  2369 ;; Parameters:    Size  Location     Type
  2370 ;;		None
  2371 ;; Auto vars:     Size  Location     Type
  2372 ;;		None
  2373 ;; Return value:  Size  Location     Type
  2374 ;;                  1    wreg      void 
  2375 ;; Registers used:
  2376 ;;		wreg, status,2
  2377 ;; Tracked objects:
  2378 ;;		On entry : 0/0
  2379 ;;		On exit  : 0/0
  2380 ;;		Unchanged: 0/0
  2381 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2382 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2383 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2384 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2385 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2386 ;;Total ram usage:        0 bytes
  2387 ;; Hardware stack levels used:    1
  2388 ;; Hardware stack levels required when called:    4
  2389 ;; This function calls:
  2390 ;;		Nothing
  2391 ;; This function is called by:
  2392 ;;		_SYSTEM_Initialize
  2393 ;; This function uses a non-reentrant model
  2394 ;;
  2395                           
  2396                           	psect	text12
  2397  0007CE                     __ptext12:
  2398                           	opt stack 0
  2399  0007CE                     _OSCILLATOR_Initialize:
  2400                           	opt stack 25
  2401                           
  2402                           ;mcc.c: 67: OSCCON = 0x70;
  2403                           
  2404                           ; BSR set to: 15
  2405                           ;incstack = 0
  2406  0007CE  0E70               	movlw	112
  2407  0007D0  6ED3               	movwf	4051,c	;volatile
  2408                           
  2409                           ;mcc.c: 69: OSCCON2 = 0x04;
  2410  0007D2  0E04               	movlw	4
  2411  0007D4  6ED2               	movwf	4050,c	;volatile
  2412                           
  2413                           ;mcc.c: 71: OSCTUNE = 0x40;
  2414  0007D6  0E40               	movlw	64
  2415  0007D8  6E9B               	movwf	3995,c	;volatile
  2416  0007DA                     
  2417                           ;mcc.c: 74: {
  2418  0007DA  BED2               	btfsc	4050,7,c	;volatile
  2419  0007DC  0012               	return	
  2420  0007DE  D7FD               	goto	l93
  2421  0007E0                     __end_of_OSCILLATOR_Initialize:
  2422                           	opt stack 0
  2423                           tblptru	equ	0xFF8
  2424                           tblptrh	equ	0xFF7
  2425                           tblptrl	equ	0xFF6
  2426                           tablat	equ	0xFF5
  2427                           prodh	equ	0xFF4
  2428                           prodl	equ	0xFF3
  2429                           intcon	equ	0xFF2
  2430                           intcon2	equ	0xFF1
  2431                           postinc0	equ	0xFEE
  2432                           wreg	equ	0xFE8
  2433                           indf2	equ	0xFDF
  2434                           postinc2	equ	0xFDE
  2435                           postdec2	equ	0xFDD
  2436                           fsr2h	equ	0xFDA
  2437                           fsr2l	equ	0xFD9
  2438                           status	equ	0xFD8
  2439                           
  2440 ;; *************** function _INTERRUPT_Initialize *****************
  2441 ;; Defined at:
  2442 ;;		line 52 in file "mcc_generated_files/interrupt_manager.c"
  2443 ;; Parameters:    Size  Location     Type
  2444 ;;		None
  2445 ;; Auto vars:     Size  Location     Type
  2446 ;;		None
  2447 ;; Return value:  Size  Location     Type
  2448 ;;                  1    wreg      void 
  2449 ;; Registers used:
  2450 ;;		None
  2451 ;; Tracked objects:
  2452 ;;		On entry : 0/0
  2453 ;;		On exit  : 0/0
  2454 ;;		Unchanged: 0/0
  2455 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2456 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2457 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2458 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2459 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2460 ;;Total ram usage:        0 bytes
  2461 ;; Hardware stack levels used:    1
  2462 ;; Hardware stack levels required when called:    4
  2463 ;; This function calls:
  2464 ;;		Nothing
  2465 ;; This function is called by:
  2466 ;;		_SYSTEM_Initialize
  2467 ;; This function uses a non-reentrant model
  2468 ;;
  2469                           
  2470                           	psect	text13
  2471  000842                     __ptext13:
  2472                           	opt stack 0
  2473  000842                     _INTERRUPT_Initialize:
  2474                           	opt stack 25
  2475                           
  2476                           ;interrupt_manager.c: 55: RCONbits.IPEN = 0;
  2477                           
  2478                           ;incstack = 0
  2479  000842  9ED0               	bcf	4048,7,c	;volatile
  2480  000844  0012               	return		;funcret
  2481  000846                     __end_of_INTERRUPT_Initialize:
  2482                           	opt stack 0
  2483                           tblptru	equ	0xFF8
  2484                           tblptrh	equ	0xFF7
  2485                           tblptrl	equ	0xFF6
  2486                           tablat	equ	0xFF5
  2487                           prodh	equ	0xFF4
  2488                           prodl	equ	0xFF3
  2489                           intcon	equ	0xFF2
  2490                           intcon2	equ	0xFF1
  2491                           postinc0	equ	0xFEE
  2492                           wreg	equ	0xFE8
  2493                           indf2	equ	0xFDF
  2494                           postinc2	equ	0xFDE
  2495                           postdec2	equ	0xFDD
  2496                           fsr2h	equ	0xFDA
  2497                           fsr2l	equ	0xFD9
  2498                           status	equ	0xFD8
  2499                           
  2500 ;; *************** function _EUSART2_Initialize *****************
  2501 ;; Defined at:
  2502 ;;		line 56 in file "mcc_generated_files/eusart2.c"
  2503 ;; Parameters:    Size  Location     Type
  2504 ;;		None
  2505 ;; Auto vars:     Size  Location     Type
  2506 ;;		None
  2507 ;; Return value:  Size  Location     Type
  2508 ;;                  1    wreg      void 
  2509 ;; Registers used:
  2510 ;;		wreg, status,2
  2511 ;; Tracked objects:
  2512 ;;		On entry : 0/0
  2513 ;;		On exit  : 0/0
  2514 ;;		Unchanged: 0/0
  2515 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2516 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2517 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2518 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2519 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2520 ;;Total ram usage:        0 bytes
  2521 ;; Hardware stack levels used:    1
  2522 ;; Hardware stack levels required when called:    4
  2523 ;; This function calls:
  2524 ;;		Nothing
  2525 ;; This function is called by:
  2526 ;;		_SYSTEM_Initialize
  2527 ;; This function uses a non-reentrant model
  2528 ;;
  2529                           
  2530                           	psect	text14
  2531  0007A2                     __ptext14:
  2532                           	opt stack 0
  2533  0007A2                     _EUSART2_Initialize:
  2534                           	opt stack 25
  2535                           
  2536                           ;eusart2.c: 61: BAUDCON2 = 0x08;
  2537                           
  2538                           ;incstack = 0
  2539  0007A2  0E08               	movlw	8
  2540  0007A4  6E70               	movwf	3952,c	;volatile
  2541                           
  2542                           ;eusart2.c: 64: RCSTA2 = 0x90;
  2543  0007A6  0E90               	movlw	144
  2544  0007A8  6E71               	movwf	3953,c	;volatile
  2545                           
  2546                           ;eusart2.c: 67: TXSTA2 = 0x24;
  2547  0007AA  0E24               	movlw	36
  2548  0007AC  6E72               	movwf	3954,c	;volatile
  2549                           
  2550                           ;eusart2.c: 70: SPBRG2 = 0x82;
  2551  0007AE  0E82               	movlw	130
  2552  0007B0  6E75               	movwf	3957,c	;volatile
  2553                           
  2554                           ;eusart2.c: 73: SPBRGH2 = 0x06;
  2555  0007B2  0E06               	movlw	6
  2556  0007B4  6E76               	movwf	3958,c	;volatile
  2557  0007B6  0012               	return		;funcret
  2558  0007B8                     __end_of_EUSART2_Initialize:
  2559                           	opt stack 0
  2560                           tblptru	equ	0xFF8
  2561                           tblptrh	equ	0xFF7
  2562                           tblptrl	equ	0xFF6
  2563                           tablat	equ	0xFF5
  2564                           prodh	equ	0xFF4
  2565                           prodl	equ	0xFF3
  2566                           intcon	equ	0xFF2
  2567                           intcon2	equ	0xFF1
  2568                           postinc0	equ	0xFEE
  2569                           wreg	equ	0xFE8
  2570                           indf2	equ	0xFDF
  2571                           postinc2	equ	0xFDE
  2572                           postdec2	equ	0xFDD
  2573                           fsr2h	equ	0xFDA
  2574                           fsr2l	equ	0xFD9
  2575                           status	equ	0xFD8
  2576                           
  2577 ;; *************** function _EUSART1_Initialize *****************
  2578 ;; Defined at:
  2579 ;;		line 56 in file "mcc_generated_files/eusart1.c"
  2580 ;; Parameters:    Size  Location     Type
  2581 ;;		None
  2582 ;; Auto vars:     Size  Location     Type
  2583 ;;		None
  2584 ;; Return value:  Size  Location     Type
  2585 ;;                  1    wreg      void 
  2586 ;; Registers used:
  2587 ;;		wreg, status,2
  2588 ;; Tracked objects:
  2589 ;;		On entry : 0/0
  2590 ;;		On exit  : 0/0
  2591 ;;		Unchanged: 0/0
  2592 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2593 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2594 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2595 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2596 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2597 ;;Total ram usage:        0 bytes
  2598 ;; Hardware stack levels used:    1
  2599 ;; Hardware stack levels required when called:    4
  2600 ;; This function calls:
  2601 ;;		Nothing
  2602 ;; This function is called by:
  2603 ;;		_SYSTEM_Initialize
  2604 ;; This function uses a non-reentrant model
  2605 ;;
  2606                           
  2607                           	psect	text15
  2608  0007B8                     __ptext15:
  2609                           	opt stack 0
  2610  0007B8                     _EUSART1_Initialize:
  2611                           	opt stack 25
  2612                           
  2613                           ;eusart1.c: 61: BAUDCON1 = 0x08;
  2614                           
  2615                           ;incstack = 0
  2616  0007B8  0E08               	movlw	8
  2617  0007BA  6EB8               	movwf	4024,c	;volatile
  2618                           
  2619                           ;eusart1.c: 64: RCSTA1 = 0x90;
  2620  0007BC  0E90               	movlw	144
  2621  0007BE  6EAB               	movwf	4011,c	;volatile
  2622                           
  2623                           ;eusart1.c: 67: TXSTA1 = 0x24;
  2624  0007C0  0E24               	movlw	36
  2625  0007C2  6EAC               	movwf	4012,c	;volatile
  2626                           
  2627                           ;eusart1.c: 70: SPBRG1 = 0x82;
  2628  0007C4  0E82               	movlw	130
  2629  0007C6  6EAF               	movwf	4015,c	;volatile
  2630                           
  2631                           ;eusart1.c: 73: SPBRGH1 = 0x06;
  2632  0007C8  0E06               	movlw	6
  2633  0007CA  6EB0               	movwf	4016,c	;volatile
  2634  0007CC  0012               	return		;funcret
  2635  0007CE                     __end_of_EUSART1_Initialize:
  2636                           	opt stack 0
  2637                           tblptru	equ	0xFF8
  2638                           tblptrh	equ	0xFF7
  2639                           tblptrl	equ	0xFF6
  2640                           tablat	equ	0xFF5
  2641                           prodh	equ	0xFF4
  2642                           prodl	equ	0xFF3
  2643                           intcon	equ	0xFF2
  2644                           intcon2	equ	0xFF1
  2645                           postinc0	equ	0xFEE
  2646                           wreg	equ	0xFE8
  2647                           indf2	equ	0xFDF
  2648                           postinc2	equ	0xFDE
  2649                           postdec2	equ	0xFDD
  2650                           fsr2h	equ	0xFDA
  2651                           fsr2l	equ	0xFD9
  2652                           status	equ	0xFD8
  2653                           
  2654 ;; *************** function _CCP5_Initialize *****************
  2655 ;; Defined at:
  2656 ;;		line 58 in file "mcc_generated_files/ccp5.c"
  2657 ;; Parameters:    Size  Location     Type
  2658 ;;		None
  2659 ;; Auto vars:     Size  Location     Type
  2660 ;;		None
  2661 ;; Return value:  Size  Location     Type
  2662 ;;                  1    wreg      void 
  2663 ;; Registers used:
  2664 ;;		wreg, status,2
  2665 ;; Tracked objects:
  2666 ;;		On entry : 0/0
  2667 ;;		On exit  : 0/0
  2668 ;;		Unchanged: 0/0
  2669 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2670 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2671 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2672 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2673 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2674 ;;Total ram usage:        0 bytes
  2675 ;; Hardware stack levels used:    1
  2676 ;; Hardware stack levels required when called:    4
  2677 ;; This function calls:
  2678 ;;		Nothing
  2679 ;; This function is called by:
  2680 ;;		_SYSTEM_Initialize
  2681 ;; This function uses a non-reentrant model
  2682 ;;
  2683                           
  2684                           	psect	text16
  2685  00073A                     __ptext16:
  2686                           	opt stack 0
  2687  00073A                     _CCP5_Initialize:
  2688                           	opt stack 25
  2689                           
  2690                           ;ccp5.c: 63: CCP5CON = 0x05;
  2691                           
  2692                           ;incstack = 0
  2693  00073A  0E05               	movlw	5
  2694  00073C  010F               	movlb	15	; () banked
  2695  00073E  6F54               	movwf	84,b	;volatile
  2696                           
  2697                           ;ccp5.c: 66: CCPR5L = 0x00;
  2698  000740  0E00               	movlw	0
  2699  000742  6F55               	movwf	85,b	;volatile
  2700                           
  2701                           ;ccp5.c: 69: CCPR5H = 0x00;
  2702  000744  0E00               	movlw	0
  2703  000746  6F56               	movwf	86,b	;volatile
  2704                           
  2705                           ;ccp5.c: 72: CCPTMRS1bits.C5TSEL = 0x1;
  2706  000748  5148               	movf	72,w,b	;volatile
  2707  00074A  0BF3               	andlw	-13
  2708  00074C  0904               	iorlw	4
  2709  00074E  6F48               	movwf	72,b	;volatile
  2710                           
  2711                           ; BSR set to: 15
  2712                           ;ccp5.c: 75: PIR4bits.CCP5IF = 0;
  2713  000750  947B               	bcf	3963,2,c	;volatile
  2714                           
  2715                           ; BSR set to: 15
  2716                           ;ccp5.c: 78: PIE4bits.CCP5IE = 1;
  2717  000752  847A               	bsf	3962,2,c	;volatile
  2718                           
  2719                           ; BSR set to: 15
  2720  000754  0012               	return		;funcret
  2721  000756                     __end_of_CCP5_Initialize:
  2722                           	opt stack 0
  2723                           tblptru	equ	0xFF8
  2724                           tblptrh	equ	0xFF7
  2725                           tblptrl	equ	0xFF6
  2726                           tablat	equ	0xFF5
  2727                           prodh	equ	0xFF4
  2728                           prodl	equ	0xFF3
  2729                           intcon	equ	0xFF2
  2730                           intcon2	equ	0xFF1
  2731                           postinc0	equ	0xFEE
  2732                           wreg	equ	0xFE8
  2733                           indf2	equ	0xFDF
  2734                           postinc2	equ	0xFDE
  2735                           postdec2	equ	0xFDD
  2736                           fsr2h	equ	0xFDA
  2737                           fsr2l	equ	0xFD9
  2738                           status	equ	0xFD8
  2739                           
  2740 ;; *************** function _CCP4_Initialize *****************
  2741 ;; Defined at:
  2742 ;;		line 58 in file "mcc_generated_files/ccp4.c"
  2743 ;; Parameters:    Size  Location     Type
  2744 ;;		None
  2745 ;; Auto vars:     Size  Location     Type
  2746 ;;		None
  2747 ;; Return value:  Size  Location     Type
  2748 ;;                  1    wreg      void 
  2749 ;; Registers used:
  2750 ;;		wreg, status,2
  2751 ;; Tracked objects:
  2752 ;;		On entry : 0/0
  2753 ;;		On exit  : 0/0
  2754 ;;		Unchanged: 0/0
  2755 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2756 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2757 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2758 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2759 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2760 ;;Total ram usage:        0 bytes
  2761 ;; Hardware stack levels used:    1
  2762 ;; Hardware stack levels required when called:    4
  2763 ;; This function calls:
  2764 ;;		Nothing
  2765 ;; This function is called by:
  2766 ;;		_SYSTEM_Initialize
  2767 ;; This function uses a non-reentrant model
  2768 ;;
  2769                           
  2770                           	psect	text17
  2771  000756                     __ptext17:
  2772                           	opt stack 0
  2773  000756                     _CCP4_Initialize:
  2774                           	opt stack 25
  2775                           
  2776                           ;ccp4.c: 63: CCP4CON = 0x05;
  2777                           
  2778                           ; BSR set to: 15
  2779                           ;incstack = 0
  2780  000756  0E05               	movlw	5
  2781  000758  010F               	movlb	15	; () banked
  2782  00075A  6F57               	movwf	87,b	;volatile
  2783                           
  2784                           ;ccp4.c: 66: CCPR4L = 0x00;
  2785  00075C  0E00               	movlw	0
  2786  00075E  6F58               	movwf	88,b	;volatile
  2787                           
  2788                           ;ccp4.c: 69: CCPR4H = 0x00;
  2789  000760  0E00               	movlw	0
  2790  000762  6F59               	movwf	89,b	;volatile
  2791                           
  2792                           ;ccp4.c: 72: CCPTMRS1bits.C4TSEL = 0x1;
  2793  000764  5148               	movf	72,w,b	;volatile
  2794  000766  0BFC               	andlw	-4
  2795  000768  0901               	iorlw	1
  2796  00076A  6F48               	movwf	72,b	;volatile
  2797                           
  2798                           ; BSR set to: 15
  2799                           ;ccp4.c: 75: PIR4bits.CCP4IF = 0;
  2800  00076C  927B               	bcf	3963,1,c	;volatile
  2801                           
  2802                           ; BSR set to: 15
  2803                           ;ccp4.c: 78: PIE4bits.CCP4IE = 1;
  2804  00076E  827A               	bsf	3962,1,c	;volatile
  2805                           
  2806                           ; BSR set to: 15
  2807  000770  0012               	return		;funcret
  2808  000772                     __end_of_CCP4_Initialize:
  2809                           	opt stack 0
  2810                           tblptru	equ	0xFF8
  2811                           tblptrh	equ	0xFF7
  2812                           tblptrl	equ	0xFF6
  2813                           tablat	equ	0xFF5
  2814                           prodh	equ	0xFF4
  2815                           prodl	equ	0xFF3
  2816                           intcon	equ	0xFF2
  2817                           intcon2	equ	0xFF1
  2818                           postinc0	equ	0xFEE
  2819                           wreg	equ	0xFE8
  2820                           indf2	equ	0xFDF
  2821                           postinc2	equ	0xFDE
  2822                           postdec2	equ	0xFDD
  2823                           fsr2h	equ	0xFDA
  2824                           fsr2l	equ	0xFD9
  2825                           status	equ	0xFD8
  2826                           
  2827 ;; *************** function _EUSART2_is_rx_ready *****************
  2828 ;; Defined at:
  2829 ;;		line 83 in file "mcc_generated_files/eusart2.c"
  2830 ;; Parameters:    Size  Location     Type
  2831 ;;		None
  2832 ;; Auto vars:     Size  Location     Type
  2833 ;;		None
  2834 ;; Return value:  Size  Location     Type
  2835 ;;                  1    wreg      unsigned char 
  2836 ;; Registers used:
  2837 ;;		wreg
  2838 ;; Tracked objects:
  2839 ;;		On entry : 0/0
  2840 ;;		On exit  : 0/0
  2841 ;;		Unchanged: 0/0
  2842 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2843 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2844 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2845 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2846 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2847 ;;Total ram usage:        0 bytes
  2848 ;; Hardware stack levels used:    1
  2849 ;; Hardware stack levels required when called:    4
  2850 ;; This function calls:
  2851 ;;		Nothing
  2852 ;; This function is called by:
  2853 ;;		_main
  2854 ;; This function uses a non-reentrant model
  2855 ;;
  2856                           
  2857                           	psect	text18
  2858  00080C                     __ptext18:
  2859                           	opt stack 0
  2860  00080C                     _EUSART2_is_rx_ready:
  2861                           	opt stack 26
  2862                           
  2863                           ;eusart2.c: 85: return PIR3bits.RC2IF;
  2864                           
  2865                           ; BSR set to: 15
  2866                           ;incstack = 0
  2867  00080C  AAA4               	btfss	4004,5,c	;volatile
  2868  00080E  D002               	goto	u150
  2869  000810  0E01               	movlw	1
  2870  000812  0012               	return	
  2871  000814                     u150:
  2872  000814  0E00               	movlw	0
  2873  000816  0012               	return	
  2874  000818                     __end_of_EUSART2_is_rx_ready:
  2875                           	opt stack 0
  2876                           tblptru	equ	0xFF8
  2877                           tblptrh	equ	0xFF7
  2878                           tblptrl	equ	0xFF6
  2879                           tablat	equ	0xFF5
  2880                           prodh	equ	0xFF4
  2881                           prodl	equ	0xFF3
  2882                           intcon	equ	0xFF2
  2883                           intcon2	equ	0xFF1
  2884                           postinc0	equ	0xFEE
  2885                           wreg	equ	0xFE8
  2886                           indf2	equ	0xFDF
  2887                           postinc2	equ	0xFDE
  2888                           postdec2	equ	0xFDD
  2889                           fsr2h	equ	0xFDA
  2890                           fsr2l	equ	0xFD9
  2891                           status	equ	0xFD8
  2892                           
  2893 ;; *************** function _EUSART2_Read *****************
  2894 ;; Defined at:
  2895 ;;		line 93 in file "mcc_generated_files/eusart2.c"
  2896 ;; Parameters:    Size  Location     Type
  2897 ;;		None
  2898 ;; Auto vars:     Size  Location     Type
  2899 ;;		None
  2900 ;; Return value:  Size  Location     Type
  2901 ;;                  1    wreg      unsigned char 
  2902 ;; Registers used:
  2903 ;;		wreg, status,2
  2904 ;; Tracked objects:
  2905 ;;		On entry : 0/0
  2906 ;;		On exit  : 0/0
  2907 ;;		Unchanged: 0/0
  2908 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2909 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2910 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2911 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2912 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2913 ;;Total ram usage:        0 bytes
  2914 ;; Hardware stack levels used:    1
  2915 ;; Hardware stack levels required when called:    4
  2916 ;; This function calls:
  2917 ;;		Nothing
  2918 ;; This function is called by:
  2919 ;;		_main
  2920 ;;		_getch
  2921 ;; This function uses a non-reentrant model
  2922 ;;
  2923                           
  2924                           	psect	text19
  2925  0007E0                     __ptext19:
  2926                           	opt stack 0
  2927  0007E0                     _EUSART2_Read:
  2928                           	opt stack 26
  2929                           
  2930                           ;eusart2.c: 96: {
  2931                           
  2932                           ;eusart2.c: 95: while(!PIR3bits.RC2IF)
  2933                           
  2934                           ;incstack = 0
  2935  0007E0  AAA4               	btfss	4004,5,c	;volatile
  2936  0007E2  D7FE               	goto	_EUSART2_Read
  2937                           
  2938                           ;eusart2.c: 97: }
  2939                           ;eusart2.c: 100: if(1 == RCSTA2bits.OERR)
  2940  0007E4  A271               	btfss	3953,1,c	;volatile
  2941  0007E6  D002               	goto	l135
  2942                           
  2943                           ;eusart2.c: 101: {
  2944                           ;eusart2.c: 104: RCSTA2bits.CREN = 0;
  2945  0007E8  9871               	bcf	3953,4,c	;volatile
  2946                           
  2947                           ;eusart2.c: 105: RCSTA2bits.CREN = 1;
  2948  0007EA  8871               	bsf	3953,4,c	;volatile
  2949  0007EC                     l135:
  2950                           
  2951                           ;eusart2.c: 106: }
  2952                           ;eusart2.c: 108: return RCREG2;
  2953  0007EC  5074               	movf	3956,w,c	;volatile
  2954  0007EE  0012               	return	
  2955  0007F0                     __end_of_EUSART2_Read:
  2956                           	opt stack 0
  2957                           tblptru	equ	0xFF8
  2958                           tblptrh	equ	0xFF7
  2959                           tblptrl	equ	0xFF6
  2960                           tablat	equ	0xFF5
  2961                           prodh	equ	0xFF4
  2962                           prodl	equ	0xFF3
  2963                           intcon	equ	0xFF2
  2964                           intcon2	equ	0xFF1
  2965                           postinc0	equ	0xFEE
  2966                           wreg	equ	0xFE8
  2967                           indf2	equ	0xFDF
  2968                           postinc2	equ	0xFDE
  2969                           postdec2	equ	0xFDD
  2970                           fsr2h	equ	0xFDA
  2971                           fsr2l	equ	0xFD9
  2972                           status	equ	0xFD8
  2973                           
  2974 ;; *************** function _EUSART1_is_rx_ready *****************
  2975 ;; Defined at:
  2976 ;;		line 83 in file "mcc_generated_files/eusart1.c"
  2977 ;; Parameters:    Size  Location     Type
  2978 ;;		None
  2979 ;; Auto vars:     Size  Location     Type
  2980 ;;		None
  2981 ;; Return value:  Size  Location     Type
  2982 ;;                  1    wreg      unsigned char 
  2983 ;; Registers used:
  2984 ;;		wreg
  2985 ;; Tracked objects:
  2986 ;;		On entry : 0/0
  2987 ;;		On exit  : 0/0
  2988 ;;		Unchanged: 0/0
  2989 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2990 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2991 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2992 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2993 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2994 ;;Total ram usage:        0 bytes
  2995 ;; Hardware stack levels used:    1
  2996 ;; Hardware stack levels required when called:    4
  2997 ;; This function calls:
  2998 ;;		Nothing
  2999 ;; This function is called by:
  3000 ;;		_main
  3001 ;; This function uses a non-reentrant model
  3002 ;;
  3003                           
  3004                           	psect	text20
  3005  000818                     __ptext20:
  3006                           	opt stack 0
  3007  000818                     _EUSART1_is_rx_ready:
  3008                           	opt stack 26
  3009                           
  3010                           ;eusart1.c: 85: return PIR1bits.RC1IF;
  3011                           
  3012                           ;incstack = 0
  3013  000818  AA9E               	btfss	3998,5,c	;volatile
  3014  00081A  D002               	goto	u320
  3015  00081C  0E01               	movlw	1
  3016  00081E  0012               	return	
  3017  000820                     u320:
  3018  000820  0E00               	movlw	0
  3019  000822  0012               	return	
  3020  000824                     __end_of_EUSART1_is_rx_ready:
  3021                           	opt stack 0
  3022                           tblptru	equ	0xFF8
  3023                           tblptrh	equ	0xFF7
  3024                           tblptrl	equ	0xFF6
  3025                           tablat	equ	0xFF5
  3026                           prodh	equ	0xFF4
  3027                           prodl	equ	0xFF3
  3028                           intcon	equ	0xFF2
  3029                           intcon2	equ	0xFF1
  3030                           postinc0	equ	0xFEE
  3031                           wreg	equ	0xFE8
  3032                           indf2	equ	0xFDF
  3033                           postinc2	equ	0xFDE
  3034                           postdec2	equ	0xFDD
  3035                           fsr2h	equ	0xFDA
  3036                           fsr2l	equ	0xFD9
  3037                           status	equ	0xFD8
  3038                           
  3039 ;; *************** function _EUSART1_Read *****************
  3040 ;; Defined at:
  3041 ;;		line 93 in file "mcc_generated_files/eusart1.c"
  3042 ;; Parameters:    Size  Location     Type
  3043 ;;		None
  3044 ;; Auto vars:     Size  Location     Type
  3045 ;;		None
  3046 ;; Return value:  Size  Location     Type
  3047 ;;                  1    wreg      unsigned char 
  3048 ;; Registers used:
  3049 ;;		wreg, status,2
  3050 ;; Tracked objects:
  3051 ;;		On entry : 0/0
  3052 ;;		On exit  : 0/0
  3053 ;;		Unchanged: 0/0
  3054 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3055 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3056 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3057 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3058 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3059 ;;Total ram usage:        0 bytes
  3060 ;; Hardware stack levels used:    1
  3061 ;; Hardware stack levels required when called:    4
  3062 ;; This function calls:
  3063 ;;		Nothing
  3064 ;; This function is called by:
  3065 ;;		_main
  3066 ;; This function uses a non-reentrant model
  3067 ;;
  3068                           
  3069                           	psect	text21
  3070  0007F0                     __ptext21:
  3071                           	opt stack 0
  3072  0007F0                     _EUSART1_Read:
  3073                           	opt stack 26
  3074                           
  3075                           ;eusart1.c: 96: {
  3076                           
  3077                           ;eusart1.c: 95: while(!PIR1bits.RC1IF)
  3078                           
  3079                           ;incstack = 0
  3080  0007F0  AA9E               	btfss	3998,5,c	;volatile
  3081  0007F2  D7FE               	goto	_EUSART1_Read
  3082                           
  3083                           ;eusart1.c: 97: }
  3084                           ;eusart1.c: 100: if(1 == RCSTA1bits.OERR)
  3085  0007F4  A2AB               	btfss	4011,1,c	;volatile
  3086  0007F6  D002               	goto	l409
  3087                           
  3088                           ;eusart1.c: 101: {
  3089                           ;eusart1.c: 104: RCSTA1bits.CREN = 0;
  3090  0007F8  98AB               	bcf	4011,4,c	;volatile
  3091                           
  3092                           ;eusart1.c: 105: RCSTA1bits.CREN = 1;
  3093  0007FA  88AB               	bsf	4011,4,c	;volatile
  3094  0007FC                     l409:
  3095                           
  3096                           ;eusart1.c: 106: }
  3097                           ;eusart1.c: 108: return RCREG1;
  3098  0007FC  50AE               	movf	4014,w,c	;volatile
  3099  0007FE  0012               	return	
  3100  000800                     __end_of_EUSART1_Read:
  3101                           	opt stack 0
  3102                           tblptru	equ	0xFF8
  3103                           tblptrh	equ	0xFF7
  3104                           tblptrl	equ	0xFF6
  3105                           tablat	equ	0xFF5
  3106                           prodh	equ	0xFF4
  3107                           prodl	equ	0xFF3
  3108                           intcon	equ	0xFF2
  3109                           intcon2	equ	0xFF1
  3110                           postinc0	equ	0xFEE
  3111                           wreg	equ	0xFE8
  3112                           indf2	equ	0xFDF
  3113                           postinc2	equ	0xFDE
  3114                           postdec2	equ	0xFDD
  3115                           fsr2h	equ	0xFDA
  3116                           fsr2l	equ	0xFD9
  3117                           status	equ	0xFD8
  3118                           
  3119 ;; *************** function _INTERRUPT_InterruptManager *****************
  3120 ;; Defined at:
  3121 ;;		line 58 in file "mcc_generated_files/interrupt_manager.c"
  3122 ;; Parameters:    Size  Location     Type
  3123 ;;		None
  3124 ;; Auto vars:     Size  Location     Type
  3125 ;;		None
  3126 ;; Return value:  Size  Location     Type
  3127 ;;                  1    wreg      void 
  3128 ;; Registers used:
  3129 ;;		wreg, status,2, status,0, pclath, tosl, cstack
  3130 ;; Tracked objects:
  3131 ;;		On entry : 0/0
  3132 ;;		On exit  : 0/0
  3133 ;;		Unchanged: 0/0
  3134 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3135 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3136 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3137 ;;      Temps:         18       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3138 ;;      Totals:        18       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3139 ;;Total ram usage:       18 bytes
  3140 ;; Hardware stack levels used:    1
  3141 ;; Hardware stack levels required when called:    3
  3142 ;; This function calls:
  3143 ;;		_CCP4_CaptureISR
  3144 ;;		_CCP5_CaptureISR
  3145 ;;		_TMR0_ISR
  3146 ;; This function is called by:
  3147 ;;		Interrupt level 2
  3148 ;; This function uses a non-reentrant model
  3149 ;;
  3150                           
  3151                           	psect	intcode
  3152  000008                     __pintcode:
  3153                           	opt stack 0
  3154  000008                     _INTERRUPT_InterruptManager:
  3155                           	opt stack 24
  3156                           
  3157                           ;incstack = 0
  3158  000008  8246               	bsf	btemp,1,c	;set compiler interrupt flag (level 2)
  3159  00000A  CFFA F005          	movff	pclath,??_INTERRUPT_InterruptManager
  3160  00000E  CFFB F006          	movff	pclatu,??_INTERRUPT_InterruptManager+1
  3161  000012  CFE9 F007          	movff	fsr0l,??_INTERRUPT_InterruptManager+2
  3162  000016  CFEA F008          	movff	fsr0h,??_INTERRUPT_InterruptManager+3
  3163  00001A  CFE1 F009          	movff	fsr1l,??_INTERRUPT_InterruptManager+4
  3164  00001E  CFE2 F00A          	movff	fsr1h,??_INTERRUPT_InterruptManager+5
  3165  000022  CFD9 F00B          	movff	fsr2l,??_INTERRUPT_InterruptManager+6
  3166  000026  CFDA F00C          	movff	fsr2h,??_INTERRUPT_InterruptManager+7
  3167  00002A  CFF3 F00D          	movff	prodl,??_INTERRUPT_InterruptManager+8
  3168  00002E  CFF4 F00E          	movff	prodh,??_INTERRUPT_InterruptManager+9
  3169  000032  CFF6 F00F          	movff	tblptrl,??_INTERRUPT_InterruptManager+10
  3170  000036  CFF7 F010          	movff	tblptrh,??_INTERRUPT_InterruptManager+11
  3171  00003A  CFF8 F011          	movff	tblptru,??_INTERRUPT_InterruptManager+12
  3172  00003E  CFF5 F012          	movff	tablat,??_INTERRUPT_InterruptManager+13
  3173  000042  C046  F013         	movff	btemp,??_INTERRUPT_InterruptManager+14
  3174  000046  C047  F014         	movff	btemp+1,??_INTERRUPT_InterruptManager+15
  3175  00004A  C048  F015         	movff	btemp+2,??_INTERRUPT_InterruptManager+16
  3176  00004E  C049  F016         	movff	btemp+3,??_INTERRUPT_InterruptManager+17
  3177                           
  3178                           ;interrupt_manager.c: 61: if(INTCONbits.TMR0IE == 1 && INTCONbits.TMR0IF == 1)
  3179  000052  BAF2               	btfsc	intcon,5,c	;volatile
  3180  000054  A4F2               	btfss	intcon,2,c	;volatile
  3181  000056  D003               	goto	i2l52
  3182                           
  3183                           ;interrupt_manager.c: 62: {
  3184                           ;interrupt_manager.c: 63: TMR0_ISR();
  3185  000058  EC54  F003         	call	_TMR0_ISR	;wreg free
  3186                           
  3187                           ;interrupt_manager.c: 64: }
  3188  00005C  D00D               	goto	i2l57
  3189  00005E                     i2l52:
  3190                           
  3191                           ;interrupt_manager.c: 65: else if(INTCONbits.PEIE == 1)
  3192  00005E  ACF2               	btfss	intcon,6,c	;volatile
  3193  000060  D00B               	goto	i2l57
  3194                           
  3195                           ;interrupt_manager.c: 66: {
  3196                           ;interrupt_manager.c: 67: if(PIE4bits.CCP5IE == 1 && PIR4bits.CCP5IF == 1)
  3197  000062  B47A               	btfsc	3962,2,c	;volatile
  3198  000064  A47B               	btfss	3963,2,c	;volatile
  3199  000066  D003               	goto	i2l55
  3200                           
  3201                           ;interrupt_manager.c: 68: {
  3202                           ;interrupt_manager.c: 69: CCP5_CaptureISR();
  3203  000068  ECB9  F003         	call	_CCP5_CaptureISR	;wreg free
  3204                           
  3205                           ;interrupt_manager.c: 70: }
  3206  00006C  D005               	goto	i2l57
  3207  00006E                     i2l55:
  3208                           
  3209                           ;interrupt_manager.c: 71: else if(PIE4bits.CCP4IE == 1 && PIR4bits.CCP4IF == 1)
  3210  00006E  B27A               	btfsc	3962,1,c	;volatile
  3211  000070  A27B               	btfss	3963,1,c	;volatile
  3212  000072  D002               	goto	i2l57
  3213                           
  3214                           ;interrupt_manager.c: 72: {
  3215                           ;interrupt_manager.c: 73: CCP4_CaptureISR();
  3216  000074  ECC5  F003         	call	_CCP4_CaptureISR	;wreg free
  3217  000078                     i2l57:
  3218                           
  3219                           ;interrupt_manager.c: 80: else
  3220                           ;interrupt_manager.c: 81: {
  3221                           
  3222                           ;interrupt_manager.c: 78: }
  3223                           ;interrupt_manager.c: 79: }
  3224                           
  3225                           ;interrupt_manager.c: 75: else
  3226                           ;interrupt_manager.c: 76: {
  3227  000078  C016  F049         	movff	??_INTERRUPT_InterruptManager+17,btemp+3
  3228  00007C  C015  F048         	movff	??_INTERRUPT_InterruptManager+16,btemp+2
  3229  000080  C014  F047         	movff	??_INTERRUPT_InterruptManager+15,btemp+1
  3230  000084  C013  F046         	movff	??_INTERRUPT_InterruptManager+14,btemp
  3231  000088  C012  FFF5         	movff	??_INTERRUPT_InterruptManager+13,tablat
  3232  00008C  C011  FFF8         	movff	??_INTERRUPT_InterruptManager+12,tblptru
  3233  000090  C010  FFF7         	movff	??_INTERRUPT_InterruptManager+11,tblptrh
  3234  000094  C00F  FFF6         	movff	??_INTERRUPT_InterruptManager+10,tblptrl
  3235  000098  C00E  FFF4         	movff	??_INTERRUPT_InterruptManager+9,prodh
  3236  00009C  C00D  FFF3         	movff	??_INTERRUPT_InterruptManager+8,prodl
  3237  0000A0  C00C  FFDA         	movff	??_INTERRUPT_InterruptManager+7,fsr2h
  3238  0000A4  C00B  FFD9         	movff	??_INTERRUPT_InterruptManager+6,fsr2l
  3239  0000A8  C00A  FFE2         	movff	??_INTERRUPT_InterruptManager+5,fsr1h
  3240  0000AC  C009  FFE1         	movff	??_INTERRUPT_InterruptManager+4,fsr1l
  3241  0000B0  C008  FFEA         	movff	??_INTERRUPT_InterruptManager+3,fsr0h
  3242  0000B4  C007  FFE9         	movff	??_INTERRUPT_InterruptManager+2,fsr0l
  3243  0000B8  C006  FFFB         	movff	??_INTERRUPT_InterruptManager+1,pclatu
  3244  0000BC  C005  FFFA         	movff	??_INTERRUPT_InterruptManager,pclath
  3245  0000C0  9246               	bcf	btemp,1,c	;clear compiler interrupt flag (level 2)
  3246  0000C2  0011               	retfie		f
  3247  0000C4                     __end_of_INTERRUPT_InterruptManager:
  3248                           	opt stack 0
  3249                           pclatu	equ	0xFFB
  3250                           pclath	equ	0xFFA
  3251                           tblptru	equ	0xFF8
  3252                           tblptrh	equ	0xFF7
  3253                           tblptrl	equ	0xFF6
  3254                           tablat	equ	0xFF5
  3255                           prodh	equ	0xFF4
  3256                           prodl	equ	0xFF3
  3257                           intcon	equ	0xFF2
  3258                           intcon2	equ	0xFF1
  3259                           postinc0	equ	0xFEE
  3260                           fsr0h	equ	0xFEA
  3261                           fsr0l	equ	0xFE9
  3262                           wreg	equ	0xFE8
  3263                           fsr1h	equ	0xFE2
  3264                           fsr1l	equ	0xFE1
  3265                           indf2	equ	0xFDF
  3266                           postinc2	equ	0xFDE
  3267                           postdec2	equ	0xFDD
  3268                           fsr2h	equ	0xFDA
  3269                           fsr2l	equ	0xFD9
  3270                           status	equ	0xFD8
  3271                           
  3272 ;; *************** function _TMR0_ISR *****************
  3273 ;; Defined at:
  3274 ;;		line 136 in file "mcc_generated_files/tmr0.c"
  3275 ;; Parameters:    Size  Location     Type
  3276 ;;		None
  3277 ;; Auto vars:     Size  Location     Type
  3278 ;;		None
  3279 ;; Return value:  Size  Location     Type
  3280 ;;                  1    wreg      void 
  3281 ;; Registers used:
  3282 ;;		wreg, status,2, status,0, pclath, tosl, cstack
  3283 ;; Tracked objects:
  3284 ;;		On entry : 0/0
  3285 ;;		On exit  : 0/0
  3286 ;;		Unchanged: 0/0
  3287 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3288 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3289 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3290 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3291 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3292 ;;Total ram usage:        0 bytes
  3293 ;; Hardware stack levels used:    1
  3294 ;; Hardware stack levels required when called:    2
  3295 ;; This function calls:
  3296 ;;		Absolute function
  3297 ;;		_TMR0_DefaultInterruptHandler
  3298 ;; This function is called by:
  3299 ;;		_INTERRUPT_InterruptManager
  3300 ;; This function uses a non-reentrant model
  3301 ;;
  3302                           
  3303                           	psect	text23
  3304  0006A8                     __ptext23:
  3305                           	opt stack 0
  3306  0006A8                     _TMR0_ISR:
  3307                           	opt stack 24
  3308                           
  3309                           ;tmr0.c: 140: INTCONbits.TMR0IF = 0;
  3310                           
  3311                           ;incstack = 0
  3312  0006A8  94F2               	bcf	intcon,2,c	;volatile
  3313                           
  3314                           ;tmr0.c: 144: TMR0H = timer0ReloadVal >> 8;
  3315  0006AA  503E               	movf	_timer0ReloadVal+1,w,c	;volatile
  3316  0006AC  6ED7               	movwf	4055,c	;volatile
  3317                           
  3318                           ;tmr0.c: 145: TMR0L = (uint8_t) timer0ReloadVal;
  3319  0006AE  C03D  FFD6         	movff	_timer0ReloadVal,4054	;volatile
  3320                           
  3321                           ;tmr0.c: 147: if(TMR0_InterruptHandler)
  3322  0006B2  503F               	movf	_TMR0_InterruptHandler,w,c
  3323  0006B4  1040               	iorwf	_TMR0_InterruptHandler+1,w,c
  3324  0006B6  B4D8               	btfsc	status,2,c
  3325  0006B8  0012               	return	
  3326                           
  3327                           ;tmr0.c: 148: {
  3328                           ;tmr0.c: 149: TMR0_InterruptHandler();
  3329  0006BA  D801               	call	i2u63_48
  3330  0006BC  0012               	return	
  3331  0006BE                     i2u63_48:
  3332  0006BE  0005               	push	
  3333  0006C0  6EFA               	movwf	pclath,c
  3334  0006C2  503F               	movf	_TMR0_InterruptHandler,w,c
  3335  0006C4  6EFD               	movwf	tosl,c
  3336  0006C6  5040               	movf	_TMR0_InterruptHandler+1,w,c
  3337  0006C8  6EFE               	movwf	tosh,c
  3338  0006CA  6AFF               	clrf	tosu,c
  3339  0006CC  50FA               	movf	pclath,w,c
  3340  0006CE  0012               	return		;indir
  3341  0006D0                     __end_of_TMR0_ISR:
  3342                           	opt stack 0
  3343                           tosu	equ	0xFFF
  3344                           tosh	equ	0xFFE
  3345                           tosl	equ	0xFFD
  3346                           pclatu	equ	0xFFB
  3347                           pclath	equ	0xFFA
  3348                           tblptru	equ	0xFF8
  3349                           tblptrh	equ	0xFF7
  3350                           tblptrl	equ	0xFF6
  3351                           tablat	equ	0xFF5
  3352                           prodh	equ	0xFF4
  3353                           prodl	equ	0xFF3
  3354                           intcon	equ	0xFF2
  3355                           intcon2	equ	0xFF1
  3356                           postinc0	equ	0xFEE
  3357                           fsr0h	equ	0xFEA
  3358                           fsr0l	equ	0xFE9
  3359                           wreg	equ	0xFE8
  3360                           fsr1h	equ	0xFE2
  3361                           fsr1l	equ	0xFE1
  3362                           indf2	equ	0xFDF
  3363                           postinc2	equ	0xFDE
  3364                           postdec2	equ	0xFDD
  3365                           fsr2h	equ	0xFDA
  3366                           fsr2l	equ	0xFD9
  3367                           status	equ	0xFD8
  3368                           
  3369 ;; *************** function _TMR0_DefaultInterruptHandler *****************
  3370 ;; Defined at:
  3371 ;;		line 97 in file "main.c"
  3372 ;; Parameters:    Size  Location     Type
  3373 ;;		None
  3374 ;; Auto vars:     Size  Location     Type
  3375 ;;		None
  3376 ;; Return value:  Size  Location     Type
  3377 ;;                  1    wreg      void 
  3378 ;; Registers used:
  3379 ;;		wreg, status,2, status,0, cstack
  3380 ;; Tracked objects:
  3381 ;;		On entry : 0/0
  3382 ;;		On exit  : 0/0
  3383 ;;		Unchanged: 0/0
  3384 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3385 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3386 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3387 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3388 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3389 ;;Total ram usage:        2 bytes
  3390 ;; Hardware stack levels used:    1
  3391 ;; Hardware stack levels required when called:    1
  3392 ;; This function calls:
  3393 ;;		_TMR0_WriteTimer
  3394 ;; This function is called by:
  3395 ;;		_TMR0_Initialize
  3396 ;;		_TMR0_ISR
  3397 ;; This function uses a non-reentrant model
  3398 ;;
  3399                           
  3400                           	psect	text24
  3401  0005A4                     __ptext24:
  3402                           	opt stack 0
  3403  0005A4                     _TMR0_DefaultInterruptHandler:
  3404                           	opt stack 24
  3405                           
  3406                           ;main.c: 99: static uint8_t pulseHigh = 0;
  3407                           ;main.c: 100: if(!pulseHigh){
  3408                           
  3409                           ;incstack = 0
  3410  0005A4  5041               	movf	TMR0_DefaultInterruptHandler@pulseHigh,w,c
  3411  0005A6  A4D8               	btfss	status,2,c
  3412  0005A8  D013               	goto	i2l351
  3413                           
  3414                           ;main.c: 101: do { LATAbits.LATA1 = 1; } while(0);
  3415  0005AA  8289               	bsf	3977,1,c	;volatile
  3416                           
  3417                           ;main.c: 102: TMR0_WriteTimer(0xFFFF -yawPosition );
  3418  0005AC  C044  F003         	movff	_yawPosition,??_TMR0_DefaultInterruptHandler
  3419  0005B0  C045  F004         	movff	_yawPosition+1,??_TMR0_DefaultInterruptHandler+1
  3420  0005B4  1E03               	comf	??_TMR0_DefaultInterruptHandler,f,c
  3421  0005B6  1E04               	comf	??_TMR0_DefaultInterruptHandler+1,f,c
  3422  0005B8  4A03               	infsnz	??_TMR0_DefaultInterruptHandler,f,c
  3423  0005BA  2A04               	incf	??_TMR0_DefaultInterruptHandler+1,f,c
  3424  0005BC  0EFF               	movlw	255
  3425  0005BE  2403               	addwf	??_TMR0_DefaultInterruptHandler,w,c
  3426  0005C0  6E01               	movwf	TMR0_WriteTimer@timerVal,c
  3427  0005C2  0EFF               	movlw	255
  3428  0005C4  2004               	addwfc	??_TMR0_DefaultInterruptHandler+1,w,c
  3429  0005C6  6E02               	movwf	TMR0_WriteTimer@timerVal+1,c
  3430  0005C8  EC1C  F004         	call	_TMR0_WriteTimer	;wreg free
  3431                           
  3432                           ;main.c: 103: pulseHigh = 1;
  3433  0005CC  0E01               	movlw	1
  3434  0005CE  D008               	goto	L4
  3435  0005D0                     i2l351:
  3436                           
  3437                           ;main.c: 105: else{
  3438                           ;main.c: 106: do { LATAbits.LATA1 = 0; } while(0);
  3439  0005D0  9289               	bcf	3977,1,c	;volatile
  3440                           
  3441                           ;main.c: 107: TMR0_WriteTimer(0xFFFF -40000 );
  3442  0005D2  0E63               	movlw	99
  3443  0005D4  6E02               	movwf	TMR0_WriteTimer@timerVal+1,c
  3444  0005D6  0EBF               	movlw	191
  3445  0005D8  6E01               	movwf	TMR0_WriteTimer@timerVal,c
  3446  0005DA  EC1C  F004         	call	_TMR0_WriteTimer	;wreg free
  3447                           
  3448                           ;main.c: 108: pulseHigh = 0;
  3449  0005DE  0E00               	movlw	0
  3450  0005E0                     L4:
  3451  0005E0  6E41               	movwf	TMR0_DefaultInterruptHandler@pulseHigh,c
  3452                           
  3453                           ;main.c: 109: }
  3454                           ;main.c: 112: INTCONbits.TMR0IF = 0;
  3455  0005E2  94F2               	bcf	intcon,2,c	;volatile
  3456  0005E4  0012               	return		;funcret
  3457  0005E6                     __end_of_TMR0_DefaultInterruptHandler:
  3458                           	opt stack 0
  3459                           tosu	equ	0xFFF
  3460                           tosh	equ	0xFFE
  3461                           tosl	equ	0xFFD
  3462                           pclatu	equ	0xFFB
  3463                           pclath	equ	0xFFA
  3464                           tblptru	equ	0xFF8
  3465                           tblptrh	equ	0xFF7
  3466                           tblptrl	equ	0xFF6
  3467                           tablat	equ	0xFF5
  3468                           prodh	equ	0xFF4
  3469                           prodl	equ	0xFF3
  3470                           intcon	equ	0xFF2
  3471                           intcon2	equ	0xFF1
  3472                           postinc0	equ	0xFEE
  3473                           fsr0h	equ	0xFEA
  3474                           fsr0l	equ	0xFE9
  3475                           wreg	equ	0xFE8
  3476                           fsr1h	equ	0xFE2
  3477                           fsr1l	equ	0xFE1
  3478                           indf2	equ	0xFDF
  3479                           postinc2	equ	0xFDE
  3480                           postdec2	equ	0xFDD
  3481                           fsr2h	equ	0xFDA
  3482                           fsr2l	equ	0xFD9
  3483                           status	equ	0xFD8
  3484                           
  3485 ;; *************** function _TMR0_WriteTimer *****************
  3486 ;; Defined at:
  3487 ;;		line 122 in file "mcc_generated_files/tmr0.c"
  3488 ;; Parameters:    Size  Location     Type
  3489 ;;  timerVal        2    0[COMRAM] unsigned int 
  3490 ;; Auto vars:     Size  Location     Type
  3491 ;;		None
  3492 ;; Return value:  Size  Location     Type
  3493 ;;                  1    wreg      void 
  3494 ;; Registers used:
  3495 ;;		wreg, status,2
  3496 ;; Tracked objects:
  3497 ;;		On entry : 0/0
  3498 ;;		On exit  : 0/0
  3499 ;;		Unchanged: 0/0
  3500 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3501 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3502 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3503 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3504 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3505 ;;Total ram usage:        2 bytes
  3506 ;; Hardware stack levels used:    1
  3507 ;; This function calls:
  3508 ;;		Nothing
  3509 ;; This function is called by:
  3510 ;;		_TMR0_DefaultInterruptHandler
  3511 ;; This function uses a non-reentrant model
  3512 ;;
  3513                           
  3514                           	psect	text25
  3515  000838                     __ptext25:
  3516                           	opt stack 0
  3517  000838                     _TMR0_WriteTimer:
  3518                           	opt stack 24
  3519                           
  3520                           ;tmr0.c: 125: TMR0H = timerVal >> 8;
  3521                           
  3522                           ;incstack = 0
  3523  000838  5002               	movf	TMR0_WriteTimer@timerVal+1,w,c
  3524  00083A  6ED7               	movwf	4055,c	;volatile
  3525                           
  3526                           ;tmr0.c: 126: TMR0L = (uint8_t) timerVal;
  3527  00083C  C001  FFD6         	movff	TMR0_WriteTimer@timerVal,4054	;volatile
  3528  000840  0012               	return		;funcret
  3529  000842                     __end_of_TMR0_WriteTimer:
  3530                           	opt stack 0
  3531                           tosu	equ	0xFFF
  3532                           tosh	equ	0xFFE
  3533                           tosl	equ	0xFFD
  3534                           pclatu	equ	0xFFB
  3535                           pclath	equ	0xFFA
  3536                           tblptru	equ	0xFF8
  3537                           tblptrh	equ	0xFF7
  3538                           tblptrl	equ	0xFF6
  3539                           tablat	equ	0xFF5
  3540                           prodh	equ	0xFF4
  3541                           prodl	equ	0xFF3
  3542                           intcon	equ	0xFF2
  3543                           intcon2	equ	0xFF1
  3544                           postinc0	equ	0xFEE
  3545                           fsr0h	equ	0xFEA
  3546                           fsr0l	equ	0xFE9
  3547                           wreg	equ	0xFE8
  3548                           fsr1h	equ	0xFE2
  3549                           fsr1l	equ	0xFE1
  3550                           indf2	equ	0xFDF
  3551                           postinc2	equ	0xFDE
  3552                           postdec2	equ	0xFDD
  3553                           fsr2h	equ	0xFDA
  3554                           fsr2l	equ	0xFD9
  3555                           status	equ	0xFD8
  3556                           
  3557 ;; *************** function _CCP5_CaptureISR *****************
  3558 ;; Defined at:
  3559 ;;		line 81 in file "mcc_generated_files/ccp5.c"
  3560 ;; Parameters:    Size  Location     Type
  3561 ;;		None
  3562 ;; Auto vars:     Size  Location     Type
  3563 ;;  module          2    2[COMRAM] struct CCPR5Reg_tag
  3564 ;; Return value:  Size  Location     Type
  3565 ;;                  1    wreg      void 
  3566 ;; Registers used:
  3567 ;;		wreg, status,2, status,0, cstack
  3568 ;; Tracked objects:
  3569 ;;		On entry : 0/0
  3570 ;;		On exit  : 0/0
  3571 ;;		Unchanged: 0/0
  3572 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3573 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3574 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3575 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3576 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3577 ;;Total ram usage:        2 bytes
  3578 ;; Hardware stack levels used:    1
  3579 ;; Hardware stack levels required when called:    1
  3580 ;; This function calls:
  3581 ;;		_CCP5_CallBack
  3582 ;; This function is called by:
  3583 ;;		_INTERRUPT_InterruptManager
  3584 ;; This function uses a non-reentrant model
  3585 ;;
  3586                           
  3587                           	psect	text26
  3588  000772                     __ptext26:
  3589                           	opt stack 0
  3590  000772                     _CCP5_CaptureISR:
  3591                           	opt stack 25
  3592                           
  3593                           ;ccp5.c: 83: CCP_PERIOD_REG_T module;
  3594                           ;ccp5.c: 86: PIR4bits.CCP5IF = 0;
  3595                           
  3596                           ;incstack = 0
  3597  000772  947B               	bcf	3963,2,c	;volatile
  3598                           
  3599                           ;ccp5.c: 89: module.ccpr5l = CCPR5L;
  3600  000774  CF55 F003          	movff	3925,CCP5_CaptureISR@module	;volatile
  3601                           
  3602                           ;ccp5.c: 90: module.ccpr5h = CCPR5H;
  3603  000778  CF56 F004          	movff	3926,CCP5_CaptureISR@module+1	;volatile
  3604                           
  3605                           ;ccp5.c: 93: CCP5_CallBack(module.ccpr5_16Bit);
  3606  00077C  C003  F001         	movff	CCP5_CaptureISR@module,CCP5_CallBack@capturedValue
  3607  000780  C004  F002         	movff	CCP5_CaptureISR@module+1,CCP5_CallBack@capturedValue+1
  3608  000784  EC68  F003         	call	_CCP5_CallBack	;wreg free
  3609  000788  0012               	return		;funcret
  3610  00078A                     __end_of_CCP5_CaptureISR:
  3611                           	opt stack 0
  3612                           tosu	equ	0xFFF
  3613                           tosh	equ	0xFFE
  3614                           tosl	equ	0xFFD
  3615                           pclatu	equ	0xFFB
  3616                           pclath	equ	0xFFA
  3617                           tblptru	equ	0xFF8
  3618                           tblptrh	equ	0xFF7
  3619                           tblptrl	equ	0xFF6
  3620                           tablat	equ	0xFF5
  3621                           prodh	equ	0xFF4
  3622                           prodl	equ	0xFF3
  3623                           intcon	equ	0xFF2
  3624                           intcon2	equ	0xFF1
  3625                           postinc0	equ	0xFEE
  3626                           fsr0h	equ	0xFEA
  3627                           fsr0l	equ	0xFE9
  3628                           wreg	equ	0xFE8
  3629                           fsr1h	equ	0xFE2
  3630                           fsr1l	equ	0xFE1
  3631                           indf2	equ	0xFDF
  3632                           postinc2	equ	0xFDE
  3633                           postdec2	equ	0xFDD
  3634                           fsr2h	equ	0xFDA
  3635                           fsr2l	equ	0xFD9
  3636                           status	equ	0xFD8
  3637                           
  3638 ;; *************** function _CCP5_CallBack *****************
  3639 ;; Defined at:
  3640 ;;		line 137 in file "main.c"
  3641 ;; Parameters:    Size  Location     Type
  3642 ;;  capturedValu    2    0[COMRAM] unsigned int 
  3643 ;; Auto vars:     Size  Location     Type
  3644 ;;		None
  3645 ;; Return value:  Size  Location     Type
  3646 ;;                  1    wreg      void 
  3647 ;; Registers used:
  3648 ;;		wreg, status,2, status,0
  3649 ;; Tracked objects:
  3650 ;;		On entry : 0/0
  3651 ;;		On exit  : 0/0
  3652 ;;		Unchanged: 0/0
  3653 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3654 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3655 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3656 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3657 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3658 ;;Total ram usage:        2 bytes
  3659 ;; Hardware stack levels used:    1
  3660 ;; This function calls:
  3661 ;;		Nothing
  3662 ;; This function is called by:
  3663 ;;		_CCP5_CaptureISR
  3664 ;; This function uses a non-reentrant model
  3665 ;;
  3666                           
  3667                           	psect	text27
  3668  0006D0                     __ptext27:
  3669                           	opt stack 0
  3670  0006D0                     _CCP5_CallBack:
  3671                           	opt stack 25
  3672                           
  3673                           ;main.c: 139: if(CCP5CONbits.CCP5M == 0b0101){
  3674                           
  3675                           ;incstack = 0
  3676  0006D0  010F               	movlb	15	; () banked
  3677  0006D2  5154               	movf	84,w,b	;volatile
  3678  0006D4  0B0F               	andlw	15
  3679  0006D6  0A05               	xorlw	5
  3680  0006D8  A4D8               	btfss	status,2,c
  3681  0006DA  D006               	goto	i2l367
  3682                           
  3683                           ; BSR set to: 15
  3684                           ;main.c: 140: CCP5CONbits.CCP5M = 0b0100;
  3685  0006DC  5154               	movf	84,w,b	;volatile
  3686  0006DE  0BF0               	andlw	-16
  3687  0006E0  0904               	iorlw	4
  3688  0006E2  6F54               	movwf	84,b	;volatile
  3689                           
  3690                           ;main.c: 141: encoderB = 1;
  3691  0006E4  0E01               	movlw	1
  3692  0006E6  D005               	goto	L5
  3693  0006E8                     i2l367:
  3694                           
  3695                           ; BSR set to: 15
  3696                           ;main.c: 144: else{
  3697                           ;main.c: 145: CCP5CONbits.CCP5M = 0b0101;
  3698                           
  3699                           ; BSR set to: 15
  3700  0006E8  5154               	movf	84,w,b	;volatile
  3701  0006EA  0BF0               	andlw	-16
  3702  0006EC  0905               	iorlw	5
  3703  0006EE  6F54               	movwf	84,b	;volatile
  3704                           
  3705                           ;main.c: 146: encoderB = 0;
  3706  0006F0  0E00               	movlw	0
  3707  0006F2                     L5:
  3708  0006F2  6E42               	movwf	_encoderB,c
  3709                           
  3710                           ; BSR set to: 15
  3711                           ;main.c: 147: }
  3712                           ;main.c: 149: PIR4bits.CCP5IF = 0;
  3713                           
  3714                           ; BSR set to: 15
  3715  0006F4  947B               	bcf	3963,2,c	;volatile
  3716                           
  3717                           ; BSR set to: 15
  3718  0006F6  0012               	return		;funcret
  3719  0006F8                     __end_of_CCP5_CallBack:
  3720                           	opt stack 0
  3721                           tosu	equ	0xFFF
  3722                           tosh	equ	0xFFE
  3723                           tosl	equ	0xFFD
  3724                           pclatu	equ	0xFFB
  3725                           pclath	equ	0xFFA
  3726                           tblptru	equ	0xFF8
  3727                           tblptrh	equ	0xFF7
  3728                           tblptrl	equ	0xFF6
  3729                           tablat	equ	0xFF5
  3730                           prodh	equ	0xFF4
  3731                           prodl	equ	0xFF3
  3732                           intcon	equ	0xFF2
  3733                           intcon2	equ	0xFF1
  3734                           postinc0	equ	0xFEE
  3735                           fsr0h	equ	0xFEA
  3736                           fsr0l	equ	0xFE9
  3737                           wreg	equ	0xFE8
  3738                           fsr1h	equ	0xFE2
  3739                           fsr1l	equ	0xFE1
  3740                           indf2	equ	0xFDF
  3741                           postinc2	equ	0xFDE
  3742                           postdec2	equ	0xFDD
  3743                           fsr2h	equ	0xFDA
  3744                           fsr2l	equ	0xFD9
  3745                           status	equ	0xFD8
  3746                           
  3747 ;; *************** function _CCP4_CaptureISR *****************
  3748 ;; Defined at:
  3749 ;;		line 81 in file "mcc_generated_files/ccp4.c"
  3750 ;; Parameters:    Size  Location     Type
  3751 ;;		None
  3752 ;; Auto vars:     Size  Location     Type
  3753 ;;  module          2    2[COMRAM] struct CCPR4Reg_tag
  3754 ;; Return value:  Size  Location     Type
  3755 ;;                  1    wreg      void 
  3756 ;; Registers used:
  3757 ;;		wreg, status,2, status,0, cstack
  3758 ;; Tracked objects:
  3759 ;;		On entry : 0/0
  3760 ;;		On exit  : 0/0
  3761 ;;		Unchanged: 0/0
  3762 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3763 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3764 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3765 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3766 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3767 ;;Total ram usage:        2 bytes
  3768 ;; Hardware stack levels used:    1
  3769 ;; Hardware stack levels required when called:    1
  3770 ;; This function calls:
  3771 ;;		_CCP4_CallBack
  3772 ;; This function is called by:
  3773 ;;		_INTERRUPT_InterruptManager
  3774 ;; This function uses a non-reentrant model
  3775 ;;
  3776                           
  3777                           	psect	text28
  3778  00078A                     __ptext28:
  3779                           	opt stack 0
  3780  00078A                     _CCP4_CaptureISR:
  3781                           	opt stack 25
  3782                           
  3783                           ;ccp4.c: 83: CCP_PERIOD_REG_T module;
  3784                           ;ccp4.c: 86: PIR4bits.CCP4IF = 0;
  3785                           
  3786                           ; BSR set to: 15
  3787                           ;incstack = 0
  3788  00078A  927B               	bcf	3963,1,c	;volatile
  3789                           
  3790                           ;ccp4.c: 89: module.ccpr4l = CCPR4L;
  3791  00078C  CF58 F003          	movff	3928,CCP4_CaptureISR@module	;volatile
  3792                           
  3793                           ;ccp4.c: 90: module.ccpr4h = CCPR4H;
  3794  000790  CF59 F004          	movff	3929,CCP4_CaptureISR@module+1	;volatile
  3795                           
  3796                           ;ccp4.c: 93: CCP4_CallBack(module.ccpr4_16Bit);
  3797  000794  C003  F001         	movff	CCP4_CaptureISR@module,CCP4_CallBack@capturedValue
  3798  000798  C004  F002         	movff	CCP4_CaptureISR@module+1,CCP4_CallBack@capturedValue+1
  3799  00079C  ECAC  F002         	call	_CCP4_CallBack	;wreg free
  3800  0007A0  0012               	return		;funcret
  3801  0007A2                     __end_of_CCP4_CaptureISR:
  3802                           	opt stack 0
  3803                           tosu	equ	0xFFF
  3804                           tosh	equ	0xFFE
  3805                           tosl	equ	0xFFD
  3806                           pclatu	equ	0xFFB
  3807                           pclath	equ	0xFFA
  3808                           tblptru	equ	0xFF8
  3809                           tblptrh	equ	0xFF7
  3810                           tblptrl	equ	0xFF6
  3811                           tablat	equ	0xFF5
  3812                           prodh	equ	0xFF4
  3813                           prodl	equ	0xFF3
  3814                           intcon	equ	0xFF2
  3815                           intcon2	equ	0xFF1
  3816                           postinc0	equ	0xFEE
  3817                           fsr0h	equ	0xFEA
  3818                           fsr0l	equ	0xFE9
  3819                           wreg	equ	0xFE8
  3820                           fsr1h	equ	0xFE2
  3821                           fsr1l	equ	0xFE1
  3822                           indf2	equ	0xFDF
  3823                           postinc2	equ	0xFDE
  3824                           postdec2	equ	0xFDD
  3825                           fsr2h	equ	0xFDA
  3826                           fsr2l	equ	0xFD9
  3827                           status	equ	0xFD8
  3828                           
  3829 ;; *************** function _CCP4_CallBack *****************
  3830 ;; Defined at:
  3831 ;;		line 117 in file "main.c"
  3832 ;; Parameters:    Size  Location     Type
  3833 ;;  capturedValu    2    0[COMRAM] unsigned int 
  3834 ;; Auto vars:     Size  Location     Type
  3835 ;;		None
  3836 ;; Return value:  Size  Location     Type
  3837 ;;                  1    wreg      void 
  3838 ;; Registers used:
  3839 ;;		wreg, status,2, status,0
  3840 ;; Tracked objects:
  3841 ;;		On entry : 0/0
  3842 ;;		On exit  : 0/0
  3843 ;;		Unchanged: 0/0
  3844 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3845 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3846 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3847 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3848 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3849 ;;Total ram usage:        2 bytes
  3850 ;; Hardware stack levels used:    1
  3851 ;; This function calls:
  3852 ;;		Nothing
  3853 ;; This function is called by:
  3854 ;;		_CCP4_CaptureISR
  3855 ;; This function uses a non-reentrant model
  3856 ;;
  3857                           
  3858                           	psect	text29
  3859  000558                     __ptext29:
  3860                           	opt stack 0
  3861  000558                     _CCP4_CallBack:
  3862                           	opt stack 25
  3863                           
  3864                           ;main.c: 119: if(CCP4CONbits.CCP4M == 0b0101){
  3865                           
  3866                           ;incstack = 0
  3867  000558  010F               	movlb	15	; () banked
  3868  00055A  5157               	movf	87,w,b	;volatile
  3869  00055C  0B0F               	andlw	15
  3870  00055E  0A05               	xorlw	5
  3871  000560  A4D8               	btfss	status,2,c
  3872  000562  D018               	goto	i2l360
  3873                           
  3874                           ; BSR set to: 15
  3875                           ;main.c: 120: CCP4CONbits.CCP4M = 0b0100;
  3876  000564  5157               	movf	87,w,b	;volatile
  3877  000566  0BF0               	andlw	-16
  3878  000568  0904               	iorlw	4
  3879  00056A  6F57               	movwf	87,b	;volatile
  3880                           
  3881                           ;main.c: 121: encoderA = 1;
  3882  00056C  0E01               	movlw	1
  3883  00056E  6E43               	movwf	_encoderA,c
  3884                           
  3885                           ;main.c: 122: if(encoderB==0){
  3886  000570  5042               	movf	_encoderB,w,c
  3887  000572  A4D8               	btfss	status,2,c
  3888  000574  D006               	goto	i2l361
  3889                           
  3890                           ; BSR set to: 15
  3891                           ;main.c: 123: encoderPosition++;
  3892  000576  0E01               	movlw	1
  3893  000578  2637               	addwf	_encoderPosition,f,c
  3894  00057A  0E00               	movlw	0
  3895  00057C  2238               	addwfc	_encoderPosition+1,f,c
  3896  00057E  2239               	addwfc	_encoderPosition+2,f,c
  3897  000580  D007               	goto	L6
  3898  000582                     i2l361:
  3899                           
  3900                           ; BSR set to: 15
  3901                           ;main.c: 125: else{
  3902                           ;main.c: 126: encoderPosition--;
  3903                           
  3904                           ; BSR set to: 15
  3905  000582  0EFF               	movlw	255
  3906  000584  2637               	addwf	_encoderPosition,f,c
  3907  000586  0EFF               	movlw	255
  3908  000588  2238               	addwfc	_encoderPosition+1,f,c
  3909  00058A  0EFF               	movlw	255
  3910  00058C  2239               	addwfc	_encoderPosition+2,f,c
  3911  00058E  0EFF               	movlw	255
  3912  000590                     L6:
  3913  000590  223A               	addwfc	_encoderPosition+3,f,c
  3914                           
  3915                           ; BSR set to: 15
  3916                           ;main.c: 127: }
  3917                           ;main.c: 128: }
  3918  000592  D006               	goto	i2l363
  3919  000594                     i2l360:
  3920                           
  3921                           ; BSR set to: 15
  3922                           ;main.c: 129: else{
  3923                           ;main.c: 130: CCP4CONbits.CCP4M = 0b0101;
  3924                           
  3925                           ; BSR set to: 15
  3926  000594  5157               	movf	87,w,b	;volatile
  3927  000596  0BF0               	andlw	-16
  3928  000598  0905               	iorlw	5
  3929  00059A  6F57               	movwf	87,b	;volatile
  3930                           
  3931                           ;main.c: 131: encoderA = 0;
  3932  00059C  0E00               	movlw	0
  3933  00059E  6E43               	movwf	_encoderA,c
  3934  0005A0                     i2l363:
  3935                           
  3936                           ; BSR set to: 15
  3937                           ;main.c: 132: }
  3938                           ;main.c: 134: PIR4bits.CCP4IF = 0;
  3939                           
  3940                           ; BSR set to: 15
  3941  0005A0  927B               	bcf	3963,1,c	;volatile
  3942                           
  3943                           ; BSR set to: 15
  3944  0005A2  0012               	return		;funcret
  3945  0005A4                     __end_of_CCP4_CallBack:
  3946                           	opt stack 0
  3947                           tosu	equ	0xFFF
  3948                           tosh	equ	0xFFE
  3949                           tosl	equ	0xFFD
  3950                           pclatu	equ	0xFFB
  3951                           pclath	equ	0xFFA
  3952                           tblptru	equ	0xFF8
  3953                           tblptrh	equ	0xFF7
  3954                           tblptrl	equ	0xFF6
  3955                           tablat	equ	0xFF5
  3956                           prodh	equ	0xFF4
  3957                           prodl	equ	0xFF3
  3958                           intcon	equ	0xFF2
  3959                           intcon2	equ	0xFF1
  3960                           postinc0	equ	0xFEE
  3961                           fsr0h	equ	0xFEA
  3962                           fsr0l	equ	0xFE9
  3963                           wreg	equ	0xFE8
  3964                           fsr1h	equ	0xFE2
  3965                           fsr1l	equ	0xFE1
  3966                           indf2	equ	0xFDF
  3967                           postinc2	equ	0xFDE
  3968                           postdec2	equ	0xFDD
  3969                           fsr2h	equ	0xFDA
  3970                           fsr2l	equ	0xFD9
  3971                           status	equ	0xFD8
  3972                           tosu	equ	0xFFF
  3973                           tosh	equ	0xFFE
  3974                           tosl	equ	0xFFD
  3975                           pclatu	equ	0xFFB
  3976                           pclath	equ	0xFFA
  3977                           tblptru	equ	0xFF8
  3978                           tblptrh	equ	0xFF7
  3979                           tblptrl	equ	0xFF6
  3980                           tablat	equ	0xFF5
  3981                           prodh	equ	0xFF4
  3982                           prodl	equ	0xFF3
  3983                           intcon	equ	0xFF2
  3984                           intcon2	equ	0xFF1
  3985                           postinc0	equ	0xFEE
  3986                           fsr0h	equ	0xFEA
  3987                           fsr0l	equ	0xFE9
  3988                           wreg	equ	0xFE8
  3989                           fsr1h	equ	0xFE2
  3990                           fsr1l	equ	0xFE1
  3991                           indf2	equ	0xFDF
  3992                           postinc2	equ	0xFDE
  3993                           postdec2	equ	0xFDD
  3994                           fsr2h	equ	0xFDA
  3995                           fsr2l	equ	0xFD9
  3996                           status	equ	0xFD8
  3997                           
  3998                           	psect	text30
  3999  000000                     __ptext30:
  4000                           	opt stack 0
  4001                           tosu	equ	0xFFF
  4002                           tosh	equ	0xFFE
  4003                           tosl	equ	0xFFD
  4004                           pclatu	equ	0xFFB
  4005                           pclath	equ	0xFFA
  4006                           tblptru	equ	0xFF8
  4007                           tblptrh	equ	0xFF7
  4008                           tblptrl	equ	0xFF6
  4009                           tablat	equ	0xFF5
  4010                           prodh	equ	0xFF4
  4011                           prodl	equ	0xFF3
  4012                           intcon	equ	0xFF2
  4013                           intcon2	equ	0xFF1
  4014                           postinc0	equ	0xFEE
  4015                           fsr0h	equ	0xFEA
  4016                           fsr0l	equ	0xFE9
  4017                           wreg	equ	0xFE8
  4018                           fsr1h	equ	0xFE2
  4019                           fsr1l	equ	0xFE1
  4020                           indf2	equ	0xFDF
  4021                           postinc2	equ	0xFDE
  4022                           postdec2	equ	0xFDD
  4023                           fsr2h	equ	0xFDA
  4024                           fsr2l	equ	0xFD9
  4025                           status	equ	0xFD8
  4026                           
  4027                           	psect	rparam
  4028  0000                     tosu	equ	0xFFF
  4029                           tosh	equ	0xFFE
  4030                           tosl	equ	0xFFD
  4031                           pclatu	equ	0xFFB
  4032                           pclath	equ	0xFFA
  4033                           tblptru	equ	0xFF8
  4034                           tblptrh	equ	0xFF7
  4035                           tblptrl	equ	0xFF6
  4036                           tablat	equ	0xFF5
  4037                           prodh	equ	0xFF4
  4038                           prodl	equ	0xFF3
  4039                           intcon	equ	0xFF2
  4040                           intcon2	equ	0xFF1
  4041                           postinc0	equ	0xFEE
  4042                           fsr0h	equ	0xFEA
  4043                           fsr0l	equ	0xFE9
  4044                           wreg	equ	0xFE8
  4045                           fsr1h	equ	0xFE2
  4046                           fsr1l	equ	0xFE1
  4047                           indf2	equ	0xFDF
  4048                           postinc2	equ	0xFDE
  4049                           postdec2	equ	0xFDD
  4050                           fsr2h	equ	0xFDA
  4051                           fsr2l	equ	0xFD9
  4052                           status	equ	0xFD8
  4053                           
  4054                           	psect	temp
  4055  000046                     btemp:
  4056                           	opt stack 0
  4057  000046                     	ds	1
  4058  0000                     int$flags	set	btemp
  4059  0000                     wtemp6	set	btemp+1
  4060                           tosu	equ	0xFFF
  4061                           tosh	equ	0xFFE
  4062                           tosl	equ	0xFFD
  4063                           pclatu	equ	0xFFB
  4064                           pclath	equ	0xFFA
  4065                           tblptru	equ	0xFF8
  4066                           tblptrh	equ	0xFF7
  4067                           tblptrl	equ	0xFF6
  4068                           tablat	equ	0xFF5
  4069                           prodh	equ	0xFF4
  4070                           prodl	equ	0xFF3
  4071                           intcon	equ	0xFF2
  4072                           intcon2	equ	0xFF1
  4073                           postinc0	equ	0xFEE
  4074                           fsr0h	equ	0xFEA
  4075                           fsr0l	equ	0xFE9
  4076                           wreg	equ	0xFE8
  4077                           fsr1h	equ	0xFE2
  4078                           fsr1l	equ	0xFE1
  4079                           indf2	equ	0xFDF
  4080                           postinc2	equ	0xFDE
  4081                           postdec2	equ	0xFDD
  4082                           fsr2h	equ	0xFDA
  4083                           fsr2l	equ	0xFD9
  4084                           status	equ	0xFD8


Data Sizes:
    Strings     249
    Constant    40
    Data        2
    BSS         13
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           94     54      69
    BANK0           160     10      10
    BANK1           256      0       0
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0
    BANK8           256      0       0
    BANK9           256      0       0
    BANK10          256      0       0
    BANK11          256      0       0
    BANK12          256      0       0
    BANK13          256      0       0
    BANK14          256      0       0
    BANK15           56      0       0

Pointer List with Targets:

    printf@f	PTR const unsigned char  size(2) Largest target is 34
		 -> STR_11(CODE[17]), STR_10(CODE[21]), STR_9(CODE[27]), STR_8(CODE[5]), 
		 -> STR_7(CODE[5]), STR_6(CODE[24]), STR_5(CODE[34]), STR_4(CODE[34]), 
		 -> STR_3(CODE[27]), STR_2(CODE[27]), STR_1(CODE[28]), 

    printf@ap	PTR void [1] size(2) Largest target is 2
		 -> ?_printf(COMRAM[2]), 

    TMR0_SetInterruptHandler@InterruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> TMR0_DefaultInterruptHandler(), 

    TMR0_InterruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> Absolute function(), TMR0_DefaultInterruptHandler(), 


Critical Paths under _main in COMRAM

    _main->_printf
    _printf->___llmod
    _putch->_EUSART2_Write
    ___llmod->___lldiv
    _SYSTEM_Initialize->_TMR0_Initialize
    _TMR0_Initialize->_TMR0_SetInterruptHandler

Critical Paths under _INTERRUPT_InterruptManager in COMRAM

    _INTERRUPT_InterruptManager->_CCP4_CaptureISR
    _INTERRUPT_InterruptManager->_CCP5_CaptureISR
    _TMR0_ISR->_TMR0_DefaultInterruptHandler
    _TMR0_DefaultInterruptHandler->_TMR0_WriteTimer
    _CCP5_CaptureISR->_CCP5_CallBack
    _CCP4_CaptureISR->_CCP4_CallBack

Critical Paths under _main in BANK0

    _main->_printf

Critical Paths under _INTERRUPT_InterruptManager in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK12

    None.

Critical Paths under _main in BANK13

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK13

    None.

Critical Paths under _main in BANK14

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK14

    None.

Critical Paths under _main in BANK15

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK15

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 2     2      0    3156
                                             52 COMRAM     2     2      0
                       _EUSART1_Read
                _EUSART1_is_rx_ready
                       _EUSART2_Read
                _EUSART2_is_rx_ready
                  _SYSTEM_Initialize
                             _printf
                        _setYawServo
 ---------------------------------------------------------------------------------
 (1) _setYawServo                                          2     0      2     220
                                             22 COMRAM     2     0      2
 ---------------------------------------------------------------------------------
 (1) _printf                                              27    21      6    2708
                                             44 COMRAM     8     2      6
                                              0 BANK0     10    10      0
                            ___lldiv
                            ___llmod
                              _putch
 ---------------------------------------------------------------------------------
 (2) _putch                                                1     1      0      44
                                             23 COMRAM     1     1      0
                      _EUSART2_Write
 ---------------------------------------------------------------------------------
 (3) _EUSART2_Write                                        1     1      0      22
                                             22 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (2) ___llmod                                              9     1      8     412
                                             35 COMRAM     9     1      8
                            ___lldiv (ARG)
 ---------------------------------------------------------------------------------
 (2) ___lldiv                                             13     5      8     421
                                             22 COMRAM    13     5      8
 ---------------------------------------------------------------------------------
 (1) _SYSTEM_Initialize                                    0     0      0      98
                    _CCP4_Initialize
                    _CCP5_Initialize
                 _EUSART1_Initialize
                 _EUSART2_Initialize
               _INTERRUPT_Initialize
              _OSCILLATOR_Initialize
             _PIN_MANAGER_Initialize
                    _TMR0_Initialize
                    _TMR3_Initialize
 ---------------------------------------------------------------------------------
 (2) _TMR3_Initialize                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _TMR0_Initialize                                      2     2      0      98
                                             24 COMRAM     2     2      0
           _TMR0_SetInterruptHandler
 ---------------------------------------------------------------------------------
 (3) _TMR0_SetInterruptHandler                             2     0      2      98
                                             22 COMRAM     2     0      2
 ---------------------------------------------------------------------------------
 (2) _PIN_MANAGER_Initialize                               0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _OSCILLATOR_Initialize                                0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _INTERRUPT_Initialize                                 0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _EUSART2_Initialize                                   0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _EUSART1_Initialize                                   0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _CCP5_Initialize                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _CCP4_Initialize                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _EUSART2_is_rx_ready                                  0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _EUSART2_Read                                         0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _EUSART1_is_rx_ready                                  0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _EUSART1_Read                                         0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 3
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (4) _INTERRUPT_InterruptManager                          18    18      0     442
                                              4 COMRAM    18    18      0
                    _CCP4_CaptureISR
                    _CCP5_CaptureISR
                           _TMR0_ISR
 ---------------------------------------------------------------------------------
 (5) _TMR0_ISR                                             0     0      0     196
                   Absolute function *
       _TMR0_DefaultInterruptHandler *
 ---------------------------------------------------------------------------------
 (6) _TMR0_DefaultInterruptHandler                         2     2      0     196
                                              2 COMRAM     2     2      0
                    _TMR0_WriteTimer
 ---------------------------------------------------------------------------------
 (7) _TMR0_WriteTimer                                      2     0      2     196
                                              0 COMRAM     2     0      2
 ---------------------------------------------------------------------------------
 (6) Absolute function(Fake)                               0     0      0       0
 ---------------------------------------------------------------------------------
 (5) _CCP5_CaptureISR                                      2     2      0     123
                                              2 COMRAM     2     2      0
                      _CCP5_CallBack
 ---------------------------------------------------------------------------------
 (6) _CCP5_CallBack                                        2     0      2      76
                                              0 COMRAM     2     0      2
 ---------------------------------------------------------------------------------
 (5) _CCP4_CaptureISR                                      2     2      0     123
                                              2 COMRAM     2     2      0
                      _CCP4_CallBack
 ---------------------------------------------------------------------------------
 (6) _CCP4_CallBack                                        2     0      2      76
                                              0 COMRAM     2     0      2
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 7
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _EUSART1_Read
   _EUSART1_is_rx_ready
   _EUSART2_Read
   _EUSART2_is_rx_ready
   _SYSTEM_Initialize
     _CCP4_Initialize
     _CCP5_Initialize
     _EUSART1_Initialize
     _EUSART2_Initialize
     _INTERRUPT_Initialize
     _OSCILLATOR_Initialize
     _PIN_MANAGER_Initialize
     _TMR0_Initialize
       _TMR0_SetInterruptHandler
     _TMR3_Initialize
   _printf
     ___lldiv
     ___llmod
       ___lldiv (ARG)
     _putch
       _EUSART2_Write
   _setYawServo

 _INTERRUPT_InterruptManager (ROOT)
   _CCP4_CaptureISR
     _CCP4_CallBack
   _CCP5_CaptureISR
     _CCP5_CallBack
   _TMR0_ISR
     Absolute function(Fake) *
     _TMR0_DefaultInterruptHandler *
       _TMR0_WriteTimer

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             F37      0       0      37        0.0%
EEDATA             400      0       0       0        0.0%
BITBANK14          100      0       0      33        0.0%
BANK14             100      0       0      34        0.0%
BITBANK13          100      0       0      31        0.0%
BANK13             100      0       0      32        0.0%
BITBANK12          100      0       0      29        0.0%
BANK12             100      0       0      30        0.0%
BITBANK11          100      0       0      27        0.0%
BANK11             100      0       0      28        0.0%
BITBANK10          100      0       0      25        0.0%
BANK10             100      0       0      26        0.0%
BITBANK9           100      0       0      23        0.0%
BANK9              100      0       0      24        0.0%
BITBANK8           100      0       0      21        0.0%
BANK8              100      0       0      22        0.0%
BITBANK7           100      0       0      19        0.0%
BANK7              100      0       0      20        0.0%
BITBANK6           100      0       0      17        0.0%
BANK6              100      0       0      18        0.0%
BITBANK5           100      0       0      15        0.0%
BANK5              100      0       0      16        0.0%
BITBANK4           100      0       0      13        0.0%
BANK4              100      0       0      14        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0       0       9        0.0%
BITBANK1           100      0       0       6        0.0%
BANK1              100      0       0       7        0.0%
BITBANK0            A0      0       0       4        0.0%
BANK0               A0      A       A       5        6.2%
BITCOMRAM           5E      0       0       0        0.0%
COMRAM              5E     36      45       1       73.4%
BITBANK15           38      0       0      35        0.0%
BANK15              38      0       0      36        0.0%
BITSFR_1             0      0       0     200        0.0%
SFR_1                0      0       0     200        0.0%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0      4F      12        0.0%
DATA                 0      0      4F       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V1.45 build -152302408 
Symbol Table                                                                                   Tue Apr 24 11:04:53 2018

                         _CCP4_Initialize 0756                                        l93 07DA  
                         _timer0ReloadVal 003D                              __CFG_CP0$OFF 000000  
                            __CFG_CP1$OFF 000000                              __CFG_CP2$OFF 000000  
                            __CFG_CP3$OFF 000000                               __CFG_LVP$ON 000000  
                                     l135 07EC                                       l320 0322  
                                     l322 0348                                       l331 03CE  
                                     l323 036E                                       l333 03F4  
                                     l325 03B0                                       l317 0310  
                                     l334 0406                                       l326 0394  
                                     l431 0112                                       l343 062E  
                                     l319 043C                                       l440 010C  
                                     l336 0416                                       l328 03C0  
                                     l409 07FC                                       l441 01AE  
                                     l345 0642                                       l337 0424  
                                     l442 0172                                       l434 00EC  
                                     l338 0428                                       l451 0246  
                                     l452 02D8                                       l428 00D4  
                                     l453 0254                                       l437 014E  
                                     l429 00E4                                       l446 01CE  
                                     l438 00F0                                       l447 01F2  
                                     l439 0104                                       l811 04D2  
                                     l812 04E0                                       l821 0538  
                                     l822 0546                                       l807 049E  
                                     l808 0492                                       l817 0510  
                                     l818 0504                              __CFG_CPB$OFF 000000  
                                     u150 0814                                       u320 0820  
                            __CFG_CPD$OFF 000000                                       u910 04A2  
                                     u940 0514                                       tosl 000FFD  
                                     wreg 000FE8                                _TXSTA1bits 000FAC  
                              _TXSTA2bits 000F72                   __end_of_CCP4_CaptureISR 07A2  
                         _CCP5_Initialize 073A                           _timer3ReloadVal 003B  
                                    l1766 0802                                      l1858 01F6  
                                    l1876 0254                                      STR_1 FF49  
                                    STR_2 FF80                                      STR_3 FF9B  
                                    STR_4 FF27                                      STR_5 FF05  
                                    STR_6 FFB6                                      STR_7 FFF4  
                                    STR_8 FFF9                                      STR_9 FF65  
                                    u1030 0234                                      u1050 02EA  
                                    _LATA 000F89                                      _LATB 000F8A  
                                    _LATC 000F8B                                      i2l52 005E  
                                    i2l55 006E                                      i2l57 0078  
                                    _TMR3 000FB2                                      _WPUB 000F61  
                           _EUSART2_Write 0800                                      _main 0308  
                           ?_EUSART1_Read 0001                             ?_EUSART2_Read 0001  
                                    fsr0h 000FEA                                      fsr1h 000FE2  
                                    fsr2h 000FDA                                      fsr0l 000FE9  
                                    indf2 000FDF                                      fsr1l 000FE1  
                                    fsr2l 000FD9                                      btemp 0046  
                           __CFG_BORV$190 000000                                      prodh 000FF4  
                                    prodl 000FF3                                      start 00C4  
                           __CFG_IESO$OFF 000000                           _TMR3_Initialize 071E  
                            ___param_bank 000000                   __end_of_CCP5_CaptureISR 078A  
                 __end_of_TMR0_Initialize 061A            ??_TMR0_DefaultInterruptHandler 0003  
          __size_of_OSCILLATOR_Initialize 0012             __end_of_OSCILLATOR_Initialize 07E0  
                                   ?_main 0001                                     STR_10 FFCE  
                                   STR_11 FFE3                           __end_of___lldiv 04F2  
                                   _T0CON 000FD5                           __end_of___llmod 0558  
                                   _T3CON 000FB1                            __CFG_DEBUG$OFF 000000  
                         _TMR0_WriteTimer 0838                                     i2l351 05D0  
                                   i2l360 0594                                     i2l361 0582  
                                   i2l363 05A0                                     i2l367 06E8  
                                   _TMR0H 000FD7                                     _TMR0L 000FD6  
                                   _TMR3H 000FB3                                     _TMR3L 000FB2  
                                   _TRISA 000F92                                     _TRISB 000F93  
                                   _TRISC 000F94         __size_of_TMR0_SetInterruptHandler 000A  
                           __CFG_WRT0$OFF 000000                             __CFG_WRT1$OFF 000000  
                           __CFG_WRT2$OFF 000000                 ?_TMR0_SetInterruptHandler 0017  
                           __CFG_WRT3$OFF 000000                            __CFG_EBTR0$OFF 000000  
                          __CFG_FCMEN$OFF 000000                            __CFG_EBTR1$OFF 000000  
                          __CFG_EBTR2$OFF 000000                            __CFG_EBTR3$OFF 000000  
                        __end_of_TMR0_ISR 06D0                             __CFG_WRTB$OFF 000000  
                           __CFG_WRTC$OFF 000000                             __CFG_WRTD$OFF 000000  
                          __CFG_EBTRB$OFF 000000                           __end_of_dpowers FF05  
                      __CFG_MCLRE$EXTMCLR 000000                                     _putch 0824  
                          ?_EUSART2_Write 0001                                     pclath 000FFA  
                                   tablat 000FF5                            ??_EUSART1_Read 0017  
                          ??_EUSART2_Read 0017                    __size_of_CCP4_CallBack 004C  
                                   status 000FD8                   __end_of_CCP4_Initialize 0772  
                                   wtemp6 0047                            __CFG_HFOFST$ON 000000  
                          __CFG_PBADEN$ON 000000                    __size_of_CCP5_CallBack 0028  
                         __initialization 064C                __end_of_EUSART1_Initialize 07CE  
                            __end_of_main 0470                            setYawServo@pos 0017  
             ?_INTERRUPT_InterruptManager 0001                                    ??_main 0035  
                 __end_of_CCP5_Initialize 0756                             __activetblptr 000003  
                        ?_CCP4_CaptureISR 0001                __end_of_EUSART2_Initialize 07B8  
                        ___llmod@dividend 0024                                    _CCPR4H 000F59  
                                  _CCPR5H 000F56                                    _CCPR4L 000F58  
                                  _CCPR5L 000F55                                    _ANSELA 000F38  
                                  ?_putch 0001                                    _ANSELB 000F39  
                                  _ANSELC 000F3A                                    _T3GCON 000FB4  
                            ?_setYawServo 0017              __size_of_EUSART1_is_rx_ready 000C  
                 __end_of_TMR3_Initialize 073A                            __CFG_WDTEN$OFF 000000  
                                  _RCREG1 000FAE                                    _RCREG2 000F74  
                                  _RCSTA1 000FAB                                    _RCSTA2 000F71  
                                  _OSCCON 000FD3                                    _PLLRDY 007E97  
                                  _SPBRG1 000FAF                                    _SPBRG2 000F75  
                                  _TXREG1 000FAD                                    _TXREG2 000F73  
                                  _TXSTA1 000FAC                                    _TXSTA2 000F72  
                          __CFG_XINST$OFF 000000                              _CCPTMRS1bits 000F48  
                        ?_CCP5_CaptureISR 0001                            __CFG_STVREN$ON 000000  
                 __end_of_TMR0_WriteTimer 0842                                 ??___lldiv 001F  
                               ??___llmod 002C                          ?_TMR0_Initialize 0001  
                                  clear_0 066A                             _CCP4_CallBack 0558  
                                  _printf 00C8                              __pdataCOMRAM 0044  
                           _CCP5_CallBack 06D0                              __mediumconst FEDC  
                                  tblptrh 000FF7                                    tblptrl 000FF6  
                                  tblptru 000FF8                           ??_EUSART2_Write 0017  
TMR0_SetInterruptHandler@InterruptHandler 0017             __size_of_INTERRUPT_Initialize 0004  
            __size_of_EUSART2_is_rx_ready 000C                         _SYSTEM_Initialize 06F8  
                              __accesstop 0060                   __end_of__initialization 0670  
                        ?_CCP4_Initialize 0001                        ?_SYSTEM_Initialize 0001  
                           ___rparam_used 000001                            __pcstackCOMRAM 0001  
                     ??_SYSTEM_Initialize 001B                                 ?_TMR0_ISR 0001  
                           __end_of_putch 082E                            ?_CCP4_CallBack 0001  
                    __end_of_EUSART1_Read 0800                      __end_of_EUSART2_Read 07F0  
                        ?_CCP5_Initialize 0001                            ?_CCP5_CallBack 0001  
               __end_of_SYSTEM_Initialize 071E                                   ??_putch 0018  
                        ?_TMR3_Initialize 0001                           __CFG_PLLCFG$OFF 000000  
                      __CFG_CCP2MX$PORTC1 000000          __end_of_TMR0_SetInterruptHandler 0838  
                              ??_TMR0_ISR 0005                        __CFG_CCP3MX$PORTB5 000000  
                        ?_TMR0_WriteTimer 0001                                   _CCP4CON 000F57  
                                 _CCP5CON 000F54                                   ?_printf 002D  
                                 _OSCCON2 000FD2                                   _OSCTUNE 000F9B  
                                 i2u63_48 06BE                                   _SPBRGH1 000FB0  
                                 _SPBRGH2 000F76                      __size_of_setYawServo 0032  
                         __CFG_PWRTEN$OFF 000000                                   __Hparam 0000  
                                 __Lparam 0000                           ??_CCP4_CallBack 0003  
                                 ___lldiv 0470                                   ___llmod 04F2  
                     _EUSART1_is_rx_ready 0818                                   __pcinit 064C  
                         ??_CCP5_CallBack 0003                                   __ramtop 1000  
                                 __ptext0 0308                                   __ptext1 061A  
                                 __ptext2 00C8                                   __ptext3 0824  
                                 __ptext4 0800                                   __ptext5 04F2  
                                 __ptext6 0470                                   __ptext7 06F8  
                                 __ptext8 071E                                   __ptext9 05E6  
                         __size_of_printf 0240                                 _T0CONbits 000FD5  
                                 _dpowers FEDD                     _OSCILLATOR_Initialize 07CE  
                               _T3CONbits 000FB1                        _EUSART1_Initialize 07B8  
                ??_PIN_MANAGER_Initialize 0017                                   main@cmd 0035  
              __size_of_SYSTEM_Initialize 0026                      end_of_initialization 0670  
                    ?_EUSART1_is_rx_ready 0001                       ?_EUSART1_Initialize 0001  
                         ___lldiv@divisor 001B                           ___lldiv@counter 0023  
                      _EUSART2_Initialize 07A2                                   printf@c 0069  
                                 printf@f 002D                                   postdec2 000FDD  
                                 postinc0 000FEE                                   postinc2 000FDE  
                   __size_of_EUSART1_Read 0010                     __size_of_EUSART2_Read 0010  
                    ??_EUSART1_Initialize 0017                       ?_EUSART2_Initialize 0001  
                     _EUSART2_is_rx_ready 080C                  _TMR0_SetInterruptHandler 082E  
              CCP5_CallBack@capturedValue 0001                     ??_EUSART1_is_rx_ready 0017  
                    ??_EUSART2_Initialize 0017                      ?_EUSART2_is_rx_ready 0001  
                            _EUSART1_Read 07F0                              _EUSART2_Read 07E0  
                __size_of_CCP4_CaptureISR 0018                               _CCP4CONbits 000F57  
                             _CCP5CONbits 000F54              __end_of_INTERRUPT_Initialize 0846  
                           __pidataCOMRAM 0846                         __size_of_TMR0_ISR 0028  
                  ?_OSCILLATOR_Initialize 0001                  __size_of_CCP5_CaptureISR 0018  
                          __end_of_printf 0308                       start_initialization 064C  
                __size_of_TMR0_Initialize 0034           __size_of_PIN_MANAGER_Initialize 002E  
                             putch@txData 0018                     ??_EUSART2_is_rx_ready 0017  
                   __end_of_EUSART2_Write 080C                           ___llmod@divisor 0028  
                         ___llmod@counter 002C                           _encoderPosition 0037  
                __size_of_CCP4_Initialize 001C                                  ??_printf 0033  
                   CCP4_CaptureISR@module 0003                               __pbssCOMRAM 0037  
                           __pcstackBANK0 0060                  __size_of_CCP5_Initialize 001C  
                     EUSART2_Write@txData 0017                     _TMR0_InterruptHandler 003F  
                  _PIN_MANAGER_Initialize 067A                  __size_of_TMR3_Initialize 001C  
                               __pintcode 0008                             __pmediumconst FEDC  
                       ??_CCP4_CaptureISR 0003                                  ?___lldiv 0017  
                                ?___llmod 0024              ??_INTERRUPT_InterruptManager 0005  
                        __CFG_PRICLKEN$ON 000000                                  _BAUDCON1 000FB8  
                                _BAUDCON2 000F70                  __size_of_TMR0_WriteTimer 000A  
                       ??_CCP5_CaptureISR 0003                             ??_setYawServo 0019  
                          __size_of_putch 000A                      _INTERRUPT_Initialize 0842  
                       ??_TMR0_Initialize 0019                                  _LATAbits 000F89  
                                _PIE4bits 000F7A       __size_of_INTERRUPT_InterruptManager 00BC  
              ??_TMR0_SetInterruptHandler 0019                                  _PIR1bits 000F9E  
                                _PIR2bits 000FA1                                  _PIR3bits 000FA4  
                                _PIR4bits 000F7B                                  _RCONbits 000FD0  
                        __CFG_WDTPS$32768 000000                                  _TMR0_ISR 06A8  
                   __end_of_CCP4_CallBack 05A4                     __end_of_CCP5_CallBack 06F8  
                              printf@flag 0066                         ??_CCP4_Initialize 0017  
                              printf@prec 0060                               _INTCON2bits 000FF1  
                   ?_INTERRUPT_Initialize 0001                         ??_CCP5_Initialize 0017  
                     __end_of_setYawServo 064C                                  __Hrparam 0000  
                                __Lrparam 0000                        __CFG_BOREN$SBORDIS 000000  
                       __CFG_P2BMX$PORTB5 000000                   ??_OSCILLATOR_Initialize 0017  
                        __size_of___lldiv 0082                          __size_of___llmod 0066  
             __size_of_EUSART1_Initialize 0016     TMR0_DefaultInterruptHandler@pulseHigh 0041  
                       ??_TMR3_Initialize 0017                CCP4_CallBack@capturedValue 0001  
             __end_of_EUSART1_is_rx_ready 0824                                  __ptext10 082E  
                                __ptext11 067A                                  __ptext20 0818  
                                __ptext12 07CE                                  __ptext21 07F0  
                                __ptext13 0842                                  __ptext30 0000  
                                __ptext14 07A2                                  __ptext23 06A8  
                                __ptext15 07B8                                  __ptext24 05A4  
                                __ptext16 073A                                  __ptext25 0838  
                                __ptext17 0756                                  __ptext26 0772  
                                __ptext18 080C                                  __ptext27 06D0  
                                __ptext19 07E0                                  __ptext28 078A  
                                __ptext29 0558                                  _encoderA 0043  
                                _encoderB 0042                   TMR0_WriteTimer@timerVal 0001  
                              _T3GCONbits 000FB4                         ??_TMR0_WriteTimer 0003  
             __size_of_EUSART2_Initialize 0016                             __size_of_main 0168  
    __end_of_TMR0_DefaultInterruptHandler 05E6     __size_of_TMR0_DefaultInterruptHandler 0042  
            _TMR0_DefaultInterruptHandler 05A4                                  int$flags 0046  
      __end_of_INTERRUPT_InterruptManager 00C4                _INTERRUPT_InterruptManager 0008  
                                main@cmd2 0036                                 printf@val 0062  
                              _INTCONbits 000FF2               __end_of_EUSART2_is_rx_ready 0818  
                  ??_INTERRUPT_Initialize 0017                                  intlevel2 0000  
                             _setYawServo 061A                           _CCP4_CaptureISR 078A  
                        ___lldiv@dividend 0017                   ?_PIN_MANAGER_Initialize 0001  
                              _RCSTA1bits 000FAB                                _RCSTA2bits 000F71  
           ?_TMR0_DefaultInterruptHandler 0001                                  printf@ap 0067  
                  __size_of_EUSART2_Write 000C                           _CCP5_CaptureISR 0772  
                   CCP5_CaptureISR@module 0003                          ___lldiv@quotient 001F  
                         _TMR0_Initialize 05E6                         __CFG_T3CMX$PORTC0 000000  
          __end_of_PIN_MANAGER_Initialize 06A8                         __CFG_FOSC$INTIO67 000000  
                             _yawPosition 0044  
