

Microchip Technology PIC18 LITE Macro Assembler V1.45 build -152302408 
                                                                                               Mon Apr 23 20:09:08 2018

Microchip Technology Omniscient Code Generator v1.45 (Free mode) build 201711160504
     1                           	processor	18F26K22
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	lm
     5                           	psect	idataCOMRAM,global,class=CODE,delta=1,noexec
     6                           	psect	mediumconst,global,reloc=2,class=MEDIUMCONST,delta=1,noexec
     7                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     8                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
     9                           	psect	dataCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    10                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1,noexec
    11                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    12                           	psect	text0,global,reloc=2,class=CODE,delta=1
    13                           	psect	text1,global,reloc=2,class=CODE,delta=1
    14                           	psect	text2,global,reloc=2,class=CODE,delta=1
    15                           	psect	text3,global,reloc=2,class=CODE,delta=1
    16                           	psect	text4,global,reloc=2,class=CODE,delta=1
    17                           	psect	text5,global,reloc=2,class=CODE,delta=1,group=1
    18                           	psect	text6,global,reloc=2,class=CODE,delta=1,group=1
    19                           	psect	text7,global,reloc=2,class=CODE,delta=1
    20                           	psect	text8,global,reloc=2,class=CODE,delta=1
    21                           	psect	text9,global,reloc=2,class=CODE,delta=1
    22                           	psect	text10,global,reloc=2,class=CODE,delta=1
    23                           	psect	text11,global,reloc=2,class=CODE,delta=1
    24                           	psect	text12,global,reloc=2,class=CODE,delta=1
    25                           	psect	text13,global,reloc=2,class=CODE,delta=1
    26                           	psect	text14,global,reloc=2,class=CODE,delta=1
    27                           	psect	text15,global,reloc=2,class=CODE,delta=1
    28                           	psect	text16,global,reloc=2,class=CODE,delta=1
    29                           	psect	text17,global,reloc=2,class=CODE,delta=1
    30                           	psect	text18,global,reloc=2,class=CODE,delta=1
    31                           	psect	intcode,global,reloc=2,class=CODE,delta=1
    32                           	psect	text20,global,reloc=2,class=CODE,delta=1
    33                           	psect	text21,global,reloc=2,class=CODE,delta=1
    34                           	psect	text22,global,reloc=2,class=CODE,delta=1
    35                           	psect	text23,global,reloc=2,class=CODE,delta=1
    36                           	psect	text24,global,reloc=2,class=CODE,delta=1
    37                           	psect	text25,global,reloc=2,class=CODE,delta=1
    38                           	psect	text26,global,reloc=2,class=CODE,delta=1
    39                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
    40                           	psect	text27,global,reloc=2,class=CODE,delta=1
    41                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
    42                           	psect	temp,global,ovrld,common,class=COMRAM,space=1,delta=1
    43  0000                     
    44                           ; Version 1.45
    45                           ; Generated 16/11/2017 GMT
    46                           ; 
    47                           ; Copyright Â© 2017, Microchip Technology Inc. and its subsidiaries ("Microchip")
    48                           ; All rights reserved.
    49                           ; 
    50                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    51                           ; 
    52                           ; Redistribution and use in source and binary forms, with or without modification, are
    53                           ; permitted provided that the following conditions are met:
    54                           ; 
    55                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    56                           ;        conditions and the following disclaimer.
    57                           ; 
    58                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    59                           ;        of conditions and the following disclaimer in the documentation and/or other
    60                           ;        materials provided with the distribution.
    61                           ; 
    62                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    63                           ;        software without specific prior written permission.
    64                           ; 
    65                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    66                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    67                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    68                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    69                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    70                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    71                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    72                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    73                           ; 
    74                           ; 
    75                           ; Code-generator required, PIC18F26K22 Definitions
    76                           ; 
    77                           ; SFR Addresses
    78  0000                     
    79                           	psect	idataCOMRAM
    80  0007C0                     __pidataCOMRAM:
    81                           	opt stack 0
    82                           
    83                           ;initializer for _yawPosition
    84  0007C0  0BB8               	dw	3000
    85                           
    86                           	psect	mediumconst
    87  00FEFC                     __pmediumconst:
    88                           	opt stack 0
    89  00FEFC  00                 	db	0
    90  00FEFD                     _dpowers:
    91                           	opt stack 0
    92  00FEFD  0001               	dw	1
    93  00FEFF  0000               	dw	0
    94  00FF01  000A               	dw	10
    95  00FF03  0000               	dw	0
    96  00FF05  0064               	dw	100
    97  00FF07  0000               	dw	0
    98  00FF09  03E8               	dw	1000
    99  00FF0B  0000               	dw	0
   100  00FF0D  2710               	dw	10000
   101  00FF0F  0000               	dw	0
   102  00FF11  86A0               	dw	34464
   103  00FF13  0001               	dw	1
   104  00FF15  4240               	dw	16960
   105  00FF17  000F               	dw	15
   106  00FF19  9680               	dw	38528
   107  00FF1B  0098               	dw	152
   108  00FF1D  E100               	dw	57600
   109  00FF1F  05F5               	dw	1525
   110  00FF21  CA00               	dw	51712
   111  00FF23  3B9A               	dw	15258
   112  00FF25                     __end_of_dpowers:
   113                           	opt stack 0
   114  0000                     _CCPR4H	set	3929
   115  0000                     _CCPR4L	set	3928
   116  0000                     _CCP4CON	set	3927
   117  0000                     _CCPTMRS1bits	set	3912
   118  0000                     _CCPR5H	set	3926
   119  0000                     _CCPR5L	set	3925
   120  0000                     _CCP5CON	set	3924
   121  0000                     _CCP5CONbits	set	3924
   122  0000                     _CCP4CONbits	set	3927
   123  0000                     _ANSELA	set	3896
   124  0000                     _ANSELB	set	3897
   125  0000                     _ANSELC	set	3898
   126  0000                     _TMR3	set	4018
   127  0000                     _T3GCONbits	set	4020
   128  0000                     _T3CONbits	set	4017
   129  0000                     _T3CON	set	4017
   130  0000                     _PIR2bits	set	4001
   131  0000                     _TMR3L	set	4018
   132  0000                     _TMR3H	set	4019
   133  0000                     _T3GCON	set	4020
   134  0000                     _T0CON	set	4053
   135  0000                     _TMR0L	set	4054
   136  0000                     _TMR0H	set	4055
   137  0000                     _T0CONbits	set	4053
   138  0000                     _TXREG2	set	3955
   139  0000                     _RCREG2	set	3956
   140  0000                     _RCSTA2bits	set	3953
   141  0000                     _TXSTA2bits	set	3954
   142  0000                     _PIR3bits	set	4004
   143  0000                     _SPBRGH2	set	3958
   144  0000                     _SPBRG2	set	3957
   145  0000                     _TXSTA2	set	3954
   146  0000                     _RCSTA2	set	3953
   147  0000                     _BAUDCON2	set	3952
   148  0000                     _LATAbits	set	3977
   149  0000                     _OSCTUNE	set	3995
   150  0000                     _OSCCON2	set	4050
   151  0000                     _OSCCON	set	4051
   152  0000                     _PIR4bits	set	3963
   153  0000                     _PIE4bits	set	3962
   154  0000                     _RCONbits	set	4048
   155  0000                     _INTCONbits	set	4082
   156  0000                     _INTCON2bits	set	4081
   157  0000                     _WPUB	set	3937
   158  0000                     _TRISC	set	3988
   159  0000                     _TRISB	set	3987
   160  0000                     _TRISA	set	3986
   161  0000                     _LATC	set	3979
   162  0000                     _LATB	set	3978
   163  0000                     _LATA	set	3977
   164  0000                     _PLLRDY	set	32407
   165  00FF25                     STR_5:
   166                           
   167                           ; BSR set to: 15
   168  00FF25  44                 	db	68	;'D'
   169  00FF26  65                 	db	101	;'e'
   170  00FF27  63                 	db	99	;'c'
   171  00FF28  72                 	db	114	;'r'
   172  00FF29  65                 	db	101	;'e'
   173  00FF2A  6D                 	db	109	;'m'
   174  00FF2B  65                 	db	101	;'e'
   175  00FF2C  6E                 	db	110	;'n'
   176  00FF2D  74                 	db	116	;'t'
   177  00FF2E  69                 	db	105	;'i'
   178  00FF2F  6E                 	db	110	;'n'
   179  00FF30  67                 	db	103	;'g'
   180  00FF31  20                 	db	32
   181  00FF32  53                 	db	83	;'S'
   182  00FF33  65                 	db	101	;'e'
   183  00FF34  72                 	db	114	;'r'
   184  00FF35  76                 	db	118	;'v'
   185  00FF36  6F                 	db	111	;'o'
   186  00FF37  20                 	db	32
   187  00FF38  50                 	db	80	;'P'
   188  00FF39  6F                 	db	111	;'o'
   189  00FF3A  73                 	db	115	;'s'
   190  00FF3B  69                 	db	105	;'i'
   191  00FF3C  74                 	db	116	;'t'
   192  00FF3D  69                 	db	105	;'i'
   193  00FF3E  6F                 	db	111	;'o'
   194  00FF3F  6E                 	db	110	;'n'
   195  00FF40  3A                 	db	58	;':'
   196  00FF41  20                 	db	32
   197  00FF42  25                 	db	37
   198  00FF43  75                 	db	117	;'u'
   199  00FF44  0D                 	db	13
   200  00FF45  0A                 	db	10
   201  00FF46  00                 	db	0
   202  00FF47                     STR_4:
   203                           
   204                           ; BSR set to: 15
   205  00FF47  49                 	db	73	;'I'
   206  00FF48  6E                 	db	110	;'n'
   207  00FF49  63                 	db	99	;'c'
   208  00FF4A  72                 	db	114	;'r'
   209  00FF4B  65                 	db	101	;'e'
   210  00FF4C  6D                 	db	109	;'m'
   211  00FF4D  65                 	db	101	;'e'
   212  00FF4E  6E                 	db	110	;'n'
   213  00FF4F  74                 	db	116	;'t'
   214  00FF50  69                 	db	105	;'i'
   215  00FF51  6E                 	db	110	;'n'
   216  00FF52  67                 	db	103	;'g'
   217  00FF53  20                 	db	32
   218  00FF54  53                 	db	83	;'S'
   219  00FF55  65                 	db	101	;'e'
   220  00FF56  72                 	db	114	;'r'
   221  00FF57  76                 	db	118	;'v'
   222  00FF58  6F                 	db	111	;'o'
   223  00FF59  20                 	db	32
   224  00FF5A  50                 	db	80	;'P'
   225  00FF5B  6F                 	db	111	;'o'
   226  00FF5C  73                 	db	115	;'s'
   227  00FF5D  69                 	db	105	;'i'
   228  00FF5E  74                 	db	116	;'t'
   229  00FF5F  69                 	db	105	;'i'
   230  00FF60  6F                 	db	111	;'o'
   231  00FF61  6E                 	db	110	;'n'
   232  00FF62  3A                 	db	58	;':'
   233  00FF63  20                 	db	32
   234  00FF64  25                 	db	37
   235  00FF65  75                 	db	117	;'u'
   236  00FF66  0D                 	db	13
   237  00FF67  0A                 	db	10
   238  00FF68  00                 	db	0
   239  00FF69                     STR_1:
   240                           
   241                           ; BSR set to: 15
   242  00FF69  43                 	db	67	;'C'
   243  00FF6A  6F                 	db	111	;'o'
   244  00FF6B  6E                 	db	110	;'n'
   245  00FF6C  6E                 	db	110	;'n'
   246  00FF6D  65                 	db	101	;'e'
   247  00FF6E  63                 	db	99	;'c'
   248  00FF6F  74                 	db	116	;'t'
   249  00FF70  20                 	db	32
   250  00FF71  52                 	db	82	;'R'
   251  00FF72  41                 	db	65	;'A'
   252  00FF73  31                 	db	49	;'1'
   253  00FF74  20                 	db	32
   254  00FF75  74                 	db	116	;'t'
   255  00FF76  6F                 	db	111	;'o'
   256  00FF77  20                 	db	32
   257  00FF78  53                 	db	83	;'S'
   258  00FF79  65                 	db	101	;'e'
   259  00FF7A  72                 	db	114	;'r'
   260  00FF7B  76                 	db	118	;'v'
   261  00FF7C  6F                 	db	111	;'o'
   262  00FF7D  20                 	db	32
   263  00FF7E  44                 	db	68	;'D'
   264  00FF7F  61                 	db	97	;'a'
   265  00FF80  74                 	db	116	;'t'
   266  00FF81  61                 	db	97	;'a'
   267  00FF82  0D                 	db	13
   268  00FF83  0A                 	db	10
   269  00FF84  00                 	db	0
   270  00FF85                     STR_2:
   271                           
   272                           ; BSR set to: 15
   273  00FF85  43                 	db	67	;'C'
   274  00FF86  6F                 	db	111	;'o'
   275  00FF87  6E                 	db	110	;'n'
   276  00FF88  6E                 	db	110	;'n'
   277  00FF89  65                 	db	101	;'e'
   278  00FF8A  63                 	db	99	;'c'
   279  00FF8B  74                 	db	116	;'t'
   280  00FF8C  20                 	db	32
   281  00FF8D  52                 	db	82	;'R'
   282  00FF8E  42                 	db	66	;'B'
   283  00FF8F  30                 	db	48	;'0'
   284  00FF90  20                 	db	32
   285  00FF91  74                 	db	116	;'t'
   286  00FF92  6F                 	db	111	;'o'
   287  00FF93  20                 	db	32
   288  00FF94  45                 	db	69	;'E'
   289  00FF95  6E                 	db	110	;'n'
   290  00FF96  63                 	db	99	;'c'
   291  00FF97  6F                 	db	111	;'o'
   292  00FF98  64                 	db	100	;'d'
   293  00FF99  65                 	db	101	;'e'
   294  00FF9A  72                 	db	114	;'r'
   295  00FF9B  20                 	db	32
   296  00FF9C  41                 	db	65	;'A'
   297  00FF9D  0D                 	db	13
   298  00FF9E  0A                 	db	10
   299  00FF9F  00                 	db	0
   300  00FFA0                     STR_3:
   301                           
   302                           ; BSR set to: 15
   303  00FFA0  43                 	db	67	;'C'
   304  00FFA1  6F                 	db	111	;'o'
   305  00FFA2  6E                 	db	110	;'n'
   306  00FFA3  6E                 	db	110	;'n'
   307  00FFA4  65                 	db	101	;'e'
   308  00FFA5  63                 	db	99	;'c'
   309  00FFA6  74                 	db	116	;'t'
   310  00FFA7  20                 	db	32
   311  00FFA8  52                 	db	82	;'R'
   312  00FFA9  41                 	db	65	;'A'
   313  00FFAA  34                 	db	52	;'4'
   314  00FFAB  20                 	db	32
   315  00FFAC  74                 	db	116	;'t'
   316  00FFAD  6F                 	db	111	;'o'
   317  00FFAE  20                 	db	32
   318  00FFAF  45                 	db	69	;'E'
   319  00FFB0  6E                 	db	110	;'n'
   320  00FFB1  63                 	db	99	;'c'
   321  00FFB2  6F                 	db	111	;'o'
   322  00FFB3  64                 	db	100	;'d'
   323  00FFB4  65                 	db	101	;'e'
   324  00FFB5  72                 	db	114	;'r'
   325  00FFB6  20                 	db	32
   326  00FFB7  42                 	db	66	;'B'
   327  00FFB8  0D                 	db	13
   328  00FFB9  0A                 	db	10
   329  00FFBA  00                 	db	0
   330  00FFBB                     STR_6:
   331                           
   332                           ; BSR set to: 15
   333  00FFBB  45                 	db	69	;'E'
   334  00FFBC  6E                 	db	110	;'n'
   335  00FFBD  63                 	db	99	;'c'
   336  00FFBE  6F                 	db	111	;'o'
   337  00FFBF  64                 	db	100	;'d'
   338  00FFC0  65                 	db	101	;'e'
   339  00FFC1  72                 	db	114	;'r'
   340  00FFC2  20                 	db	32
   341  00FFC3  50                 	db	80	;'P'
   342  00FFC4  6F                 	db	111	;'o'
   343  00FFC5  73                 	db	115	;'s'
   344  00FFC6  69                 	db	105	;'i'
   345  00FFC7  74                 	db	116	;'t'
   346  00FFC8  69                 	db	105	;'i'
   347  00FFC9  6F                 	db	111	;'o'
   348  00FFCA  6E                 	db	110	;'n'
   349  00FFCB  3A                 	db	58	;':'
   350  00FFCC  20                 	db	32
   351  00FFCD  25                 	db	37
   352  00FFCE  6C                 	db	108	;'l'
   353  00FFCF  64                 	db	100	;'d'
   354  00FFD0  0D                 	db	13
   355  00FFD1  0A                 	db	10
   356  00FFD2  00                 	db	0
   357  00FFD3                     STR_8:
   358                           
   359                           ; BSR set to: 15
   360  00FFD3  0A                 	db	10
   361  00FFD4  0A                 	db	10
   362  00FFD5  0A                 	db	10
   363  00FFD6  0A                 	db	10
   364  00FFD7  0A                 	db	10
   365  00FFD8  0A                 	db	10
   366  00FFD9  0A                 	db	10
   367  00FFDA  0A                 	db	10
   368  00FFDB  0A                 	db	10
   369  00FFDC  0A                 	db	10
   370  00FFDD  0A                 	db	10
   371  00FFDE  0A                 	db	10
   372  00FFDF  0A                 	db	10
   373  00FFE0  0A                 	db	10
   374  00FFE1  0A                 	db	10
   375  00FFE2  0A                 	db	10
   376  00FFE3  0A                 	db	10
   377  00FFE4  0A                 	db	10
   378  00FFE5  0A                 	db	10
   379  00FFE6  0A                 	db	10
   380  00FFE7  00                 	db	0
   381  00FFE8                     STR_9:
   382                           
   383                           ; BSR set to: 15
   384  00FFE8  55                 	db	85	;'U'
   385  00FFE9  6E                 	db	110	;'n'
   386  00FFEA  6B                 	db	107	;'k'
   387  00FFEB  6E                 	db	110	;'n'
   388  00FFEC  6F                 	db	111	;'o'
   389  00FFED  77                 	db	119	;'w'
   390  00FFEE  6E                 	db	110	;'n'
   391  00FFEF  20                 	db	32
   392  00FFF0  6B                 	db	107	;'k'
   393  00FFF1  65                 	db	101	;'e'
   394  00FFF2  79                 	db	121	;'y'
   395  00FFF3  20                 	db	32
   396  00FFF4  25                 	db	37
   397  00FFF5  63                 	db	99	;'c'
   398  00FFF6  0D                 	db	13
   399  00FFF7  0A                 	db	10
   400  00FFF8  00                 	db	0
   401  00FFF9                     STR_7:
   402                           
   403                           ; BSR set to: 15
   404  00FFF9  20                 	db	32
   405  00FFFA  6B                 	db	107	;'k'
   406  00FFFB  0D                 	db	13
   407  00FFFC  0A                 	db	10
   408  00FFFD  00                 	db	0
   409                           
   410                           ; #config settings
   411  00FFFE  00                 	db	0	; dummy byte at the end
   412  0000                     
   413                           	psect	cinit
   414  0005FE                     __pcinit:
   415                           	opt stack 0
   416  0005FE                     start_initialization:
   417                           	opt stack 0
   418  0005FE                     __initialization:
   419                           	opt stack 0
   420                           
   421                           ; Initialize objects allocated to COMRAM (2 bytes)
   422                           ; load TBLPTR registers with __pidataCOMRAM
   423  0005FE  0EC0               	movlw	low __pidataCOMRAM
   424  000600  6EF6               	movwf	tblptrl,c
   425  000602  0E07               	movlw	high __pidataCOMRAM
   426  000604  6EF7               	movwf	tblptrh,c
   427  000606  0E00               	movlw	low (__pidataCOMRAM shr (0+16))
   428  000608  6EF8               	movwf	tblptru,c
   429  00060A  0009               	tblrd		*+	;fetch initializer
   430  00060C  CFF5 F043          	movff	tablat,__pdataCOMRAM
   431  000610  0009               	tblrd		*+	;fetch initializer
   432  000612  CFF5 F044          	movff	tablat,__pdataCOMRAM+1
   433                           
   434                           ; Clear objects allocated to COMRAM (13 bytes)
   435  000616  EE00  F036         	lfsr	0,__pbssCOMRAM
   436  00061A  0E0D               	movlw	13
   437  00061C                     clear_0:
   438  00061C  6AEE               	clrf	postinc0,c
   439  00061E  06E8               	decf	wreg,f,c
   440  000620  E1FD               	bnz	clear_0
   441  000622                     end_of_initialization:
   442                           	opt stack 0
   443  000622                     __end_of__initialization:
   444                           	opt stack 0
   445  000622  9045               	bcf	int$flags,0,c	;clear compiler interrupt flag (level 1)
   446  000624  9245               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
   447  000626  0100               	movlb	0
   448  000628  EF84  F001         	goto	_main	;jump to C main() function
   449                           tblptru	equ	0xFF8
   450                           tblptrh	equ	0xFF7
   451                           tblptrl	equ	0xFF6
   452                           tablat	equ	0xFF5
   453                           postinc0	equ	0xFEE
   454                           wreg	equ	0xFE8
   455                           
   456                           	psect	bssCOMRAM
   457  000036                     __pbssCOMRAM:
   458                           	opt stack 0
   459  000036                     _encoderPosition:
   460                           	opt stack 0
   461  000036                     	ds	4
   462  00003A                     _timer3ReloadVal:
   463                           	opt stack 0
   464  00003A                     	ds	2
   465  00003C                     _timer0ReloadVal:
   466                           	opt stack 0
   467  00003C                     	ds	2
   468  00003E                     _TMR0_InterruptHandler:
   469                           	opt stack 0
   470  00003E                     	ds	2
   471  000040                     TMR0_DefaultInterruptHandler@pulseHigh:
   472                           	opt stack 0
   473  000040                     	ds	1
   474  000041                     _encoderB:
   475                           	opt stack 0
   476  000041                     	ds	1
   477  000042                     _encoderA:
   478                           	opt stack 0
   479  000042                     	ds	1
   480                           tblptru	equ	0xFF8
   481                           tblptrh	equ	0xFF7
   482                           tblptrl	equ	0xFF6
   483                           tablat	equ	0xFF5
   484                           postinc0	equ	0xFEE
   485                           wreg	equ	0xFE8
   486                           
   487                           	psect	dataCOMRAM
   488  000043                     __pdataCOMRAM:
   489                           	opt stack 0
   490  000043                     _yawPosition:
   491                           	opt stack 0
   492  000043                     	ds	2
   493                           tblptru	equ	0xFF8
   494                           tblptrh	equ	0xFF7
   495                           tblptrl	equ	0xFF6
   496                           tablat	equ	0xFF5
   497                           postinc0	equ	0xFEE
   498                           wreg	equ	0xFE8
   499                           
   500                           	psect	cstackBANK0
   501  000060                     __pcstackBANK0:
   502                           	opt stack 0
   503  000060                     printf@prec:
   504                           	opt stack 0
   505                           
   506                           ; 2 bytes @ 0x0
   507  000060                     	ds	2
   508  000062                     printf@val:
   509                           	opt stack 0
   510                           
   511                           ; 4 bytes @ 0x2
   512  000062                     	ds	4
   513  000066                     printf@flag:
   514                           	opt stack 0
   515                           
   516                           ; 1 bytes @ 0x6
   517  000066                     	ds	1
   518  000067                     printf@ap:
   519                           	opt stack 0
   520                           
   521                           ; 2 bytes @ 0x7
   522  000067                     	ds	2
   523  000069                     printf@c:
   524                           	opt stack 0
   525                           
   526                           ; 1 bytes @ 0x9
   527  000069                     	ds	1
   528                           tblptru	equ	0xFF8
   529                           tblptrh	equ	0xFF7
   530                           tblptrl	equ	0xFF6
   531                           tablat	equ	0xFF5
   532                           postinc0	equ	0xFEE
   533                           wreg	equ	0xFE8
   534                           
   535                           	psect	cstackCOMRAM
   536  000001                     __pcstackCOMRAM:
   537                           	opt stack 0
   538  000001                     CCP4_CallBack@capturedValue:
   539                           	opt stack 0
   540  000001                     CCP5_CallBack@capturedValue:
   541                           	opt stack 0
   542  000001                     TMR0_WriteTimer@timerVal:
   543                           	opt stack 0
   544                           
   545                           ; 2 bytes @ 0x0
   546  000001                     	ds	2
   547  000003                     ??_TMR0_DefaultInterruptHandler:
   548  000003                     CCP5_CaptureISR@module:
   549                           	opt stack 0
   550  000003                     CCP4_CaptureISR@module:
   551                           	opt stack 0
   552                           
   553                           ; 2 bytes @ 0x2
   554  000003                     	ds	2
   555  000005                     ??_INTERRUPT_InterruptManager:
   556                           
   557                           ; 1 bytes @ 0x4
   558  000005                     	ds	18
   559  000017                     ?___lldiv:
   560                           	opt stack 0
   561  000017                     EUSART2_Write@txData:
   562                           	opt stack 0
   563  000017                     setYawServo@pos:
   564                           	opt stack 0
   565  000017                     TMR0_SetInterruptHandler@InterruptHandler:
   566                           	opt stack 0
   567  000017                     ___lldiv@dividend:
   568                           	opt stack 0
   569                           
   570                           ; 4 bytes @ 0x16
   571  000017                     	ds	1
   572  000018                     putch@txData:
   573                           	opt stack 0
   574                           
   575                           ; 1 bytes @ 0x17
   576  000018                     	ds	1
   577  000019                     ??_TMR0_Initialize:
   578  000019                     
   579                           ; 1 bytes @ 0x18
   580  000019                     	ds	2
   581  00001B                     ___lldiv@divisor:
   582                           	opt stack 0
   583                           
   584                           ; 4 bytes @ 0x1A
   585  00001B                     	ds	4
   586  00001F                     ___lldiv@quotient:
   587                           	opt stack 0
   588                           
   589                           ; 4 bytes @ 0x1E
   590  00001F                     	ds	4
   591  000023                     ___lldiv@counter:
   592                           	opt stack 0
   593                           
   594                           ; 1 bytes @ 0x22
   595  000023                     	ds	1
   596  000024                     ?___llmod:
   597                           	opt stack 0
   598  000024                     ___llmod@dividend:
   599                           	opt stack 0
   600                           
   601                           ; 4 bytes @ 0x23
   602  000024                     	ds	4
   603  000028                     ___llmod@divisor:
   604                           	opt stack 0
   605                           
   606                           ; 4 bytes @ 0x27
   607  000028                     	ds	4
   608  00002C                     ___llmod@counter:
   609                           	opt stack 0
   610                           
   611                           ; 1 bytes @ 0x2B
   612  00002C                     	ds	1
   613  00002D                     ?_printf:
   614                           	opt stack 0
   615  00002D                     printf@f:
   616                           	opt stack 0
   617                           
   618                           ; 2 bytes @ 0x2C
   619  00002D                     	ds	6
   620  000033                     ??_printf:
   621                           
   622                           ; 1 bytes @ 0x32
   623  000033                     	ds	2
   624  000035                     main@cmd:
   625                           	opt stack 0
   626                           
   627                           ; 1 bytes @ 0x34
   628  000035                     	ds	1
   629                           tblptru	equ	0xFF8
   630                           tblptrh	equ	0xFF7
   631                           tblptrl	equ	0xFF6
   632                           tablat	equ	0xFF5
   633                           postinc0	equ	0xFEE
   634                           wreg	equ	0xFE8
   635                           
   636 ;;
   637 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
   638 ;;
   639 ;; *************** function _main *****************
   640 ;; Defined at:
   641 ;;		line 20 in file "main.c"
   642 ;; Parameters:    Size  Location     Type
   643 ;;		None
   644 ;; Auto vars:     Size  Location     Type
   645 ;;  cmd             1   52[COMRAM] unsigned char 
   646 ;; Return value:  Size  Location     Type
   647 ;;                  1    wreg      void 
   648 ;; Registers used:
   649 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
   650 ;; Tracked objects:
   651 ;;		On entry : 0/0
   652 ;;		On exit  : 0/0
   653 ;;		Unchanged: 0/0
   654 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
   655 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   656 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   657 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   658 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   659 ;;Total ram usage:        1 bytes
   660 ;; Hardware stack levels required when called:    7
   661 ;; This function calls:
   662 ;;		_EUSART2_Read
   663 ;;		_EUSART2_is_rx_ready
   664 ;;		_SYSTEM_Initialize
   665 ;;		_printf
   666 ;;		_setYawServo
   667 ;; This function is called by:
   668 ;;		Startup code after reset
   669 ;; This function uses a non-reentrant model
   670 ;;
   671                           
   672                           	psect	text0
   673  000308                     __ptext0:
   674                           	opt stack 0
   675  000308                     _main:
   676                           	opt stack 24
   677                           
   678                           ;main.c: 21: char cmd;
   679                           ;main.c: 22: (INTCONbits.GIE = 1);
   680                           
   681                           ;incstack = 0
   682  000308  8EF2               	bsf	intcon,7,c	;volatile
   683                           
   684                           ;main.c: 23: (INTCONbits.PEIE = 1);
   685  00030A  8CF2               	bsf	intcon,6,c	;volatile
   686                           
   687                           ;main.c: 25: SYSTEM_Initialize();
   688  00030C  EC54  F003         	call	_SYSTEM_Initialize	;wreg free
   689  000310                     
   690                           ;main.c: 29: if ((EUSART2_is_rx_ready())) {
   691  000310  ECC9  F003         	call	_EUSART2_is_rx_ready	;wreg free
   692  000314  0900               	iorlw	0
   693  000316  B4D8               	btfsc	status,2,c
   694  000318  D7FB               	goto	l128
   695                           
   696                           ;main.c: 30: cmd = EUSART2_Read();
   697  00031A  ECBB  F003         	call	_EUSART2_Read	;wreg free
   698  00031E  6E35               	movwf	main@cmd,c
   699                           
   700                           ;main.c: 31: switch (cmd) {
   701  000320  D069               	goto	l130
   702  000322                     
   703                           ;main.c: 33: printf("Connect RA1 to Servo Data\r\n");
   704  000322  0E69               	movlw	low STR_1
   705  000324  6E2D               	movwf	printf@f,c
   706  000326  0EFF               	movlw	high STR_1
   707  000328  6E2E               	movwf	printf@f+1,c
   708  00032A  EC64  F000         	call	_printf	;wreg free
   709                           
   710                           ;main.c: 34: printf("Connect RB0 to Encoder A\r\n");
   711  00032E  0E85               	movlw	low STR_2
   712  000330  6E2D               	movwf	printf@f,c
   713  000332  0EFF               	movlw	high STR_2
   714  000334  6E2E               	movwf	printf@f+1,c
   715  000336  EC64  F000         	call	_printf	;wreg free
   716                           
   717                           ;main.c: 35: printf("Connect RA4 to Encoder B\r\n");
   718  00033A  0EA0               	movlw	low STR_3
   719  00033C  6E2D               	movwf	printf@f,c
   720  00033E  0EFF               	movlw	high STR_3
   721  000340  6E2E               	movwf	printf@f+1,c
   722  000342  EC64  F000         	call	_printf	;wreg free
   723                           
   724                           ;main.c: 36: break;
   725  000346  D7E4               	goto	l128
   726  000348                     
   727                           ;main.c: 38: setYawServo(yawPosition+100);
   728  000348  0E64               	movlw	100
   729  00034A  2443               	addwf	_yawPosition,w,c
   730  00034C  6E17               	movwf	setYawServo@pos,c
   731  00034E  0E00               	movlw	0
   732  000350  2044               	addwfc	_yawPosition+1,w,c
   733  000352  6E18               	movwf	setYawServo@pos+1,c
   734  000354  ECE6  F002         	call	_setYawServo	;wreg free
   735                           
   736                           ;main.c: 39: printf("Incrementing Servo Position: %u\r\n",yawPosition);
   737  000358  0E47               	movlw	low STR_4
   738  00035A  6E2D               	movwf	printf@f,c
   739  00035C  0EFF               	movlw	high STR_4
   740  00035E  6E2E               	movwf	printf@f+1,c
   741  000360  C043  F02F         	movff	_yawPosition,?_printf+2
   742  000364  C044  F030         	movff	_yawPosition+1,?_printf+3
   743  000368  EC64  F000         	call	_printf	;wreg free
   744                           
   745                           ;main.c: 40: break;
   746  00036C  D7D1               	goto	l128
   747  00036E                     
   748                           ;main.c: 42: setYawServo(yawPosition-100);
   749  00036E  0E9C               	movlw	156
   750  000370  2443               	addwf	_yawPosition,w,c
   751  000372  6E17               	movwf	setYawServo@pos,c
   752  000374  0EFF               	movlw	255
   753  000376  2044               	addwfc	_yawPosition+1,w,c
   754  000378  6E18               	movwf	setYawServo@pos+1,c
   755  00037A  ECE6  F002         	call	_setYawServo	;wreg free
   756                           
   757                           ;main.c: 43: printf("Decrementing Servo Position: %u\r\n",yawPosition);
   758  00037E  0E25               	movlw	low STR_5
   759  000380  6E2D               	movwf	printf@f,c
   760  000382  0EFF               	movlw	high STR_5
   761  000384  6E2E               	movwf	printf@f+1,c
   762  000386  C043  F02F         	movff	_yawPosition,?_printf+2
   763  00038A  C044  F030         	movff	_yawPosition+1,?_printf+3
   764  00038E  EC64  F000         	call	_printf	;wreg free
   765                           
   766                           ;main.c: 44: break;
   767  000392  D7BE               	goto	l128
   768  000394                     
   769                           ;main.c: 47: printf("Encoder Position: %ld\r\n",encoderPosition);
   770  000394  0EBB               	movlw	low STR_6
   771  000396  6E2D               	movwf	printf@f,c
   772  000398  0EFF               	movlw	high STR_6
   773  00039A  6E2E               	movwf	printf@f+1,c
   774  00039C  C036  F02F         	movff	_encoderPosition,?_printf+2
   775  0003A0  C037  F030         	movff	_encoderPosition+1,?_printf+3
   776  0003A4  C038  F031         	movff	_encoderPosition+2,?_printf+4
   777  0003A8  C039  F032         	movff	_encoderPosition+3,?_printf+5
   778  0003AC  EC64  F000         	call	_printf	;wreg free
   779  0003B0  ECC9  F003         	call	_EUSART2_is_rx_ready	;wreg free
   780  0003B4  0900               	iorlw	0
   781  0003B6  B4D8               	btfsc	status,2,c
   782  0003B8  D7ED               	goto	l137
   783                           
   784                           ;main.c: 48: }
   785                           ;main.c: 49: EUSART2_Read();
   786  0003BA  ECBB  F003         	call	_EUSART2_Read	;wreg free
   787                           
   788                           ;main.c: 50: break;
   789  0003BE  D7A8               	goto	l128
   790  0003C0                     
   791                           ;main.c: 52: printf(" k\r\n");
   792  0003C0  0EF9               	movlw	low STR_7
   793  0003C2  6E2D               	movwf	printf@f,c
   794  0003C4  0EFF               	movlw	high STR_7
   795  0003C6  6E2E               	movwf	printf@f+1,c
   796  0003C8  EC64  F000         	call	_printf	;wreg free
   797                           
   798                           ;main.c: 53: break;
   799  0003CC  D7A1               	goto	l128
   800  0003CE                     
   801                           ;main.c: 55: printf("\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n");
   802  0003CE  0ED3               	movlw	low STR_8
   803  0003D0  6E2D               	movwf	printf@f,c
   804  0003D2  0EFF               	movlw	high STR_8
   805  0003D4  6E2E               	movwf	printf@f+1,c
   806  0003D6  EC64  F000         	call	_printf	;wreg free
   807                           
   808                           ;main.c: 56: break;
   809  0003DA  D79A               	goto	l128
   810  0003DC                     l141:
   811  0003DC  00FF               	reset		;# 
   812                           
   813                           ;main.c: 59: break;
   814  0003DE  D798               	goto	l128
   815  0003E0                     
   816                           ;main.c: 61: printf("Unknown key %c\r\n",cmd);
   817  0003E0  0EE8               	movlw	low STR_9
   818  0003E2  6E2D               	movwf	printf@f,c
   819  0003E4  0EFF               	movlw	high STR_9
   820  0003E6  6E2E               	movwf	printf@f+1,c
   821  0003E8  C035  F02F         	movff	main@cmd,?_printf+2
   822  0003EC  6A30               	clrf	?_printf+3,c
   823  0003EE  EC64  F000         	call	_printf	;wreg free
   824                           
   825                           ;main.c: 63: }
   826                           
   827                           ;main.c: 62: break;
   828  0003F2  D78E               	goto	l128
   829  0003F4                     l130:
   830  0003F4  5035               	movf	main@cmd,w,c
   831                           
   832                           ; Switch size 1, requested type "space"
   833                           ; Number of cases is 7, Range of values is 63 to 122
   834                           ; switch strategies available:
   835                           ; Name         Instructions Cycles
   836                           ; simple_byte           22    12 (average)
   837                           ;	Chosen strategy is simple_byte
   838  0003F6  0A3F               	xorlw	63	; case 63
   839  0003F8  B4D8               	btfsc	status,2,c
   840  0003FA  D793               	goto	l131
   841  0003FC  0A7A               	xorlw	122	; case 69
   842  0003FE  B4D8               	btfsc	status,2,c
   843  000400  D7D7               	goto	l136
   844  000402  0A16               	xorlw	22	; case 83
   845  000404  B4D8               	btfsc	status,2,c
   846  000406  D7A0               	goto	l133
   847  000408  0A09               	xorlw	9	; case 90
   848  00040A  B4D8               	btfsc	status,2,c
   849  00040C  D7E7               	goto	l141
   850  00040E  0A35               	xorlw	53	; case 111
   851  000410  B4D8               	btfsc	status,2,c
   852  000412  D7D6               	goto	l139
   853  000414  0A1C               	xorlw	28	; case 115
   854  000416  B4D8               	btfsc	status,2,c
   855  000418  D7AA               	goto	l134
   856  00041A  0A09               	xorlw	9	; case 122
   857  00041C  B4D8               	btfsc	status,2,c
   858  00041E  D7D7               	goto	l140
   859  000420  D7DF               	goto	l142
   860  000422                     __end_of_main:
   861                           	opt stack 0
   862                           tblptru	equ	0xFF8
   863                           tblptrh	equ	0xFF7
   864                           tblptrl	equ	0xFF6
   865                           tablat	equ	0xFF5
   866                           intcon	equ	0xFF2
   867                           postinc0	equ	0xFEE
   868                           wreg	equ	0xFE8
   869                           status	equ	0xFD8
   870                           
   871 ;; *************** function _setYawServo *****************
   872 ;; Defined at:
   873 ;;		line 69 in file "main.c"
   874 ;; Parameters:    Size  Location     Type
   875 ;;  pos             2   22[COMRAM] unsigned int 
   876 ;; Auto vars:     Size  Location     Type
   877 ;;		None
   878 ;; Return value:  Size  Location     Type
   879 ;;                  1    wreg      void 
   880 ;; Registers used:
   881 ;;		wreg, status,2, status,0
   882 ;; Tracked objects:
   883 ;;		On entry : 0/0
   884 ;;		On exit  : 0/0
   885 ;;		Unchanged: 0/0
   886 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
   887 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   888 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   889 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   890 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   891 ;;Total ram usage:        2 bytes
   892 ;; Hardware stack levels used:    1
   893 ;; Hardware stack levels required when called:    4
   894 ;; This function calls:
   895 ;;		Nothing
   896 ;; This function is called by:
   897 ;;		_main
   898 ;; This function uses a non-reentrant model
   899 ;;
   900                           
   901                           	psect	text1
   902  0005CC                     __ptext1:
   903                           	opt stack 0
   904  0005CC                     _setYawServo:
   905                           	opt stack 26
   906                           
   907                           ;main.c: 71: if(pos < 1106){
   908                           
   909                           ;incstack = 0
   910  0005CC  0E52               	movlw	82
   911  0005CE  5C17               	subwf	setYawServo@pos,w,c
   912  0005D0  0E04               	movlw	4
   913  0005D2  5818               	subwfb	setYawServo@pos+1,w,c
   914  0005D4  B0D8               	btfsc	status,0,c
   915  0005D6  D004               	goto	l147
   916                           
   917                           ;main.c: 72: pos = 1106;
   918  0005D8  0E04               	movlw	4
   919  0005DA  6E18               	movwf	setYawServo@pos+1,c
   920  0005DC  0E52               	movlw	82
   921  0005DE  D009               	goto	L1
   922  0005E0                     l147:
   923                           
   924                           ;main.c: 74: else if(pos > 4900){
   925  0005E0  0E25               	movlw	37
   926  0005E2  5C17               	subwf	setYawServo@pos,w,c
   927  0005E4  0E13               	movlw	19
   928  0005E6  5818               	subwfb	setYawServo@pos+1,w,c
   929  0005E8  A0D8               	btfss	status,0,c
   930  0005EA  D004               	goto	l149
   931                           
   932                           ;main.c: 75: pos = 4900;
   933  0005EC  0E13               	movlw	19
   934  0005EE  6E18               	movwf	setYawServo@pos+1,c
   935  0005F0  0E24               	movlw	36
   936  0005F2                     L1:
   937  0005F2  6E17               	movwf	setYawServo@pos,c
   938  0005F4                     l149:
   939                           
   940                           ;main.c: 76: }
   941                           ;main.c: 78: yawPosition = pos;
   942  0005F4  C017  F043         	movff	setYawServo@pos,_yawPosition
   943  0005F8  C018  F044         	movff	setYawServo@pos+1,_yawPosition+1
   944  0005FC  0012               	return		;funcret
   945  0005FE                     __end_of_setYawServo:
   946                           	opt stack 0
   947                           tblptru	equ	0xFF8
   948                           tblptrh	equ	0xFF7
   949                           tblptrl	equ	0xFF6
   950                           tablat	equ	0xFF5
   951                           intcon	equ	0xFF2
   952                           postinc0	equ	0xFEE
   953                           wreg	equ	0xFE8
   954                           status	equ	0xFD8
   955                           
   956 ;; *************** function _printf *****************
   957 ;; Defined at:
   958 ;;		line 464 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\doprnt.c"
   959 ;; Parameters:    Size  Location     Type
   960 ;;  f               2   44[COMRAM] PTR const unsigned char 
   961 ;;		 -> STR_9(17), STR_8(21), STR_7(5), STR_6(24), 
   962 ;;		 -> STR_5(34), STR_4(34), STR_3(27), STR_2(27), 
   963 ;;		 -> STR_1(28), 
   964 ;; Auto vars:     Size  Location     Type
   965 ;;  val             4    2[BANK0 ] unsigned long 
   966 ;;  tmpval          4    0        struct .
   967 ;;  cp              3    0        PTR const unsigned char 
   968 ;;  ap              2    7[BANK0 ] PTR void [1]
   969 ;;		 -> ?_printf(2), 
   970 ;;  prec            2    0[BANK0 ] int 
   971 ;;  len             2    0        unsigned int 
   972 ;;  c               1    9[BANK0 ] char 
   973 ;;  flag            1    6[BANK0 ] unsigned char 
   974 ;; Return value:  Size  Location     Type
   975 ;;                  2   44[COMRAM] int 
   976 ;; Registers used:
   977 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
   978 ;; Tracked objects:
   979 ;;		On entry : 0/0
   980 ;;		On exit  : 0/0
   981 ;;		Unchanged: 0/0
   982 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
   983 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   984 ;;      Locals:         0      10       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   985 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   986 ;;      Totals:         8      10       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   987 ;;Total ram usage:       18 bytes
   988 ;; Hardware stack levels used:    1
   989 ;; Hardware stack levels required when called:    6
   990 ;; This function calls:
   991 ;;		___lldiv
   992 ;;		___llmod
   993 ;;		_putch
   994 ;; This function is called by:
   995 ;;		_main
   996 ;; This function uses a non-reentrant model
   997 ;;
   998                           
   999                           	psect	text2
  1000  0000C8                     __ptext2:
  1001                           	opt stack 0
  1002  0000C8                     _printf:
  1003                           	opt stack 24
  1004                           
  1005                           ;doprnt.c: 466: va_list ap;
  1006                           ;doprnt.c: 499: signed char c;
  1007                           ;doprnt.c: 504: int prec;
  1008                           ;doprnt.c: 508: unsigned char flag;
  1009                           ;doprnt.c: 523: union {
  1010                           ;doprnt.c: 524: unsigned long vd;
  1011                           ;doprnt.c: 525: double integ;
  1012                           ;doprnt.c: 526: } tmpval;
  1013                           ;doprnt.c: 528: unsigned long val;
  1014                           ;doprnt.c: 529: unsigned len;
  1015                           ;doprnt.c: 530: const char * cp;
  1016                           ;doprnt.c: 533: *ap = __va_start();
  1017                           
  1018                           ;incstack = 0
  1019  0000C8  0E2F               	movlw	low (?_printf+2)
  1020  0000CA  0100               	movlb	0	; () banked
  1021  0000CC  6F67               	movwf	printf@ap& (0+255),b
  1022  0000CE  0E00               	movlw	high (?_printf+2)
  1023  0000D0  6F68               	movwf	(printf@ap+1)& (0+255),b
  1024                           
  1025                           ;doprnt.c: 536: while(c = *f++) {
  1026  0000D2  D10B               	goto	u930
  1027  0000D4                     
  1028                           ; BSR set to: 0
  1029                           ;doprnt.c: 538: if(c != '%')
  1030                           
  1031                           ; BSR set to: 0
  1032  0000D4  0E25               	movlw	37
  1033  0000D6  1969               	xorwf	printf@c& (0+255),w,b
  1034  0000D8  B4D8               	btfsc	status,2,c
  1035  0000DA  D004               	goto	l369
  1036                           
  1037                           ; BSR set to: 0
  1038                           ;doprnt.c: 540: {
  1039                           ;doprnt.c: 541: (putch(c) );
  1040  0000DC  5169               	movf	printf@c& (0+255),w,b
  1041  0000DE  ECCF  F003         	call	_putch
  1042                           
  1043                           ;doprnt.c: 542: continue;
  1044  0000E2  D103               	goto	u930
  1045  0000E4                     l369:
  1046                           
  1047                           ;doprnt.c: 543: }
  1048                           ;doprnt.c: 548: flag = 0;
  1049  0000E4  0E00               	movlw	0
  1050  0000E6  0100               	movlb	0	; () banked
  1051  0000E8  6F66               	movwf	printf@flag& (0+255),b
  1052                           
  1053                           ; BSR set to: 0
  1054                           ;doprnt.c: 635: switch(c = *f++) {
  1055                           
  1056                           ;doprnt.c: 633: loop:
  1057  0000EA  D013               	goto	l371
  1058  0000EC                     
  1059                           ; BSR set to: 0
  1060                           ;doprnt.c: 643: flag |= 0x10;
  1061                           
  1062                           ; BSR set to: 0
  1063  0000EC  8966               	bsf	printf@flag& (0+255),4,b
  1064                           
  1065                           ;doprnt.c: 644: goto loop;
  1066  0000EE  D011               	goto	l371
  1067  0000F0                     
  1068                           ; BSR set to: 0
  1069                           ;doprnt.c: 799: c = (*(int *)__va_arg((*(int **)ap), (int)0));
  1070                           
  1071                           ; BSR set to: 0
  1072  0000F0  C067  FFD9         	movff	printf@ap,fsr2l
  1073  0000F4  C068  FFDA         	movff	printf@ap+1,fsr2h
  1074  0000F8  50DF               	movf	indf2,w,c
  1075  0000FA  6F69               	movwf	printf@c& (0+255),b
  1076                           
  1077                           ; BSR set to: 0
  1078  0000FC  0E02               	movlw	2
  1079  0000FE  2767               	addwf	printf@ap& (0+255),f,b
  1080  000100  0E00               	movlw	0
  1081  000102  2368               	addwfc	(printf@ap+1)& (0+255),f,b
  1082  000104                     
  1083                           ; BSR set to: 0
  1084                           ;doprnt.c: 809: (putch(c) );
  1085                           
  1086                           ; BSR set to: 0
  1087  000104  5169               	movf	printf@c& (0+255),w,b
  1088  000106  ECCF  F003         	call	_putch
  1089                           
  1090                           ;doprnt.c: 810: continue;
  1091  00010A  D0EF               	goto	u930
  1092  00010C                     
  1093                           ;doprnt.c: 818: flag |= 0x40;
  1094  00010C  0100               	movlb	0	; () banked
  1095  00010E  8D66               	bsf	printf@flag& (0+255),6,b
  1096                           
  1097                           ; BSR set to: 0
  1098                           ;doprnt.c: 822: }
  1099                           
  1100                           ;doprnt.c: 819: break;
  1101  000110  D01E               	goto	l377
  1102  000112                     l371:
  1103                           
  1104                           ; BSR set to: 0
  1105                           
  1106                           ; BSR set to: 0
  1107  000112  C02D  FFF6         	movff	printf@f,tblptrl
  1108  000116  C02E  FFF7         	movff	printf@f+1,tblptrh
  1109  00011A  4A2D               	infsnz	printf@f,f,c
  1110  00011C  2A2E               	incf	printf@f+1,f,c
  1111  00011E                     	if	1	;Program memory is < 0x10000, tblptru is always zero
  1112  00011E  6AF8               	clrf	tblptru,c
  1113  000120                     	endif
  1114  000120                     	if	0	;tblptru may be non-zero
  1115  000120                     	endif
  1116  000120  0008               	tblrd		*
  1117  000122  CFF5 F069          	movff	tablat,printf@c
  1118  000126  5169               	movf	printf@c& (0+255),w,b
  1119                           
  1120                           ; Switch size 1, requested type "space"
  1121                           ; Number of cases is 6, Range of values is 0 to 117
  1122                           ; switch strategies available:
  1123                           ; Name         Instructions Cycles
  1124                           ; simple_byte           19    10 (average)
  1125                           ;	Chosen strategy is simple_byte
  1126  000128  0A00               	xorlw	0	; case 0
  1127  00012A  B4D8               	btfsc	status,2,c
  1128  00012C  0012               	return	
  1129  00012E  0A63               	xorlw	99	; case 99
  1130  000130  B4D8               	btfsc	status,2,c
  1131  000132  D7DE               	goto	l378
  1132  000134  0A07               	xorlw	7	; case 100
  1133  000136  B4D8               	btfsc	status,2,c
  1134  000138  D00A               	goto	l377
  1135  00013A  0A0D               	xorlw	13	; case 105
  1136  00013C  B4D8               	btfsc	status,2,c
  1137  00013E  D007               	goto	l377
  1138  000140  0A05               	xorlw	5	; case 108
  1139  000142  B4D8               	btfsc	status,2,c
  1140  000144  D7D3               	goto	l374
  1141  000146  0A19               	xorlw	25	; case 117
  1142  000148  B4D8               	btfsc	status,2,c
  1143  00014A  D7E0               	goto	l380
  1144  00014C  D7DB               	goto	l379
  1145  00014E                     l377:
  1146                           
  1147                           ; BSR set to: 0
  1148                           ;doprnt.c: 1251: if((flag & 0x40) == 0x00)
  1149  00014E  BD66               	btfsc	printf@flag& (0+255),6,b
  1150  000150  D02E               	goto	l381
  1151                           
  1152                           ; BSR set to: 0
  1153                           ;doprnt.c: 1253: {
  1154                           ;doprnt.c: 1255: if(flag & 0x10)
  1155  000152  A966               	btfss	printf@flag& (0+255),4,b
  1156  000154  D00E               	goto	l382
  1157                           
  1158                           ; BSR set to: 0
  1159                           ;doprnt.c: 1256: val = (*(long *)__va_arg((*(long **)ap), (long)0));
  1160  000156  C067  FFD9         	movff	printf@ap,fsr2l
  1161  00015A  C068  FFDA         	movff	printf@ap+1,fsr2h
  1162  00015E  CFDE F062          	movff	postinc2,printf@val
  1163  000162  CFDE F063          	movff	postinc2,printf@val+1
  1164  000166  CFDE F064          	movff	postinc2,printf@val+2
  1165  00016A  CFDE F065          	movff	postinc2,printf@val+3
  1166                           
  1167                           ; BSR set to: 0
  1168  00016E  0E04               	movlw	4
  1169  000170  D00E               	goto	L2
  1170  000172                     l382:
  1171                           
  1172                           ; BSR set to: 0
  1173                           ;doprnt.c: 1257: else
  1174                           ;doprnt.c: 1259: val = (long)(*(int *)__va_arg((*(int **)ap), (int)0));
  1175                           
  1176                           ; BSR set to: 0
  1177  000172  C067  FFD9         	movff	printf@ap,fsr2l
  1178  000176  C068  FFDA         	movff	printf@ap+1,fsr2h
  1179  00017A  CFDE F062          	movff	postinc2,printf@val
  1180  00017E  CFDD F063          	movff	postdec2,printf@val+1
  1181  000182  0E00               	movlw	0
  1182  000184  BF63               	btfsc	(printf@val+1)& (0+255),7,b
  1183  000186  0EFF               	movlw	-1
  1184  000188  6F64               	movwf	(printf@val+2)& (0+255),b
  1185  00018A  6F65               	movwf	(printf@val+3)& (0+255),b
  1186                           
  1187                           ; BSR set to: 0
  1188  00018C  0E02               	movlw	2
  1189  00018E                     L2:
  1190  00018E  2767               	addwf	printf@ap& (0+255),f,b
  1191  000190  0E00               	movlw	0
  1192  000192  2368               	addwfc	(printf@ap+1)& (0+255),f,b
  1193                           
  1194                           ; BSR set to: 0
  1195                           ;doprnt.c: 1261: if((long)val < 0) {
  1196                           
  1197                           ; BSR set to: 0
  1198  000194  AF65               	btfss	(printf@val+3)& (0+255),7,b
  1199  000196  D02D               	goto	l387
  1200                           
  1201                           ; BSR set to: 0
  1202                           ;doprnt.c: 1262: flag |= 0x03;
  1203  000198  0E03               	movlw	3
  1204  00019A  1366               	iorwf	printf@flag& (0+255),f,b
  1205                           
  1206                           ; BSR set to: 0
  1207                           ;doprnt.c: 1263: val = -val;
  1208  00019C  1F65               	comf	(printf@val+3)& (0+255),f,b
  1209  00019E  1F64               	comf	(printf@val+2)& (0+255),f,b
  1210  0001A0  1F63               	comf	(printf@val+1)& (0+255),f,b
  1211  0001A2  6D62               	negf	printf@val& (0+255),b
  1212  0001A4  0E00               	movlw	0
  1213  0001A6  2363               	addwfc	(printf@val+1)& (0+255),f,b
  1214  0001A8  2364               	addwfc	(printf@val+2)& (0+255),f,b
  1215  0001AA  2365               	addwfc	(printf@val+3)& (0+255),f,b
  1216                           
  1217                           ; BSR set to: 0
  1218                           ;doprnt.c: 1264: }
  1219                           ;doprnt.c: 1266: }
  1220  0001AC  D022               	goto	l387
  1221  0001AE                     l381:
  1222                           
  1223                           ; BSR set to: 0
  1224                           ;doprnt.c: 1268: else
  1225                           ;doprnt.c: 1273: {
  1226                           ;doprnt.c: 1281: if(flag & 0x10)
  1227  0001AE  A966               	btfss	printf@flag& (0+255),4,b
  1228  0001B0  D00E               	goto	l386
  1229                           
  1230                           ; BSR set to: 0
  1231                           ;doprnt.c: 1282: val = (*(unsigned long *)__va_arg((*(unsigned long **)ap), (unsigned lo
      +                          ng)0));
  1232  0001B2  C067  FFD9         	movff	printf@ap,fsr2l
  1233  0001B6  C068  FFDA         	movff	printf@ap+1,fsr2h
  1234  0001BA  CFDE F062          	movff	postinc2,printf@val
  1235  0001BE  CFDE F063          	movff	postinc2,printf@val+1
  1236  0001C2  CFDE F064          	movff	postinc2,printf@val+2
  1237  0001C6  CFDE F065          	movff	postinc2,printf@val+3
  1238                           
  1239                           ; BSR set to: 0
  1240  0001CA  0E04               	movlw	4
  1241  0001CC  D00F               	goto	L3
  1242  0001CE                     l386:
  1243                           
  1244                           ; BSR set to: 0
  1245                           ;doprnt.c: 1283: else
  1246                           ;doprnt.c: 1286: val = (*(unsigned *)__va_arg((*(unsigned **)ap), (unsigned)0));
  1247                           
  1248                           ; BSR set to: 0
  1249  0001CE  C067  FFD9         	movff	printf@ap,fsr2l
  1250  0001D2  C068  FFDA         	movff	printf@ap+1,fsr2h
  1251  0001D6  CFDE F033          	movff	postinc2,??_printf
  1252  0001DA  CFDD F034          	movff	postdec2,??_printf+1
  1253  0001DE  C033  F062         	movff	??_printf,printf@val
  1254  0001E2  C034  F063         	movff	??_printf+1,printf@val+1
  1255  0001E6  6B64               	clrf	(printf@val+2)& (0+255),b
  1256  0001E8  6B65               	clrf	(printf@val+3)& (0+255),b
  1257                           
  1258                           ; BSR set to: 0
  1259  0001EA  0E02               	movlw	2
  1260  0001EC                     L3:
  1261  0001EC  2767               	addwf	printf@ap& (0+255),f,b
  1262  0001EE  0E00               	movlw	0
  1263  0001F0  2368               	addwfc	(printf@ap+1)& (0+255),f,b
  1264  0001F2                     l387:
  1265                           
  1266                           ; BSR set to: 0
  1267                           ;doprnt.c: 1287: }
  1268                           ;doprnt.c: 1305: for(c = 1 ; c != sizeof dpowers/sizeof dpowers[0] ; c++)
  1269                           
  1270                           ; BSR set to: 0
  1271                           
  1272                           ; BSR set to: 0
  1273  0001F2  0E01               	movlw	1
  1274  0001F4  6F69               	movwf	printf@c& (0+255),b
  1275  0001F6                     l1740:
  1276                           
  1277                           ; BSR set to: 0
  1278  0001F6  0E0A               	movlw	10
  1279  0001F8  1969               	xorwf	printf@c& (0+255),w,b
  1280  0001FA  B4D8               	btfsc	status,2,c
  1281  0001FC  D01B               	goto	u910
  1282                           
  1283                           ; BSR set to: 0
  1284                           ;doprnt.c: 1306: if(val < dpowers[c])
  1285                           
  1286                           ; BSR set to: 0
  1287                           
  1288                           ; BSR set to: 0
  1289  0001FE  5169               	movf	printf@c& (0+255),w,b
  1290  000200  0D04               	mullw	4
  1291  000202  0EFD               	movlw	low _dpowers
  1292  000204  24F3               	addwf	prodl,w,c
  1293  000206  6EF6               	movwf	tblptrl,c
  1294  000208  0EFE               	movlw	high _dpowers
  1295  00020A  20F4               	addwfc	prodh,w,c
  1296  00020C  6EF7               	movwf	tblptrh,c
  1297  00020E                     	if	1	;There are 3 active tblptr bytes
  1298  00020E  6AF8               	clrf	tblptru,c
  1299  000210  0E00               	movlw	low (__mediumconst shr (0+16))
  1300  000212  22F8               	addwfc	tblptru,f,c
  1301  000214                     	endif
  1302  000214  0009               	tblrd		*+
  1303  000216  50F5               	movf	tablat,w,c
  1304  000218  5D62               	subwf	printf@val& (0+255),w,b
  1305  00021A  0009               	tblrd		*+
  1306  00021C  50F5               	movf	tablat,w,c
  1307  00021E  5963               	subwfb	(printf@val+1)& (0+255),w,b
  1308  000220  0009               	tblrd		*+
  1309  000222  50F5               	movf	tablat,w,c
  1310  000224  5964               	subwfb	(printf@val+2)& (0+255),w,b
  1311  000226  0009               	tblrd		*+
  1312  000228  50F5               	movf	tablat,w,c
  1313  00022A  5965               	subwfb	(printf@val+3)& (0+255),w,b
  1314  00022C  A0D8               	btfss	status,0,c
  1315  00022E  D002               	goto	u910
  1316                           
  1317                           ; BSR set to: 0
  1318                           
  1319                           ; BSR set to: 0
  1320                           
  1321                           ; BSR set to: 0
  1322                           ;doprnt.c: 1307: break;
  1323  000230  2B69               	incf	printf@c& (0+255),f,b
  1324  000232  D7E1               	goto	l1740
  1325  000234                     u910:
  1326                           
  1327                           ; BSR set to: 0
  1328                           ;doprnt.c: 1422: {
  1329                           ;doprnt.c: 1438: if(flag & 0x03)
  1330                           
  1331                           ; BSR set to: 0
  1332  000234  C066  F033         	movff	printf@flag,??_printf
  1333  000238  0E03               	movlw	3
  1334  00023A  1633               	andwf	??_printf,f,c
  1335  00023C  B4D8               	btfsc	status,2,c
  1336  00023E  D003               	goto	l391
  1337                           
  1338                           ; BSR set to: 0
  1339                           ;doprnt.c: 1439: (putch('-') );
  1340  000240  0E2D               	movlw	45
  1341  000242  ECCF  F003         	call	_putch
  1342  000246                     l391:
  1343                           
  1344                           ;doprnt.c: 1469: }
  1345                           ;doprnt.c: 1472: prec = c;
  1346  000246  0100               	movlb	0	; () banked
  1347  000248  5169               	movf	printf@c& (0+255),w,b
  1348  00024A  6F60               	movwf	printf@prec& (0+255),b
  1349  00024C  6B61               	clrf	(printf@prec+1)& (0+255),b
  1350  00024E  BF60               	btfsc	printf@prec& (0+255),7,b
  1351  000250  0761               	decf	(printf@prec+1)& (0+255),f,b
  1352                           
  1353                           ;doprnt.c: 1474: while(prec--) {
  1354  000252  D042               	goto	l392
  1355  000254                     l1758:
  1356                           
  1357                           ; BSR set to: 0
  1358                           ;doprnt.c: 1478: {
  1359                           ;doprnt.c: 1489: c = (val / dpowers[prec]) % 10 + '0';
  1360  000254  C060  F033         	movff	printf@prec,??_printf
  1361  000258  C061  F034         	movff	printf@prec+1,??_printf+1
  1362  00025C  90D8               	bcf	status,0,c
  1363  00025E  3633               	rlcf	??_printf,f,c
  1364  000260  3634               	rlcf	??_printf+1,f,c
  1365  000262  90D8               	bcf	status,0,c
  1366  000264  3633               	rlcf	??_printf,f,c
  1367  000266  3634               	rlcf	??_printf+1,f,c
  1368  000268  0EFD               	movlw	low _dpowers
  1369  00026A  2433               	addwf	??_printf,w,c
  1370  00026C  6EF6               	movwf	tblptrl,c
  1371  00026E  0EFE               	movlw	high _dpowers
  1372  000270  2034               	addwfc	??_printf+1,w,c
  1373  000272  6EF7               	movwf	tblptrh,c
  1374  000274                     	if	1	;There are 3 active tblptr bytes
  1375  000274  6AF8               	clrf	tblptru,c
  1376  000276  0E00               	movlw	low (__mediumconst shr (0+16))
  1377  000278  22F8               	addwfc	tblptru,f,c
  1378  00027A                     	endif
  1379  00027A  0009               	tblrd		*+
  1380  00027C  CFF5 F01B          	movff	tablat,___lldiv@divisor
  1381  000280  0009               	tblrd		*+
  1382  000282  CFF5 F01C          	movff	tablat,___lldiv@divisor+1
  1383  000286  0009               	tblrd		*+
  1384  000288  CFF5 F01D          	movff	tablat,___lldiv@divisor+2
  1385  00028C  000A               	tblrd		*-
  1386  00028E  CFF5 F01E          	movff	tablat,___lldiv@divisor+3
  1387  000292  C062  F017         	movff	printf@val,___lldiv@dividend
  1388  000296  C063  F018         	movff	printf@val+1,___lldiv@dividend+1
  1389  00029A  C064  F019         	movff	printf@val+2,___lldiv@dividend+2
  1390  00029E  C065  F01A         	movff	printf@val+3,___lldiv@dividend+3
  1391  0002A2  EC11  F002         	call	___lldiv	;wreg free
  1392  0002A6  C017  F024         	movff	?___lldiv,___llmod@dividend
  1393  0002AA  C018  F025         	movff	?___lldiv+1,___llmod@dividend+1
  1394  0002AE  C019  F026         	movff	?___lldiv+2,___llmod@dividend+2
  1395  0002B2  C01A  F027         	movff	?___lldiv+3,___llmod@dividend+3
  1396  0002B6  0E0A               	movlw	10
  1397  0002B8  6E28               	movwf	___llmod@divisor,c
  1398  0002BA  0E00               	movlw	0
  1399  0002BC  6E29               	movwf	___llmod@divisor+1,c
  1400  0002BE  0E00               	movlw	0
  1401  0002C0  6E2A               	movwf	___llmod@divisor+2,c
  1402  0002C2  0E00               	movlw	0
  1403  0002C4  6E2B               	movwf	___llmod@divisor+3,c
  1404  0002C6  EC52  F002         	call	___llmod	;wreg free
  1405  0002CA  5024               	movf	?___llmod,w,c
  1406  0002CC  0F30               	addlw	48
  1407  0002CE  0100               	movlb	0	; () banked
  1408  0002D0  6F69               	movwf	printf@c& (0+255),b
  1409                           
  1410                           ; BSR set to: 0
  1411                           ;doprnt.c: 1523: }
  1412                           ;doprnt.c: 1524: (putch(c) );
  1413  0002D2  5169               	movf	printf@c& (0+255),w,b
  1414  0002D4  ECCF  F003         	call	_putch
  1415  0002D8                     l392:
  1416  0002D8  0100               	movlb	0	; () banked
  1417  0002DA  0760               	decf	printf@prec& (0+255),f,b
  1418  0002DC  A0D8               	btfss	status,0,c
  1419  0002DE  0761               	decf	(printf@prec+1)& (0+255),f,b
  1420  0002E0  2960               	incf	printf@prec& (0+255),w,b
  1421  0002E2  E1B8               	bnz	l1758
  1422  0002E4  2961               	incf	(printf@prec+1)& (0+255),w,b
  1423  0002E6  A4D8               	btfss	status,2,c
  1424  0002E8  D7B5               	goto	l393
  1425  0002EA                     u930:
  1426                           
  1427                           ; BSR set to: 0
  1428                           
  1429                           ; BSR set to: 0
  1430  0002EA  C02D  FFF6         	movff	printf@f,tblptrl
  1431  0002EE  C02E  FFF7         	movff	printf@f+1,tblptrh
  1432  0002F2  4A2D               	infsnz	printf@f,f,c
  1433  0002F4  2A2E               	incf	printf@f+1,f,c
  1434  0002F6                     	if	1	;Program memory is < 0x10000, tblptru is always zero
  1435  0002F6  6AF8               	clrf	tblptru,c
  1436  0002F8                     	endif
  1437  0002F8                     	if	0	;tblptru may be non-zero
  1438  0002F8                     	endif
  1439  0002F8  0008               	tblrd		*
  1440  0002FA  CFF5 F069          	movff	tablat,printf@c
  1441  0002FE  0100               	movlb	0	; () banked
  1442  000300  5169               	movf	printf@c& (0+255),w,b
  1443  000302  B4D8               	btfsc	status,2,c
  1444  000304  0012               	return	
  1445  000306  D6E6               	goto	l368
  1446  000308                     __end_of_printf:
  1447                           	opt stack 0
  1448                           tblptru	equ	0xFF8
  1449                           tblptrh	equ	0xFF7
  1450                           tblptrl	equ	0xFF6
  1451                           tablat	equ	0xFF5
  1452                           prodh	equ	0xFF4
  1453                           prodl	equ	0xFF3
  1454                           intcon	equ	0xFF2
  1455                           postinc0	equ	0xFEE
  1456                           wreg	equ	0xFE8
  1457                           indf2	equ	0xFDF
  1458                           postinc2	equ	0xFDE
  1459                           postdec2	equ	0xFDD
  1460                           fsr2h	equ	0xFDA
  1461                           fsr2l	equ	0xFD9
  1462                           status	equ	0xFD8
  1463                           
  1464 ;; *************** function _putch *****************
  1465 ;; Defined at:
  1466 ;;		line 125 in file "mcc_generated_files/eusart2.c"
  1467 ;; Parameters:    Size  Location     Type
  1468 ;;  txData          1    wreg     unsigned char 
  1469 ;; Auto vars:     Size  Location     Type
  1470 ;;  txData          1   23[COMRAM] unsigned char 
  1471 ;; Return value:  Size  Location     Type
  1472 ;;                  1    wreg      void 
  1473 ;; Registers used:
  1474 ;;		wreg, status,2, cstack
  1475 ;; Tracked objects:
  1476 ;;		On entry : 0/0
  1477 ;;		On exit  : 0/0
  1478 ;;		Unchanged: 0/0
  1479 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1480 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1481 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1482 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1483 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1484 ;;Total ram usage:        1 bytes
  1485 ;; Hardware stack levels used:    1
  1486 ;; Hardware stack levels required when called:    5
  1487 ;; This function calls:
  1488 ;;		_EUSART2_Write
  1489 ;; This function is called by:
  1490 ;;		_printf
  1491 ;; This function uses a non-reentrant model
  1492 ;;
  1493                           
  1494                           	psect	text3
  1495  00079E                     __ptext3:
  1496                           	opt stack 0
  1497  00079E                     _putch:
  1498                           	opt stack 24
  1499                           
  1500                           ; BSR set to: 0
  1501                           ;incstack = 0
  1502                           ;putch@txData stored from wreg
  1503  00079E  6E18               	movwf	putch@txData,c
  1504                           
  1505                           ;eusart2.c: 127: EUSART2_Write(txData);
  1506  0007A0  5018               	movf	putch@txData,w,c
  1507  0007A2  ECC3  F003         	call	_EUSART2_Write
  1508  0007A6  0012               	return		;funcret
  1509  0007A8                     __end_of_putch:
  1510                           	opt stack 0
  1511                           tblptru	equ	0xFF8
  1512                           tblptrh	equ	0xFF7
  1513                           tblptrl	equ	0xFF6
  1514                           tablat	equ	0xFF5
  1515                           prodh	equ	0xFF4
  1516                           prodl	equ	0xFF3
  1517                           intcon	equ	0xFF2
  1518                           postinc0	equ	0xFEE
  1519                           wreg	equ	0xFE8
  1520                           indf2	equ	0xFDF
  1521                           postinc2	equ	0xFDE
  1522                           postdec2	equ	0xFDD
  1523                           fsr2h	equ	0xFDA
  1524                           fsr2l	equ	0xFD9
  1525                           status	equ	0xFD8
  1526                           
  1527 ;; *************** function _EUSART2_Write *****************
  1528 ;; Defined at:
  1529 ;;		line 111 in file "mcc_generated_files/eusart2.c"
  1530 ;; Parameters:    Size  Location     Type
  1531 ;;  txData          1    wreg     unsigned char 
  1532 ;; Auto vars:     Size  Location     Type
  1533 ;;  txData          1   22[COMRAM] unsigned char 
  1534 ;; Return value:  Size  Location     Type
  1535 ;;                  1    wreg      void 
  1536 ;; Registers used:
  1537 ;;		wreg
  1538 ;; Tracked objects:
  1539 ;;		On entry : 0/0
  1540 ;;		On exit  : 0/0
  1541 ;;		Unchanged: 0/0
  1542 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1543 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1544 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1545 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1546 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1547 ;;Total ram usage:        1 bytes
  1548 ;; Hardware stack levels used:    1
  1549 ;; Hardware stack levels required when called:    4
  1550 ;; This function calls:
  1551 ;;		Nothing
  1552 ;; This function is called by:
  1553 ;;		_putch
  1554 ;; This function uses a non-reentrant model
  1555 ;;
  1556                           
  1557                           	psect	text4
  1558  000786                     __ptext4:
  1559                           	opt stack 0
  1560  000786                     _EUSART2_Write:
  1561                           	opt stack 24
  1562                           
  1563                           ;incstack = 0
  1564                           ;EUSART2_Write@txData stored from wreg
  1565  000786  6E17               	movwf	EUSART2_Write@txData,c
  1566  000788                     
  1567                           ;eusart2.c: 114: {
  1568                           
  1569                           ;eusart2.c: 113: while(0 == PIR3bits.TX2IF)
  1570  000788  A8A4               	btfss	4004,4,c	;volatile
  1571  00078A  D7FE               	goto	l1648
  1572                           
  1573                           ;eusart2.c: 115: }
  1574                           ;eusart2.c: 117: TXREG2 = txData;
  1575  00078C  C017  FF73         	movff	EUSART2_Write@txData,3955	;volatile
  1576  000790  0012               	return		;funcret
  1577  000792                     __end_of_EUSART2_Write:
  1578                           	opt stack 0
  1579                           tblptru	equ	0xFF8
  1580                           tblptrh	equ	0xFF7
  1581                           tblptrl	equ	0xFF6
  1582                           tablat	equ	0xFF5
  1583                           prodh	equ	0xFF4
  1584                           prodl	equ	0xFF3
  1585                           intcon	equ	0xFF2
  1586                           postinc0	equ	0xFEE
  1587                           wreg	equ	0xFE8
  1588                           indf2	equ	0xFDF
  1589                           postinc2	equ	0xFDE
  1590                           postdec2	equ	0xFDD
  1591                           fsr2h	equ	0xFDA
  1592                           fsr2l	equ	0xFD9
  1593                           status	equ	0xFD8
  1594                           
  1595 ;; *************** function ___llmod *****************
  1596 ;; Defined at:
  1597 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\llmod.c"
  1598 ;; Parameters:    Size  Location     Type
  1599 ;;  dividend        4   35[COMRAM] unsigned long 
  1600 ;;  divisor         4   39[COMRAM] unsigned long 
  1601 ;; Auto vars:     Size  Location     Type
  1602 ;;  counter         1   43[COMRAM] unsigned char 
  1603 ;; Return value:  Size  Location     Type
  1604 ;;                  4   35[COMRAM] unsigned long 
  1605 ;; Registers used:
  1606 ;;		wreg, status,2, status,0
  1607 ;; Tracked objects:
  1608 ;;		On entry : 0/0
  1609 ;;		On exit  : 0/0
  1610 ;;		Unchanged: 0/0
  1611 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1612 ;;      Params:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1613 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1614 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1615 ;;      Totals:         9       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1616 ;;Total ram usage:        9 bytes
  1617 ;; Hardware stack levels used:    1
  1618 ;; Hardware stack levels required when called:    4
  1619 ;; This function calls:
  1620 ;;		Nothing
  1621 ;; This function is called by:
  1622 ;;		_printf
  1623 ;; This function uses a non-reentrant model
  1624 ;;
  1625                           
  1626                           	psect	text5
  1627  0004A4                     __ptext5:
  1628                           	opt stack 0
  1629  0004A4                     ___llmod:
  1630                           	opt stack 25
  1631                           
  1632                           ;incstack = 0
  1633  0004A4  5028               	movf	___llmod@divisor,w,c
  1634  0004A6  1029               	iorwf	___llmod@divisor+1,w,c
  1635  0004A8  102A               	iorwf	___llmod@divisor+2,w,c
  1636  0004AA  102B               	iorwf	___llmod@divisor+3,w,c
  1637  0004AC  B4D8               	btfsc	status,2,c
  1638  0004AE  D024               	goto	l762
  1639  0004B0  0E01               	movlw	1
  1640  0004B2  6E2C               	movwf	___llmod@counter,c
  1641  0004B4  D006               	goto	l757
  1642  0004B6  90D8               	bcf	status,0,c
  1643  0004B8  3628               	rlcf	___llmod@divisor,f,c
  1644  0004BA  3629               	rlcf	___llmod@divisor+1,f,c
  1645  0004BC  362A               	rlcf	___llmod@divisor+2,f,c
  1646  0004BE  362B               	rlcf	___llmod@divisor+3,f,c
  1647  0004C0  2A2C               	incf	___llmod@counter,f,c
  1648  0004C2                     l757:
  1649  0004C2  AE2B               	btfss	___llmod@divisor+3,7,c
  1650  0004C4  D7F8               	goto	l758
  1651  0004C6                     u820:
  1652  0004C6  5028               	movf	___llmod@divisor,w,c
  1653  0004C8  5C24               	subwf	___llmod@dividend,w,c
  1654  0004CA  5029               	movf	___llmod@divisor+1,w,c
  1655  0004CC  5825               	subwfb	___llmod@dividend+1,w,c
  1656  0004CE  502A               	movf	___llmod@divisor+2,w,c
  1657  0004D0  5826               	subwfb	___llmod@dividend+2,w,c
  1658  0004D2  502B               	movf	___llmod@divisor+3,w,c
  1659  0004D4  5827               	subwfb	___llmod@dividend+3,w,c
  1660  0004D6  A0D8               	btfss	status,0,c
  1661  0004D8  D008               	goto	l761
  1662  0004DA  5028               	movf	___llmod@divisor,w,c
  1663  0004DC  5E24               	subwf	___llmod@dividend,f,c
  1664  0004DE  5029               	movf	___llmod@divisor+1,w,c
  1665  0004E0  5A25               	subwfb	___llmod@dividend+1,f,c
  1666  0004E2  502A               	movf	___llmod@divisor+2,w,c
  1667  0004E4  5A26               	subwfb	___llmod@dividend+2,f,c
  1668  0004E6  502B               	movf	___llmod@divisor+3,w,c
  1669  0004E8  5A27               	subwfb	___llmod@dividend+3,f,c
  1670  0004EA                     l761:
  1671  0004EA  90D8               	bcf	status,0,c
  1672  0004EC  322B               	rrcf	___llmod@divisor+3,f,c
  1673  0004EE  322A               	rrcf	___llmod@divisor+2,f,c
  1674  0004F0  3229               	rrcf	___llmod@divisor+1,f,c
  1675  0004F2  3228               	rrcf	___llmod@divisor,f,c
  1676  0004F4  2E2C               	decfsz	___llmod@counter,f,c
  1677  0004F6  D7E7               	goto	u820
  1678  0004F8                     l762:
  1679  0004F8  C024  F024         	movff	___llmod@dividend,?___llmod
  1680  0004FC  C025  F025         	movff	___llmod@dividend+1,?___llmod+1
  1681  000500  C026  F026         	movff	___llmod@dividend+2,?___llmod+2
  1682  000504  C027  F027         	movff	___llmod@dividend+3,?___llmod+3
  1683  000508  0012               	return		;funcret
  1684  00050A                     __end_of___llmod:
  1685                           	opt stack 0
  1686                           tblptru	equ	0xFF8
  1687                           tblptrh	equ	0xFF7
  1688                           tblptrl	equ	0xFF6
  1689                           tablat	equ	0xFF5
  1690                           prodh	equ	0xFF4
  1691                           prodl	equ	0xFF3
  1692                           intcon	equ	0xFF2
  1693                           postinc0	equ	0xFEE
  1694                           wreg	equ	0xFE8
  1695                           indf2	equ	0xFDF
  1696                           postinc2	equ	0xFDE
  1697                           postdec2	equ	0xFDD
  1698                           fsr2h	equ	0xFDA
  1699                           fsr2l	equ	0xFD9
  1700                           status	equ	0xFD8
  1701                           
  1702 ;; *************** function ___lldiv *****************
  1703 ;; Defined at:
  1704 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\lldiv.c"
  1705 ;; Parameters:    Size  Location     Type
  1706 ;;  dividend        4   22[COMRAM] unsigned long 
  1707 ;;  divisor         4   26[COMRAM] unsigned long 
  1708 ;; Auto vars:     Size  Location     Type
  1709 ;;  quotient        4   30[COMRAM] unsigned long 
  1710 ;;  counter         1   34[COMRAM] unsigned char 
  1711 ;; Return value:  Size  Location     Type
  1712 ;;                  4   22[COMRAM] unsigned long 
  1713 ;; Registers used:
  1714 ;;		wreg, status,2, status,0
  1715 ;; Tracked objects:
  1716 ;;		On entry : 0/0
  1717 ;;		On exit  : 0/0
  1718 ;;		Unchanged: 0/0
  1719 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1720 ;;      Params:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1721 ;;      Locals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1722 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1723 ;;      Totals:        13       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1724 ;;Total ram usage:       13 bytes
  1725 ;; Hardware stack levels used:    1
  1726 ;; Hardware stack levels required when called:    4
  1727 ;; This function calls:
  1728 ;;		Nothing
  1729 ;; This function is called by:
  1730 ;;		_printf
  1731 ;; This function uses a non-reentrant model
  1732 ;;
  1733                           
  1734                           	psect	text6
  1735  000422                     __ptext6:
  1736                           	opt stack 0
  1737  000422                     ___lldiv:
  1738                           	opt stack 25
  1739                           
  1740                           ;incstack = 0
  1741  000422  0E00               	movlw	0
  1742  000424  6E1F               	movwf	___lldiv@quotient,c
  1743  000426  0E00               	movlw	0
  1744  000428  6E20               	movwf	___lldiv@quotient+1,c
  1745  00042A  0E00               	movlw	0
  1746  00042C  6E21               	movwf	___lldiv@quotient+2,c
  1747  00042E  0E00               	movlw	0
  1748  000430  6E22               	movwf	___lldiv@quotient+3,c
  1749  000432  501B               	movf	___lldiv@divisor,w,c
  1750  000434  101C               	iorwf	___lldiv@divisor+1,w,c
  1751  000436  101D               	iorwf	___lldiv@divisor+2,w,c
  1752  000438  101E               	iorwf	___lldiv@divisor+3,w,c
  1753  00043A  B4D8               	btfsc	status,2,c
  1754  00043C  D02A               	goto	l752
  1755  00043E  0E01               	movlw	1
  1756  000440  6E23               	movwf	___lldiv@counter,c
  1757  000442  D006               	goto	l747
  1758  000444  90D8               	bcf	status,0,c
  1759  000446  361B               	rlcf	___lldiv@divisor,f,c
  1760  000448  361C               	rlcf	___lldiv@divisor+1,f,c
  1761  00044A  361D               	rlcf	___lldiv@divisor+2,f,c
  1762  00044C  361E               	rlcf	___lldiv@divisor+3,f,c
  1763  00044E  2A23               	incf	___lldiv@counter,f,c
  1764  000450                     l747:
  1765  000450  AE1E               	btfss	___lldiv@divisor+3,7,c
  1766  000452  D7F8               	goto	l748
  1767  000454                     u790:
  1768  000454  90D8               	bcf	status,0,c
  1769  000456  361F               	rlcf	___lldiv@quotient,f,c
  1770  000458  3620               	rlcf	___lldiv@quotient+1,f,c
  1771  00045A  3621               	rlcf	___lldiv@quotient+2,f,c
  1772  00045C  3622               	rlcf	___lldiv@quotient+3,f,c
  1773  00045E  501B               	movf	___lldiv@divisor,w,c
  1774  000460  5C17               	subwf	___lldiv@dividend,w,c
  1775  000462  501C               	movf	___lldiv@divisor+1,w,c
  1776  000464  5818               	subwfb	___lldiv@dividend+1,w,c
  1777  000466  501D               	movf	___lldiv@divisor+2,w,c
  1778  000468  5819               	subwfb	___lldiv@dividend+2,w,c
  1779  00046A  501E               	movf	___lldiv@divisor+3,w,c
  1780  00046C  581A               	subwfb	___lldiv@dividend+3,w,c
  1781  00046E  A0D8               	btfss	status,0,c
  1782  000470  D009               	goto	l751
  1783  000472  501B               	movf	___lldiv@divisor,w,c
  1784  000474  5E17               	subwf	___lldiv@dividend,f,c
  1785  000476  501C               	movf	___lldiv@divisor+1,w,c
  1786  000478  5A18               	subwfb	___lldiv@dividend+1,f,c
  1787  00047A  501D               	movf	___lldiv@divisor+2,w,c
  1788  00047C  5A19               	subwfb	___lldiv@dividend+2,f,c
  1789  00047E  501E               	movf	___lldiv@divisor+3,w,c
  1790  000480  5A1A               	subwfb	___lldiv@dividend+3,f,c
  1791  000482  801F               	bsf	___lldiv@quotient,0,c
  1792  000484                     l751:
  1793  000484  90D8               	bcf	status,0,c
  1794  000486  321E               	rrcf	___lldiv@divisor+3,f,c
  1795  000488  321D               	rrcf	___lldiv@divisor+2,f,c
  1796  00048A  321C               	rrcf	___lldiv@divisor+1,f,c
  1797  00048C  321B               	rrcf	___lldiv@divisor,f,c
  1798  00048E  2E23               	decfsz	___lldiv@counter,f,c
  1799  000490  D7E1               	goto	u790
  1800  000492                     l752:
  1801  000492  C01F  F017         	movff	___lldiv@quotient,?___lldiv
  1802  000496  C020  F018         	movff	___lldiv@quotient+1,?___lldiv+1
  1803  00049A  C021  F019         	movff	___lldiv@quotient+2,?___lldiv+2
  1804  00049E  C022  F01A         	movff	___lldiv@quotient+3,?___lldiv+3
  1805  0004A2  0012               	return		;funcret
  1806  0004A4                     __end_of___lldiv:
  1807                           	opt stack 0
  1808                           tblptru	equ	0xFF8
  1809                           tblptrh	equ	0xFF7
  1810                           tblptrl	equ	0xFF6
  1811                           tablat	equ	0xFF5
  1812                           prodh	equ	0xFF4
  1813                           prodl	equ	0xFF3
  1814                           intcon	equ	0xFF2
  1815                           postinc0	equ	0xFEE
  1816                           wreg	equ	0xFE8
  1817                           indf2	equ	0xFDF
  1818                           postinc2	equ	0xFDE
  1819                           postdec2	equ	0xFDD
  1820                           fsr2h	equ	0xFDA
  1821                           fsr2l	equ	0xFD9
  1822                           status	equ	0xFD8
  1823                           
  1824 ;; *************** function _SYSTEM_Initialize *****************
  1825 ;; Defined at:
  1826 ;;		line 50 in file "mcc_generated_files/mcc.c"
  1827 ;; Parameters:    Size  Location     Type
  1828 ;;		None
  1829 ;; Auto vars:     Size  Location     Type
  1830 ;;		None
  1831 ;; Return value:  Size  Location     Type
  1832 ;;                  1    wreg      void 
  1833 ;; Registers used:
  1834 ;;		wreg, status,2, status,0, cstack
  1835 ;; Tracked objects:
  1836 ;;		On entry : 0/0
  1837 ;;		On exit  : 0/0
  1838 ;;		Unchanged: 0/0
  1839 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1840 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1841 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1842 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1843 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1844 ;;Total ram usage:        0 bytes
  1845 ;; Hardware stack levels used:    1
  1846 ;; Hardware stack levels required when called:    6
  1847 ;; This function calls:
  1848 ;;		_CCP4_Initialize
  1849 ;;		_CCP5_Initialize
  1850 ;;		_EUSART2_Initialize
  1851 ;;		_INTERRUPT_Initialize
  1852 ;;		_OSCILLATOR_Initialize
  1853 ;;		_PIN_MANAGER_Initialize
  1854 ;;		_TMR0_Initialize
  1855 ;;		_TMR3_Initialize
  1856 ;; This function is called by:
  1857 ;;		_main
  1858 ;; This function uses a non-reentrant model
  1859 ;;
  1860                           
  1861                           	psect	text7
  1862  0006A8                     __ptext7:
  1863                           	opt stack 0
  1864  0006A8                     _SYSTEM_Initialize:
  1865                           	opt stack 24
  1866                           
  1867                           ;mcc.c: 53: INTERRUPT_Initialize();
  1868                           
  1869                           ;incstack = 0
  1870  0006A8  ECDE  F003         	call	_INTERRUPT_Initialize	;wreg free
  1871                           
  1872                           ;mcc.c: 54: PIN_MANAGER_Initialize();
  1873  0006AC  EC16  F003         	call	_PIN_MANAGER_Initialize	;wreg free
  1874                           
  1875                           ;mcc.c: 55: OSCILLATOR_Initialize();
  1876  0006B0  ECB2  F003         	call	_OSCILLATOR_Initialize	;wreg free
  1877                           
  1878                           ;mcc.c: 56: CCP5_Initialize();
  1879  0006B4  EC73  F003         	call	_CCP5_Initialize	;wreg free
  1880                           
  1881                           ;mcc.c: 57: CCP4_Initialize();
  1882  0006B8  EC81  F003         	call	_CCP4_Initialize	;wreg free
  1883                           
  1884                           ;mcc.c: 58: TMR3_Initialize();
  1885  0006BC  EC65  F003         	call	_TMR3_Initialize	;wreg free
  1886                           
  1887                           ;mcc.c: 59: TMR0_Initialize();
  1888  0006C0  ECCC  F002         	call	_TMR0_Initialize	;wreg free
  1889                           
  1890                           ;mcc.c: 60: EUSART2_Initialize();
  1891  0006C4  ECA7  F003         	call	_EUSART2_Initialize	;wreg free
  1892  0006C8  0012               	return		;funcret
  1893  0006CA                     __end_of_SYSTEM_Initialize:
  1894                           	opt stack 0
  1895                           tblptru	equ	0xFF8
  1896                           tblptrh	equ	0xFF7
  1897                           tblptrl	equ	0xFF6
  1898                           tablat	equ	0xFF5
  1899                           prodh	equ	0xFF4
  1900                           prodl	equ	0xFF3
  1901                           intcon	equ	0xFF2
  1902                           postinc0	equ	0xFEE
  1903                           wreg	equ	0xFE8
  1904                           indf2	equ	0xFDF
  1905                           postinc2	equ	0xFDE
  1906                           postdec2	equ	0xFDD
  1907                           fsr2h	equ	0xFDA
  1908                           fsr2l	equ	0xFD9
  1909                           status	equ	0xFD8
  1910                           
  1911 ;; *************** function _TMR3_Initialize *****************
  1912 ;; Defined at:
  1913 ;;		line 63 in file "mcc_generated_files/tmr3.c"
  1914 ;; Parameters:    Size  Location     Type
  1915 ;;		None
  1916 ;; Auto vars:     Size  Location     Type
  1917 ;;		None
  1918 ;; Return value:  Size  Location     Type
  1919 ;;                  1    wreg      void 
  1920 ;; Registers used:
  1921 ;;		wreg, status,2
  1922 ;; Tracked objects:
  1923 ;;		On entry : 0/0
  1924 ;;		On exit  : 0/0
  1925 ;;		Unchanged: 0/0
  1926 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1927 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1928 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1929 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1930 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1931 ;;Total ram usage:        0 bytes
  1932 ;; Hardware stack levels used:    1
  1933 ;; Hardware stack levels required when called:    4
  1934 ;; This function calls:
  1935 ;;		Nothing
  1936 ;; This function is called by:
  1937 ;;		_SYSTEM_Initialize
  1938 ;; This function uses a non-reentrant model
  1939 ;;
  1940                           
  1941                           	psect	text8
  1942  0006CA                     __ptext8:
  1943                           	opt stack 0
  1944  0006CA                     _TMR3_Initialize:
  1945                           	opt stack 25
  1946                           
  1947                           ;tmr3.c: 68: T3GCON = 0x00;
  1948                           
  1949                           ;incstack = 0
  1950  0006CA  0E00               	movlw	0
  1951  0006CC  6EB4               	movwf	4020,c	;volatile
  1952                           
  1953                           ;tmr3.c: 71: TMR3H = 0x00;
  1954  0006CE  0E00               	movlw	0
  1955  0006D0  6EB3               	movwf	4019,c	;volatile
  1956                           
  1957                           ;tmr3.c: 74: TMR3L = 0x00;
  1958  0006D2  0E00               	movlw	0
  1959  0006D4  6EB2               	movwf	4018,c	;volatile
  1960                           
  1961                           ;tmr3.c: 77: timer3ReloadVal=TMR3;
  1962  0006D6  CFB2 F03A          	movff	4018,_timer3ReloadVal	;volatile
  1963  0006DA  CFB3 F03B          	movff	4019,_timer3ReloadVal+1	;volatile
  1964                           
  1965                           ;tmr3.c: 80: PIR2bits.TMR3IF = 0;
  1966  0006DE  92A1               	bcf	4001,1,c	;volatile
  1967                           
  1968                           ;tmr3.c: 83: T3CON = 0x01;
  1969  0006E0  0E01               	movlw	1
  1970  0006E2  6EB1               	movwf	4017,c	;volatile
  1971  0006E4  0012               	return		;funcret
  1972  0006E6                     __end_of_TMR3_Initialize:
  1973                           	opt stack 0
  1974                           tblptru	equ	0xFF8
  1975                           tblptrh	equ	0xFF7
  1976                           tblptrl	equ	0xFF6
  1977                           tablat	equ	0xFF5
  1978                           prodh	equ	0xFF4
  1979                           prodl	equ	0xFF3
  1980                           intcon	equ	0xFF2
  1981                           postinc0	equ	0xFEE
  1982                           wreg	equ	0xFE8
  1983                           indf2	equ	0xFDF
  1984                           postinc2	equ	0xFDE
  1985                           postdec2	equ	0xFDD
  1986                           fsr2h	equ	0xFDA
  1987                           fsr2l	equ	0xFD9
  1988                           status	equ	0xFD8
  1989                           
  1990 ;; *************** function _TMR0_Initialize *****************
  1991 ;; Defined at:
  1992 ;;		line 67 in file "mcc_generated_files/tmr0.c"
  1993 ;; Parameters:    Size  Location     Type
  1994 ;;		None
  1995 ;; Auto vars:     Size  Location     Type
  1996 ;;		None
  1997 ;; Return value:  Size  Location     Type
  1998 ;;                  1    wreg      void 
  1999 ;; Registers used:
  2000 ;;		wreg, status,2, status,0, cstack
  2001 ;; Tracked objects:
  2002 ;;		On entry : 0/0
  2003 ;;		On exit  : 0/0
  2004 ;;		Unchanged: 0/0
  2005 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2006 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2007 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2008 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2009 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2010 ;;Total ram usage:        2 bytes
  2011 ;; Hardware stack levels used:    1
  2012 ;; Hardware stack levels required when called:    5
  2013 ;; This function calls:
  2014 ;;		_TMR0_SetInterruptHandler
  2015 ;; This function is called by:
  2016 ;;		_SYSTEM_Initialize
  2017 ;; This function uses a non-reentrant model
  2018 ;;
  2019                           
  2020                           	psect	text9
  2021  000598                     __ptext9:
  2022                           	opt stack 0
  2023  000598                     _TMR0_Initialize:
  2024                           	opt stack 24
  2025                           
  2026                           ;tmr0.c: 72: T0CONbits.T08BIT = 0;
  2027                           
  2028                           ;incstack = 0
  2029  000598  9CD5               	bcf	4053,6,c	;volatile
  2030                           
  2031                           ;tmr0.c: 75: TMR0H = 0xFF;
  2032  00059A  68D7               	setf	4055,c	;volatile
  2033                           
  2034                           ;tmr0.c: 78: TMR0L = 0xFE;
  2035  00059C  0EFE               	movlw	254
  2036  00059E  6ED6               	movwf	4054,c	;volatile
  2037                           
  2038                           ;tmr0.c: 82: timer0ReloadVal = (uint16_t)((TMR0H << 8) | TMR0L);
  2039  0005A0  50D6               	movf	4054,w,c	;volatile
  2040  0005A2  CFD7 F019          	movff	4055,??_TMR0_Initialize	;volatile
  2041  0005A6  6A1A               	clrf	(??_TMR0_Initialize+1)& (0+255),c
  2042  0005A8  C019  F01A         	movff	??_TMR0_Initialize,??_TMR0_Initialize+1
  2043  0005AC  6A19               	clrf	??_TMR0_Initialize,c
  2044  0005AE  1019               	iorwf	??_TMR0_Initialize,w,c
  2045  0005B0  6E3C               	movwf	_timer0ReloadVal,c	;volatile
  2046  0005B2  501A               	movf	??_TMR0_Initialize+1,w,c
  2047  0005B4  6E3D               	movwf	_timer0ReloadVal+1,c	;volatile
  2048                           
  2049                           ;tmr0.c: 85: INTCONbits.TMR0IF = 0;
  2050  0005B6  94F2               	bcf	intcon,2,c	;volatile
  2051                           
  2052                           ;tmr0.c: 88: INTCONbits.TMR0IE = 1;
  2053  0005B8  8AF2               	bsf	intcon,5,c	;volatile
  2054                           
  2055                           ;tmr0.c: 91: TMR0_SetInterruptHandler(TMR0_DefaultInterruptHandler);
  2056  0005BA  0E56               	movlw	low _TMR0_DefaultInterruptHandler
  2057  0005BC  6E17               	movwf	TMR0_SetInterruptHandler@InterruptHandler,c
  2058  0005BE  0E05               	movlw	high _TMR0_DefaultInterruptHandler
  2059  0005C0  6E18               	movwf	TMR0_SetInterruptHandler@InterruptHandler+1,c
  2060  0005C2  ECD4  F003         	call	_TMR0_SetInterruptHandler	;wreg free
  2061                           
  2062                           ;tmr0.c: 94: T0CON = 0x92;
  2063  0005C6  0E92               	movlw	146
  2064  0005C8  6ED5               	movwf	4053,c	;volatile
  2065  0005CA  0012               	return		;funcret
  2066  0005CC                     __end_of_TMR0_Initialize:
  2067                           	opt stack 0
  2068                           tblptru	equ	0xFF8
  2069                           tblptrh	equ	0xFF7
  2070                           tblptrl	equ	0xFF6
  2071                           tablat	equ	0xFF5
  2072                           prodh	equ	0xFF4
  2073                           prodl	equ	0xFF3
  2074                           intcon	equ	0xFF2
  2075                           postinc0	equ	0xFEE
  2076                           wreg	equ	0xFE8
  2077                           indf2	equ	0xFDF
  2078                           postinc2	equ	0xFDE
  2079                           postdec2	equ	0xFDD
  2080                           fsr2h	equ	0xFDA
  2081                           fsr2l	equ	0xFD9
  2082                           status	equ	0xFD8
  2083                           
  2084 ;; *************** function _TMR0_SetInterruptHandler *****************
  2085 ;; Defined at:
  2086 ;;		line 156 in file "mcc_generated_files/tmr0.c"
  2087 ;; Parameters:    Size  Location     Type
  2088 ;;  InterruptHan    2   22[COMRAM] PTR FTN()void 
  2089 ;;		 -> TMR0_DefaultInterruptHandler(1), 
  2090 ;; Auto vars:     Size  Location     Type
  2091 ;;		None
  2092 ;; Return value:  Size  Location     Type
  2093 ;;                  1    wreg      void 
  2094 ;; Registers used:
  2095 ;;		wreg, status,2, status,0
  2096 ;; Tracked objects:
  2097 ;;		On entry : 0/0
  2098 ;;		On exit  : 0/0
  2099 ;;		Unchanged: 0/0
  2100 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2101 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2102 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2103 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2104 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2105 ;;Total ram usage:        2 bytes
  2106 ;; Hardware stack levels used:    1
  2107 ;; Hardware stack levels required when called:    4
  2108 ;; This function calls:
  2109 ;;		Nothing
  2110 ;; This function is called by:
  2111 ;;		_TMR0_Initialize
  2112 ;; This function uses a non-reentrant model
  2113 ;;
  2114                           
  2115                           	psect	text10
  2116  0007A8                     __ptext10:
  2117                           	opt stack 0
  2118  0007A8                     _TMR0_SetInterruptHandler:
  2119                           	opt stack 24
  2120                           
  2121                           ;tmr0.c: 157: TMR0_InterruptHandler = InterruptHandler;
  2122                           
  2123                           ;incstack = 0
  2124  0007A8  C017  F03E         	movff	TMR0_SetInterruptHandler@InterruptHandler,_TMR0_InterruptHandler
  2125  0007AC  C018  F03F         	movff	TMR0_SetInterruptHandler@InterruptHandler+1,_TMR0_InterruptHandler+1
  2126  0007B0  0012               	return		;funcret
  2127  0007B2                     __end_of_TMR0_SetInterruptHandler:
  2128                           	opt stack 0
  2129                           tblptru	equ	0xFF8
  2130                           tblptrh	equ	0xFF7
  2131                           tblptrl	equ	0xFF6
  2132                           tablat	equ	0xFF5
  2133                           prodh	equ	0xFF4
  2134                           prodl	equ	0xFF3
  2135                           intcon	equ	0xFF2
  2136                           postinc0	equ	0xFEE
  2137                           wreg	equ	0xFE8
  2138                           indf2	equ	0xFDF
  2139                           postinc2	equ	0xFDE
  2140                           postdec2	equ	0xFDD
  2141                           fsr2h	equ	0xFDA
  2142                           fsr2l	equ	0xFD9
  2143                           status	equ	0xFD8
  2144                           
  2145 ;; *************** function _PIN_MANAGER_Initialize *****************
  2146 ;; Defined at:
  2147 ;;		line 57 in file "mcc_generated_files/pin_manager.c"
  2148 ;; Parameters:    Size  Location     Type
  2149 ;;		None
  2150 ;; Auto vars:     Size  Location     Type
  2151 ;;		None
  2152 ;; Return value:  Size  Location     Type
  2153 ;;                  1    wreg      void 
  2154 ;; Registers used:
  2155 ;;		wreg, status,2
  2156 ;; Tracked objects:
  2157 ;;		On entry : 0/0
  2158 ;;		On exit  : 0/0
  2159 ;;		Unchanged: 0/0
  2160 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2161 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2162 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2163 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2164 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2165 ;;Total ram usage:        0 bytes
  2166 ;; Hardware stack levels used:    1
  2167 ;; Hardware stack levels required when called:    4
  2168 ;; This function calls:
  2169 ;;		Nothing
  2170 ;; This function is called by:
  2171 ;;		_SYSTEM_Initialize
  2172 ;; This function uses a non-reentrant model
  2173 ;;
  2174                           
  2175                           	psect	text11
  2176  00062C                     __ptext11:
  2177                           	opt stack 0
  2178  00062C                     _PIN_MANAGER_Initialize:
  2179                           	opt stack 25
  2180                           
  2181                           ;pin_manager.c: 62: LATA = 0x00;
  2182                           
  2183                           ;incstack = 0
  2184  00062C  0E00               	movlw	0
  2185  00062E  6E89               	movwf	3977,c	;volatile
  2186                           
  2187                           ;pin_manager.c: 63: LATB = 0x00;
  2188  000630  0E00               	movlw	0
  2189  000632  6E8A               	movwf	3978,c	;volatile
  2190                           
  2191                           ;pin_manager.c: 64: LATC = 0x00;
  2192  000634  0E00               	movlw	0
  2193  000636  6E8B               	movwf	3979,c	;volatile
  2194                           
  2195                           ;pin_manager.c: 69: TRISA = 0xFD;
  2196  000638  0EFD               	movlw	253
  2197  00063A  6E92               	movwf	3986,c	;volatile
  2198                           
  2199                           ;pin_manager.c: 70: TRISB = 0xBF;
  2200  00063C  0EBF               	movlw	191
  2201  00063E  6E93               	movwf	3987,c	;volatile
  2202                           
  2203                           ;pin_manager.c: 71: TRISC = 0xFF;
  2204  000640  6894               	setf	3988,c	;volatile
  2205                           
  2206                           ;pin_manager.c: 76: ANSELC = 0xFC;
  2207  000642  0EFC               	movlw	252
  2208  000644  010F               	movlb	15	; () banked
  2209  000646  6F3A               	movwf	58,b	;volatile
  2210                           
  2211                           ;pin_manager.c: 77: ANSELB = 0x3E;
  2212  000648  0E3E               	movlw	62
  2213  00064A  6F39               	movwf	57,b	;volatile
  2214                           
  2215                           ;pin_manager.c: 78: ANSELA = 0x2F;
  2216  00064C  0E2F               	movlw	47
  2217  00064E  6F38               	movwf	56,b	;volatile
  2218                           
  2219                           ;pin_manager.c: 83: WPUB = 0x00;
  2220  000650  0E00               	movlw	0
  2221  000652  6E61               	movwf	3937,c	;volatile
  2222                           
  2223                           ; BSR set to: 15
  2224                           ;pin_manager.c: 84: INTCON2bits.nRBPU = 1;
  2225  000654  8EF1               	bsf	intcon2,7,c	;volatile
  2226                           
  2227                           ; BSR set to: 15
  2228  000656  0012               	return		;funcret
  2229  000658                     __end_of_PIN_MANAGER_Initialize:
  2230                           	opt stack 0
  2231                           tblptru	equ	0xFF8
  2232                           tblptrh	equ	0xFF7
  2233                           tblptrl	equ	0xFF6
  2234                           tablat	equ	0xFF5
  2235                           prodh	equ	0xFF4
  2236                           prodl	equ	0xFF3
  2237                           intcon	equ	0xFF2
  2238                           intcon2	equ	0xFF1
  2239                           postinc0	equ	0xFEE
  2240                           wreg	equ	0xFE8
  2241                           indf2	equ	0xFDF
  2242                           postinc2	equ	0xFDE
  2243                           postdec2	equ	0xFDD
  2244                           fsr2h	equ	0xFDA
  2245                           fsr2l	equ	0xFD9
  2246                           status	equ	0xFD8
  2247                           
  2248 ;; *************** function _OSCILLATOR_Initialize *****************
  2249 ;; Defined at:
  2250 ;;		line 63 in file "mcc_generated_files/mcc.c"
  2251 ;; Parameters:    Size  Location     Type
  2252 ;;		None
  2253 ;; Auto vars:     Size  Location     Type
  2254 ;;		None
  2255 ;; Return value:  Size  Location     Type
  2256 ;;                  1    wreg      void 
  2257 ;; Registers used:
  2258 ;;		wreg, status,2
  2259 ;; Tracked objects:
  2260 ;;		On entry : 0/0
  2261 ;;		On exit  : 0/0
  2262 ;;		Unchanged: 0/0
  2263 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2264 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2265 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2266 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2267 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2268 ;;Total ram usage:        0 bytes
  2269 ;; Hardware stack levels used:    1
  2270 ;; Hardware stack levels required when called:    4
  2271 ;; This function calls:
  2272 ;;		Nothing
  2273 ;; This function is called by:
  2274 ;;		_SYSTEM_Initialize
  2275 ;; This function uses a non-reentrant model
  2276 ;;
  2277                           
  2278                           	psect	text12
  2279  000764                     __ptext12:
  2280                           	opt stack 0
  2281  000764                     _OSCILLATOR_Initialize:
  2282                           	opt stack 25
  2283                           
  2284                           ;mcc.c: 66: OSCCON = 0x70;
  2285                           
  2286                           ; BSR set to: 15
  2287                           ;incstack = 0
  2288  000764  0E70               	movlw	112
  2289  000766  6ED3               	movwf	4051,c	;volatile
  2290                           
  2291                           ;mcc.c: 68: OSCCON2 = 0x04;
  2292  000768  0E04               	movlw	4
  2293  00076A  6ED2               	movwf	4050,c	;volatile
  2294                           
  2295                           ;mcc.c: 70: OSCTUNE = 0x40;
  2296  00076C  0E40               	movlw	64
  2297  00076E  6E9B               	movwf	3995,c	;volatile
  2298  000770                     
  2299                           ;mcc.c: 73: {
  2300  000770  BED2               	btfsc	4050,7,c	;volatile
  2301  000772  0012               	return	
  2302  000774  D7FD               	goto	l91
  2303  000776                     __end_of_OSCILLATOR_Initialize:
  2304                           	opt stack 0
  2305                           tblptru	equ	0xFF8
  2306                           tblptrh	equ	0xFF7
  2307                           tblptrl	equ	0xFF6
  2308                           tablat	equ	0xFF5
  2309                           prodh	equ	0xFF4
  2310                           prodl	equ	0xFF3
  2311                           intcon	equ	0xFF2
  2312                           intcon2	equ	0xFF1
  2313                           postinc0	equ	0xFEE
  2314                           wreg	equ	0xFE8
  2315                           indf2	equ	0xFDF
  2316                           postinc2	equ	0xFDE
  2317                           postdec2	equ	0xFDD
  2318                           fsr2h	equ	0xFDA
  2319                           fsr2l	equ	0xFD9
  2320                           status	equ	0xFD8
  2321                           
  2322 ;; *************** function _INTERRUPT_Initialize *****************
  2323 ;; Defined at:
  2324 ;;		line 52 in file "mcc_generated_files/interrupt_manager.c"
  2325 ;; Parameters:    Size  Location     Type
  2326 ;;		None
  2327 ;; Auto vars:     Size  Location     Type
  2328 ;;		None
  2329 ;; Return value:  Size  Location     Type
  2330 ;;                  1    wreg      void 
  2331 ;; Registers used:
  2332 ;;		None
  2333 ;; Tracked objects:
  2334 ;;		On entry : 0/0
  2335 ;;		On exit  : 0/0
  2336 ;;		Unchanged: 0/0
  2337 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2338 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2339 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2340 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2341 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2342 ;;Total ram usage:        0 bytes
  2343 ;; Hardware stack levels used:    1
  2344 ;; Hardware stack levels required when called:    4
  2345 ;; This function calls:
  2346 ;;		Nothing
  2347 ;; This function is called by:
  2348 ;;		_SYSTEM_Initialize
  2349 ;; This function uses a non-reentrant model
  2350 ;;
  2351                           
  2352                           	psect	text13
  2353  0007BC                     __ptext13:
  2354                           	opt stack 0
  2355  0007BC                     _INTERRUPT_Initialize:
  2356                           	opt stack 25
  2357                           
  2358                           ;interrupt_manager.c: 55: RCONbits.IPEN = 0;
  2359                           
  2360                           ;incstack = 0
  2361  0007BC  9ED0               	bcf	4048,7,c	;volatile
  2362  0007BE  0012               	return		;funcret
  2363  0007C0                     __end_of_INTERRUPT_Initialize:
  2364                           	opt stack 0
  2365                           tblptru	equ	0xFF8
  2366                           tblptrh	equ	0xFF7
  2367                           tblptrl	equ	0xFF6
  2368                           tablat	equ	0xFF5
  2369                           prodh	equ	0xFF4
  2370                           prodl	equ	0xFF3
  2371                           intcon	equ	0xFF2
  2372                           intcon2	equ	0xFF1
  2373                           postinc0	equ	0xFEE
  2374                           wreg	equ	0xFE8
  2375                           indf2	equ	0xFDF
  2376                           postinc2	equ	0xFDE
  2377                           postdec2	equ	0xFDD
  2378                           fsr2h	equ	0xFDA
  2379                           fsr2l	equ	0xFD9
  2380                           status	equ	0xFD8
  2381                           
  2382 ;; *************** function _EUSART2_Initialize *****************
  2383 ;; Defined at:
  2384 ;;		line 56 in file "mcc_generated_files/eusart2.c"
  2385 ;; Parameters:    Size  Location     Type
  2386 ;;		None
  2387 ;; Auto vars:     Size  Location     Type
  2388 ;;		None
  2389 ;; Return value:  Size  Location     Type
  2390 ;;                  1    wreg      void 
  2391 ;; Registers used:
  2392 ;;		wreg, status,2
  2393 ;; Tracked objects:
  2394 ;;		On entry : 0/0
  2395 ;;		On exit  : 0/0
  2396 ;;		Unchanged: 0/0
  2397 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2398 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2399 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2400 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2401 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2402 ;;Total ram usage:        0 bytes
  2403 ;; Hardware stack levels used:    1
  2404 ;; Hardware stack levels required when called:    4
  2405 ;; This function calls:
  2406 ;;		Nothing
  2407 ;; This function is called by:
  2408 ;;		_SYSTEM_Initialize
  2409 ;; This function uses a non-reentrant model
  2410 ;;
  2411                           
  2412                           	psect	text14
  2413  00074E                     __ptext14:
  2414                           	opt stack 0
  2415  00074E                     _EUSART2_Initialize:
  2416                           	opt stack 25
  2417                           
  2418                           ;eusart2.c: 61: BAUDCON2 = 0x08;
  2419                           
  2420                           ;incstack = 0
  2421  00074E  0E08               	movlw	8
  2422  000750  6E70               	movwf	3952,c	;volatile
  2423                           
  2424                           ;eusart2.c: 64: RCSTA2 = 0x90;
  2425  000752  0E90               	movlw	144
  2426  000754  6E71               	movwf	3953,c	;volatile
  2427                           
  2428                           ;eusart2.c: 67: TXSTA2 = 0x24;
  2429  000756  0E24               	movlw	36
  2430  000758  6E72               	movwf	3954,c	;volatile
  2431                           
  2432                           ;eusart2.c: 70: SPBRG2 = 0x82;
  2433  00075A  0E82               	movlw	130
  2434  00075C  6E75               	movwf	3957,c	;volatile
  2435                           
  2436                           ;eusart2.c: 73: SPBRGH2 = 0x06;
  2437  00075E  0E06               	movlw	6
  2438  000760  6E76               	movwf	3958,c	;volatile
  2439  000762  0012               	return		;funcret
  2440  000764                     __end_of_EUSART2_Initialize:
  2441                           	opt stack 0
  2442                           tblptru	equ	0xFF8
  2443                           tblptrh	equ	0xFF7
  2444                           tblptrl	equ	0xFF6
  2445                           tablat	equ	0xFF5
  2446                           prodh	equ	0xFF4
  2447                           prodl	equ	0xFF3
  2448                           intcon	equ	0xFF2
  2449                           intcon2	equ	0xFF1
  2450                           postinc0	equ	0xFEE
  2451                           wreg	equ	0xFE8
  2452                           indf2	equ	0xFDF
  2453                           postinc2	equ	0xFDE
  2454                           postdec2	equ	0xFDD
  2455                           fsr2h	equ	0xFDA
  2456                           fsr2l	equ	0xFD9
  2457                           status	equ	0xFD8
  2458                           
  2459 ;; *************** function _CCP5_Initialize *****************
  2460 ;; Defined at:
  2461 ;;		line 58 in file "mcc_generated_files/ccp5.c"
  2462 ;; Parameters:    Size  Location     Type
  2463 ;;		None
  2464 ;; Auto vars:     Size  Location     Type
  2465 ;;		None
  2466 ;; Return value:  Size  Location     Type
  2467 ;;                  1    wreg      void 
  2468 ;; Registers used:
  2469 ;;		wreg, status,2
  2470 ;; Tracked objects:
  2471 ;;		On entry : 0/0
  2472 ;;		On exit  : 0/0
  2473 ;;		Unchanged: 0/0
  2474 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2475 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2476 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2477 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2478 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2479 ;;Total ram usage:        0 bytes
  2480 ;; Hardware stack levels used:    1
  2481 ;; Hardware stack levels required when called:    4
  2482 ;; This function calls:
  2483 ;;		Nothing
  2484 ;; This function is called by:
  2485 ;;		_SYSTEM_Initialize
  2486 ;; This function uses a non-reentrant model
  2487 ;;
  2488                           
  2489                           	psect	text15
  2490  0006E6                     __ptext15:
  2491                           	opt stack 0
  2492  0006E6                     _CCP5_Initialize:
  2493                           	opt stack 25
  2494                           
  2495                           ;ccp5.c: 63: CCP5CON = 0x05;
  2496                           
  2497                           ;incstack = 0
  2498  0006E6  0E05               	movlw	5
  2499  0006E8  010F               	movlb	15	; () banked
  2500  0006EA  6F54               	movwf	84,b	;volatile
  2501                           
  2502                           ;ccp5.c: 66: CCPR5L = 0x00;
  2503  0006EC  0E00               	movlw	0
  2504  0006EE  6F55               	movwf	85,b	;volatile
  2505                           
  2506                           ;ccp5.c: 69: CCPR5H = 0x00;
  2507  0006F0  0E00               	movlw	0
  2508  0006F2  6F56               	movwf	86,b	;volatile
  2509                           
  2510                           ;ccp5.c: 72: CCPTMRS1bits.C5TSEL = 0x1;
  2511  0006F4  5148               	movf	72,w,b	;volatile
  2512  0006F6  0BF3               	andlw	-13
  2513  0006F8  0904               	iorlw	4
  2514  0006FA  6F48               	movwf	72,b	;volatile
  2515                           
  2516                           ; BSR set to: 15
  2517                           ;ccp5.c: 75: PIR4bits.CCP5IF = 0;
  2518  0006FC  947B               	bcf	3963,2,c	;volatile
  2519                           
  2520                           ; BSR set to: 15
  2521                           ;ccp5.c: 78: PIE4bits.CCP5IE = 1;
  2522  0006FE  847A               	bsf	3962,2,c	;volatile
  2523                           
  2524                           ; BSR set to: 15
  2525  000700  0012               	return		;funcret
  2526  000702                     __end_of_CCP5_Initialize:
  2527                           	opt stack 0
  2528                           tblptru	equ	0xFF8
  2529                           tblptrh	equ	0xFF7
  2530                           tblptrl	equ	0xFF6
  2531                           tablat	equ	0xFF5
  2532                           prodh	equ	0xFF4
  2533                           prodl	equ	0xFF3
  2534                           intcon	equ	0xFF2
  2535                           intcon2	equ	0xFF1
  2536                           postinc0	equ	0xFEE
  2537                           wreg	equ	0xFE8
  2538                           indf2	equ	0xFDF
  2539                           postinc2	equ	0xFDE
  2540                           postdec2	equ	0xFDD
  2541                           fsr2h	equ	0xFDA
  2542                           fsr2l	equ	0xFD9
  2543                           status	equ	0xFD8
  2544                           
  2545 ;; *************** function _CCP4_Initialize *****************
  2546 ;; Defined at:
  2547 ;;		line 58 in file "mcc_generated_files/ccp4.c"
  2548 ;; Parameters:    Size  Location     Type
  2549 ;;		None
  2550 ;; Auto vars:     Size  Location     Type
  2551 ;;		None
  2552 ;; Return value:  Size  Location     Type
  2553 ;;                  1    wreg      void 
  2554 ;; Registers used:
  2555 ;;		wreg, status,2
  2556 ;; Tracked objects:
  2557 ;;		On entry : 0/0
  2558 ;;		On exit  : 0/0
  2559 ;;		Unchanged: 0/0
  2560 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2561 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2562 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2563 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2564 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2565 ;;Total ram usage:        0 bytes
  2566 ;; Hardware stack levels used:    1
  2567 ;; Hardware stack levels required when called:    4
  2568 ;; This function calls:
  2569 ;;		Nothing
  2570 ;; This function is called by:
  2571 ;;		_SYSTEM_Initialize
  2572 ;; This function uses a non-reentrant model
  2573 ;;
  2574                           
  2575                           	psect	text16
  2576  000702                     __ptext16:
  2577                           	opt stack 0
  2578  000702                     _CCP4_Initialize:
  2579                           	opt stack 25
  2580                           
  2581                           ;ccp4.c: 63: CCP4CON = 0x05;
  2582                           
  2583                           ; BSR set to: 15
  2584                           ;incstack = 0
  2585  000702  0E05               	movlw	5
  2586  000704  010F               	movlb	15	; () banked
  2587  000706  6F57               	movwf	87,b	;volatile
  2588                           
  2589                           ;ccp4.c: 66: CCPR4L = 0x00;
  2590  000708  0E00               	movlw	0
  2591  00070A  6F58               	movwf	88,b	;volatile
  2592                           
  2593                           ;ccp4.c: 69: CCPR4H = 0x00;
  2594  00070C  0E00               	movlw	0
  2595  00070E  6F59               	movwf	89,b	;volatile
  2596                           
  2597                           ;ccp4.c: 72: CCPTMRS1bits.C4TSEL = 0x1;
  2598  000710  5148               	movf	72,w,b	;volatile
  2599  000712  0BFC               	andlw	-4
  2600  000714  0901               	iorlw	1
  2601  000716  6F48               	movwf	72,b	;volatile
  2602                           
  2603                           ; BSR set to: 15
  2604                           ;ccp4.c: 75: PIR4bits.CCP4IF = 0;
  2605  000718  927B               	bcf	3963,1,c	;volatile
  2606                           
  2607                           ; BSR set to: 15
  2608                           ;ccp4.c: 78: PIE4bits.CCP4IE = 1;
  2609  00071A  827A               	bsf	3962,1,c	;volatile
  2610                           
  2611                           ; BSR set to: 15
  2612  00071C  0012               	return		;funcret
  2613  00071E                     __end_of_CCP4_Initialize:
  2614                           	opt stack 0
  2615                           tblptru	equ	0xFF8
  2616                           tblptrh	equ	0xFF7
  2617                           tblptrl	equ	0xFF6
  2618                           tablat	equ	0xFF5
  2619                           prodh	equ	0xFF4
  2620                           prodl	equ	0xFF3
  2621                           intcon	equ	0xFF2
  2622                           intcon2	equ	0xFF1
  2623                           postinc0	equ	0xFEE
  2624                           wreg	equ	0xFE8
  2625                           indf2	equ	0xFDF
  2626                           postinc2	equ	0xFDE
  2627                           postdec2	equ	0xFDD
  2628                           fsr2h	equ	0xFDA
  2629                           fsr2l	equ	0xFD9
  2630                           status	equ	0xFD8
  2631                           
  2632 ;; *************** function _EUSART2_is_rx_ready *****************
  2633 ;; Defined at:
  2634 ;;		line 83 in file "mcc_generated_files/eusart2.c"
  2635 ;; Parameters:    Size  Location     Type
  2636 ;;		None
  2637 ;; Auto vars:     Size  Location     Type
  2638 ;;		None
  2639 ;; Return value:  Size  Location     Type
  2640 ;;                  1    wreg      unsigned char 
  2641 ;; Registers used:
  2642 ;;		wreg
  2643 ;; Tracked objects:
  2644 ;;		On entry : 0/0
  2645 ;;		On exit  : 0/0
  2646 ;;		Unchanged: 0/0
  2647 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2648 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2649 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2650 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2651 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2652 ;;Total ram usage:        0 bytes
  2653 ;; Hardware stack levels used:    1
  2654 ;; Hardware stack levels required when called:    4
  2655 ;; This function calls:
  2656 ;;		Nothing
  2657 ;; This function is called by:
  2658 ;;		_main
  2659 ;; This function uses a non-reentrant model
  2660 ;;
  2661                           
  2662                           	psect	text17
  2663  000792                     __ptext17:
  2664                           	opt stack 0
  2665  000792                     _EUSART2_is_rx_ready:
  2666                           	opt stack 26
  2667                           
  2668                           ;eusart2.c: 85: return PIR3bits.RC2IF;
  2669                           
  2670                           ; BSR set to: 15
  2671                           ;incstack = 0
  2672  000792  AAA4               	btfss	4004,5,c	;volatile
  2673  000794  D002               	goto	u150
  2674  000796  0E01               	movlw	1
  2675  000798  0012               	return	
  2676  00079A                     u150:
  2677  00079A  0E00               	movlw	0
  2678  00079C  0012               	return	
  2679  00079E                     __end_of_EUSART2_is_rx_ready:
  2680                           	opt stack 0
  2681                           tblptru	equ	0xFF8
  2682                           tblptrh	equ	0xFF7
  2683                           tblptrl	equ	0xFF6
  2684                           tablat	equ	0xFF5
  2685                           prodh	equ	0xFF4
  2686                           prodl	equ	0xFF3
  2687                           intcon	equ	0xFF2
  2688                           intcon2	equ	0xFF1
  2689                           postinc0	equ	0xFEE
  2690                           wreg	equ	0xFE8
  2691                           indf2	equ	0xFDF
  2692                           postinc2	equ	0xFDE
  2693                           postdec2	equ	0xFDD
  2694                           fsr2h	equ	0xFDA
  2695                           fsr2l	equ	0xFD9
  2696                           status	equ	0xFD8
  2697                           
  2698 ;; *************** function _EUSART2_Read *****************
  2699 ;; Defined at:
  2700 ;;		line 93 in file "mcc_generated_files/eusart2.c"
  2701 ;; Parameters:    Size  Location     Type
  2702 ;;		None
  2703 ;; Auto vars:     Size  Location     Type
  2704 ;;		None
  2705 ;; Return value:  Size  Location     Type
  2706 ;;                  1    wreg      unsigned char 
  2707 ;; Registers used:
  2708 ;;		wreg, status,2
  2709 ;; Tracked objects:
  2710 ;;		On entry : 0/0
  2711 ;;		On exit  : 0/0
  2712 ;;		Unchanged: 0/0
  2713 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2714 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2715 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2716 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2717 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2718 ;;Total ram usage:        0 bytes
  2719 ;; Hardware stack levels used:    1
  2720 ;; Hardware stack levels required when called:    4
  2721 ;; This function calls:
  2722 ;;		Nothing
  2723 ;; This function is called by:
  2724 ;;		_main
  2725 ;;		_getch
  2726 ;; This function uses a non-reentrant model
  2727 ;;
  2728                           
  2729                           	psect	text18
  2730  000776                     __ptext18:
  2731                           	opt stack 0
  2732  000776                     _EUSART2_Read:
  2733                           	opt stack 26
  2734                           
  2735                           ;eusart2.c: 96: {
  2736                           
  2737                           ;eusart2.c: 95: while(!PIR3bits.RC2IF)
  2738                           
  2739                           ;incstack = 0
  2740  000776  AAA4               	btfss	4004,5,c	;volatile
  2741  000778  D7FE               	goto	_EUSART2_Read
  2742                           
  2743                           ;eusart2.c: 97: }
  2744                           ;eusart2.c: 100: if(1 == RCSTA2bits.OERR)
  2745  00077A  A271               	btfss	3953,1,c	;volatile
  2746  00077C  D002               	goto	l213
  2747                           
  2748                           ;eusart2.c: 101: {
  2749                           ;eusart2.c: 104: RCSTA2bits.CREN = 0;
  2750  00077E  9871               	bcf	3953,4,c	;volatile
  2751                           
  2752                           ;eusart2.c: 105: RCSTA2bits.CREN = 1;
  2753  000780  8871               	bsf	3953,4,c	;volatile
  2754  000782                     l213:
  2755                           
  2756                           ;eusart2.c: 106: }
  2757                           ;eusart2.c: 108: return RCREG2;
  2758  000782  5074               	movf	3956,w,c	;volatile
  2759  000784  0012               	return	
  2760  000786                     __end_of_EUSART2_Read:
  2761                           	opt stack 0
  2762                           tblptru	equ	0xFF8
  2763                           tblptrh	equ	0xFF7
  2764                           tblptrl	equ	0xFF6
  2765                           tablat	equ	0xFF5
  2766                           prodh	equ	0xFF4
  2767                           prodl	equ	0xFF3
  2768                           intcon	equ	0xFF2
  2769                           intcon2	equ	0xFF1
  2770                           postinc0	equ	0xFEE
  2771                           wreg	equ	0xFE8
  2772                           indf2	equ	0xFDF
  2773                           postinc2	equ	0xFDE
  2774                           postdec2	equ	0xFDD
  2775                           fsr2h	equ	0xFDA
  2776                           fsr2l	equ	0xFD9
  2777                           status	equ	0xFD8
  2778                           
  2779 ;; *************** function _INTERRUPT_InterruptManager *****************
  2780 ;; Defined at:
  2781 ;;		line 58 in file "mcc_generated_files/interrupt_manager.c"
  2782 ;; Parameters:    Size  Location     Type
  2783 ;;		None
  2784 ;; Auto vars:     Size  Location     Type
  2785 ;;		None
  2786 ;; Return value:  Size  Location     Type
  2787 ;;                  1    wreg      void 
  2788 ;; Registers used:
  2789 ;;		wreg, status,2, status,0, pclath, tosl, cstack
  2790 ;; Tracked objects:
  2791 ;;		On entry : 0/0
  2792 ;;		On exit  : 0/0
  2793 ;;		Unchanged: 0/0
  2794 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2795 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2796 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2797 ;;      Temps:         18       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2798 ;;      Totals:        18       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2799 ;;Total ram usage:       18 bytes
  2800 ;; Hardware stack levels used:    1
  2801 ;; Hardware stack levels required when called:    3
  2802 ;; This function calls:
  2803 ;;		_CCP4_CaptureISR
  2804 ;;		_CCP5_CaptureISR
  2805 ;;		_TMR0_ISR
  2806 ;; This function is called by:
  2807 ;;		Interrupt level 2
  2808 ;; This function uses a non-reentrant model
  2809 ;;
  2810                           
  2811                           	psect	intcode
  2812  000008                     __pintcode:
  2813                           	opt stack 0
  2814  000008                     _INTERRUPT_InterruptManager:
  2815                           	opt stack 24
  2816                           
  2817                           ;incstack = 0
  2818  000008  8245               	bsf	btemp,1,c	;set compiler interrupt flag (level 2)
  2819  00000A  CFFA F005          	movff	pclath,??_INTERRUPT_InterruptManager
  2820  00000E  CFFB F006          	movff	pclatu,??_INTERRUPT_InterruptManager+1
  2821  000012  CFE9 F007          	movff	fsr0l,??_INTERRUPT_InterruptManager+2
  2822  000016  CFEA F008          	movff	fsr0h,??_INTERRUPT_InterruptManager+3
  2823  00001A  CFE1 F009          	movff	fsr1l,??_INTERRUPT_InterruptManager+4
  2824  00001E  CFE2 F00A          	movff	fsr1h,??_INTERRUPT_InterruptManager+5
  2825  000022  CFD9 F00B          	movff	fsr2l,??_INTERRUPT_InterruptManager+6
  2826  000026  CFDA F00C          	movff	fsr2h,??_INTERRUPT_InterruptManager+7
  2827  00002A  CFF3 F00D          	movff	prodl,??_INTERRUPT_InterruptManager+8
  2828  00002E  CFF4 F00E          	movff	prodh,??_INTERRUPT_InterruptManager+9
  2829  000032  CFF6 F00F          	movff	tblptrl,??_INTERRUPT_InterruptManager+10
  2830  000036  CFF7 F010          	movff	tblptrh,??_INTERRUPT_InterruptManager+11
  2831  00003A  CFF8 F011          	movff	tblptru,??_INTERRUPT_InterruptManager+12
  2832  00003E  CFF5 F012          	movff	tablat,??_INTERRUPT_InterruptManager+13
  2833  000042  C045  F013         	movff	btemp,??_INTERRUPT_InterruptManager+14
  2834  000046  C046  F014         	movff	btemp+1,??_INTERRUPT_InterruptManager+15
  2835  00004A  C047  F015         	movff	btemp+2,??_INTERRUPT_InterruptManager+16
  2836  00004E  C048  F016         	movff	btemp+3,??_INTERRUPT_InterruptManager+17
  2837                           
  2838                           ;interrupt_manager.c: 61: if(INTCONbits.TMR0IE == 1 && INTCONbits.TMR0IF == 1)
  2839  000052  BAF2               	btfsc	intcon,5,c	;volatile
  2840  000054  A4F2               	btfss	intcon,2,c	;volatile
  2841  000056  D003               	goto	i2l52
  2842                           
  2843                           ;interrupt_manager.c: 62: {
  2844                           ;interrupt_manager.c: 63: TMR0_ISR();
  2845  000058  EC2C  F003         	call	_TMR0_ISR	;wreg free
  2846                           
  2847                           ;interrupt_manager.c: 64: }
  2848  00005C  D00D               	goto	i2l57
  2849  00005E                     i2l52:
  2850                           
  2851                           ;interrupt_manager.c: 65: else if(INTCONbits.PEIE == 1)
  2852  00005E  ACF2               	btfss	intcon,6,c	;volatile
  2853  000060  D00B               	goto	i2l57
  2854                           
  2855                           ;interrupt_manager.c: 66: {
  2856                           ;interrupt_manager.c: 67: if(PIE4bits.CCP5IE == 1 && PIR4bits.CCP5IF == 1)
  2857  000062  B47A               	btfsc	3962,2,c	;volatile
  2858  000064  A47B               	btfss	3963,2,c	;volatile
  2859  000066  D003               	goto	i2l55
  2860                           
  2861                           ;interrupt_manager.c: 68: {
  2862                           ;interrupt_manager.c: 69: CCP5_CaptureISR();
  2863  000068  EC8F  F003         	call	_CCP5_CaptureISR	;wreg free
  2864                           
  2865                           ;interrupt_manager.c: 70: }
  2866  00006C  D005               	goto	i2l57
  2867  00006E                     i2l55:
  2868                           
  2869                           ;interrupt_manager.c: 71: else if(PIE4bits.CCP4IE == 1 && PIR4bits.CCP4IF == 1)
  2870  00006E  B27A               	btfsc	3962,1,c	;volatile
  2871  000070  A27B               	btfss	3963,1,c	;volatile
  2872  000072  D002               	goto	i2l57
  2873                           
  2874                           ;interrupt_manager.c: 72: {
  2875                           ;interrupt_manager.c: 73: CCP4_CaptureISR();
  2876  000074  EC9B  F003         	call	_CCP4_CaptureISR	;wreg free
  2877  000078                     i2l57:
  2878                           
  2879                           ;interrupt_manager.c: 80: else
  2880                           ;interrupt_manager.c: 81: {
  2881                           
  2882                           ;interrupt_manager.c: 78: }
  2883                           ;interrupt_manager.c: 79: }
  2884                           
  2885                           ;interrupt_manager.c: 75: else
  2886                           ;interrupt_manager.c: 76: {
  2887  000078  C016  F048         	movff	??_INTERRUPT_InterruptManager+17,btemp+3
  2888  00007C  C015  F047         	movff	??_INTERRUPT_InterruptManager+16,btemp+2
  2889  000080  C014  F046         	movff	??_INTERRUPT_InterruptManager+15,btemp+1
  2890  000084  C013  F045         	movff	??_INTERRUPT_InterruptManager+14,btemp
  2891  000088  C012  FFF5         	movff	??_INTERRUPT_InterruptManager+13,tablat
  2892  00008C  C011  FFF8         	movff	??_INTERRUPT_InterruptManager+12,tblptru
  2893  000090  C010  FFF7         	movff	??_INTERRUPT_InterruptManager+11,tblptrh
  2894  000094  C00F  FFF6         	movff	??_INTERRUPT_InterruptManager+10,tblptrl
  2895  000098  C00E  FFF4         	movff	??_INTERRUPT_InterruptManager+9,prodh
  2896  00009C  C00D  FFF3         	movff	??_INTERRUPT_InterruptManager+8,prodl
  2897  0000A0  C00C  FFDA         	movff	??_INTERRUPT_InterruptManager+7,fsr2h
  2898  0000A4  C00B  FFD9         	movff	??_INTERRUPT_InterruptManager+6,fsr2l
  2899  0000A8  C00A  FFE2         	movff	??_INTERRUPT_InterruptManager+5,fsr1h
  2900  0000AC  C009  FFE1         	movff	??_INTERRUPT_InterruptManager+4,fsr1l
  2901  0000B0  C008  FFEA         	movff	??_INTERRUPT_InterruptManager+3,fsr0h
  2902  0000B4  C007  FFE9         	movff	??_INTERRUPT_InterruptManager+2,fsr0l
  2903  0000B8  C006  FFFB         	movff	??_INTERRUPT_InterruptManager+1,pclatu
  2904  0000BC  C005  FFFA         	movff	??_INTERRUPT_InterruptManager,pclath
  2905  0000C0  9245               	bcf	btemp,1,c	;clear compiler interrupt flag (level 2)
  2906  0000C2  0011               	retfie		f
  2907  0000C4                     __end_of_INTERRUPT_InterruptManager:
  2908                           	opt stack 0
  2909                           pclatu	equ	0xFFB
  2910                           pclath	equ	0xFFA
  2911                           tblptru	equ	0xFF8
  2912                           tblptrh	equ	0xFF7
  2913                           tblptrl	equ	0xFF6
  2914                           tablat	equ	0xFF5
  2915                           prodh	equ	0xFF4
  2916                           prodl	equ	0xFF3
  2917                           intcon	equ	0xFF2
  2918                           intcon2	equ	0xFF1
  2919                           postinc0	equ	0xFEE
  2920                           fsr0h	equ	0xFEA
  2921                           fsr0l	equ	0xFE9
  2922                           wreg	equ	0xFE8
  2923                           fsr1h	equ	0xFE2
  2924                           fsr1l	equ	0xFE1
  2925                           indf2	equ	0xFDF
  2926                           postinc2	equ	0xFDE
  2927                           postdec2	equ	0xFDD
  2928                           fsr2h	equ	0xFDA
  2929                           fsr2l	equ	0xFD9
  2930                           status	equ	0xFD8
  2931                           
  2932 ;; *************** function _TMR0_ISR *****************
  2933 ;; Defined at:
  2934 ;;		line 136 in file "mcc_generated_files/tmr0.c"
  2935 ;; Parameters:    Size  Location     Type
  2936 ;;		None
  2937 ;; Auto vars:     Size  Location     Type
  2938 ;;		None
  2939 ;; Return value:  Size  Location     Type
  2940 ;;                  1    wreg      void 
  2941 ;; Registers used:
  2942 ;;		wreg, status,2, status,0, pclath, tosl, cstack
  2943 ;; Tracked objects:
  2944 ;;		On entry : 0/0
  2945 ;;		On exit  : 0/0
  2946 ;;		Unchanged: 0/0
  2947 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2948 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2949 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2950 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2951 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2952 ;;Total ram usage:        0 bytes
  2953 ;; Hardware stack levels used:    1
  2954 ;; Hardware stack levels required when called:    2
  2955 ;; This function calls:
  2956 ;;		Absolute function
  2957 ;;		_TMR0_DefaultInterruptHandler
  2958 ;; This function is called by:
  2959 ;;		_INTERRUPT_InterruptManager
  2960 ;; This function uses a non-reentrant model
  2961 ;;
  2962                           
  2963                           	psect	text20
  2964  000658                     __ptext20:
  2965                           	opt stack 0
  2966  000658                     _TMR0_ISR:
  2967                           	opt stack 24
  2968                           
  2969                           ;tmr0.c: 140: INTCONbits.TMR0IF = 0;
  2970                           
  2971                           ;incstack = 0
  2972  000658  94F2               	bcf	intcon,2,c	;volatile
  2973                           
  2974                           ;tmr0.c: 144: TMR0H = timer0ReloadVal >> 8;
  2975  00065A  503D               	movf	_timer0ReloadVal+1,w,c	;volatile
  2976  00065C  6ED7               	movwf	4055,c	;volatile
  2977                           
  2978                           ;tmr0.c: 145: TMR0L = (uint8_t) timer0ReloadVal;
  2979  00065E  C03C  FFD6         	movff	_timer0ReloadVal,4054	;volatile
  2980                           
  2981                           ;tmr0.c: 147: if(TMR0_InterruptHandler)
  2982  000662  503E               	movf	_TMR0_InterruptHandler,w,c
  2983  000664  103F               	iorwf	_TMR0_InterruptHandler+1,w,c
  2984  000666  B4D8               	btfsc	status,2,c
  2985  000668  0012               	return	
  2986                           
  2987                           ;tmr0.c: 148: {
  2988                           ;tmr0.c: 149: TMR0_InterruptHandler();
  2989  00066A  D801               	call	i2u54_48
  2990  00066C  0012               	return	
  2991  00066E                     i2u54_48:
  2992  00066E  0005               	push	
  2993  000670  6EFA               	movwf	pclath,c
  2994  000672  503E               	movf	_TMR0_InterruptHandler,w,c
  2995  000674  6EFD               	movwf	tosl,c
  2996  000676  503F               	movf	_TMR0_InterruptHandler+1,w,c
  2997  000678  6EFE               	movwf	tosh,c
  2998  00067A  6AFF               	clrf	tosu,c
  2999  00067C  50FA               	movf	pclath,w,c
  3000  00067E  0012               	return		;indir
  3001  000680                     __end_of_TMR0_ISR:
  3002                           	opt stack 0
  3003                           tosu	equ	0xFFF
  3004                           tosh	equ	0xFFE
  3005                           tosl	equ	0xFFD
  3006                           pclatu	equ	0xFFB
  3007                           pclath	equ	0xFFA
  3008                           tblptru	equ	0xFF8
  3009                           tblptrh	equ	0xFF7
  3010                           tblptrl	equ	0xFF6
  3011                           tablat	equ	0xFF5
  3012                           prodh	equ	0xFF4
  3013                           prodl	equ	0xFF3
  3014                           intcon	equ	0xFF2
  3015                           intcon2	equ	0xFF1
  3016                           postinc0	equ	0xFEE
  3017                           fsr0h	equ	0xFEA
  3018                           fsr0l	equ	0xFE9
  3019                           wreg	equ	0xFE8
  3020                           fsr1h	equ	0xFE2
  3021                           fsr1l	equ	0xFE1
  3022                           indf2	equ	0xFDF
  3023                           postinc2	equ	0xFDE
  3024                           postdec2	equ	0xFDD
  3025                           fsr2h	equ	0xFDA
  3026                           fsr2l	equ	0xFD9
  3027                           status	equ	0xFD8
  3028                           
  3029 ;; *************** function _TMR0_DefaultInterruptHandler *****************
  3030 ;; Defined at:
  3031 ;;		line 83 in file "main.c"
  3032 ;; Parameters:    Size  Location     Type
  3033 ;;		None
  3034 ;; Auto vars:     Size  Location     Type
  3035 ;;		None
  3036 ;; Return value:  Size  Location     Type
  3037 ;;                  1    wreg      void 
  3038 ;; Registers used:
  3039 ;;		wreg, status,2, status,0, cstack
  3040 ;; Tracked objects:
  3041 ;;		On entry : 0/0
  3042 ;;		On exit  : 0/0
  3043 ;;		Unchanged: 0/0
  3044 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3045 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3046 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3047 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3048 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3049 ;;Total ram usage:        2 bytes
  3050 ;; Hardware stack levels used:    1
  3051 ;; Hardware stack levels required when called:    1
  3052 ;; This function calls:
  3053 ;;		_TMR0_WriteTimer
  3054 ;; This function is called by:
  3055 ;;		_TMR0_Initialize
  3056 ;;		_TMR0_ISR
  3057 ;; This function uses a non-reentrant model
  3058 ;;
  3059                           
  3060                           	psect	text21
  3061  000556                     __ptext21:
  3062                           	opt stack 0
  3063  000556                     _TMR0_DefaultInterruptHandler:
  3064                           	opt stack 24
  3065                           
  3066                           ;main.c: 85: static uint8_t pulseHigh = 0;
  3067                           ;main.c: 86: if(!pulseHigh){
  3068                           
  3069                           ;incstack = 0
  3070  000556  5040               	movf	TMR0_DefaultInterruptHandler@pulseHigh,w,c
  3071  000558  A4D8               	btfss	status,2,c
  3072  00055A  D013               	goto	i2l155
  3073                           
  3074                           ;main.c: 87: do { LATAbits.LATA1 = 1; } while(0);
  3075  00055C  8289               	bsf	3977,1,c	;volatile
  3076                           
  3077                           ;main.c: 88: TMR0_WriteTimer(0xFFFF -yawPosition );
  3078  00055E  C043  F003         	movff	_yawPosition,??_TMR0_DefaultInterruptHandler
  3079  000562  C044  F004         	movff	_yawPosition+1,??_TMR0_DefaultInterruptHandler+1
  3080  000566  1E03               	comf	??_TMR0_DefaultInterruptHandler,f,c
  3081  000568  1E04               	comf	??_TMR0_DefaultInterruptHandler+1,f,c
  3082  00056A  4A03               	infsnz	??_TMR0_DefaultInterruptHandler,f,c
  3083  00056C  2A04               	incf	??_TMR0_DefaultInterruptHandler+1,f,c
  3084  00056E  0EFF               	movlw	255
  3085  000570  2403               	addwf	??_TMR0_DefaultInterruptHandler,w,c
  3086  000572  6E01               	movwf	TMR0_WriteTimer@timerVal,c
  3087  000574  0EFF               	movlw	255
  3088  000576  2004               	addwfc	??_TMR0_DefaultInterruptHandler+1,w,c
  3089  000578  6E02               	movwf	TMR0_WriteTimer@timerVal+1,c
  3090  00057A  ECD9  F003         	call	_TMR0_WriteTimer	;wreg free
  3091                           
  3092                           ;main.c: 89: pulseHigh = 1;
  3093  00057E  0E01               	movlw	1
  3094  000580  D008               	goto	L4
  3095  000582                     i2l155:
  3096                           
  3097                           ;main.c: 91: else{
  3098                           ;main.c: 92: do { LATAbits.LATA1 = 0; } while(0);
  3099  000582  9289               	bcf	3977,1,c	;volatile
  3100                           
  3101                           ;main.c: 93: TMR0_WriteTimer(0xFFFF -40000 );
  3102  000584  0E63               	movlw	99
  3103  000586  6E02               	movwf	TMR0_WriteTimer@timerVal+1,c
  3104  000588  0EBF               	movlw	191
  3105  00058A  6E01               	movwf	TMR0_WriteTimer@timerVal,c
  3106  00058C  ECD9  F003         	call	_TMR0_WriteTimer	;wreg free
  3107                           
  3108                           ;main.c: 94: pulseHigh = 0;
  3109  000590  0E00               	movlw	0
  3110  000592                     L4:
  3111  000592  6E40               	movwf	TMR0_DefaultInterruptHandler@pulseHigh,c
  3112                           
  3113                           ;main.c: 95: }
  3114                           ;main.c: 98: INTCONbits.TMR0IF = 0;
  3115  000594  94F2               	bcf	intcon,2,c	;volatile
  3116  000596  0012               	return		;funcret
  3117  000598                     __end_of_TMR0_DefaultInterruptHandler:
  3118                           	opt stack 0
  3119                           tosu	equ	0xFFF
  3120                           tosh	equ	0xFFE
  3121                           tosl	equ	0xFFD
  3122                           pclatu	equ	0xFFB
  3123                           pclath	equ	0xFFA
  3124                           tblptru	equ	0xFF8
  3125                           tblptrh	equ	0xFF7
  3126                           tblptrl	equ	0xFF6
  3127                           tablat	equ	0xFF5
  3128                           prodh	equ	0xFF4
  3129                           prodl	equ	0xFF3
  3130                           intcon	equ	0xFF2
  3131                           intcon2	equ	0xFF1
  3132                           postinc0	equ	0xFEE
  3133                           fsr0h	equ	0xFEA
  3134                           fsr0l	equ	0xFE9
  3135                           wreg	equ	0xFE8
  3136                           fsr1h	equ	0xFE2
  3137                           fsr1l	equ	0xFE1
  3138                           indf2	equ	0xFDF
  3139                           postinc2	equ	0xFDE
  3140                           postdec2	equ	0xFDD
  3141                           fsr2h	equ	0xFDA
  3142                           fsr2l	equ	0xFD9
  3143                           status	equ	0xFD8
  3144                           
  3145 ;; *************** function _TMR0_WriteTimer *****************
  3146 ;; Defined at:
  3147 ;;		line 122 in file "mcc_generated_files/tmr0.c"
  3148 ;; Parameters:    Size  Location     Type
  3149 ;;  timerVal        2    0[COMRAM] unsigned int 
  3150 ;; Auto vars:     Size  Location     Type
  3151 ;;		None
  3152 ;; Return value:  Size  Location     Type
  3153 ;;                  1    wreg      void 
  3154 ;; Registers used:
  3155 ;;		wreg, status,2
  3156 ;; Tracked objects:
  3157 ;;		On entry : 0/0
  3158 ;;		On exit  : 0/0
  3159 ;;		Unchanged: 0/0
  3160 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3161 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3162 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3163 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3164 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3165 ;;Total ram usage:        2 bytes
  3166 ;; Hardware stack levels used:    1
  3167 ;; This function calls:
  3168 ;;		Nothing
  3169 ;; This function is called by:
  3170 ;;		_TMR0_DefaultInterruptHandler
  3171 ;; This function uses a non-reentrant model
  3172 ;;
  3173                           
  3174                           	psect	text22
  3175  0007B2                     __ptext22:
  3176                           	opt stack 0
  3177  0007B2                     _TMR0_WriteTimer:
  3178                           	opt stack 24
  3179                           
  3180                           ;tmr0.c: 125: TMR0H = timerVal >> 8;
  3181                           
  3182                           ;incstack = 0
  3183  0007B2  5002               	movf	TMR0_WriteTimer@timerVal+1,w,c
  3184  0007B4  6ED7               	movwf	4055,c	;volatile
  3185                           
  3186                           ;tmr0.c: 126: TMR0L = (uint8_t) timerVal;
  3187  0007B6  C001  FFD6         	movff	TMR0_WriteTimer@timerVal,4054	;volatile
  3188  0007BA  0012               	return		;funcret
  3189  0007BC                     __end_of_TMR0_WriteTimer:
  3190                           	opt stack 0
  3191                           tosu	equ	0xFFF
  3192                           tosh	equ	0xFFE
  3193                           tosl	equ	0xFFD
  3194                           pclatu	equ	0xFFB
  3195                           pclath	equ	0xFFA
  3196                           tblptru	equ	0xFF8
  3197                           tblptrh	equ	0xFF7
  3198                           tblptrl	equ	0xFF6
  3199                           tablat	equ	0xFF5
  3200                           prodh	equ	0xFF4
  3201                           prodl	equ	0xFF3
  3202                           intcon	equ	0xFF2
  3203                           intcon2	equ	0xFF1
  3204                           postinc0	equ	0xFEE
  3205                           fsr0h	equ	0xFEA
  3206                           fsr0l	equ	0xFE9
  3207                           wreg	equ	0xFE8
  3208                           fsr1h	equ	0xFE2
  3209                           fsr1l	equ	0xFE1
  3210                           indf2	equ	0xFDF
  3211                           postinc2	equ	0xFDE
  3212                           postdec2	equ	0xFDD
  3213                           fsr2h	equ	0xFDA
  3214                           fsr2l	equ	0xFD9
  3215                           status	equ	0xFD8
  3216                           
  3217 ;; *************** function _CCP5_CaptureISR *****************
  3218 ;; Defined at:
  3219 ;;		line 81 in file "mcc_generated_files/ccp5.c"
  3220 ;; Parameters:    Size  Location     Type
  3221 ;;		None
  3222 ;; Auto vars:     Size  Location     Type
  3223 ;;  module          2    2[COMRAM] struct CCPR5Reg_tag
  3224 ;; Return value:  Size  Location     Type
  3225 ;;                  1    wreg      void 
  3226 ;; Registers used:
  3227 ;;		wreg, status,2, status,0, cstack
  3228 ;; Tracked objects:
  3229 ;;		On entry : 0/0
  3230 ;;		On exit  : 0/0
  3231 ;;		Unchanged: 0/0
  3232 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3233 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3234 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3235 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3236 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3237 ;;Total ram usage:        2 bytes
  3238 ;; Hardware stack levels used:    1
  3239 ;; Hardware stack levels required when called:    1
  3240 ;; This function calls:
  3241 ;;		_CCP5_CallBack
  3242 ;; This function is called by:
  3243 ;;		_INTERRUPT_InterruptManager
  3244 ;; This function uses a non-reentrant model
  3245 ;;
  3246                           
  3247                           	psect	text23
  3248  00071E                     __ptext23:
  3249                           	opt stack 0
  3250  00071E                     _CCP5_CaptureISR:
  3251                           	opt stack 25
  3252                           
  3253                           ;ccp5.c: 83: CCP_PERIOD_REG_T module;
  3254                           ;ccp5.c: 86: PIR4bits.CCP5IF = 0;
  3255                           
  3256                           ;incstack = 0
  3257  00071E  947B               	bcf	3963,2,c	;volatile
  3258                           
  3259                           ;ccp5.c: 89: module.ccpr5l = CCPR5L;
  3260  000720  CF55 F003          	movff	3925,CCP5_CaptureISR@module	;volatile
  3261                           
  3262                           ;ccp5.c: 90: module.ccpr5h = CCPR5H;
  3263  000724  CF56 F004          	movff	3926,CCP5_CaptureISR@module+1	;volatile
  3264                           
  3265                           ;ccp5.c: 93: CCP5_CallBack(module.ccpr5_16Bit);
  3266  000728  C003  F001         	movff	CCP5_CaptureISR@module,CCP5_CallBack@capturedValue
  3267  00072C  C004  F002         	movff	CCP5_CaptureISR@module+1,CCP5_CallBack@capturedValue+1
  3268  000730  EC40  F003         	call	_CCP5_CallBack	;wreg free
  3269  000734  0012               	return		;funcret
  3270  000736                     __end_of_CCP5_CaptureISR:
  3271                           	opt stack 0
  3272                           tosu	equ	0xFFF
  3273                           tosh	equ	0xFFE
  3274                           tosl	equ	0xFFD
  3275                           pclatu	equ	0xFFB
  3276                           pclath	equ	0xFFA
  3277                           tblptru	equ	0xFF8
  3278                           tblptrh	equ	0xFF7
  3279                           tblptrl	equ	0xFF6
  3280                           tablat	equ	0xFF5
  3281                           prodh	equ	0xFF4
  3282                           prodl	equ	0xFF3
  3283                           intcon	equ	0xFF2
  3284                           intcon2	equ	0xFF1
  3285                           postinc0	equ	0xFEE
  3286                           fsr0h	equ	0xFEA
  3287                           fsr0l	equ	0xFE9
  3288                           wreg	equ	0xFE8
  3289                           fsr1h	equ	0xFE2
  3290                           fsr1l	equ	0xFE1
  3291                           indf2	equ	0xFDF
  3292                           postinc2	equ	0xFDE
  3293                           postdec2	equ	0xFDD
  3294                           fsr2h	equ	0xFDA
  3295                           fsr2l	equ	0xFD9
  3296                           status	equ	0xFD8
  3297                           
  3298 ;; *************** function _CCP5_CallBack *****************
  3299 ;; Defined at:
  3300 ;;		line 123 in file "main.c"
  3301 ;; Parameters:    Size  Location     Type
  3302 ;;  capturedValu    2    0[COMRAM] unsigned int 
  3303 ;; Auto vars:     Size  Location     Type
  3304 ;;		None
  3305 ;; Return value:  Size  Location     Type
  3306 ;;                  1    wreg      void 
  3307 ;; Registers used:
  3308 ;;		wreg, status,2, status,0
  3309 ;; Tracked objects:
  3310 ;;		On entry : 0/0
  3311 ;;		On exit  : 0/0
  3312 ;;		Unchanged: 0/0
  3313 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3314 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3315 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3316 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3317 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3318 ;;Total ram usage:        2 bytes
  3319 ;; Hardware stack levels used:    1
  3320 ;; This function calls:
  3321 ;;		Nothing
  3322 ;; This function is called by:
  3323 ;;		_CCP5_CaptureISR
  3324 ;; This function uses a non-reentrant model
  3325 ;;
  3326                           
  3327                           	psect	text24
  3328  000680                     __ptext24:
  3329                           	opt stack 0
  3330  000680                     _CCP5_CallBack:
  3331                           	opt stack 25
  3332                           
  3333                           ;main.c: 125: if(CCP5CONbits.CCP5M == 0b0101){
  3334                           
  3335                           ;incstack = 0
  3336  000680  010F               	movlb	15	; () banked
  3337  000682  5154               	movf	84,w,b	;volatile
  3338  000684  0B0F               	andlw	15
  3339  000686  0A05               	xorlw	5
  3340  000688  A4D8               	btfss	status,2,c
  3341  00068A  D006               	goto	i2l171
  3342                           
  3343                           ; BSR set to: 15
  3344                           ;main.c: 126: CCP5CONbits.CCP5M = 0b0100;
  3345  00068C  5154               	movf	84,w,b	;volatile
  3346  00068E  0BF0               	andlw	-16
  3347  000690  0904               	iorlw	4
  3348  000692  6F54               	movwf	84,b	;volatile
  3349                           
  3350                           ;main.c: 127: encoderB = 1;
  3351  000694  0E01               	movlw	1
  3352  000696  D005               	goto	L5
  3353  000698                     i2l171:
  3354                           
  3355                           ; BSR set to: 15
  3356                           ;main.c: 130: else{
  3357                           ;main.c: 131: CCP5CONbits.CCP5M = 0b0101;
  3358                           
  3359                           ; BSR set to: 15
  3360  000698  5154               	movf	84,w,b	;volatile
  3361  00069A  0BF0               	andlw	-16
  3362  00069C  0905               	iorlw	5
  3363  00069E  6F54               	movwf	84,b	;volatile
  3364                           
  3365                           ;main.c: 132: encoderB = 0;
  3366  0006A0  0E00               	movlw	0
  3367  0006A2                     L5:
  3368  0006A2  6E41               	movwf	_encoderB,c
  3369                           
  3370                           ; BSR set to: 15
  3371                           ;main.c: 133: }
  3372                           ;main.c: 135: PIR4bits.CCP5IF = 0;
  3373                           
  3374                           ; BSR set to: 15
  3375  0006A4  947B               	bcf	3963,2,c	;volatile
  3376                           
  3377                           ; BSR set to: 15
  3378  0006A6  0012               	return		;funcret
  3379  0006A8                     __end_of_CCP5_CallBack:
  3380                           	opt stack 0
  3381                           tosu	equ	0xFFF
  3382                           tosh	equ	0xFFE
  3383                           tosl	equ	0xFFD
  3384                           pclatu	equ	0xFFB
  3385                           pclath	equ	0xFFA
  3386                           tblptru	equ	0xFF8
  3387                           tblptrh	equ	0xFF7
  3388                           tblptrl	equ	0xFF6
  3389                           tablat	equ	0xFF5
  3390                           prodh	equ	0xFF4
  3391                           prodl	equ	0xFF3
  3392                           intcon	equ	0xFF2
  3393                           intcon2	equ	0xFF1
  3394                           postinc0	equ	0xFEE
  3395                           fsr0h	equ	0xFEA
  3396                           fsr0l	equ	0xFE9
  3397                           wreg	equ	0xFE8
  3398                           fsr1h	equ	0xFE2
  3399                           fsr1l	equ	0xFE1
  3400                           indf2	equ	0xFDF
  3401                           postinc2	equ	0xFDE
  3402                           postdec2	equ	0xFDD
  3403                           fsr2h	equ	0xFDA
  3404                           fsr2l	equ	0xFD9
  3405                           status	equ	0xFD8
  3406                           
  3407 ;; *************** function _CCP4_CaptureISR *****************
  3408 ;; Defined at:
  3409 ;;		line 81 in file "mcc_generated_files/ccp4.c"
  3410 ;; Parameters:    Size  Location     Type
  3411 ;;		None
  3412 ;; Auto vars:     Size  Location     Type
  3413 ;;  module          2    2[COMRAM] struct CCPR4Reg_tag
  3414 ;; Return value:  Size  Location     Type
  3415 ;;                  1    wreg      void 
  3416 ;; Registers used:
  3417 ;;		wreg, status,2, status,0, cstack
  3418 ;; Tracked objects:
  3419 ;;		On entry : 0/0
  3420 ;;		On exit  : 0/0
  3421 ;;		Unchanged: 0/0
  3422 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3423 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3424 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3425 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3426 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3427 ;;Total ram usage:        2 bytes
  3428 ;; Hardware stack levels used:    1
  3429 ;; Hardware stack levels required when called:    1
  3430 ;; This function calls:
  3431 ;;		_CCP4_CallBack
  3432 ;; This function is called by:
  3433 ;;		_INTERRUPT_InterruptManager
  3434 ;; This function uses a non-reentrant model
  3435 ;;
  3436                           
  3437                           	psect	text25
  3438  000736                     __ptext25:
  3439                           	opt stack 0
  3440  000736                     _CCP4_CaptureISR:
  3441                           	opt stack 25
  3442                           
  3443                           ;ccp4.c: 83: CCP_PERIOD_REG_T module;
  3444                           ;ccp4.c: 86: PIR4bits.CCP4IF = 0;
  3445                           
  3446                           ; BSR set to: 15
  3447                           ;incstack = 0
  3448  000736  927B               	bcf	3963,1,c	;volatile
  3449                           
  3450                           ;ccp4.c: 89: module.ccpr4l = CCPR4L;
  3451  000738  CF58 F003          	movff	3928,CCP4_CaptureISR@module	;volatile
  3452                           
  3453                           ;ccp4.c: 90: module.ccpr4h = CCPR4H;
  3454  00073C  CF59 F004          	movff	3929,CCP4_CaptureISR@module+1	;volatile
  3455                           
  3456                           ;ccp4.c: 93: CCP4_CallBack(module.ccpr4_16Bit);
  3457  000740  C003  F001         	movff	CCP4_CaptureISR@module,CCP4_CallBack@capturedValue
  3458  000744  C004  F002         	movff	CCP4_CaptureISR@module+1,CCP4_CallBack@capturedValue+1
  3459  000748  EC85  F002         	call	_CCP4_CallBack	;wreg free
  3460  00074C  0012               	return		;funcret
  3461  00074E                     __end_of_CCP4_CaptureISR:
  3462                           	opt stack 0
  3463                           tosu	equ	0xFFF
  3464                           tosh	equ	0xFFE
  3465                           tosl	equ	0xFFD
  3466                           pclatu	equ	0xFFB
  3467                           pclath	equ	0xFFA
  3468                           tblptru	equ	0xFF8
  3469                           tblptrh	equ	0xFF7
  3470                           tblptrl	equ	0xFF6
  3471                           tablat	equ	0xFF5
  3472                           prodh	equ	0xFF4
  3473                           prodl	equ	0xFF3
  3474                           intcon	equ	0xFF2
  3475                           intcon2	equ	0xFF1
  3476                           postinc0	equ	0xFEE
  3477                           fsr0h	equ	0xFEA
  3478                           fsr0l	equ	0xFE9
  3479                           wreg	equ	0xFE8
  3480                           fsr1h	equ	0xFE2
  3481                           fsr1l	equ	0xFE1
  3482                           indf2	equ	0xFDF
  3483                           postinc2	equ	0xFDE
  3484                           postdec2	equ	0xFDD
  3485                           fsr2h	equ	0xFDA
  3486                           fsr2l	equ	0xFD9
  3487                           status	equ	0xFD8
  3488                           
  3489 ;; *************** function _CCP4_CallBack *****************
  3490 ;; Defined at:
  3491 ;;		line 103 in file "main.c"
  3492 ;; Parameters:    Size  Location     Type
  3493 ;;  capturedValu    2    0[COMRAM] unsigned int 
  3494 ;; Auto vars:     Size  Location     Type
  3495 ;;		None
  3496 ;; Return value:  Size  Location     Type
  3497 ;;                  1    wreg      void 
  3498 ;; Registers used:
  3499 ;;		wreg, status,2, status,0
  3500 ;; Tracked objects:
  3501 ;;		On entry : 0/0
  3502 ;;		On exit  : 0/0
  3503 ;;		Unchanged: 0/0
  3504 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3505 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3506 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3507 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3508 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3509 ;;Total ram usage:        2 bytes
  3510 ;; Hardware stack levels used:    1
  3511 ;; This function calls:
  3512 ;;		Nothing
  3513 ;; This function is called by:
  3514 ;;		_CCP4_CaptureISR
  3515 ;; This function uses a non-reentrant model
  3516 ;;
  3517                           
  3518                           	psect	text26
  3519  00050A                     __ptext26:
  3520                           	opt stack 0
  3521  00050A                     _CCP4_CallBack:
  3522                           	opt stack 25
  3523                           
  3524                           ;main.c: 105: if(CCP4CONbits.CCP4M == 0b0101){
  3525                           
  3526                           ;incstack = 0
  3527  00050A  010F               	movlb	15	; () banked
  3528  00050C  5157               	movf	87,w,b	;volatile
  3529  00050E  0B0F               	andlw	15
  3530  000510  0A05               	xorlw	5
  3531  000512  A4D8               	btfss	status,2,c
  3532  000514  D018               	goto	i2l164
  3533                           
  3534                           ; BSR set to: 15
  3535                           ;main.c: 106: CCP4CONbits.CCP4M = 0b0100;
  3536  000516  5157               	movf	87,w,b	;volatile
  3537  000518  0BF0               	andlw	-16
  3538  00051A  0904               	iorlw	4
  3539  00051C  6F57               	movwf	87,b	;volatile
  3540                           
  3541                           ;main.c: 107: encoderA = 1;
  3542  00051E  0E01               	movlw	1
  3543  000520  6E42               	movwf	_encoderA,c
  3544                           
  3545                           ;main.c: 108: if(encoderB==0){
  3546  000522  5041               	movf	_encoderB,w,c
  3547  000524  A4D8               	btfss	status,2,c
  3548  000526  D006               	goto	i2l165
  3549                           
  3550                           ; BSR set to: 15
  3551                           ;main.c: 109: encoderPosition++;
  3552  000528  0E01               	movlw	1
  3553  00052A  2636               	addwf	_encoderPosition,f,c
  3554  00052C  0E00               	movlw	0
  3555  00052E  2237               	addwfc	_encoderPosition+1,f,c
  3556  000530  2238               	addwfc	_encoderPosition+2,f,c
  3557  000532  D007               	goto	L6
  3558  000534                     i2l165:
  3559                           
  3560                           ; BSR set to: 15
  3561                           ;main.c: 111: else{
  3562                           ;main.c: 112: encoderPosition--;
  3563                           
  3564                           ; BSR set to: 15
  3565  000534  0EFF               	movlw	255
  3566  000536  2636               	addwf	_encoderPosition,f,c
  3567  000538  0EFF               	movlw	255
  3568  00053A  2237               	addwfc	_encoderPosition+1,f,c
  3569  00053C  0EFF               	movlw	255
  3570  00053E  2238               	addwfc	_encoderPosition+2,f,c
  3571  000540  0EFF               	movlw	255
  3572  000542                     L6:
  3573  000542  2239               	addwfc	_encoderPosition+3,f,c
  3574                           
  3575                           ; BSR set to: 15
  3576                           ;main.c: 113: }
  3577                           ;main.c: 114: }
  3578  000544  D006               	goto	i2l167
  3579  000546                     i2l164:
  3580                           
  3581                           ; BSR set to: 15
  3582                           ;main.c: 115: else{
  3583                           ;main.c: 116: CCP4CONbits.CCP4M = 0b0101;
  3584                           
  3585                           ; BSR set to: 15
  3586  000546  5157               	movf	87,w,b	;volatile
  3587  000548  0BF0               	andlw	-16
  3588  00054A  0905               	iorlw	5
  3589  00054C  6F57               	movwf	87,b	;volatile
  3590                           
  3591                           ;main.c: 117: encoderA = 0;
  3592  00054E  0E00               	movlw	0
  3593  000550  6E42               	movwf	_encoderA,c
  3594  000552                     i2l167:
  3595                           
  3596                           ; BSR set to: 15
  3597                           ;main.c: 118: }
  3598                           ;main.c: 120: PIR4bits.CCP4IF = 0;
  3599                           
  3600                           ; BSR set to: 15
  3601  000552  927B               	bcf	3963,1,c	;volatile
  3602                           
  3603                           ; BSR set to: 15
  3604  000554  0012               	return		;funcret
  3605  000556                     __end_of_CCP4_CallBack:
  3606                           	opt stack 0
  3607                           tosu	equ	0xFFF
  3608                           tosh	equ	0xFFE
  3609                           tosl	equ	0xFFD
  3610                           pclatu	equ	0xFFB
  3611                           pclath	equ	0xFFA
  3612                           tblptru	equ	0xFF8
  3613                           tblptrh	equ	0xFF7
  3614                           tblptrl	equ	0xFF6
  3615                           tablat	equ	0xFF5
  3616                           prodh	equ	0xFF4
  3617                           prodl	equ	0xFF3
  3618                           intcon	equ	0xFF2
  3619                           intcon2	equ	0xFF1
  3620                           postinc0	equ	0xFEE
  3621                           fsr0h	equ	0xFEA
  3622                           fsr0l	equ	0xFE9
  3623                           wreg	equ	0xFE8
  3624                           fsr1h	equ	0xFE2
  3625                           fsr1l	equ	0xFE1
  3626                           indf2	equ	0xFDF
  3627                           postinc2	equ	0xFDE
  3628                           postdec2	equ	0xFDD
  3629                           fsr2h	equ	0xFDA
  3630                           fsr2l	equ	0xFD9
  3631                           status	equ	0xFD8
  3632                           tosu	equ	0xFFF
  3633                           tosh	equ	0xFFE
  3634                           tosl	equ	0xFFD
  3635                           pclatu	equ	0xFFB
  3636                           pclath	equ	0xFFA
  3637                           tblptru	equ	0xFF8
  3638                           tblptrh	equ	0xFF7
  3639                           tblptrl	equ	0xFF6
  3640                           tablat	equ	0xFF5
  3641                           prodh	equ	0xFF4
  3642                           prodl	equ	0xFF3
  3643                           intcon	equ	0xFF2
  3644                           intcon2	equ	0xFF1
  3645                           postinc0	equ	0xFEE
  3646                           fsr0h	equ	0xFEA
  3647                           fsr0l	equ	0xFE9
  3648                           wreg	equ	0xFE8
  3649                           fsr1h	equ	0xFE2
  3650                           fsr1l	equ	0xFE1
  3651                           indf2	equ	0xFDF
  3652                           postinc2	equ	0xFDE
  3653                           postdec2	equ	0xFDD
  3654                           fsr2h	equ	0xFDA
  3655                           fsr2l	equ	0xFD9
  3656                           status	equ	0xFD8
  3657                           
  3658                           	psect	text27
  3659  000000                     __ptext27:
  3660                           	opt stack 0
  3661                           tosu	equ	0xFFF
  3662                           tosh	equ	0xFFE
  3663                           tosl	equ	0xFFD
  3664                           pclatu	equ	0xFFB
  3665                           pclath	equ	0xFFA
  3666                           tblptru	equ	0xFF8
  3667                           tblptrh	equ	0xFF7
  3668                           tblptrl	equ	0xFF6
  3669                           tablat	equ	0xFF5
  3670                           prodh	equ	0xFF4
  3671                           prodl	equ	0xFF3
  3672                           intcon	equ	0xFF2
  3673                           intcon2	equ	0xFF1
  3674                           postinc0	equ	0xFEE
  3675                           fsr0h	equ	0xFEA
  3676                           fsr0l	equ	0xFE9
  3677                           wreg	equ	0xFE8
  3678                           fsr1h	equ	0xFE2
  3679                           fsr1l	equ	0xFE1
  3680                           indf2	equ	0xFDF
  3681                           postinc2	equ	0xFDE
  3682                           postdec2	equ	0xFDD
  3683                           fsr2h	equ	0xFDA
  3684                           fsr2l	equ	0xFD9
  3685                           status	equ	0xFD8
  3686                           
  3687                           	psect	rparam
  3688  0000                     tosu	equ	0xFFF
  3689                           tosh	equ	0xFFE
  3690                           tosl	equ	0xFFD
  3691                           pclatu	equ	0xFFB
  3692                           pclath	equ	0xFFA
  3693                           tblptru	equ	0xFF8
  3694                           tblptrh	equ	0xFF7
  3695                           tblptrl	equ	0xFF6
  3696                           tablat	equ	0xFF5
  3697                           prodh	equ	0xFF4
  3698                           prodl	equ	0xFF3
  3699                           intcon	equ	0xFF2
  3700                           intcon2	equ	0xFF1
  3701                           postinc0	equ	0xFEE
  3702                           fsr0h	equ	0xFEA
  3703                           fsr0l	equ	0xFE9
  3704                           wreg	equ	0xFE8
  3705                           fsr1h	equ	0xFE2
  3706                           fsr1l	equ	0xFE1
  3707                           indf2	equ	0xFDF
  3708                           postinc2	equ	0xFDE
  3709                           postdec2	equ	0xFDD
  3710                           fsr2h	equ	0xFDA
  3711                           fsr2l	equ	0xFD9
  3712                           status	equ	0xFD8
  3713                           
  3714                           	psect	temp
  3715  000045                     btemp:
  3716                           	opt stack 0
  3717  000045                     	ds	1
  3718  0000                     int$flags	set	btemp
  3719  0000                     wtemp6	set	btemp+1
  3720                           tosu	equ	0xFFF
  3721                           tosh	equ	0xFFE
  3722                           tosl	equ	0xFFD
  3723                           pclatu	equ	0xFFB
  3724                           pclath	equ	0xFFA
  3725                           tblptru	equ	0xFF8
  3726                           tblptrh	equ	0xFF7
  3727                           tblptrl	equ	0xFF6
  3728                           tablat	equ	0xFF5
  3729                           prodh	equ	0xFF4
  3730                           prodl	equ	0xFF3
  3731                           intcon	equ	0xFF2
  3732                           intcon2	equ	0xFF1
  3733                           postinc0	equ	0xFEE
  3734                           fsr0h	equ	0xFEA
  3735                           fsr0l	equ	0xFE9
  3736                           wreg	equ	0xFE8
  3737                           fsr1h	equ	0xFE2
  3738                           fsr1l	equ	0xFE1
  3739                           indf2	equ	0xFDF
  3740                           postinc2	equ	0xFDE
  3741                           postdec2	equ	0xFDD
  3742                           fsr2h	equ	0xFDA
  3743                           fsr2l	equ	0xFD9
  3744                           status	equ	0xFD8


Data Sizes:
    Strings     217
    Constant    40
    Data        2
    BSS         13
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           94     53      68
    BANK0           160     10      10
    BANK1           256      0       0
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0
    BANK8           256      0       0
    BANK9           256      0       0
    BANK10          256      0       0
    BANK11          256      0       0
    BANK12          256      0       0
    BANK13          256      0       0
    BANK14          256      0       0
    BANK15           56      0       0

Pointer List with Targets:

    printf@f	PTR const unsigned char  size(2) Largest target is 34
		 -> STR_9(CODE[17]), STR_8(CODE[21]), STR_7(CODE[5]), STR_6(CODE[24]), 
		 -> STR_5(CODE[34]), STR_4(CODE[34]), STR_3(CODE[27]), STR_2(CODE[27]), 
		 -> STR_1(CODE[28]), 

    printf@ap	PTR void [1] size(2) Largest target is 2
		 -> ?_printf(COMRAM[2]), 

    TMR0_SetInterruptHandler@InterruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> TMR0_DefaultInterruptHandler(), 

    TMR0_InterruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> Absolute function(), TMR0_DefaultInterruptHandler(), 


Critical Paths under _main in COMRAM

    _main->_printf
    _printf->___llmod
    _putch->_EUSART2_Write
    ___llmod->___lldiv
    _SYSTEM_Initialize->_TMR0_Initialize
    _TMR0_Initialize->_TMR0_SetInterruptHandler

Critical Paths under _INTERRUPT_InterruptManager in COMRAM

    _INTERRUPT_InterruptManager->_CCP4_CaptureISR
    _INTERRUPT_InterruptManager->_CCP5_CaptureISR
    _TMR0_ISR->_TMR0_DefaultInterruptHandler
    _TMR0_DefaultInterruptHandler->_TMR0_WriteTimer
    _CCP5_CaptureISR->_CCP5_CallBack
    _CCP4_CaptureISR->_CCP4_CallBack

Critical Paths under _main in BANK0

    _main->_printf

Critical Paths under _INTERRUPT_InterruptManager in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK12

    None.

Critical Paths under _main in BANK13

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK13

    None.

Critical Paths under _main in BANK14

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK14

    None.

Critical Paths under _main in BANK15

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK15

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 1     1      0    2911
                                             52 COMRAM     1     1      0
                       _EUSART2_Read
                _EUSART2_is_rx_ready
                  _SYSTEM_Initialize
                             _printf
                        _setYawServo
 ---------------------------------------------------------------------------------
 (1) _setYawServo                                          2     0      2     220
                                             22 COMRAM     2     0      2
 ---------------------------------------------------------------------------------
 (1) _printf                                              27    21      6    2528
                                             44 COMRAM     8     2      6
                                              0 BANK0     10    10      0
                            ___lldiv
                            ___llmod
                              _putch
 ---------------------------------------------------------------------------------
 (2) _putch                                                1     1      0      44
                                             23 COMRAM     1     1      0
                      _EUSART2_Write
 ---------------------------------------------------------------------------------
 (3) _EUSART2_Write                                        1     1      0      22
                                             22 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (2) ___llmod                                              9     1      8     412
                                             35 COMRAM     9     1      8
                            ___lldiv (ARG)
 ---------------------------------------------------------------------------------
 (2) ___lldiv                                             13     5      8     421
                                             22 COMRAM    13     5      8
 ---------------------------------------------------------------------------------
 (1) _SYSTEM_Initialize                                    0     0      0      98
                    _CCP4_Initialize
                    _CCP5_Initialize
                 _EUSART2_Initialize
               _INTERRUPT_Initialize
              _OSCILLATOR_Initialize
             _PIN_MANAGER_Initialize
                    _TMR0_Initialize
                    _TMR3_Initialize
 ---------------------------------------------------------------------------------
 (2) _TMR3_Initialize                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _TMR0_Initialize                                      2     2      0      98
                                             24 COMRAM     2     2      0
           _TMR0_SetInterruptHandler
 ---------------------------------------------------------------------------------
 (3) _TMR0_SetInterruptHandler                             2     0      2      98
                                             22 COMRAM     2     0      2
 ---------------------------------------------------------------------------------
 (2) _PIN_MANAGER_Initialize                               0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _OSCILLATOR_Initialize                                0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _INTERRUPT_Initialize                                 0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _EUSART2_Initialize                                   0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _CCP5_Initialize                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _CCP4_Initialize                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _EUSART2_is_rx_ready                                  0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _EUSART2_Read                                         0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 3
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (4) _INTERRUPT_InterruptManager                          18    18      0     442
                                              4 COMRAM    18    18      0
                    _CCP4_CaptureISR
                    _CCP5_CaptureISR
                           _TMR0_ISR
 ---------------------------------------------------------------------------------
 (5) _TMR0_ISR                                             0     0      0     196
                   Absolute function *
       _TMR0_DefaultInterruptHandler *
 ---------------------------------------------------------------------------------
 (6) _TMR0_DefaultInterruptHandler                         2     2      0     196
                                              2 COMRAM     2     2      0
                    _TMR0_WriteTimer
 ---------------------------------------------------------------------------------
 (7) _TMR0_WriteTimer                                      2     0      2     196
                                              0 COMRAM     2     0      2
 ---------------------------------------------------------------------------------
 (6) Absolute function(Fake)                               0     0      0       0
 ---------------------------------------------------------------------------------
 (5) _CCP5_CaptureISR                                      2     2      0     123
                                              2 COMRAM     2     2      0
                      _CCP5_CallBack
 ---------------------------------------------------------------------------------
 (6) _CCP5_CallBack                                        2     0      2      76
                                              0 COMRAM     2     0      2
 ---------------------------------------------------------------------------------
 (5) _CCP4_CaptureISR                                      2     2      0     123
                                              2 COMRAM     2     2      0
                      _CCP4_CallBack
 ---------------------------------------------------------------------------------
 (6) _CCP4_CallBack                                        2     0      2      76
                                              0 COMRAM     2     0      2
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 7
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _EUSART2_Read
   _EUSART2_is_rx_ready
   _SYSTEM_Initialize
     _CCP4_Initialize
     _CCP5_Initialize
     _EUSART2_Initialize
     _INTERRUPT_Initialize
     _OSCILLATOR_Initialize
     _PIN_MANAGER_Initialize
     _TMR0_Initialize
       _TMR0_SetInterruptHandler
     _TMR3_Initialize
   _printf
     ___lldiv
     ___llmod
       ___lldiv (ARG)
     _putch
       _EUSART2_Write
   _setYawServo

 _INTERRUPT_InterruptManager (ROOT)
   _CCP4_CaptureISR
     _CCP4_CallBack
   _CCP5_CaptureISR
     _CCP5_CallBack
   _TMR0_ISR
     Absolute function(Fake) *
     _TMR0_DefaultInterruptHandler *
       _TMR0_WriteTimer

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             F37      0       0      37        0.0%
EEDATA             400      0       0       0        0.0%
BITBANK14          100      0       0      33        0.0%
BANK14             100      0       0      34        0.0%
BITBANK13          100      0       0      31        0.0%
BANK13             100      0       0      32        0.0%
BITBANK12          100      0       0      29        0.0%
BANK12             100      0       0      30        0.0%
BITBANK11          100      0       0      27        0.0%
BANK11             100      0       0      28        0.0%
BITBANK10          100      0       0      25        0.0%
BANK10             100      0       0      26        0.0%
BITBANK9           100      0       0      23        0.0%
BANK9              100      0       0      24        0.0%
BITBANK8           100      0       0      21        0.0%
BANK8              100      0       0      22        0.0%
BITBANK7           100      0       0      19        0.0%
BANK7              100      0       0      20        0.0%
BITBANK6           100      0       0      17        0.0%
BANK6              100      0       0      18        0.0%
BITBANK5           100      0       0      15        0.0%
BANK5              100      0       0      16        0.0%
BITBANK4           100      0       0      13        0.0%
BANK4              100      0       0      14        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0       0       9        0.0%
BITBANK1           100      0       0       6        0.0%
BANK1              100      0       0       7        0.0%
BITBANK0            A0      0       0       4        0.0%
BANK0               A0      A       A       5        6.3%
BITCOMRAM           5E      0       0       0        0.0%
COMRAM              5E     35      44       1       72.3%
BITBANK15           38      0       0      35        0.0%
BANK15              38      0       0      36        0.0%
BITSFR_1             0      0       0     200        0.0%
SFR_1                0      0       0     200        0.0%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0      4E      12        0.0%
DATA                 0      0      4E       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V1.45 build -152302408 
Symbol Table                                                                                   Mon Apr 23 20:09:08 2018

                         _CCP4_Initialize 0702                                        l91 0770  
                         _timer0ReloadVal 003C                              __CFG_CP0$OFF 000000  
                            __CFG_CP1$OFF 000000                              __CFG_CP2$OFF 000000  
                            __CFG_CP3$OFF 000000                               __CFG_LVP$ON 000000  
                                     l130 03F4                                       l131 0322  
                                     l140 03CE                                       l213 0782  
                                     l141 03DC                                       l133 0348  
                                     l142 03E0                                       l134 036E  
                                     l136 03B0                                       l128 0310  
                                     l137 0394                                       l147 05E0  
                                     l139 03C0                                       l149 05F4  
                                     l371 0112                                       l380 010C  
                                     l381 01AE                                       l382 0172  
                                     l374 00EC                                       l391 0246  
                                     l392 02D8                                       l368 00D4  
                                     l393 0254                                       l377 014E  
                                     l369 00E4                                       l386 01CE  
                                     l378 00F0                                       l387 01F2  
                                     l379 0104                                       l751 0484  
                                     l752 0492                                       l761 04EA  
                                     l762 04F8                                       l747 0450  
                                     l748 0444                                       l757 04C2  
                                     l758 04B6                              __CFG_CPB$OFF 000000  
                                     u150 079A                              __CFG_CPD$OFF 000000  
                                     u820 04C6                                       u910 0234  
                                     u930 02EA                                       u790 0454  
                                     tosl 000FFD                                       wreg 000FE8  
                              _TXSTA2bits 000F72                   __end_of_CCP4_CaptureISR 074E  
                         _CCP5_Initialize 06E6                           _timer3ReloadVal 003A  
                                    l1740 01F6                                      l1648 0788  
                                    l1758 0254                                      STR_1 FF69  
                                    STR_2 FF85                                      STR_3 FFA0  
                                    STR_4 FF47                                      STR_5 FF25  
                                    STR_6 FFBB                                      STR_7 FFF9  
                                    STR_8 FFD3                                      STR_9 FFE8  
                                    _LATA 000F89                                      _LATB 000F8A  
                                    _LATC 000F8B                                      i2l52 005E  
                                    i2l55 006E                                      i2l57 0078  
                                    _TMR3 000FB2                                      _WPUB 000F61  
                           _EUSART2_Write 0786                                      _main 0308  
                           ?_EUSART2_Read 0001                                      fsr0h 000FEA  
                                    fsr1h 000FE2                                      fsr2h 000FDA  
                                    fsr0l 000FE9                                      indf2 000FDF  
                                    fsr1l 000FE1                                      fsr2l 000FD9  
                                    btemp 0045                             __CFG_BORV$190 000000  
                                    prodh 000FF4                                      prodl 000FF3  
                                    start 00C4                             __CFG_IESO$OFF 000000  
                         _TMR3_Initialize 06CA                              ___param_bank 000000  
                 __end_of_CCP5_CaptureISR 0736                   __end_of_TMR0_Initialize 05CC  
          ??_TMR0_DefaultInterruptHandler 0003            __size_of_OSCILLATOR_Initialize 0012  
           __end_of_OSCILLATOR_Initialize 0776                                     ?_main 0001  
                         __end_of___lldiv 04A4                                     _T0CON 000FD5  
                         __end_of___llmod 050A                                     _T3CON 000FB1  
                          __CFG_DEBUG$OFF 000000                                     i2l171 0698  
                                   i2l155 0582                                     i2l164 0546  
                                   i2l165 0534                           _TMR0_WriteTimer 07B2  
                                   i2l167 0552                                     _TMR0H 000FD7  
                                   _TMR0L 000FD6                                     _TMR3H 000FB3  
                                   _TMR3L 000FB2                                     _TRISA 000F92  
                                   _TRISB 000F93                                     _TRISC 000F94  
       __size_of_TMR0_SetInterruptHandler 000A                             __CFG_WRT0$OFF 000000  
                           __CFG_WRT1$OFF 000000                             __CFG_WRT2$OFF 000000  
               ?_TMR0_SetInterruptHandler 0017                             __CFG_WRT3$OFF 000000  
                          __CFG_EBTR0$OFF 000000                            __CFG_FCMEN$OFF 000000  
                          __CFG_EBTR1$OFF 000000                            __CFG_EBTR2$OFF 000000  
                          __CFG_EBTR3$OFF 000000                          __end_of_TMR0_ISR 0680  
                           __CFG_WRTB$OFF 000000                             __CFG_WRTC$OFF 000000  
                           __CFG_WRTD$OFF 000000                            __CFG_EBTRB$OFF 000000  
                         __end_of_dpowers FF25                        __CFG_MCLRE$EXTMCLR 000000  
                                   _putch 079E                            ?_EUSART2_Write 0001  
                                   pclath 000FFA                                     tablat 000FF5  
                          ??_EUSART2_Read 0017                    __size_of_CCP4_CallBack 004C  
                                   status 000FD8                   __end_of_CCP4_Initialize 071E  
                                   wtemp6 0046                            __CFG_HFOFST$ON 000000  
                          __CFG_PBADEN$ON 000000                    __size_of_CCP5_CallBack 0028  
                         __initialization 05FE                              __end_of_main 0422  
                          setYawServo@pos 0017               ?_INTERRUPT_InterruptManager 0001  
                                  ??_main 0035                   __end_of_CCP5_Initialize 0702  
                           __activetblptr 000003                          ?_CCP4_CaptureISR 0001  
              __end_of_EUSART2_Initialize 0764                          ___llmod@dividend 0024  
                                  _CCPR4H 000F59                                    _CCPR5H 000F56  
                                  _CCPR4L 000F58                                    _CCPR5L 000F55  
                                  _ANSELA 000F38                                    ?_putch 0001  
                                  _ANSELB 000F39                                    _ANSELC 000F3A  
                                  _T3GCON 000FB4                              ?_setYawServo 0017  
                 __end_of_TMR3_Initialize 06E6                            __CFG_WDTEN$OFF 000000  
                                  _RCREG2 000F74                                    _RCSTA2 000F71  
                                  _OSCCON 000FD3                                    _PLLRDY 007E97  
                                  _SPBRG2 000F75                                    _TXREG2 000F73  
                                  _TXSTA2 000F72                            __CFG_XINST$OFF 000000  
                            _CCPTMRS1bits 000F48                          ?_CCP5_CaptureISR 0001  
                          __CFG_STVREN$ON 000000                   __end_of_TMR0_WriteTimer 07BC  
                               ??___lldiv 001F                                 ??___llmod 002C  
                        ?_TMR0_Initialize 0001                                    clear_0 061C  
                           _CCP4_CallBack 050A                                    _printf 00C8  
                            __pdataCOMRAM 0043                             _CCP5_CallBack 0680  
                            __mediumconst FEFC                                    tblptrh 000FF7  
                                  tblptrl 000FF6                                    tblptru 000FF8  
                         ??_EUSART2_Write 0017  TMR0_SetInterruptHandler@InterruptHandler 0017  
           __size_of_INTERRUPT_Initialize 0004              __size_of_EUSART2_is_rx_ready 000C  
                       _SYSTEM_Initialize 06A8                                __accesstop 0060  
                 __end_of__initialization 0622                          ?_CCP4_Initialize 0001  
                      ?_SYSTEM_Initialize 0001                             ___rparam_used 000001  
                          __pcstackCOMRAM 0001                       ??_SYSTEM_Initialize 001B  
                               ?_TMR0_ISR 0001                             __end_of_putch 07A8  
                          ?_CCP4_CallBack 0001                      __end_of_EUSART2_Read 0786  
                        ?_CCP5_Initialize 0001                            ?_CCP5_CallBack 0001  
               __end_of_SYSTEM_Initialize 06CA                                   ??_putch 0018  
                        ?_TMR3_Initialize 0001                           __CFG_PLLCFG$OFF 000000  
                      __CFG_CCP2MX$PORTC1 000000          __end_of_TMR0_SetInterruptHandler 07B2  
                              ??_TMR0_ISR 0005                        __CFG_CCP3MX$PORTB5 000000  
                        ?_TMR0_WriteTimer 0001                                   _CCP4CON 000F57  
                                 _CCP5CON 000F54                                   ?_printf 002D  
                                 _OSCCON2 000FD2                                   _OSCTUNE 000F9B  
                                 i2u54_48 066E                                   _SPBRGH2 000F76  
                    __size_of_setYawServo 0032                           __CFG_PWRTEN$OFF 000000  
                                 __Hparam 0000                                   __Lparam 0000  
                         ??_CCP4_CallBack 0003                                   ___lldiv 0422  
                                 ___llmod 04A4                                   __pcinit 05FE  
                         ??_CCP5_CallBack 0003                                   __ramtop 1000  
                                 __ptext0 0308                                   __ptext1 05CC  
                                 __ptext2 00C8                                   __ptext3 079E  
                                 __ptext4 0786                                   __ptext5 04A4  
                                 __ptext6 0422                                   __ptext7 06A8  
                                 __ptext8 06CA                                   __ptext9 0598  
                         __size_of_printf 0240                                 _T0CONbits 000FD5  
                                 _dpowers FEFD                     _OSCILLATOR_Initialize 0764  
                               _T3CONbits 000FB1                  ??_PIN_MANAGER_Initialize 0017  
                                 main@cmd 0035                __size_of_SYSTEM_Initialize 0022  
                    end_of_initialization 0622                           ___lldiv@divisor 001B  
                         ___lldiv@counter 0023                        _EUSART2_Initialize 074E  
                                 printf@c 0069                                   printf@f 002D  
                                 postdec2 000FDD                                   postinc0 000FEE  
                                 postinc2 000FDE                     __size_of_EUSART2_Read 0010  
                     ?_EUSART2_Initialize 0001                       _EUSART2_is_rx_ready 0792  
                _TMR0_SetInterruptHandler 07A8                CCP5_CallBack@capturedValue 0001  
                    ??_EUSART2_Initialize 0017                      ?_EUSART2_is_rx_ready 0001  
                            _EUSART2_Read 0776                  __size_of_CCP4_CaptureISR 0018  
                             _CCP4CONbits 000F57                               _CCP5CONbits 000F54  
            __end_of_INTERRUPT_Initialize 07C0                             __pidataCOMRAM 07C0  
                       __size_of_TMR0_ISR 0028                    ?_OSCILLATOR_Initialize 0001  
                __size_of_CCP5_CaptureISR 0018                            __end_of_printf 0308  
                     start_initialization 05FE                  __size_of_TMR0_Initialize 0034  
         __size_of_PIN_MANAGER_Initialize 002C                               putch@txData 0018  
                   ??_EUSART2_is_rx_ready 0017                     __end_of_EUSART2_Write 0792  
                         ___llmod@divisor 0028                           ___llmod@counter 002C  
                         _encoderPosition 0036                  __size_of_CCP4_Initialize 001C  
                                ??_printf 0033                     CCP4_CaptureISR@module 0003  
                             __pbssCOMRAM 0036                             __pcstackBANK0 0060  
                __size_of_CCP5_Initialize 001C                       EUSART2_Write@txData 0017  
                   _TMR0_InterruptHandler 003E                    _PIN_MANAGER_Initialize 062C  
                __size_of_TMR3_Initialize 001C                                 __pintcode 0008  
                           __pmediumconst FEFC                         ??_CCP4_CaptureISR 0003  
                                ?___lldiv 0017                                  ?___llmod 0024  
            ??_INTERRUPT_InterruptManager 0005                          __CFG_PRICLKEN$ON 000000  
                                _BAUDCON2 000F70                  __size_of_TMR0_WriteTimer 000A  
                       ??_CCP5_CaptureISR 0003                             ??_setYawServo 0019  
                          __size_of_putch 000A                      _INTERRUPT_Initialize 07BC  
                       ??_TMR0_Initialize 0019                                  _LATAbits 000F89  
                                _PIE4bits 000F7A       __size_of_INTERRUPT_InterruptManager 00BC  
              ??_TMR0_SetInterruptHandler 0019                                  _PIR2bits 000FA1  
                                _PIR3bits 000FA4                                  _PIR4bits 000F7B  
                                _RCONbits 000FD0                          __CFG_WDTPS$32768 000000  
                                _TMR0_ISR 0658                     __end_of_CCP4_CallBack 0556  
                   __end_of_CCP5_CallBack 06A8                                printf@flag 0066  
                       ??_CCP4_Initialize 0017                                printf@prec 0060  
                             _INTCON2bits 000FF1                     ?_INTERRUPT_Initialize 0001  
                       ??_CCP5_Initialize 0017                       __end_of_setYawServo 05FE  
                                __Hrparam 0000                                  __Lrparam 0000  
                      __CFG_BOREN$SBORDIS 000000                         __CFG_P2BMX$PORTB5 000000  
                 ??_OSCILLATOR_Initialize 0017                          __size_of___lldiv 0082  
                        __size_of___llmod 0066     TMR0_DefaultInterruptHandler@pulseHigh 0040  
                       ??_TMR3_Initialize 0017                CCP4_CallBack@capturedValue 0001  
                                __ptext10 07A8                                  __ptext11 062C  
                                __ptext20 0658                                  __ptext12 0764  
                                __ptext21 0556                                  __ptext13 07BC  
                                __ptext22 07B2                                  __ptext14 074E  
                                __ptext23 071E                                  __ptext15 06E6  
                                __ptext24 0680                                  __ptext16 0702  
                                __ptext25 0736                                  __ptext17 0792  
                                __ptext26 050A                                  __ptext18 0776  
                                __ptext27 0000                                  _encoderA 0042  
                                _encoderB 0041                   TMR0_WriteTimer@timerVal 0001  
                              _T3GCONbits 000FB4                         ??_TMR0_WriteTimer 0003  
             __size_of_EUSART2_Initialize 0016                             __size_of_main 011A  
    __end_of_TMR0_DefaultInterruptHandler 0598     __size_of_TMR0_DefaultInterruptHandler 0042  
            _TMR0_DefaultInterruptHandler 0556                                  int$flags 0045  
      __end_of_INTERRUPT_InterruptManager 00C4                _INTERRUPT_InterruptManager 0008  
                               printf@val 0062                                _INTCONbits 000FF2  
             __end_of_EUSART2_is_rx_ready 079E                    ??_INTERRUPT_Initialize 0017  
                                intlevel2 0000                               _setYawServo 05CC  
                         _CCP4_CaptureISR 0736                          ___lldiv@dividend 0017  
                 ?_PIN_MANAGER_Initialize 0001                                _RCSTA2bits 000F71  
           ?_TMR0_DefaultInterruptHandler 0001                                  printf@ap 0067  
                  __size_of_EUSART2_Write 000C                           _CCP5_CaptureISR 071E  
                   CCP5_CaptureISR@module 0003                          ___lldiv@quotient 001F  
                         _TMR0_Initialize 0598                         __CFG_T3CMX$PORTC0 000000  
          __end_of_PIN_MANAGER_Initialize 0658                         __CFG_FOSC$INTIO67 000000  
                             _yawPosition 0043  
