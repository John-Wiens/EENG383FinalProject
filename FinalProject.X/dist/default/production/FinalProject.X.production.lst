

Microchip Technology PIC18 LITE Macro Assembler V1.45 build -152302408 
                                                                                               Tue May 01 12:33:33 2018

Microchip Technology Omniscient Code Generator v1.45 (Free mode) build 201711160504
     1                           	processor	18F26K22
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	lm
     5                           	psect	idataBANK0,global,class=CODE,delta=1,noexec
     6                           	psect	mediumconst,global,reloc=2,class=MEDIUMCONST,delta=1,noexec
     7                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     8                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
     9                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
    10                           	psect	dataBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
    11                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1,noexec
    12                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    13                           	psect	text0,global,reloc=2,class=CODE,delta=1
    14                           	psect	text1,global,reloc=2,class=CODE,delta=1
    15                           	psect	text2,global,reloc=2,class=CODE,delta=1
    16                           	psect	text3,global,reloc=2,class=CODE,delta=1
    17                           	psect	text4,global,reloc=2,class=CODE,delta=1
    18                           	psect	text5,global,reloc=2,class=CODE,delta=1
    19                           	psect	text6,global,reloc=2,class=CODE,delta=1
    20                           	psect	text7,global,reloc=2,class=CODE,delta=1,group=1
    21                           	psect	text8,global,reloc=2,class=CODE,delta=1,group=1
    22                           	psect	text9,global,reloc=2,class=CODE,delta=1
    23                           	psect	text10,global,reloc=2,class=CODE,delta=1
    24                           	psect	text11,global,reloc=2,class=CODE,delta=1
    25                           	psect	text12,global,reloc=2,class=CODE,delta=1
    26                           	psect	text13,global,reloc=2,class=CODE,delta=1
    27                           	psect	text14,global,reloc=2,class=CODE,delta=1
    28                           	psect	text15,global,reloc=2,class=CODE,delta=1
    29                           	psect	text16,global,reloc=2,class=CODE,delta=1
    30                           	psect	text17,global,reloc=2,class=CODE,delta=1
    31                           	psect	text18,global,reloc=2,class=CODE,delta=1
    32                           	psect	text19,global,reloc=2,class=CODE,delta=1
    33                           	psect	text20,global,reloc=2,class=CODE,delta=1
    34                           	psect	text21,global,reloc=2,class=CODE,delta=1
    35                           	psect	text22,global,reloc=2,class=CODE,delta=1
    36                           	psect	text23,global,reloc=2,class=CODE,delta=1
    37                           	psect	text24,global,reloc=2,class=CODE,delta=1
    38                           	psect	text25,global,reloc=2,class=CODE,delta=1
    39                           	psect	text26,global,reloc=2,class=CODE,delta=1
    40                           	psect	text27,global,reloc=2,class=CODE,delta=1
    41                           	psect	text28,global,reloc=2,class=CODE,delta=1
    42                           	psect	text29,global,reloc=2,class=CODE,delta=1
    43                           	psect	text30,global,reloc=2,class=CODE,delta=1
    44                           	psect	intcode,global,reloc=2,class=CODE,delta=1
    45                           	psect	text32,global,reloc=2,class=CODE,delta=1
    46                           	psect	text33,global,reloc=2,class=CODE,delta=1
    47                           	psect	text34,global,reloc=2,class=CODE,delta=1
    48                           	psect	text35,global,reloc=2,class=CODE,delta=1
    49                           	psect	text36,global,reloc=2,class=CODE,delta=1
    50                           	psect	text37,global,reloc=2,class=CODE,delta=1
    51                           	psect	text38,global,reloc=2,class=CODE,delta=1
    52                           	psect	text39,global,reloc=2,class=CODE,delta=1
    53                           	psect	text40,global,reloc=2,class=CODE,delta=1
    54                           	psect	text41,global,reloc=2,class=CODE,delta=1
    55                           	psect	text42,global,reloc=2,class=CODE,delta=1
    56                           	psect	text43,global,reloc=2,class=CODE,delta=1
    57                           	psect	text44,global,reloc=2,class=CODE,delta=1
    58                           	psect	text45,global,reloc=2,class=CODE,delta=1
    59                           	psect	text46,global,reloc=2,class=CODE,delta=1
    60                           	psect	text47,global,reloc=2,class=CODE,delta=1
    61                           	psect	text48,global,reloc=2,class=CODE,delta=1
    62                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
    63                           	psect	text49,global,reloc=2,class=CODE,delta=1
    64                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
    65                           	psect	temp,global,ovrld,common,class=COMRAM,space=1,delta=1
    66  0000                     
    67                           ; Version 1.45
    68                           ; Generated 16/11/2017 GMT
    69                           ; 
    70                           ; Copyright Â© 2017, Microchip Technology Inc. and its subsidiaries ("Microchip")
    71                           ; All rights reserved.
    72                           ; 
    73                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    74                           ; 
    75                           ; Redistribution and use in source and binary forms, with or without modification, are
    76                           ; permitted provided that the following conditions are met:
    77                           ; 
    78                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    79                           ;        conditions and the following disclaimer.
    80                           ; 
    81                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    82                           ;        of conditions and the following disclaimer in the documentation and/or other
    83                           ;        materials provided with the distribution.
    84                           ; 
    85                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    86                           ;        software without specific prior written permission.
    87                           ; 
    88                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    89                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    90                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    91                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    92                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    93                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    94                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    95                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    96                           ; 
    97                           ; 
    98                           ; Code-generator required, PIC18F26K22 Definitions
    99                           ; 
   100                           ; SFR Addresses
   101  0000                     
   102                           	psect	idataBANK0
   103  000F5E                     __pidataBANK0:
   104                           	opt stack 0
   105                           
   106                           ;initializer for _rightLimit
   107  000F5E  86A0               	dw	34464
   108  000F60  0001               	dw	1
   109                           
   110                           ;initializer for _leftLimit
   111  000F62  7960               	dw	31072
   112  000F64  FFFE               	dw	65534
   113                           
   114                           ;initializer for _motorSpeed
   115  000F66  0BB8               	dw	3000
   116                           
   117                           ;initializer for _pitchPosition
   118  000F68  0BB8               	dw	3000
   119                           
   120                           ;initializer for _yawPosition
   121  000F6A  0BB8               	dw	3000
   122                           
   123                           	psect	mediumconst
   124  00FD9A                     __pmediumconst:
   125                           	opt stack 0
   126  00FD9A  00                 	db	0
   127  00FD9B                     _dpowers:
   128                           	opt stack 0
   129  00FD9B  0001               	dw	1
   130  00FD9D  0000               	dw	0
   131  00FD9F  000A               	dw	10
   132  00FDA1  0000               	dw	0
   133  00FDA3  0064               	dw	100
   134  00FDA5  0000               	dw	0
   135  00FDA7  03E8               	dw	1000
   136  00FDA9  0000               	dw	0
   137  00FDAB  2710               	dw	10000
   138  00FDAD  0000               	dw	0
   139  00FDAF  86A0               	dw	34464
   140  00FDB1  0001               	dw	1
   141  00FDB3  4240               	dw	16960
   142  00FDB5  000F               	dw	15
   143  00FDB7  9680               	dw	38528
   144  00FDB9  0098               	dw	152
   145  00FDBB  E100               	dw	57600
   146  00FDBD  05F5               	dw	1525
   147  00FDBF  CA00               	dw	51712
   148  00FDC1  3B9A               	dw	15258
   149  00FDC3                     __end_of_dpowers:
   150                           	opt stack 0
   151  0000                     _TMR5	set	3919
   152  0000                     _T5GCONbits	set	3917
   153  0000                     _T5CONbits	set	3918
   154  0000                     _T5CON	set	3918
   155  0000                     _TMR5L	set	3919
   156  0000                     _TMR5H	set	3920
   157  0000                     _T5GCON	set	3917
   158  0000                     _CCP5CONbits	set	3924
   159  0000                     _CCP4CONbits	set	3927
   160  0000                     _CCPR4H	set	3929
   161  0000                     _CCPR4L	set	3928
   162  0000                     _CCP4CON	set	3927
   163  0000                     _CCPTMRS1bits	set	3912
   164  0000                     _CCPR5H	set	3926
   165  0000                     _CCPR5L	set	3925
   166  0000                     _CCP5CON	set	3924
   167  0000                     _ANSELA	set	3896
   168  0000                     _ANSELB	set	3897
   169  0000                     _ANSELC	set	3898
   170  0000                     _TMR1	set	4046
   171  0000                     _TMR3	set	4018
   172  0000                     _T2CONbits	set	4026
   173  0000                     _T2CON	set	4026
   174  0000                     _TMR2	set	4028
   175  0000                     _PR2	set	4027
   176  0000                     _T1GCONbits	set	4044
   177  0000                     _T1CONbits	set	4045
   178  0000                     _T1CON	set	4045
   179  0000                     _TMR1L	set	4046
   180  0000                     _TMR1H	set	4047
   181  0000                     _T1GCON	set	4044
   182  0000                     _LATAbits	set	3977
   183  0000                     _TXREG1	set	4013
   184  0000                     _RCREG1	set	4014
   185  0000                     _RCSTA1bits	set	4011
   186  0000                     _TXSTA1bits	set	4012
   187  0000                     _SPBRGH1	set	4016
   188  0000                     _SPBRG1	set	4015
   189  0000                     _TXSTA1	set	4012
   190  0000                     _RCSTA1	set	4011
   191  0000                     _BAUDCON1	set	4024
   192  0000                     _T3GCONbits	set	4020
   193  0000                     _T3CONbits	set	4017
   194  0000                     _T3CON	set	4017
   195  0000                     _PIR2bits	set	4001
   196  0000                     _TMR3L	set	4018
   197  0000                     _TMR3H	set	4019
   198  0000                     _T3GCON	set	4020
   199  0000                     _T0CON	set	4053
   200  0000                     _TMR0L	set	4054
   201  0000                     _TMR0H	set	4055
   202  0000                     _T0CONbits	set	4053
   203  0000                     _TXREG2	set	3955
   204  0000                     _RCREG2	set	3956
   205  0000                     _RCSTA2bits	set	3953
   206  0000                     _TXSTA2bits	set	3954
   207  0000                     _PIR3bits	set	4004
   208  0000                     _SPBRGH2	set	3958
   209  0000                     _SPBRG2	set	3957
   210  0000                     _TXSTA2	set	3954
   211  0000                     _RCSTA2	set	3953
   212  0000                     _BAUDCON2	set	3952
   213  0000                     _OSCTUNE	set	3995
   214  0000                     _OSCCON2	set	4050
   215  0000                     _OSCCON	set	4051
   216  0000                     _PIR1bits	set	3998
   217  0000                     _PIE1bits	set	3997
   218  0000                     _PIR5bits	set	3966
   219  0000                     _PIE5bits	set	3965
   220  0000                     _PIR4bits	set	3963
   221  0000                     _PIE4bits	set	3962
   222  0000                     _RCONbits	set	4048
   223  0000                     _INTCONbits	set	4082
   224  0000                     _INTCON2bits	set	4081
   225  0000                     _WPUB	set	3937
   226  0000                     _TRISC	set	3988
   227  0000                     _TRISB	set	3987
   228  0000                     _TRISA	set	3986
   229  0000                     _LATC	set	3979
   230  0000                     _LATB	set	3978
   231  0000                     _LATA	set	3977
   232  0000                     _PLLRDY	set	32407
   233  00FDC3                     STR_2:
   234  00FDC3  44                 	db	68	;'D'
   235  00FDC4  65                 	db	101	;'e'
   236  00FDC5  63                 	db	99	;'c'
   237  00FDC6  72                 	db	114	;'r'
   238  00FDC7  65                 	db	101	;'e'
   239  00FDC8  6D                 	db	109	;'m'
   240  00FDC9  65                 	db	101	;'e'
   241  00FDCA  6E                 	db	110	;'n'
   242  00FDCB  74                 	db	116	;'t'
   243  00FDCC  69                 	db	105	;'i'
   244  00FDCD  6E                 	db	110	;'n'
   245  00FDCE  67                 	db	103	;'g'
   246  00FDCF  20                 	db	32
   247  00FDD0  50                 	db	80	;'P'
   248  00FDD1  69                 	db	105	;'i'
   249  00FDD2  74                 	db	116	;'t'
   250  00FDD3  63                 	db	99	;'c'
   251  00FDD4  68                 	db	104	;'h'
   252  00FDD5  20                 	db	32
   253  00FDD6  53                 	db	83	;'S'
   254  00FDD7  65                 	db	101	;'e'
   255  00FDD8  72                 	db	114	;'r'
   256  00FDD9  76                 	db	118	;'v'
   257  00FDDA  6F                 	db	111	;'o'
   258  00FDDB  20                 	db	32
   259  00FDDC  50                 	db	80	;'P'
   260  00FDDD  6F                 	db	111	;'o'
   261  00FDDE  73                 	db	115	;'s'
   262  00FDDF  69                 	db	105	;'i'
   263  00FDE0  74                 	db	116	;'t'
   264  00FDE1  69                 	db	105	;'i'
   265  00FDE2  6F                 	db	111	;'o'
   266  00FDE3  6E                 	db	110	;'n'
   267  00FDE4  3A                 	db	58	;':'
   268  00FDE5  20                 	db	32
   269  00FDE6  25                 	db	37
   270  00FDE7  75                 	db	117	;'u'
   271  00FDE8  0D                 	db	13
   272  00FDE9  0A                 	db	10
   273  00FDEA  00                 	db	0
   274  00FDEB                     STR_1:
   275  00FDEB  49                 	db	73	;'I'
   276  00FDEC  6E                 	db	110	;'n'
   277  00FDED  63                 	db	99	;'c'
   278  00FDEE  72                 	db	114	;'r'
   279  00FDEF  65                 	db	101	;'e'
   280  00FDF0  6D                 	db	109	;'m'
   281  00FDF1  65                 	db	101	;'e'
   282  00FDF2  6E                 	db	110	;'n'
   283  00FDF3  74                 	db	116	;'t'
   284  00FDF4  69                 	db	105	;'i'
   285  00FDF5  6E                 	db	110	;'n'
   286  00FDF6  67                 	db	103	;'g'
   287  00FDF7  20                 	db	32
   288  00FDF8  50                 	db	80	;'P'
   289  00FDF9  69                 	db	105	;'i'
   290  00FDFA  74                 	db	116	;'t'
   291  00FDFB  63                 	db	99	;'c'
   292  00FDFC  68                 	db	104	;'h'
   293  00FDFD  20                 	db	32
   294  00FDFE  53                 	db	83	;'S'
   295  00FDFF  65                 	db	101	;'e'
   296  00FE00  72                 	db	114	;'r'
   297  00FE01  76                 	db	118	;'v'
   298  00FE02  6F                 	db	111	;'o'
   299  00FE03  20                 	db	32
   300  00FE04  50                 	db	80	;'P'
   301  00FE05  6F                 	db	111	;'o'
   302  00FE06  73                 	db	115	;'s'
   303  00FE07  69                 	db	105	;'i'
   304  00FE08  74                 	db	116	;'t'
   305  00FE09  69                 	db	105	;'i'
   306  00FE0A  6F                 	db	111	;'o'
   307  00FE0B  6E                 	db	110	;'n'
   308  00FE0C  3A                 	db	58	;':'
   309  00FE0D  20                 	db	32
   310  00FE0E  25                 	db	37
   311  00FE0F  75                 	db	117	;'u'
   312  00FE10  0D                 	db	13
   313  00FE11  0A                 	db	10
   314  00FE12  00                 	db	0
   315  00FE13                     STR_13:
   316  00FE13  45                 	db	69	;'E'
   317  00FE14  6E                 	db	110	;'n'
   318  00FE15  63                 	db	99	;'c'
   319  00FE16  6F                 	db	111	;'o'
   320  00FE17  64                 	db	100	;'d'
   321  00FE18  65                 	db	101	;'e'
   322  00FE19  72                 	db	114	;'r'
   323  00FE1A  20                 	db	32
   324  00FE1B  50                 	db	80	;'P'
   325  00FE1C  6F                 	db	111	;'o'
   326  00FE1D  73                 	db	115	;'s'
   327  00FE1E  69                 	db	105	;'i'
   328  00FE1F  74                 	db	116	;'t'
   329  00FE20  69                 	db	105	;'i'
   330  00FE21  6F                 	db	111	;'o'
   331  00FE22  6E                 	db	110	;'n'
   332  00FE23  3A                 	db	58	;':'
   333  00FE24  20                 	db	32
   334  00FE25  25                 	db	37
   335  00FE26  6C                 	db	108	;'l'
   336  00FE27  64                 	db	100	;'d'
   337  00FE28  20                 	db	32
   338  00FE29  20                 	db	32
   339  00FE2A  20                 	db	32
   340  00FE2B  53                 	db	83	;'S'
   341  00FE2C  65                 	db	101	;'e'
   342  00FE2D  74                 	db	116	;'t'
   343  00FE2E  50                 	db	80	;'P'
   344  00FE2F  6F                 	db	111	;'o'
   345  00FE30  69                 	db	105	;'i'
   346  00FE31  6E                 	db	110	;'n'
   347  00FE32  74                 	db	116	;'t'
   348  00FE33  3A                 	db	58	;':'
   349  00FE34  25                 	db	37
   350  00FE35  6C                 	db	108	;'l'
   351  00FE36  64                 	db	100	;'d'
   352  00FE37  0D                 	db	13
   353  00FE38  0A                 	db	10
   354  00FE39  00                 	db	0
   355  00FE3A                     STR_8:
   356  00FE3A  44                 	db	68	;'D'
   357  00FE3B  65                 	db	101	;'e'
   358  00FE3C  63                 	db	99	;'c'
   359  00FE3D  72                 	db	114	;'r'
   360  00FE3E  65                 	db	101	;'e'
   361  00FE3F  6D                 	db	109	;'m'
   362  00FE40  65                 	db	101	;'e'
   363  00FE41  6E                 	db	110	;'n'
   364  00FE42  74                 	db	116	;'t'
   365  00FE43  69                 	db	105	;'i'
   366  00FE44  6E                 	db	110	;'n'
   367  00FE45  67                 	db	103	;'g'
   368  00FE46  20                 	db	32
   369  00FE47  59                 	db	89	;'Y'
   370  00FE48  61                 	db	97	;'a'
   371  00FE49  77                 	db	119	;'w'
   372  00FE4A  20                 	db	32
   373  00FE4B  53                 	db	83	;'S'
   374  00FE4C  65                 	db	101	;'e'
   375  00FE4D  72                 	db	114	;'r'
   376  00FE4E  76                 	db	118	;'v'
   377  00FE4F  6F                 	db	111	;'o'
   378  00FE50  20                 	db	32
   379  00FE51  50                 	db	80	;'P'
   380  00FE52  6F                 	db	111	;'o'
   381  00FE53  73                 	db	115	;'s'
   382  00FE54  69                 	db	105	;'i'
   383  00FE55  74                 	db	116	;'t'
   384  00FE56  69                 	db	105	;'i'
   385  00FE57  6F                 	db	111	;'o'
   386  00FE58  6E                 	db	110	;'n'
   387  00FE59  3A                 	db	58	;':'
   388  00FE5A  20                 	db	32
   389  00FE5B  25                 	db	37
   390  00FE5C  75                 	db	117	;'u'
   391  00FE5D  0D                 	db	13
   392  00FE5E  0A                 	db	10
   393  00FE5F  00                 	db	0
   394  00FE60                     STR_7:
   395  00FE60  49                 	db	73	;'I'
   396  00FE61  6E                 	db	110	;'n'
   397  00FE62  63                 	db	99	;'c'
   398  00FE63  72                 	db	114	;'r'
   399  00FE64  65                 	db	101	;'e'
   400  00FE65  6D                 	db	109	;'m'
   401  00FE66  65                 	db	101	;'e'
   402  00FE67  6E                 	db	110	;'n'
   403  00FE68  74                 	db	116	;'t'
   404  00FE69  69                 	db	105	;'i'
   405  00FE6A  6E                 	db	110	;'n'
   406  00FE6B  67                 	db	103	;'g'
   407  00FE6C  20                 	db	32
   408  00FE6D  59                 	db	89	;'Y'
   409  00FE6E  61                 	db	97	;'a'
   410  00FE6F  77                 	db	119	;'w'
   411  00FE70  20                 	db	32
   412  00FE71  53                 	db	83	;'S'
   413  00FE72  65                 	db	101	;'e'
   414  00FE73  72                 	db	114	;'r'
   415  00FE74  76                 	db	118	;'v'
   416  00FE75  6F                 	db	111	;'o'
   417  00FE76  20                 	db	32
   418  00FE77  50                 	db	80	;'P'
   419  00FE78  6F                 	db	111	;'o'
   420  00FE79  73                 	db	115	;'s'
   421  00FE7A  69                 	db	105	;'i'
   422  00FE7B  74                 	db	116	;'t'
   423  00FE7C  69                 	db	105	;'i'
   424  00FE7D  6F                 	db	111	;'o'
   425  00FE7E  6E                 	db	110	;'n'
   426  00FE7F  3A                 	db	58	;':'
   427  00FE80  20                 	db	32
   428  00FE81  25                 	db	37
   429  00FE82  75                 	db	117	;'u'
   430  00FE83  0D                 	db	13
   431  00FE84  0A                 	db	10
   432  00FE85  00                 	db	0
   433  00FE86                     STR_12:
   434  00FE86  44                 	db	68	;'D'
   435  00FE87  65                 	db	101	;'e'
   436  00FE88  63                 	db	99	;'c'
   437  00FE89  72                 	db	114	;'r'
   438  00FE8A  65                 	db	101	;'e'
   439  00FE8B  6D                 	db	109	;'m'
   440  00FE8C  65                 	db	101	;'e'
   441  00FE8D  6E                 	db	110	;'n'
   442  00FE8E  74                 	db	116	;'t'
   443  00FE8F  69                 	db	105	;'i'
   444  00FE90  6E                 	db	110	;'n'
   445  00FE91  67                 	db	103	;'g'
   446  00FE92  20                 	db	32
   447  00FE93  4D                 	db	77	;'M'
   448  00FE94  6F                 	db	111	;'o'
   449  00FE95  74                 	db	116	;'t'
   450  00FE96  6F                 	db	111	;'o'
   451  00FE97  72                 	db	114	;'r'
   452  00FE98  20                 	db	32
   453  00FE99  53                 	db	83	;'S'
   454  00FE9A  65                 	db	101	;'e'
   455  00FE9B  74                 	db	116	;'t'
   456  00FE9C  70                 	db	112	;'p'
   457  00FE9D  6F                 	db	111	;'o'
   458  00FE9E  69                 	db	105	;'i'
   459  00FE9F  6E                 	db	110	;'n'
   460  00FEA0  74                 	db	116	;'t'
   461  00FEA1  3A                 	db	58	;':'
   462  00FEA2  20                 	db	32
   463  00FEA3  25                 	db	37
   464  00FEA4  6C                 	db	108	;'l'
   465  00FEA5  64                 	db	100	;'d'
   466  00FEA6  0D                 	db	13
   467  00FEA7  0A                 	db	10
   468  00FEA8  00                 	db	0
   469  00FEA9                     STR_11:
   470  00FEA9  49                 	db	73	;'I'
   471  00FEAA  6E                 	db	110	;'n'
   472  00FEAB  63                 	db	99	;'c'
   473  00FEAC  72                 	db	114	;'r'
   474  00FEAD  65                 	db	101	;'e'
   475  00FEAE  6D                 	db	109	;'m'
   476  00FEAF  65                 	db	101	;'e'
   477  00FEB0  6E                 	db	110	;'n'
   478  00FEB1  74                 	db	116	;'t'
   479  00FEB2  69                 	db	105	;'i'
   480  00FEB3  6E                 	db	110	;'n'
   481  00FEB4  67                 	db	103	;'g'
   482  00FEB5  20                 	db	32
   483  00FEB6  4D                 	db	77	;'M'
   484  00FEB7  6F                 	db	111	;'o'
   485  00FEB8  74                 	db	116	;'t'
   486  00FEB9  6F                 	db	111	;'o'
   487  00FEBA  72                 	db	114	;'r'
   488  00FEBB  20                 	db	32
   489  00FEBC  53                 	db	83	;'S'
   490  00FEBD  65                 	db	101	;'e'
   491  00FEBE  74                 	db	116	;'t'
   492  00FEBF  70                 	db	112	;'p'
   493  00FEC0  6F                 	db	111	;'o'
   494  00FEC1  69                 	db	105	;'i'
   495  00FEC2  6E                 	db	110	;'n'
   496  00FEC3  74                 	db	116	;'t'
   497  00FEC4  3A                 	db	58	;':'
   498  00FEC5  20                 	db	32
   499  00FEC6  25                 	db	37
   500  00FEC7  6C                 	db	108	;'l'
   501  00FEC8  64                 	db	100	;'d'
   502  00FEC9  0D                 	db	13
   503  00FECA  0A                 	db	10
   504  00FECB  00                 	db	0
   505  00FECC                     STR_4:
   506  00FECC  43                 	db	67	;'C'
   507  00FECD  6F                 	db	111	;'o'
   508  00FECE  6E                 	db	110	;'n'
   509  00FECF  6E                 	db	110	;'n'
   510  00FED0  65                 	db	101	;'e'
   511  00FED1  63                 	db	99	;'c'
   512  00FED2  74                 	db	116	;'t'
   513  00FED3  20                 	db	32
   514  00FED4  52                 	db	82	;'R'
   515  00FED5  41                 	db	65	;'A'
   516  00FED6  30                 	db	48	;'0'
   517  00FED7  20                 	db	32
   518  00FED8  74                 	db	116	;'t'
   519  00FED9  6F                 	db	111	;'o'
   520  00FEDA  20                 	db	32
   521  00FEDB  50                 	db	80	;'P'
   522  00FEDC  69                 	db	105	;'i'
   523  00FEDD  74                 	db	116	;'t'
   524  00FEDE  63                 	db	99	;'c'
   525  00FEDF  68                 	db	104	;'h'
   526  00FEE0  20                 	db	32
   527  00FEE1  53                 	db	83	;'S'
   528  00FEE2  65                 	db	101	;'e'
   529  00FEE3  72                 	db	114	;'r'
   530  00FEE4  76                 	db	118	;'v'
   531  00FEE5  6F                 	db	111	;'o'
   532  00FEE6  20                 	db	32
   533  00FEE7  44                 	db	68	;'D'
   534  00FEE8  61                 	db	97	;'a'
   535  00FEE9  74                 	db	116	;'t'
   536  00FEEA  61                 	db	97	;'a'
   537  00FEEB  0D                 	db	13
   538  00FEEC  0A                 	db	10
   539  00FEED  00                 	db	0
   540  00FEEE                     STR_3:
   541  00FEEE  43                 	db	67	;'C'
   542  00FEEF  6F                 	db	111	;'o'
   543  00FEF0  6E                 	db	110	;'n'
   544  00FEF1  6E                 	db	110	;'n'
   545  00FEF2  65                 	db	101	;'e'
   546  00FEF3  63                 	db	99	;'c'
   547  00FEF4  74                 	db	116	;'t'
   548  00FEF5  20                 	db	32
   549  00FEF6  52                 	db	82	;'R'
   550  00FEF7  41                 	db	65	;'A'
   551  00FEF8  31                 	db	49	;'1'
   552  00FEF9  20                 	db	32
   553  00FEFA  74                 	db	116	;'t'
   554  00FEFB  6F                 	db	111	;'o'
   555  00FEFC  20                 	db	32
   556  00FEFD  59                 	db	89	;'Y'
   557  00FEFE  61                 	db	97	;'a'
   558  00FEFF  77                 	db	119	;'w'
   559  00FF00  20                 	db	32
   560  00FF01  53                 	db	83	;'S'
   561  00FF02  65                 	db	101	;'e'
   562  00FF03  72                 	db	114	;'r'
   563  00FF04  76                 	db	118	;'v'
   564  00FF05  6F                 	db	111	;'o'
   565  00FF06  20                 	db	32
   566  00FF07  44                 	db	68	;'D'
   567  00FF08  61                 	db	97	;'a'
   568  00FF09  74                 	db	116	;'t'
   569  00FF0A  61                 	db	97	;'a'
   570  00FF0B  0D                 	db	13
   571  00FF0C  0A                 	db	10
   572  00FF0D  00                 	db	0
   573  00FF0E                     STR_23:
   574  00FF0E  55                 	db	85	;'U'
   575  00FF0F  6E                 	db	110	;'n'
   576  00FF10  6B                 	db	107	;'k'
   577  00FF11  6E                 	db	110	;'n'
   578  00FF12  6F                 	db	111	;'o'
   579  00FF13  77                 	db	119	;'w'
   580  00FF14  6E                 	db	110	;'n'
   581  00FF15  20                 	db	32
   582  00FF16  6F                 	db	111	;'o'
   583  00FF17  72                 	db	114	;'r'
   584  00FF18  20                 	db	32
   585  00FF19  49                 	db	73	;'I'
   586  00FF1A  6E                 	db	110	;'n'
   587  00FF1B  76                 	db	118	;'v'
   588  00FF1C  61                 	db	97	;'a'
   589  00FF1D  6C                 	db	108	;'l'
   590  00FF1E  69                 	db	105	;'i'
   591  00FF1F  64                 	db	100	;'d'
   592  00FF20  20                 	db	32
   593  00FF21  43                 	db	67	;'C'
   594  00FF22  6F                 	db	111	;'o'
   595  00FF23  6D                 	db	109	;'m'
   596  00FF24  6D                 	db	109	;'m'
   597  00FF25  61                 	db	97	;'a'
   598  00FF26  6E                 	db	110	;'n'
   599  00FF27  64                 	db	100	;'d'
   600  00FF28  20                 	db	32
   601  00FF29  25                 	db	37
   602  00FF2A  63                 	db	99	;'c'
   603  00FF2B  0D                 	db	13
   604  00FF2C  0A                 	db	10
   605  00FF2D  00                 	db	0
   606  00FF2E                     STR_10:
   607  00FF2E  44                 	db	68	;'D'
   608  00FF2F  65                 	db	101	;'e'
   609  00FF30  63                 	db	99	;'c'
   610  00FF31  72                 	db	114	;'r'
   611  00FF32  65                 	db	101	;'e'
   612  00FF33  6D                 	db	109	;'m'
   613  00FF34  65                 	db	101	;'e'
   614  00FF35  6E                 	db	110	;'n'
   615  00FF36  74                 	db	116	;'t'
   616  00FF37  69                 	db	105	;'i'
   617  00FF38  6E                 	db	110	;'n'
   618  00FF39  67                 	db	103	;'g'
   619  00FF3A  20                 	db	32
   620  00FF3B  4D                 	db	77	;'M'
   621  00FF3C  6F                 	db	111	;'o'
   622  00FF3D  74                 	db	116	;'t'
   623  00FF3E  6F                 	db	111	;'o'
   624  00FF3F  72                 	db	114	;'r'
   625  00FF40  20                 	db	32
   626  00FF41  53                 	db	83	;'S'
   627  00FF42  70                 	db	112	;'p'
   628  00FF43  65                 	db	101	;'e'
   629  00FF44  65                 	db	101	;'e'
   630  00FF45  64                 	db	100	;'d'
   631  00FF46  3A                 	db	58	;':'
   632  00FF47  20                 	db	32
   633  00FF48  25                 	db	37
   634  00FF49  75                 	db	117	;'u'
   635  00FF4A  0D                 	db	13
   636  00FF4B  0A                 	db	10
   637  00FF4C  00                 	db	0
   638  00FF4D                     STR_9:
   639  00FF4D  49                 	db	73	;'I'
   640  00FF4E  6E                 	db	110	;'n'
   641  00FF4F  63                 	db	99	;'c'
   642  00FF50  72                 	db	114	;'r'
   643  00FF51  65                 	db	101	;'e'
   644  00FF52  6D                 	db	109	;'m'
   645  00FF53  65                 	db	101	;'e'
   646  00FF54  6E                 	db	110	;'n'
   647  00FF55  74                 	db	116	;'t'
   648  00FF56  69                 	db	105	;'i'
   649  00FF57  6E                 	db	110	;'n'
   650  00FF58  67                 	db	103	;'g'
   651  00FF59  20                 	db	32
   652  00FF5A  4D                 	db	77	;'M'
   653  00FF5B  6F                 	db	111	;'o'
   654  00FF5C  74                 	db	116	;'t'
   655  00FF5D  6F                 	db	111	;'o'
   656  00FF5E  72                 	db	114	;'r'
   657  00FF5F  20                 	db	32
   658  00FF60  53                 	db	83	;'S'
   659  00FF61  70                 	db	112	;'p'
   660  00FF62  65                 	db	101	;'e'
   661  00FF63  65                 	db	101	;'e'
   662  00FF64  64                 	db	100	;'d'
   663  00FF65  3A                 	db	58	;':'
   664  00FF66  20                 	db	32
   665  00FF67  25                 	db	37
   666  00FF68  75                 	db	117	;'u'
   667  00FF69  0D                 	db	13
   668  00FF6A  0A                 	db	10
   669  00FF6B  00                 	db	0
   670  00FF6C                     STR_16:
   671  00FF6C  52                 	db	82	;'R'
   672  00FF6D  65                 	db	101	;'e'
   673  00FF6E  63                 	db	99	;'c'
   674  00FF6F  65                 	db	101	;'e'
   675  00FF70  69                 	db	105	;'i'
   676  00FF71  76                 	db	118	;'v'
   677  00FF72  65                 	db	101	;'e'
   678  00FF73  64                 	db	100	;'d'
   679  00FF74  20                 	db	32
   680  00FF75  25                 	db	37
   681  00FF76  75                 	db	117	;'u'
   682  00FF77  20                 	db	32
   683  00FF78  66                 	db	102	;'f'
   684  00FF79  72                 	db	114	;'r'
   685  00FF7A  6F                 	db	111	;'o'
   686  00FF7B  6D                 	db	109	;'m'
   687  00FF7C  20                 	db	32
   688  00FF7D  45                 	db	69	;'E'
   689  00FF7E  55                 	db	85	;'U'
   690  00FF7F  53                 	db	83	;'S'
   691  00FF80  41                 	db	65	;'A'
   692  00FF81  52                 	db	82	;'R'
   693  00FF82  54                 	db	84	;'T'
   694  00FF83  31                 	db	49	;'1'
   695  00FF84  0D                 	db	13
   696  00FF85  0A                 	db	10
   697  00FF86  00                 	db	0
   698  00FF87                     STR_5:
   699  00FF87  43                 	db	67	;'C'
   700  00FF88  6F                 	db	111	;'o'
   701  00FF89  6E                 	db	110	;'n'
   702  00FF8A  6E                 	db	110	;'n'
   703  00FF8B  65                 	db	101	;'e'
   704  00FF8C  63                 	db	99	;'c'
   705  00FF8D  74                 	db	116	;'t'
   706  00FF8E  20                 	db	32
   707  00FF8F  52                 	db	82	;'R'
   708  00FF90  42                 	db	66	;'B'
   709  00FF91  30                 	db	48	;'0'
   710  00FF92  20                 	db	32
   711  00FF93  74                 	db	116	;'t'
   712  00FF94  6F                 	db	111	;'o'
   713  00FF95  20                 	db	32
   714  00FF96  45                 	db	69	;'E'
   715  00FF97  6E                 	db	110	;'n'
   716  00FF98  63                 	db	99	;'c'
   717  00FF99  6F                 	db	111	;'o'
   718  00FF9A  64                 	db	100	;'d'
   719  00FF9B  65                 	db	101	;'e'
   720  00FF9C  72                 	db	114	;'r'
   721  00FF9D  20                 	db	32
   722  00FF9E  41                 	db	65	;'A'
   723  00FF9F  0D                 	db	13
   724  00FFA0  0A                 	db	10
   725  00FFA1  00                 	db	0
   726  00FFA2                     STR_6:
   727  00FFA2  43                 	db	67	;'C'
   728  00FFA3  6F                 	db	111	;'o'
   729  00FFA4  6E                 	db	110	;'n'
   730  00FFA5  6E                 	db	110	;'n'
   731  00FFA6  65                 	db	101	;'e'
   732  00FFA7  63                 	db	99	;'c'
   733  00FFA8  74                 	db	116	;'t'
   734  00FFA9  20                 	db	32
   735  00FFAA  52                 	db	82	;'R'
   736  00FFAB  41                 	db	65	;'A'
   737  00FFAC  34                 	db	52	;'4'
   738  00FFAD  20                 	db	32
   739  00FFAE  74                 	db	116	;'t'
   740  00FFAF  6F                 	db	111	;'o'
   741  00FFB0  20                 	db	32
   742  00FFB1  45                 	db	69	;'E'
   743  00FFB2  6E                 	db	110	;'n'
   744  00FFB3  63                 	db	99	;'c'
   745  00FFB4  6F                 	db	111	;'o'
   746  00FFB5  64                 	db	100	;'d'
   747  00FFB6  65                 	db	101	;'e'
   748  00FFB7  72                 	db	114	;'r'
   749  00FFB8  20                 	db	32
   750  00FFB9  42                 	db	66	;'B'
   751  00FFBA  0D                 	db	13
   752  00FFBB  0A                 	db	10
   753  00FFBC  00                 	db	0
   754  00FFBD                     STR_17:
   755  00FFBD  0A                 	db	10
   756  00FFBE  0A                 	db	10
   757  00FFBF  0A                 	db	10
   758  00FFC0  0A                 	db	10
   759  00FFC1  0A                 	db	10
   760  00FFC2  0A                 	db	10
   761  00FFC3  0A                 	db	10
   762  00FFC4  0A                 	db	10
   763  00FFC5  0A                 	db	10
   764  00FFC6  0A                 	db	10
   765  00FFC7  0A                 	db	10
   766  00FFC8  0A                 	db	10
   767  00FFC9  0A                 	db	10
   768  00FFCA  0A                 	db	10
   769  00FFCB  0A                 	db	10
   770  00FFCC  0A                 	db	10
   771  00FFCD  0A                 	db	10
   772  00FFCE  0A                 	db	10
   773  00FFCF  0A                 	db	10
   774  00FFD0  0A                 	db	10
   775  00FFD1  00                 	db	0
   776  00FFD2                     STR_18:
   777  00FFD2  55                 	db	85	;'U'
   778  00FFD3  6E                 	db	110	;'n'
   779  00FFD4  6B                 	db	107	;'k'
   780  00FFD5  6E                 	db	110	;'n'
   781  00FFD6  6F                 	db	111	;'o'
   782  00FFD7  77                 	db	119	;'w'
   783  00FFD8  6E                 	db	110	;'n'
   784  00FFD9  20                 	db	32
   785  00FFDA  6B                 	db	107	;'k'
   786  00FFDB  65                 	db	101	;'e'
   787  00FFDC  79                 	db	121	;'y'
   788  00FFDD  20                 	db	32
   789  00FFDE  25                 	db	37
   790  00FFDF  63                 	db	99	;'c'
   791  00FFE0  0D                 	db	13
   792  00FFE1  0A                 	db	10
   793  00FFE2  00                 	db	0
   794  00FFE3                     STR_22:
   795  00FFE3  44                 	db	68	;'D'
   796  00FFE4  61                 	db	97	;'a'
   797  00FFE5  74                 	db	116	;'t'
   798  00FFE6  61                 	db	97	;'a'
   799  00FFE7  20                 	db	32
   800  00FFE8  42                 	db	66	;'B'
   801  00FFE9  69                 	db	105	;'i'
   802  00FFEA  74                 	db	116	;'t'
   803  00FFEB  73                 	db	115	;'s'
   804  00FFEC  20                 	db	32
   805  00FFED  73                 	db	115	;'s'
   806  00FFEE  20                 	db	32
   807  00FFEF  25                 	db	37
   808  00FFF0  69                 	db	105	;'i'
   809  00FFF1  0D                 	db	13
   810  00FFF2  0A                 	db	10
   811  00FFF3  00                 	db	0
   812  00FFF4                     STR_14:
   813  00FFF4  20                 	db	32
   814  00FFF5  6B                 	db	107	;'k'
   815  00FFF6  0D                 	db	13
   816  00FFF7  0A                 	db	10
   817  00FFF8  00                 	db	0
   818  00FFF9                     STR_15:
   819  00FFF9  6F                 	db	111	;'o'
   820  00FFFA  6B                 	db	107	;'k'
   821  00FFFB  0D                 	db	13
   822  00FFFC  0A                 	db	10
   823  00FFFD  00                 	db	0
   824  0000                     
   825                           ; #config settings
   826  00FFFE  00                 	db	0	; dummy byte at the end
   827  0000                     
   828                           	psect	cinit
   829  000A82                     __pcinit:
   830                           	opt stack 0
   831  000A82                     start_initialization:
   832                           	opt stack 0
   833  000A82                     __initialization:
   834                           	opt stack 0
   835                           
   836                           ; Initialize objects allocated to BANK0 (14 bytes)
   837                           ; load TBLPTR registers with __pidataBANK0
   838  000A82  0E5E               	movlw	low __pidataBANK0
   839  000A84  6EF6               	movwf	tblptrl,c
   840  000A86  0E0F               	movlw	high __pidataBANK0
   841  000A88  6EF7               	movwf	tblptrh,c
   842  000A8A  0E00               	movlw	low (__pidataBANK0 shr (0+16))
   843  000A8C  6EF8               	movwf	tblptru,c
   844  000A8E  EE00  F086         	lfsr	0,__pdataBANK0
   845  000A92  EE10 F00E          	lfsr	1,14
   846  000A96                     copy_data0:
   847  000A96  0009               	tblrd		*+
   848  000A98  CFF5 FFEE          	movff	tablat,postinc0
   849  000A9C  50E5               	movf	postdec1,w,c
   850  000A9E  50E1               	movf	fsr1l,w,c
   851  000AA0  E1FA               	bnz	copy_data0
   852                           
   853                           ; Clear objects allocated to BANK0 (12 bytes)
   854  000AA2  EE00  F094         	lfsr	0,__pbssBANK0
   855  000AA6  0E0C               	movlw	12
   856  000AA8                     clear_0:
   857  000AA8  6AEE               	clrf	postinc0,c
   858  000AAA  06E8               	decf	wreg,f,c
   859  000AAC  E1FD               	bnz	clear_0
   860                           
   861                           ; Clear objects allocated to COMRAM (22 bytes)
   862  000AAE  EE00  F02D         	lfsr	0,__pbssCOMRAM
   863  000AB2  0E16               	movlw	22
   864  000AB4                     clear_1:
   865  000AB4  6AEE               	clrf	postinc0,c
   866  000AB6  06E8               	decf	wreg,f,c
   867  000AB8  E1FD               	bnz	clear_1
   868  000ABA                     end_of_initialization:
   869                           	opt stack 0
   870  000ABA                     __end_of__initialization:
   871                           	opt stack 0
   872  000ABA  9043               	bcf	int$flags,0,c	;clear compiler interrupt flag (level 1)
   873  000ABC  9243               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
   874  000ABE  0100               	movlb	0
   875  000AC0  EF76  F000         	goto	_main	;jump to C main() function
   876                           tblptru	equ	0xFF8
   877                           tblptrh	equ	0xFF7
   878                           tblptrl	equ	0xFF6
   879                           tablat	equ	0xFF5
   880                           postinc0	equ	0xFEE
   881                           wreg	equ	0xFE8
   882                           postdec1	equ	0xFE5
   883                           fsr1l	equ	0xFE1
   884                           
   885                           	psect	bssCOMRAM
   886  00002D                     __pbssCOMRAM:
   887                           	opt stack 0
   888  00002D                     _TMR2_InterruptHandler:
   889                           	opt stack 0
   890  00002D                     	ds	2
   891  00002F                     _TMR5_InterruptHandler:
   892                           	opt stack 0
   893  00002F                     	ds	2
   894  000031                     _timer5ReloadVal:
   895                           	opt stack 0
   896  000031                     	ds	2
   897  000033                     _TMR1_InterruptHandler:
   898                           	opt stack 0
   899  000033                     	ds	2
   900  000035                     _timer1ReloadVal:
   901                           	opt stack 0
   902  000035                     	ds	2
   903  000037                     _timer3ReloadVal:
   904                           	opt stack 0
   905  000037                     	ds	2
   906  000039                     _timer0ReloadVal:
   907                           	opt stack 0
   908  000039                     	ds	2
   909  00003B                     _TMR0_InterruptHandler:
   910                           	opt stack 0
   911  00003B                     	ds	2
   912  00003D                     TMR5_DefaultInterruptHandler@pulseHigh:
   913                           	opt stack 0
   914  00003D                     	ds	1
   915  00003E                     TMR1_DefaultInterruptHandler@pulseHigh:
   916                           	opt stack 0
   917  00003E                     	ds	1
   918  00003F                     TMR0_DefaultInterruptHandler@pulseHigh:
   919                           	opt stack 0
   920  00003F                     	ds	1
   921  000040                     _encoderB:
   922                           	opt stack 0
   923  000040                     	ds	1
   924  000041                     _encoderA:
   925                           	opt stack 0
   926  000041                     	ds	1
   927  000042                     _motorControlMode:
   928                           	opt stack 0
   929  000042                     	ds	1
   930                           tblptru	equ	0xFF8
   931                           tblptrh	equ	0xFF7
   932                           tblptrl	equ	0xFF6
   933                           tablat	equ	0xFF5
   934                           postinc0	equ	0xFEE
   935                           wreg	equ	0xFE8
   936                           postdec1	equ	0xFE5
   937                           fsr1l	equ	0xFE1
   938                           
   939                           	psect	bssBANK0
   940  000094                     __pbssBANK0:
   941                           	opt stack 0
   942  000094                     _home:
   943                           	opt stack 0
   944  000094                     	ds	4
   945  000098                     _encoderPosition:
   946                           	opt stack 0
   947  000098                     	ds	4
   948  00009C                     _motorSetPoint:
   949                           	opt stack 0
   950  00009C                     	ds	4
   951                           tblptru	equ	0xFF8
   952                           tblptrh	equ	0xFF7
   953                           tblptrl	equ	0xFF6
   954                           tablat	equ	0xFF5
   955                           postinc0	equ	0xFEE
   956                           wreg	equ	0xFE8
   957                           postdec1	equ	0xFE5
   958                           fsr1l	equ	0xFE1
   959                           
   960                           	psect	dataBANK0
   961  000086                     __pdataBANK0:
   962                           	opt stack 0
   963  000086                     _rightLimit:
   964                           	opt stack 0
   965  000086                     	ds	4
   966  00008A                     _leftLimit:
   967                           	opt stack 0
   968  00008A                     	ds	4
   969  00008E                     _motorSpeed:
   970                           	opt stack 0
   971  00008E                     	ds	2
   972  000090                     _pitchPosition:
   973                           	opt stack 0
   974  000090                     	ds	2
   975  000092                     _yawPosition:
   976                           	opt stack 0
   977  000092                     	ds	2
   978                           tblptru	equ	0xFF8
   979                           tblptrh	equ	0xFF7
   980                           tblptrl	equ	0xFF6
   981                           tablat	equ	0xFF5
   982                           postinc0	equ	0xFEE
   983                           wreg	equ	0xFE8
   984                           postdec1	equ	0xFE5
   985                           fsr1l	equ	0xFE1
   986                           
   987                           	psect	cstackBANK0
   988  000060                     __pcstackBANK0:
   989                           	opt stack 0
   990  000060                     ?___llmod:
   991                           	opt stack 0
   992  000060                     ___llmod@dividend:
   993                           	opt stack 0
   994                           
   995                           ; 4 bytes @ 0x0
   996  000060                     	ds	4
   997  000064                     ___llmod@divisor:
   998                           	opt stack 0
   999                           
  1000                           ; 4 bytes @ 0x4
  1001  000064                     	ds	4
  1002  000068                     ?_printf:
  1003                           	opt stack 0
  1004  000068                     printf@f:
  1005                           	opt stack 0
  1006                           
  1007                           ; 2 bytes @ 0x8
  1008  000068                     	ds	10
  1009  000072                     printf@prec:
  1010                           	opt stack 0
  1011                           
  1012                           ; 2 bytes @ 0x12
  1013  000072                     	ds	2
  1014  000074                     printf@val:
  1015                           	opt stack 0
  1016                           
  1017                           ; 4 bytes @ 0x14
  1018  000074                     	ds	4
  1019  000078                     printf@flag:
  1020                           	opt stack 0
  1021                           
  1022                           ; 1 bytes @ 0x18
  1023  000078                     	ds	1
  1024  000079                     printf@ap:
  1025                           	opt stack 0
  1026                           
  1027                           ; 2 bytes @ 0x19
  1028  000079                     	ds	2
  1029  00007B                     printf@c:
  1030                           	opt stack 0
  1031                           
  1032                           ; 1 bytes @ 0x1B
  1033  00007B                     	ds	1
  1034  00007C                     ??_main:
  1035                           
  1036                           ; 1 bytes @ 0x1C
  1037  00007C                     	ds	4
  1038  000080                     main@cmd2:
  1039                           	opt stack 0
  1040                           
  1041                           ; 1 bytes @ 0x20
  1042  000080                     	ds	1
  1043  000081                     main@pos:
  1044                           	opt stack 0
  1045                           
  1046                           ; 2 bytes @ 0x21
  1047  000081                     	ds	2
  1048  000083                     main@speed:
  1049                           	opt stack 0
  1050                           
  1051                           ; 2 bytes @ 0x23
  1052  000083                     	ds	2
  1053  000085                     main@cmd:
  1054                           	opt stack 0
  1055                           
  1056                           ; 1 bytes @ 0x25
  1057  000085                     	ds	1
  1058                           tblptru	equ	0xFF8
  1059                           tblptrh	equ	0xFF7
  1060                           tblptrl	equ	0xFF6
  1061                           tablat	equ	0xFF5
  1062                           postinc0	equ	0xFEE
  1063                           wreg	equ	0xFE8
  1064                           postdec1	equ	0xFE5
  1065                           fsr1l	equ	0xFE1
  1066                           
  1067                           	psect	cstackCOMRAM
  1068  000001                     __pcstackCOMRAM:
  1069                           	opt stack 0
  1070  000001                     TMR2_WriteTimer@timerVal:
  1071                           	opt stack 0
  1072  000001                     TMR0_WriteTimer@timerVal:
  1073                           	opt stack 0
  1074  000001                     CCP4_CallBack@capturedValue:
  1075                           	opt stack 0
  1076  000001                     CCP5_CallBack@capturedValue:
  1077                           	opt stack 0
  1078  000001                     TMR1_WriteTimer@timerVal:
  1079                           	opt stack 0
  1080  000001                     TMR5_WriteTimer@timerVal:
  1081                           	opt stack 0
  1082  000001                     i2setMotorSpeed@speed:
  1083                           	opt stack 0
  1084                           
  1085                           ; 2 bytes @ 0x0
  1086  000001                     	ds	2
  1087  000003                     ??_TMR0_DefaultInterruptHandler:
  1088  000003                     ??_TMR1_DefaultInterruptHandler:
  1089  000003                     ??_TMR2_DefaultInterruptHandler:
  1090  000003                     ??_TMR5_DefaultInterruptHandler:
  1091  000003                     CCP5_CaptureISR@module:
  1092                           	opt stack 0
  1093  000003                     CCP4_CaptureISR@module:
  1094                           	opt stack 0
  1095                           
  1096                           ; 2 bytes @ 0x2
  1097  000003                     	ds	2
  1098  000005                     
  1099                           ; 1 bytes @ 0x4
  1100  000005                     	ds	2
  1101  000007                     TMR2_DefaultInterruptHandler@error:
  1102                           	opt stack 0
  1103                           
  1104                           ; 4 bytes @ 0x6
  1105  000007                     	ds	4
  1106  00000B                     ??_INTERRUPT_InterruptManager:
  1107                           
  1108                           ; 1 bytes @ 0xA
  1109  00000B                     	ds	18
  1110  00001D                     ?_parseInt:
  1111                           	opt stack 0
  1112  00001D                     ?___lldiv:
  1113                           	opt stack 0
  1114  00001D                     EUSART2_Write@txData:
  1115                           	opt stack 0
  1116  00001D                     TMR0_SetInterruptHandler@InterruptHandler:
  1117                           	opt stack 0
  1118  00001D                     setYawServo@pos:
  1119                           	opt stack 0
  1120  00001D                     setPitchServo@pos:
  1121                           	opt stack 0
  1122  00001D                     setMotorSpeed@speed:
  1123                           	opt stack 0
  1124  00001D                     TMR1_SetInterruptHandler@InterruptHandler:
  1125                           	opt stack 0
  1126  00001D                     TMR5_SetInterruptHandler@InterruptHandler:
  1127                           	opt stack 0
  1128  00001D                     TMR2_SetInterruptHandler@InterruptHandler:
  1129                           	opt stack 0
  1130  00001D                     ___lldiv@dividend:
  1131                           	opt stack 0
  1132                           
  1133                           ; 4 bytes @ 0x1C
  1134  00001D                     	ds	1
  1135  00001E                     putch@txData:
  1136                           	opt stack 0
  1137                           
  1138                           ; 1 bytes @ 0x1D
  1139  00001E                     	ds	1
  1140  00001F                     ??_TMR0_Initialize:
  1141  00001F                     ??_parseInt:
  1142  00001F                     
  1143                           ; 1 bytes @ 0x1E
  1144  00001F                     	ds	1
  1145  000020                     parseInt@position:
  1146                           	opt stack 0
  1147                           
  1148                           ; 2 bytes @ 0x1F
  1149  000020                     	ds	1
  1150  000021                     ___lldiv@divisor:
  1151                           	opt stack 0
  1152                           
  1153                           ; 4 bytes @ 0x20
  1154  000021                     	ds	4
  1155  000025                     ___lldiv@quotient:
  1156                           	opt stack 0
  1157                           
  1158                           ; 4 bytes @ 0x24
  1159  000025                     	ds	4
  1160  000029                     ___lldiv@counter:
  1161                           	opt stack 0
  1162                           
  1163                           ; 1 bytes @ 0x28
  1164  000029                     	ds	1
  1165  00002A                     ___llmod@counter:
  1166                           	opt stack 0
  1167                           
  1168                           ; 1 bytes @ 0x29
  1169  00002A                     	ds	1
  1170  00002B                     ??_printf:
  1171                           
  1172                           ; 1 bytes @ 0x2A
  1173  00002B                     	ds	2
  1174                           tblptru	equ	0xFF8
  1175                           tblptrh	equ	0xFF7
  1176                           tblptrl	equ	0xFF6
  1177                           tablat	equ	0xFF5
  1178                           postinc0	equ	0xFEE
  1179                           wreg	equ	0xFE8
  1180                           postdec1	equ	0xFE5
  1181                           fsr1l	equ	0xFE1
  1182                           
  1183 ;;
  1184 ;;Main: autosize = 0, tempsize = 4, incstack = 0, save=0
  1185 ;;
  1186 ;; *************** function _main *****************
  1187 ;; Defined at:
  1188 ;;		line 62 in file "main.c"
  1189 ;; Parameters:    Size  Location     Type
  1190 ;;		None
  1191 ;; Auto vars:     Size  Location     Type
  1192 ;;  speed           2   35[BANK0 ] unsigned int 
  1193 ;;  pos             2   33[BANK0 ] unsigned int 
  1194 ;;  cmd             1   37[BANK0 ] unsigned char 
  1195 ;;  cmd2            1   32[BANK0 ] unsigned char 
  1196 ;; Return value:  Size  Location     Type
  1197 ;;                  1    wreg      void 
  1198 ;; Registers used:
  1199 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1200 ;; Tracked objects:
  1201 ;;		On entry : 0/0
  1202 ;;		On exit  : 0/0
  1203 ;;		Unchanged: 0/0
  1204 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1205 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1206 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1207 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1208 ;;      Totals:         0      10       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1209 ;;Total ram usage:       10 bytes
  1210 ;; Hardware stack levels required when called:    7
  1211 ;; This function calls:
  1212 ;;		_EUSART1_Read
  1213 ;;		_EUSART1_is_rx_ready
  1214 ;;		_EUSART2_Read
  1215 ;;		_EUSART2_is_rx_ready
  1216 ;;		_SYSTEM_Initialize
  1217 ;;		_parseInt
  1218 ;;		_printf
  1219 ;;		_setMotorSpeed
  1220 ;;		_setPitchServo
  1221 ;;		_setYawServo
  1222 ;; This function is called by:
  1223 ;;		Startup code after reset
  1224 ;; This function uses a non-reentrant model
  1225 ;;
  1226                           
  1227                           	psect	text0
  1228  0000EC                     __ptext0:
  1229                           	opt stack 0
  1230  0000EC                     _main:
  1231                           	opt stack 24
  1232                           
  1233                           ;main.c: 63: char cmd, cmd2;
  1234                           ;main.c: 64: (INTCONbits.GIE = 1);
  1235                           
  1236                           ;incstack = 0
  1237  0000EC  8EF2               	bsf	intcon,7,c	;volatile
  1238                           
  1239                           ;main.c: 65: (INTCONbits.PEIE = 1);
  1240  0000EE  8CF2               	bsf	intcon,6,c	;volatile
  1241                           
  1242                           ;main.c: 67: SYSTEM_Initialize();
  1243  0000F0  EC2A  F006         	call	_SYSTEM_Initialize	;wreg free
  1244  0000F4                     
  1245                           ;main.c: 70: if ((EUSART2_is_rx_ready())) {
  1246  0000F4  ECC2  F007         	call	_EUSART2_is_rx_ready	;wreg free
  1247  0000F8  0900               	iorlw	0
  1248  0000FA  B4D8               	btfsc	status,2,c
  1249  0000FC  D166               	goto	l424
  1250                           
  1251                           ;main.c: 71: cmd = EUSART2_Read();
  1252  0000FE  ECA7  F007         	call	_EUSART2_Read	;wreg free
  1253  000102  0100               	movlb	0	; () banked
  1254  000104  6F85               	movwf	main@cmd& (0+255),b
  1255                           
  1256                           ;main.c: 72: switch (cmd) {
  1257  000106  D134               	goto	l422
  1258  000108                     
  1259                           ; BSR set to: 0
  1260                           ;main.c: 74: setPitchServo(pitchPosition - 100);
  1261                           
  1262                           ; BSR set to: 0
  1263  000108  0E9C               	movlw	156
  1264  00010A  2590               	addwf	_pitchPosition& (0+255),w,b
  1265  00010C  6E1D               	movwf	setPitchServo@pos,c
  1266  00010E  0EFF               	movlw	255
  1267  000110  2191               	addwfc	(_pitchPosition+1)& (0+255),w,b
  1268  000112  6E1E               	movwf	setPitchServo@pos+1,c
  1269  000114  ECF8  F005         	call	_setPitchServo	;wreg free
  1270                           
  1271                           ;main.c: 75: printf("Incrementing Pitch Servo Position: %u\r\n",pitchPosition);
  1272  000118  0EEB               	movlw	low STR_1
  1273  00011A  0100               	movlb	0	; () banked
  1274  00011C  6F68               	movwf	printf@f& (0+255),b
  1275  00011E  0EFD               	movlw	high STR_1
  1276  000120  6F69               	movwf	(printf@f+1)& (0+255),b
  1277  000122  C090  F06A         	movff	_pitchPosition,?_printf+2
  1278  000126  C091  F06B         	movff	_pitchPosition+1,?_printf+3
  1279  00012A  ECD2  F002         	call	_printf	;wreg free
  1280                           
  1281                           ;main.c: 76: break;
  1282  00012E  D14D               	goto	l424
  1283  000130                     
  1284                           ;main.c: 78: setPitchServo(pitchPosition + 100);
  1285  000130  0E64               	movlw	100
  1286  000132  0100               	movlb	0	; () banked
  1287  000134  2590               	addwf	_pitchPosition& (0+255),w,b
  1288  000136  6E1D               	movwf	setPitchServo@pos,c
  1289  000138  0E00               	movlw	0
  1290  00013A  2191               	addwfc	(_pitchPosition+1)& (0+255),w,b
  1291  00013C  6E1E               	movwf	setPitchServo@pos+1,c
  1292  00013E  ECF8  F005         	call	_setPitchServo	;wreg free
  1293                           
  1294                           ;main.c: 79: printf("Decrementing Pitch Servo Position: %u\r\n",pitchPosition);
  1295  000142  0EC3               	movlw	low STR_2
  1296  000144  0100               	movlb	0	; () banked
  1297  000146  6F68               	movwf	printf@f& (0+255),b
  1298  000148  0EFD               	movlw	high STR_2
  1299  00014A  6F69               	movwf	(printf@f+1)& (0+255),b
  1300  00014C  C090  F06A         	movff	_pitchPosition,?_printf+2
  1301  000150  C091  F06B         	movff	_pitchPosition+1,?_printf+3
  1302  000154  ECD2  F002         	call	_printf	;wreg free
  1303                           
  1304                           ;main.c: 80: break;
  1305  000158  D138               	goto	l424
  1306  00015A                     
  1307                           ;main.c: 82: printf("Connect RA1 to Yaw Servo Data\r\n");
  1308  00015A  0EEE               	movlw	low STR_3
  1309  00015C  0100               	movlb	0	; () banked
  1310  00015E  6F68               	movwf	printf@f& (0+255),b
  1311  000160  0EFE               	movlw	high STR_3
  1312  000162  6F69               	movwf	(printf@f+1)& (0+255),b
  1313  000164  ECD2  F002         	call	_printf	;wreg free
  1314                           
  1315                           ;main.c: 83: printf("Connect RA0 to Pitch Servo Data\r\n");
  1316  000168  0ECC               	movlw	low STR_4
  1317  00016A  0100               	movlb	0	; () banked
  1318  00016C  6F68               	movwf	printf@f& (0+255),b
  1319  00016E  0EFE               	movlw	high STR_4
  1320  000170  6F69               	movwf	(printf@f+1)& (0+255),b
  1321  000172  ECD2  F002         	call	_printf	;wreg free
  1322                           
  1323                           ;main.c: 84: printf("Connect RB0 to Encoder A\r\n");
  1324  000176  0E87               	movlw	low STR_5
  1325  000178  0100               	movlb	0	; () banked
  1326  00017A  6F68               	movwf	printf@f& (0+255),b
  1327  00017C  0EFF               	movlw	high STR_5
  1328  00017E  6F69               	movwf	(printf@f+1)& (0+255),b
  1329  000180  ECD2  F002         	call	_printf	;wreg free
  1330                           
  1331                           ;main.c: 85: printf("Connect RA4 to Encoder B\r\n");
  1332  000184  0EA2               	movlw	low STR_6
  1333  000186  0100               	movlb	0	; () banked
  1334  000188  6F68               	movwf	printf@f& (0+255),b
  1335  00018A  0EFF               	movlw	high STR_6
  1336  00018C  6F69               	movwf	(printf@f+1)& (0+255),b
  1337  00018E  ECD2  F002         	call	_printf	;wreg free
  1338                           
  1339                           ;main.c: 86: break;
  1340  000192  D11B               	goto	l424
  1341  000194                     
  1342                           ;main.c: 88: setYawServo(yawPosition+100);
  1343  000194  0E64               	movlw	100
  1344  000196  0100               	movlb	0	; () banked
  1345  000198  2592               	addwf	_yawPosition& (0+255),w,b
  1346  00019A  6E1D               	movwf	setYawServo@pos,c
  1347  00019C  0E00               	movlw	0
  1348  00019E  2193               	addwfc	(_yawPosition+1)& (0+255),w,b
  1349  0001A0  6E1E               	movwf	setYawServo@pos+1,c
  1350  0001A2  ECDF  F005         	call	_setYawServo	;wreg free
  1351                           
  1352                           ;main.c: 89: printf("Incrementing Yaw Servo Position: %u\r\n",yawPosition);
  1353  0001A6  0E60               	movlw	low STR_7
  1354  0001A8  0100               	movlb	0	; () banked
  1355  0001AA  6F68               	movwf	printf@f& (0+255),b
  1356  0001AC  0EFE               	movlw	high STR_7
  1357  0001AE  6F69               	movwf	(printf@f+1)& (0+255),b
  1358  0001B0  C092  F06A         	movff	_yawPosition,?_printf+2
  1359  0001B4  C093  F06B         	movff	_yawPosition+1,?_printf+3
  1360  0001B8  ECD2  F002         	call	_printf	;wreg free
  1361                           
  1362                           ;main.c: 90: break;
  1363  0001BC  D106               	goto	l424
  1364  0001BE                     
  1365                           ;main.c: 92: setYawServo(yawPosition-100);
  1366  0001BE  0E9C               	movlw	156
  1367  0001C0  0100               	movlb	0	; () banked
  1368  0001C2  2592               	addwf	_yawPosition& (0+255),w,b
  1369  0001C4  6E1D               	movwf	setYawServo@pos,c
  1370  0001C6  0EFF               	movlw	255
  1371  0001C8  2193               	addwfc	(_yawPosition+1)& (0+255),w,b
  1372  0001CA  6E1E               	movwf	setYawServo@pos+1,c
  1373  0001CC  ECDF  F005         	call	_setYawServo	;wreg free
  1374                           
  1375                           ;main.c: 93: printf("Decrementing Yaw Servo Position: %u\r\n",yawPosition);
  1376  0001D0  0E3A               	movlw	low STR_8
  1377  0001D2  0100               	movlb	0	; () banked
  1378  0001D4  6F68               	movwf	printf@f& (0+255),b
  1379  0001D6  0EFE               	movlw	high STR_8
  1380  0001D8  6F69               	movwf	(printf@f+1)& (0+255),b
  1381  0001DA  C092  F06A         	movff	_yawPosition,?_printf+2
  1382  0001DE  C093  F06B         	movff	_yawPosition+1,?_printf+3
  1383  0001E2  ECD2  F002         	call	_printf	;wreg free
  1384                           
  1385                           ;main.c: 94: break;
  1386  0001E6  D0F1               	goto	l424
  1387  0001E8                     
  1388                           ;main.c: 96: motorControlMode = 0;
  1389  0001E8  0E00               	movlw	0
  1390  0001EA  6E42               	movwf	_motorControlMode,c
  1391                           
  1392                           ;main.c: 97: setMotorSpeed(motorSpeed+100);
  1393  0001EC  0E64               	movlw	100
  1394  0001EE  0100               	movlb	0	; () banked
  1395  0001F0  258E               	addwf	_motorSpeed& (0+255),w,b
  1396  0001F2  6E1D               	movwf	setMotorSpeed@speed,c
  1397  0001F4  0E00               	movlw	0
  1398  0001F6  218F               	addwfc	(_motorSpeed+1)& (0+255),w,b
  1399  0001F8  6E1E               	movwf	setMotorSpeed@speed+1,c
  1400  0001FA  EC11  F006         	call	_setMotorSpeed	;wreg free
  1401                           
  1402                           ;main.c: 98: printf("Incrementing Motor Speed: %u\r\n",motorSpeed);
  1403  0001FE  0E4D               	movlw	low STR_9
  1404  000200  0100               	movlb	0	; () banked
  1405  000202  6F68               	movwf	printf@f& (0+255),b
  1406  000204  0EFF               	movlw	high STR_9
  1407  000206  6F69               	movwf	(printf@f+1)& (0+255),b
  1408  000208  C08E  F06A         	movff	_motorSpeed,?_printf+2
  1409  00020C  C08F  F06B         	movff	_motorSpeed+1,?_printf+3
  1410  000210  ECD2  F002         	call	_printf	;wreg free
  1411                           
  1412                           ;main.c: 99: break;
  1413  000214  D0DA               	goto	l424
  1414  000216                     
  1415                           ;main.c: 101: motorControlMode = 0;
  1416  000216  0E00               	movlw	0
  1417  000218  6E42               	movwf	_motorControlMode,c
  1418                           
  1419                           ;main.c: 102: setMotorSpeed(motorSpeed-100);
  1420  00021A  0E9C               	movlw	156
  1421  00021C  0100               	movlb	0	; () banked
  1422  00021E  258E               	addwf	_motorSpeed& (0+255),w,b
  1423  000220  6E1D               	movwf	setMotorSpeed@speed,c
  1424  000222  0EFF               	movlw	255
  1425  000224  218F               	addwfc	(_motorSpeed+1)& (0+255),w,b
  1426  000226  6E1E               	movwf	setMotorSpeed@speed+1,c
  1427  000228  EC11  F006         	call	_setMotorSpeed	;wreg free
  1428                           
  1429                           ;main.c: 103: printf("Decrementing Motor Speed: %u\r\n",motorSpeed);
  1430  00022C  0E2E               	movlw	low STR_10
  1431  00022E  0100               	movlb	0	; () banked
  1432  000230  6F68               	movwf	printf@f& (0+255),b
  1433  000232  0EFF               	movlw	high STR_10
  1434  000234  6F69               	movwf	(printf@f+1)& (0+255),b
  1435  000236  C08E  F06A         	movff	_motorSpeed,?_printf+2
  1436  00023A  C08F  F06B         	movff	_motorSpeed+1,?_printf+3
  1437  00023E  ECD2  F002         	call	_printf	;wreg free
  1438                           
  1439                           ;main.c: 104: break;
  1440  000242  D0C3               	goto	l424
  1441  000244                     
  1442                           ;main.c: 106: motorControlMode = 1;
  1443  000244  0E01               	movlw	1
  1444  000246  6E42               	movwf	_motorControlMode,c
  1445                           
  1446                           ;main.c: 107: motorSetPoint += 10000;
  1447  000248  0E10               	movlw	16
  1448  00024A  0100               	movlb	0	; () banked
  1449  00024C  279C               	addwf	_motorSetPoint& (0+255),f,b
  1450  00024E  0E27               	movlw	39
  1451  000250  239D               	addwfc	(_motorSetPoint+1)& (0+255),f,b
  1452  000252  0E00               	movlw	0
  1453  000254  239E               	addwfc	(_motorSetPoint+2)& (0+255),f,b
  1454  000256  0E00               	movlw	0
  1455  000258  239F               	addwfc	(_motorSetPoint+3)& (0+255),f,b
  1456                           
  1457                           ; BSR set to: 0
  1458                           ;main.c: 108: printf("Incrementing Motor Setpoint: %ld\r\n",motorSetPoint);
  1459  00025A  0EA9               	movlw	low STR_11
  1460  00025C  6F68               	movwf	printf@f& (0+255),b
  1461  00025E  0EFE               	movlw	high STR_11
  1462  000260  6F69               	movwf	(printf@f+1)& (0+255),b
  1463  000262  C09C  F06A         	movff	_motorSetPoint,?_printf+2
  1464  000266  C09D  F06B         	movff	_motorSetPoint+1,?_printf+3
  1465  00026A  C09E  F06C         	movff	_motorSetPoint+2,?_printf+4
  1466  00026E  C09F  F06D         	movff	_motorSetPoint+3,?_printf+5
  1467  000272  ECD2  F002         	call	_printf	;wreg free
  1468                           
  1469                           ;main.c: 109: break;
  1470  000276  D0A9               	goto	l424
  1471  000278                     
  1472                           ;main.c: 111: motorControlMode = 1;
  1473  000278  0E01               	movlw	1
  1474  00027A  6E42               	movwf	_motorControlMode,c
  1475                           
  1476                           ;main.c: 112: motorSetPoint -= 10000;
  1477  00027C  0E10               	movlw	16
  1478  00027E  0100               	movlb	0	; () banked
  1479  000280  5F9C               	subwf	_motorSetPoint& (0+255),f,b
  1480  000282  0E27               	movlw	39
  1481  000284  5B9D               	subwfb	(_motorSetPoint+1)& (0+255),f,b
  1482  000286  0E00               	movlw	0
  1483  000288  5B9E               	subwfb	(_motorSetPoint+2)& (0+255),f,b
  1484  00028A  0E00               	movlw	0
  1485  00028C  5B9F               	subwfb	(_motorSetPoint+3)& (0+255),f,b
  1486                           
  1487                           ; BSR set to: 0
  1488                           ;main.c: 113: printf("Decrementing Motor Setpoint: %ld\r\n",motorSetPoint);
  1489  00028E  0E86               	movlw	low STR_12
  1490  000290  6F68               	movwf	printf@f& (0+255),b
  1491  000292  0EFE               	movlw	high STR_12
  1492  000294  6F69               	movwf	(printf@f+1)& (0+255),b
  1493  000296  C09C  F06A         	movff	_motorSetPoint,?_printf+2
  1494  00029A  C09D  F06B         	movff	_motorSetPoint+1,?_printf+3
  1495  00029E  C09E  F06C         	movff	_motorSetPoint+2,?_printf+4
  1496  0002A2  C09F  F06D         	movff	_motorSetPoint+3,?_printf+5
  1497  0002A6  ECD2  F002         	call	_printf	;wreg free
  1498                           
  1499                           ;main.c: 114: break;
  1500  0002AA  D08F               	goto	l424
  1501  0002AC                     
  1502                           ;main.c: 117: printf("Encoder Position: %ld   SetPoint:%ld\r\n",encoderPosition,motorSet
      +                          Point);
  1503  0002AC  0E13               	movlw	low STR_13
  1504  0002AE  0100               	movlb	0	; () banked
  1505  0002B0  6F68               	movwf	printf@f& (0+255),b
  1506  0002B2  0EFE               	movlw	high STR_13
  1507  0002B4  6F69               	movwf	(printf@f+1)& (0+255),b
  1508  0002B6  C098  F06A         	movff	_encoderPosition,?_printf+2
  1509  0002BA  C099  F06B         	movff	_encoderPosition+1,?_printf+3
  1510  0002BE  C09A  F06C         	movff	_encoderPosition+2,?_printf+4
  1511  0002C2  C09B  F06D         	movff	_encoderPosition+3,?_printf+5
  1512  0002C6  C09C  F06E         	movff	_motorSetPoint,?_printf+6
  1513  0002CA  C09D  F06F         	movff	_motorSetPoint+1,?_printf+7
  1514  0002CE  C09E  F070         	movff	_motorSetPoint+2,?_printf+8
  1515  0002D2  C09F  F071         	movff	_motorSetPoint+3,?_printf+9
  1516  0002D6  ECD2  F002         	call	_printf	;wreg free
  1517  0002DA  ECC2  F007         	call	_EUSART2_is_rx_ready	;wreg free
  1518  0002DE  0900               	iorlw	0
  1519  0002E0  B4D8               	btfsc	status,2,c
  1520  0002E2  D7E4               	goto	l435
  1521                           
  1522                           ;main.c: 118: }
  1523                           ;main.c: 119: EUSART2_Read();
  1524  0002E4  ECA7  F007         	call	_EUSART2_Read	;wreg free
  1525                           
  1526                           ;main.c: 120: break;
  1527  0002E8  D070               	goto	l424
  1528  0002EA                     
  1529                           ;main.c: 122: printf(" k\r\n");
  1530  0002EA  0EF4               	movlw	low STR_14
  1531  0002EC  0100               	movlb	0	; () banked
  1532  0002EE  6F68               	movwf	printf@f& (0+255),b
  1533  0002F0  0EFF               	movlw	high STR_14
  1534  0002F2  6F69               	movwf	(printf@f+1)& (0+255),b
  1535  0002F4  ECD2  F002         	call	_printf	;wreg free
  1536                           
  1537                           ;main.c: 123: break;
  1538  0002F8  D068               	goto	l424
  1539  0002FA                     
  1540                           ;main.c: 126: if ((EUSART1_is_rx_ready())) {
  1541  0002FA  ECBC  F007         	call	_EUSART1_is_rx_ready	;wreg free
  1542  0002FE  0900               	iorlw	0
  1543  000300  B4D8               	btfsc	status,2,c
  1544  000302  D019               	goto	l443
  1545                           
  1546                           ;main.c: 127: cmd2 = EUSART1_Read();
  1547  000304  EC9F  F007         	call	_EUSART1_Read	;wreg free
  1548  000308  0100               	movlb	0	; () banked
  1549  00030A  6F80               	movwf	main@cmd2& (0+255),b
  1550                           
  1551                           ; BSR set to: 0
  1552                           ;main.c: 128: if (cmd2 == 'o') {
  1553  00030C  0E6F               	movlw	111
  1554  00030E  1980               	xorwf	main@cmd2& (0+255),w,b
  1555  000310  A4D8               	btfss	status,2,c
  1556  000312  D007               	goto	l442
  1557                           
  1558                           ; BSR set to: 0
  1559                           ;main.c: 129: printf("ok\r\n");
  1560  000314  0EF9               	movlw	low STR_15
  1561  000316  6F68               	movwf	printf@f& (0+255),b
  1562  000318  0EFF               	movlw	high STR_15
  1563  00031A  6F69               	movwf	(printf@f+1)& (0+255),b
  1564  00031C  ECD2  F002         	call	_printf	;wreg free
  1565                           
  1566                           ;main.c: 130: }
  1567  000320  D00A               	goto	l443
  1568  000322                     l442:
  1569                           
  1570                           ;main.c: 131: else {
  1571                           ;main.c: 132: printf("Received %u from EUSART1\r\n", cmd2);
  1572  000322  0E6C               	movlw	low STR_16
  1573  000324  0100               	movlb	0	; () banked
  1574  000326  6F68               	movwf	printf@f& (0+255),b
  1575  000328  0EFF               	movlw	high STR_16
  1576  00032A  6F69               	movwf	(printf@f+1)& (0+255),b
  1577  00032C  C080  F06A         	movff	main@cmd2,?_printf+2
  1578  000330  6B6B               	clrf	(?_printf+3)& (0+255),b
  1579  000332  ECD2  F002         	call	_printf	;wreg free
  1580  000336                     l443:
  1581  000336  ECC2  F007         	call	_EUSART2_is_rx_ready	;wreg free
  1582  00033A  0900               	iorlw	0
  1583  00033C  B4D8               	btfsc	status,2,c
  1584  00033E  D7DD               	goto	l440
  1585                           
  1586                           ;main.c: 133: }
  1587                           ;main.c: 134: }
  1588                           ;main.c: 135: }
  1589                           ;main.c: 136: EUSART2_Read();
  1590  000340  ECA7  F007         	call	_EUSART2_Read	;wreg free
  1591                           
  1592                           ;main.c: 137: break;
  1593  000344  D042               	goto	l424
  1594  000346                     
  1595                           ;main.c: 139: printf("\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n");
  1596  000346  0EBD               	movlw	low STR_17
  1597  000348  0100               	movlb	0	; () banked
  1598  00034A  6F68               	movwf	printf@f& (0+255),b
  1599  00034C  0EFF               	movlw	high STR_17
  1600  00034E  6F69               	movwf	(printf@f+1)& (0+255),b
  1601  000350  ECD2  F002         	call	_printf	;wreg free
  1602                           
  1603                           ;main.c: 140: break;
  1604  000354  D03A               	goto	l424
  1605  000356                     l446:
  1606                           
  1607                           ; BSR set to: 0
  1608  000356  00FF               	reset		;# 
  1609                           
  1610                           ;main.c: 143: break;
  1611  000358  D038               	goto	l424
  1612  00035A                     
  1613                           ;main.c: 145: printf("Unknown key %c\r\n",cmd);
  1614  00035A  0ED2               	movlw	low STR_18
  1615  00035C  0100               	movlb	0	; () banked
  1616  00035E  6F68               	movwf	printf@f& (0+255),b
  1617  000360  0EFF               	movlw	high STR_18
  1618  000362  6F69               	movwf	(printf@f+1)& (0+255),b
  1619  000364  C085  F06A         	movff	main@cmd,?_printf+2
  1620  000368  6B6B               	clrf	(?_printf+3)& (0+255),b
  1621  00036A  ECD2  F002         	call	_printf	;wreg free
  1622                           
  1623                           ;main.c: 147: }
  1624                           
  1625                           ;main.c: 146: break;
  1626  00036E  D02D               	goto	l424
  1627  000370                     l422:
  1628  000370  0100               	movlb	0	; () banked
  1629  000372  5185               	movf	main@cmd& (0+255),w,b
  1630                           
  1631                           ; Switch size 1, requested type "space"
  1632                           ; Number of cases is 14, Range of values is 63 to 122
  1633                           ; switch strategies available:
  1634                           ; Name         Instructions Cycles
  1635                           ; simple_byte           43    22 (average)
  1636                           ;	Chosen strategy is simple_byte
  1637  000374  0A3F               	xorlw	63	; case 63
  1638  000376  B4D8               	btfsc	status,2,c
  1639  000378  D6F0               	goto	l426
  1640  00037A  0A7A               	xorlw	122	; case 69
  1641  00037C  B4D8               	btfsc	status,2,c
  1642  00037E  D7AD               	goto	l434
  1643  000380  0A03               	xorlw	3	; case 70
  1644  000382  B4D8               	btfsc	status,2,c
  1645  000384  D75F               	goto	l431
  1646  000386  0A0B               	xorlw	11	; case 77
  1647  000388  B4D8               	btfsc	status,2,c
  1648  00038A  D72E               	goto	l429
  1649  00038C  0A1E               	xorlw	30	; case 83
  1650  00038E  B4D8               	btfsc	status,2,c
  1651  000390  D701               	goto	l427
  1652  000392  0A07               	xorlw	7	; case 84
  1653  000394  B4D8               	btfsc	status,2,c
  1654  000396  D6CC               	goto	l425
  1655  000398  0A0E               	xorlw	14	; case 90
  1656  00039A  B4D8               	btfsc	status,2,c
  1657  00039C  D7DC               	goto	l446
  1658  00039E  0A3C               	xorlw	60	; case 102
  1659  0003A0  B4D8               	btfsc	status,2,c
  1660  0003A2  D76A               	goto	l432
  1661  0003A4  0A0B               	xorlw	11	; case 109
  1662  0003A6  B4D8               	btfsc	status,2,c
  1663  0003A8  D736               	goto	l430
  1664  0003AA  0A02               	xorlw	2	; case 111
  1665  0003AC  B4D8               	btfsc	status,2,c
  1666  0003AE  D79D               	goto	l437
  1667  0003B0  0A1C               	xorlw	28	; case 115
  1668  0003B2  B4D8               	btfsc	status,2,c
  1669  0003B4  D704               	goto	l428
  1670  0003B6  0A07               	xorlw	7	; case 116
  1671  0003B8  B4D8               	btfsc	status,2,c
  1672  0003BA  D6A6               	goto	l423
  1673  0003BC  0A01               	xorlw	1	; case 117
  1674  0003BE  B4D8               	btfsc	status,2,c
  1675  0003C0  D7BA               	goto	l443
  1676  0003C2  0A0F               	xorlw	15	; case 122
  1677  0003C4  B4D8               	btfsc	status,2,c
  1678  0003C6  D7BF               	goto	l445
  1679  0003C8  D7C8               	goto	l447
  1680  0003CA                     l424:
  1681                           
  1682                           ;main.c: 149: }
  1683                           ;main.c: 150: if ((EUSART1_is_rx_ready())) {
  1684                           
  1685                           ; BSR set to: 0
  1686                           
  1687                           ; BSR set to: 0
  1688  0003CA  ECBC  F007         	call	_EUSART1_is_rx_ready	;wreg free
  1689  0003CE  0900               	iorlw	0
  1690  0003D0  B4D8               	btfsc	status,2,c
  1691  0003D2  D690               	goto	l420
  1692                           
  1693                           ;main.c: 151: cmd = EUSART1_Read();
  1694  0003D4  EC9F  F007         	call	_EUSART1_Read	;wreg free
  1695  0003D8  0100               	movlb	0	; () banked
  1696  0003DA  6F85               	movwf	main@cmd& (0+255),b
  1697                           
  1698                           ;main.c: 152: switch (cmd) {
  1699  0003DC  D0C5               	goto	l449
  1700  0003DE                     
  1701                           ; BSR set to: 0
  1702                           ;main.c: 154: printf("");
  1703                           
  1704                           ; BSR set to: 0
  1705  0003DE  0ED1               	movlw	low (STR_17+20)
  1706  0003E0  6F68               	movwf	printf@f& (0+255),b
  1707  0003E2  0EFF               	movlw	high (STR_17+20)
  1708  0003E4  6F69               	movwf	(printf@f+1)& (0+255),b
  1709  0003E6  ECD2  F002         	call	_printf	;wreg free
  1710                           
  1711                           ;main.c: 155: uint16_t pos = parseInt()<<4;
  1712  0003EA  ECF3  F006         	call	_parseInt	;wreg free
  1713  0003EE  3A1D               	swapf	?_parseInt,f,c
  1714  0003F0  3A1E               	swapf	?_parseInt+1,f,c
  1715  0003F2  0EF0               	movlw	240
  1716  0003F4  161E               	andwf	?_parseInt+1,f,c
  1717  0003F6  501D               	movf	?_parseInt,w,c
  1718  0003F8  0B0F               	andlw	15
  1719  0003FA  121E               	iorwf	?_parseInt+1,f,c
  1720  0003FC  0EF0               	movlw	240
  1721  0003FE  161D               	andwf	?_parseInt,f,c
  1722  000400  C01D  F081         	movff	?_parseInt,main@pos
  1723  000404  C01E  F082         	movff	?_parseInt+1,main@pos+1
  1724                           
  1725                           ;main.c: 157: setYawServo(pos +1100);
  1726  000408  0E4C               	movlw	76
  1727  00040A  0100               	movlb	0	; () banked
  1728  00040C  2581               	addwf	main@pos& (0+255),w,b
  1729  00040E  6E1D               	movwf	setYawServo@pos,c
  1730  000410  0E04               	movlw	4
  1731  000412  2182               	addwfc	(main@pos+1)& (0+255),w,b
  1732  000414  6E1E               	movwf	setYawServo@pos+1,c
  1733  000416  ECDF  F005         	call	_setYawServo	;wreg free
  1734                           
  1735                           ;main.c: 158: break;
  1736  00041A  D66C               	goto	l420
  1737  00041C                     
  1738                           ;main.c: 160: printf("");
  1739  00041C  0ED1               	movlw	low (STR_17+20)
  1740  00041E  0100               	movlb	0	; () banked
  1741  000420  6F68               	movwf	printf@f& (0+255),b
  1742  000422  0EFF               	movlw	high (STR_17+20)
  1743  000424  6F69               	movwf	(printf@f+1)& (0+255),b
  1744  000426  ECD2  F002         	call	_printf	;wreg free
  1745                           
  1746                           ;main.c: 161: uint16_t pos = parseInt()<<4;
  1747  00042A  ECF3  F006         	call	_parseInt	;wreg free
  1748  00042E  3A1D               	swapf	?_parseInt,f,c
  1749  000430  3A1E               	swapf	?_parseInt+1,f,c
  1750  000432  0EF0               	movlw	240
  1751  000434  161E               	andwf	?_parseInt+1,f,c
  1752  000436  501D               	movf	?_parseInt,w,c
  1753  000438  0B0F               	andlw	15
  1754  00043A  121E               	iorwf	?_parseInt+1,f,c
  1755  00043C  0EF0               	movlw	240
  1756  00043E  161D               	andwf	?_parseInt,f,c
  1757  000440  C01D  F081         	movff	?_parseInt,main@pos
  1758  000444  C01E  F082         	movff	?_parseInt+1,main@pos+1
  1759                           
  1760                           ;main.c: 163: setPitchServo(pos + 1100);
  1761  000448  0E4C               	movlw	76
  1762  00044A  0100               	movlb	0	; () banked
  1763  00044C  2581               	addwf	main@pos& (0+255),w,b
  1764  00044E  6E1D               	movwf	setPitchServo@pos,c
  1765  000450  0E04               	movlw	4
  1766  000452  2182               	addwfc	(main@pos+1)& (0+255),w,b
  1767  000454  6E1E               	movwf	setPitchServo@pos+1,c
  1768  000456  ECF8  F005         	call	_setPitchServo	;wreg free
  1769                           
  1770                           ;main.c: 164: break;
  1771  00045A  D64C               	goto	l420
  1772  00045C                     
  1773                           ;main.c: 166: motorControlMode = 0;
  1774  00045C  0E00               	movlw	0
  1775  00045E  6E42               	movwf	_motorControlMode,c
  1776                           
  1777                           ;main.c: 167: printf("");
  1778  000460  0ED1               	movlw	low (STR_17+20)
  1779  000462  0100               	movlb	0	; () banked
  1780  000464  6F68               	movwf	printf@f& (0+255),b
  1781  000466  0EFF               	movlw	high (STR_17+20)
  1782  000468  6F69               	movwf	(printf@f+1)& (0+255),b
  1783  00046A  ECD2  F002         	call	_printf	;wreg free
  1784                           
  1785                           ;main.c: 168: uint16_t speed = parseInt();
  1786  00046E  ECF3  F006         	call	_parseInt	;wreg free
  1787  000472  C01D  F083         	movff	?_parseInt,main@speed
  1788  000476  C01E  F084         	movff	?_parseInt+1,main@speed+1
  1789                           
  1790                           ;main.c: 169: speed = (speed <<4) - speed + 1100;
  1791  00047A  C083  F07C         	movff	main@speed,??_main
  1792  00047E  C084  F07D         	movff	main@speed+1,??_main+1
  1793  000482  0100               	movlb	0	; () banked
  1794  000484  1F7C               	comf	??_main& (0+255),f,b
  1795  000486  1F7D               	comf	(??_main+1)& (0+255),f,b
  1796  000488  4B7C               	infsnz	??_main& (0+255),f,b
  1797  00048A  2B7D               	incf	(??_main+1)& (0+255),f,b
  1798  00048C  C083  F07E         	movff	main@speed,??_main+2
  1799  000490  C084  F07F         	movff	main@speed+1,??_main+3
  1800  000494  3B7E               	swapf	(??_main+2)& (0+255),f,b
  1801  000496  3B7F               	swapf	(??_main+3)& (0+255),f,b
  1802  000498  0EF0               	movlw	240
  1803  00049A  177F               	andwf	(??_main+3)& (0+255),f,b
  1804  00049C  517E               	movf	(??_main+2)& (0+255),w,b
  1805  00049E  0B0F               	andlw	15
  1806  0004A0  137F               	iorwf	(??_main+3)& (0+255),f,b
  1807  0004A2  0EF0               	movlw	240
  1808  0004A4  177E               	andwf	(??_main+2)& (0+255),f,b
  1809  0004A6  517C               	movf	??_main& (0+255),w,b
  1810  0004A8  277E               	addwf	(??_main+2)& (0+255),f,b
  1811  0004AA  517D               	movf	(??_main+1)& (0+255),w,b
  1812  0004AC  237F               	addwfc	(??_main+3)& (0+255),f,b
  1813  0004AE  0E4C               	movlw	76
  1814  0004B0  257E               	addwf	(??_main+2)& (0+255),w,b
  1815  0004B2  6F83               	movwf	main@speed& (0+255),b
  1816  0004B4  0E04               	movlw	4
  1817  0004B6  217F               	addwfc	(??_main+3)& (0+255),w,b
  1818  0004B8  6F84               	movwf	(main@speed+1)& (0+255),b
  1819                           
  1820                           ; BSR set to: 0
  1821                           ;main.c: 170: printf("Data Bits s %i\r\n",speed);
  1822  0004BA  0EE3               	movlw	low STR_22
  1823  0004BC  6F68               	movwf	printf@f& (0+255),b
  1824  0004BE  0EFF               	movlw	high STR_22
  1825  0004C0  6F69               	movwf	(printf@f+1)& (0+255),b
  1826  0004C2  C083  F06A         	movff	main@speed,?_printf+2
  1827  0004C6  C084  F06B         	movff	main@speed+1,?_printf+3
  1828  0004CA  ECD2  F002         	call	_printf	;wreg free
  1829                           
  1830                           ;main.c: 171: setMotorSpeed(speed);
  1831  0004CE  C083  F01D         	movff	main@speed,setMotorSpeed@speed
  1832  0004D2  C084  F01E         	movff	main@speed+1,setMotorSpeed@speed+1
  1833  0004D6  EC11  F006         	call	_setMotorSpeed	;wreg free
  1834                           
  1835                           ;main.c: 172: break;
  1836  0004DA  D60C               	goto	l420
  1837  0004DC                     l454:
  1838                           
  1839                           ; BSR set to: 0
  1840                           ;main.c: 174: home = encoderPosition;
  1841  0004DC  C098  F094         	movff	_encoderPosition,_home
  1842  0004E0  C099  F095         	movff	_encoderPosition+1,_home+1
  1843  0004E4  C09A  F096         	movff	_encoderPosition+2,_home+2
  1844  0004E8  C09B  F097         	movff	_encoderPosition+3,_home+3
  1845                           
  1846                           ;main.c: 175: break;
  1847  0004EC  D603               	goto	l420
  1848  0004EE                     l455:
  1849                           
  1850                           ; BSR set to: 0
  1851                           ;main.c: 177: leftLimit = encoderPosition;
  1852  0004EE  C098  F08A         	movff	_encoderPosition,_leftLimit
  1853  0004F2  C099  F08B         	movff	_encoderPosition+1,_leftLimit+1
  1854  0004F6  C09A  F08C         	movff	_encoderPosition+2,_leftLimit+2
  1855  0004FA  C09B  F08D         	movff	_encoderPosition+3,_leftLimit+3
  1856                           
  1857                           ;main.c: 178: break;
  1858  0004FE  D5FA               	goto	l420
  1859  000500                     l456:
  1860                           
  1861                           ; BSR set to: 0
  1862                           ;main.c: 180: rightLimit = encoderPosition;
  1863  000500  C098  F086         	movff	_encoderPosition,_rightLimit
  1864  000504  C099  F087         	movff	_encoderPosition+1,_rightLimit+1
  1865  000508  C09A  F088         	movff	_encoderPosition+2,_rightLimit+2
  1866  00050C  C09B  F089         	movff	_encoderPosition+3,_rightLimit+3
  1867                           
  1868                           ;main.c: 181: break;
  1869  000510  D5F1               	goto	l420
  1870  000512                     
  1871                           ; BSR set to: 0
  1872                           ;main.c: 183: motorControlMode = 1;
  1873                           
  1874                           ; BSR set to: 0
  1875  000512  0E01               	movlw	1
  1876  000514  6E42               	movwf	_motorControlMode,c
  1877                           
  1878                           ; BSR set to: 0
  1879                           ;main.c: 184: motorSetPoint = home;
  1880  000516  C094  F09C         	movff	_home,_motorSetPoint
  1881  00051A  C095  F09D         	movff	_home+1,_motorSetPoint+1
  1882  00051E  C096  F09E         	movff	_home+2,_motorSetPoint+2
  1883  000522  C097  F09F         	movff	_home+3,_motorSetPoint+3
  1884                           
  1885                           ;main.c: 185: break;
  1886  000526  D5E6               	goto	l420
  1887  000528                     
  1888                           ; BSR set to: 0
  1889                           ;main.c: 187: motorControlMode = 1;
  1890                           
  1891                           ; BSR set to: 0
  1892  000528  0E01               	movlw	1
  1893  00052A  6E42               	movwf	_motorControlMode,c
  1894                           
  1895                           ; BSR set to: 0
  1896                           ;main.c: 188: motorSetPoint = leftLimit;
  1897  00052C  C08A  F09C         	movff	_leftLimit,_motorSetPoint
  1898  000530  C08B  F09D         	movff	_leftLimit+1,_motorSetPoint+1
  1899  000534  C08C  F09E         	movff	_leftLimit+2,_motorSetPoint+2
  1900  000538  C08D  F09F         	movff	_leftLimit+3,_motorSetPoint+3
  1901                           
  1902                           ;main.c: 189: break;
  1903  00053C  D5DB               	goto	l420
  1904  00053E                     
  1905                           ; BSR set to: 0
  1906                           ;main.c: 191: motorControlMode = 1;
  1907                           
  1908                           ; BSR set to: 0
  1909  00053E  0E01               	movlw	1
  1910  000540  6E42               	movwf	_motorControlMode,c
  1911                           
  1912                           ; BSR set to: 0
  1913                           ;main.c: 192: motorSetPoint = rightLimit;
  1914  000542  C086  F09C         	movff	_rightLimit,_motorSetPoint
  1915  000546  C087  F09D         	movff	_rightLimit+1,_motorSetPoint+1
  1916  00054A  C088  F09E         	movff	_rightLimit+2,_motorSetPoint+2
  1917  00054E  C089  F09F         	movff	_rightLimit+3,_motorSetPoint+3
  1918                           
  1919                           ;main.c: 193: break;
  1920  000552  D5D0               	goto	l420
  1921  000554                     
  1922                           ; BSR set to: 0
  1923                           ;main.c: 197: printf("Unknown or Invalid Command %c\r\n",cmd);
  1924                           
  1925                           ; BSR set to: 0
  1926  000554  0E0E               	movlw	low STR_23
  1927  000556  6F68               	movwf	printf@f& (0+255),b
  1928  000558  0EFF               	movlw	high STR_23
  1929  00055A  6F69               	movwf	(printf@f+1)& (0+255),b
  1930  00055C  C085  F06A         	movff	main@cmd,?_printf+2
  1931  000560  6B6B               	clrf	(?_printf+3)& (0+255),b
  1932  000562  ECD2  F002         	call	_printf	;wreg free
  1933                           
  1934                           ;main.c: 200: }
  1935                           
  1936                           ;main.c: 198: break;
  1937  000566  D5C6               	goto	l420
  1938  000568                     l449:
  1939  000568  0100               	movlb	0	; () banked
  1940  00056A  5185               	movf	main@cmd& (0+255),w,b
  1941                           
  1942                           ; Switch size 1, requested type "space"
  1943                           ; Number of cases is 9, Range of values is 72 to 116
  1944                           ; switch strategies available:
  1945                           ; Name         Instructions Cycles
  1946                           ; simple_byte           28    15 (average)
  1947                           ;	Chosen strategy is simple_byte
  1948  00056C  0A48               	xorlw	72	; case 72
  1949  00056E  B4D8               	btfsc	status,2,c
  1950  000570  D7B5               	goto	l454
  1951  000572  0A04               	xorlw	4	; case 76
  1952  000574  B4D8               	btfsc	status,2,c
  1953  000576  D7BB               	goto	l455
  1954  000578  0A1E               	xorlw	30	; case 82
  1955  00057A  B4D8               	btfsc	status,2,c
  1956  00057C  D7C1               	goto	l456
  1957  00057E  0A3A               	xorlw	58	; case 104
  1958  000580  B4D8               	btfsc	status,2,c
  1959  000582  D7C7               	goto	l457
  1960  000584  0A04               	xorlw	4	; case 108
  1961  000586  B4D8               	btfsc	status,2,c
  1962  000588  D7CF               	goto	l458
  1963  00058A  0A1C               	xorlw	28	; case 112
  1964  00058C  B4D8               	btfsc	status,2,c
  1965  00058E  D727               	goto	l450
  1966  000590  0A02               	xorlw	2	; case 114
  1967  000592  B4D8               	btfsc	status,2,c
  1968  000594  D7D4               	goto	l459
  1969  000596  0A01               	xorlw	1	; case 115
  1970  000598  B4D8               	btfsc	status,2,c
  1971  00059A  D760               	goto	l453
  1972  00059C  0A07               	xorlw	7	; case 116
  1973  00059E  B4D8               	btfsc	status,2,c
  1974  0005A0  D73D               	goto	l452
  1975  0005A2  D7D8               	goto	l460
  1976  0005A4                     __end_of_main:
  1977                           	opt stack 0
  1978                           tblptru	equ	0xFF8
  1979                           tblptrh	equ	0xFF7
  1980                           tblptrl	equ	0xFF6
  1981                           tablat	equ	0xFF5
  1982                           intcon	equ	0xFF2
  1983                           postinc0	equ	0xFEE
  1984                           wreg	equ	0xFE8
  1985                           postdec1	equ	0xFE5
  1986                           fsr1l	equ	0xFE1
  1987                           status	equ	0xFD8
  1988                           
  1989 ;; *************** function _setYawServo *****************
  1990 ;; Defined at:
  1991 ;;		line 206 in file "main.c"
  1992 ;; Parameters:    Size  Location     Type
  1993 ;;  pos             2   28[COMRAM] unsigned int 
  1994 ;; Auto vars:     Size  Location     Type
  1995 ;;		None
  1996 ;; Return value:  Size  Location     Type
  1997 ;;                  1    wreg      void 
  1998 ;; Registers used:
  1999 ;;		wreg, status,2, status,0
  2000 ;; Tracked objects:
  2001 ;;		On entry : 0/0
  2002 ;;		On exit  : 0/0
  2003 ;;		Unchanged: 0/0
  2004 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2005 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2006 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2007 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2008 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2009 ;;Total ram usage:        2 bytes
  2010 ;; Hardware stack levels used:    1
  2011 ;; Hardware stack levels required when called:    4
  2012 ;; This function calls:
  2013 ;;		Nothing
  2014 ;; This function is called by:
  2015 ;;		_main
  2016 ;; This function uses a non-reentrant model
  2017 ;;
  2018                           
  2019                           	psect	text1
  2020  000BBE                     __ptext1:
  2021                           	opt stack 0
  2022  000BBE                     _setYawServo:
  2023                           	opt stack 26
  2024                           
  2025                           ;main.c: 208: if(pos < 1100){
  2026                           
  2027                           ; BSR set to: 0
  2028                           ;incstack = 0
  2029  000BBE  0E4C               	movlw	76
  2030  000BC0  5C1D               	subwf	setYawServo@pos,w,c
  2031  000BC2  0E04               	movlw	4
  2032  000BC4  581E               	subwfb	setYawServo@pos+1,w,c
  2033  000BC6  B0D8               	btfsc	status,0,c
  2034  000BC8  D004               	goto	l465
  2035                           
  2036                           ;main.c: 209: pos = 1100;
  2037  000BCA  0E04               	movlw	4
  2038  000BCC  6E1E               	movwf	setYawServo@pos+1,c
  2039  000BCE  0E4C               	movlw	76
  2040  000BD0  D009               	goto	L1
  2041  000BD2                     l465:
  2042                           
  2043                           ;main.c: 211: else if(pos > 4900){
  2044  000BD2  0E25               	movlw	37
  2045  000BD4  5C1D               	subwf	setYawServo@pos,w,c
  2046  000BD6  0E13               	movlw	19
  2047  000BD8  581E               	subwfb	setYawServo@pos+1,w,c
  2048  000BDA  A0D8               	btfss	status,0,c
  2049  000BDC  D004               	goto	l467
  2050                           
  2051                           ;main.c: 212: pos = 4900;
  2052  000BDE  0E13               	movlw	19
  2053  000BE0  6E1E               	movwf	setYawServo@pos+1,c
  2054  000BE2  0E24               	movlw	36
  2055  000BE4                     L1:
  2056  000BE4  6E1D               	movwf	setYawServo@pos,c
  2057  000BE6                     l467:
  2058                           
  2059                           ;main.c: 213: }
  2060                           ;main.c: 215: yawPosition = pos;
  2061  000BE6  C01D  F092         	movff	setYawServo@pos,_yawPosition
  2062  000BEA  C01E  F093         	movff	setYawServo@pos+1,_yawPosition+1
  2063  000BEE  0012               	return		;funcret
  2064  000BF0                     __end_of_setYawServo:
  2065                           	opt stack 0
  2066                           tblptru	equ	0xFF8
  2067                           tblptrh	equ	0xFF7
  2068                           tblptrl	equ	0xFF6
  2069                           tablat	equ	0xFF5
  2070                           intcon	equ	0xFF2
  2071                           postinc0	equ	0xFEE
  2072                           wreg	equ	0xFE8
  2073                           postdec1	equ	0xFE5
  2074                           fsr1l	equ	0xFE1
  2075                           status	equ	0xFD8
  2076                           
  2077 ;; *************** function _setPitchServo *****************
  2078 ;; Defined at:
  2079 ;;		line 217 in file "main.c"
  2080 ;; Parameters:    Size  Location     Type
  2081 ;;  pos             2   28[COMRAM] unsigned int 
  2082 ;; Auto vars:     Size  Location     Type
  2083 ;;		None
  2084 ;; Return value:  Size  Location     Type
  2085 ;;                  1    wreg      void 
  2086 ;; Registers used:
  2087 ;;		wreg, status,2, status,0
  2088 ;; Tracked objects:
  2089 ;;		On entry : 0/0
  2090 ;;		On exit  : 0/0
  2091 ;;		Unchanged: 0/0
  2092 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2093 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2094 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2095 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2096 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2097 ;;Total ram usage:        2 bytes
  2098 ;; Hardware stack levels used:    1
  2099 ;; Hardware stack levels required when called:    4
  2100 ;; This function calls:
  2101 ;;		Nothing
  2102 ;; This function is called by:
  2103 ;;		_main
  2104 ;; This function uses a non-reentrant model
  2105 ;;
  2106                           
  2107                           	psect	text2
  2108  000BF0                     __ptext2:
  2109                           	opt stack 0
  2110  000BF0                     _setPitchServo:
  2111                           	opt stack 26
  2112                           
  2113                           ;main.c: 219: if(pos < 1100){
  2114                           
  2115                           ;incstack = 0
  2116  000BF0  0E4C               	movlw	76
  2117  000BF2  5C1D               	subwf	setPitchServo@pos,w,c
  2118  000BF4  0E04               	movlw	4
  2119  000BF6  581E               	subwfb	setPitchServo@pos+1,w,c
  2120  000BF8  B0D8               	btfsc	status,0,c
  2121  000BFA  D004               	goto	l471
  2122                           
  2123                           ;main.c: 220: pos = 1100;
  2124  000BFC  0E04               	movlw	4
  2125  000BFE  6E1E               	movwf	setPitchServo@pos+1,c
  2126  000C00  0E4C               	movlw	76
  2127  000C02  D009               	goto	L2
  2128  000C04                     l471:
  2129                           
  2130                           ;main.c: 222: else if(pos > 4900){
  2131  000C04  0E25               	movlw	37
  2132  000C06  5C1D               	subwf	setPitchServo@pos,w,c
  2133  000C08  0E13               	movlw	19
  2134  000C0A  581E               	subwfb	setPitchServo@pos+1,w,c
  2135  000C0C  A0D8               	btfss	status,0,c
  2136  000C0E  D004               	goto	l473
  2137                           
  2138                           ;main.c: 223: pos = 4900;
  2139  000C10  0E13               	movlw	19
  2140  000C12  6E1E               	movwf	setPitchServo@pos+1,c
  2141  000C14  0E24               	movlw	36
  2142  000C16                     L2:
  2143  000C16  6E1D               	movwf	setPitchServo@pos,c
  2144  000C18                     l473:
  2145                           
  2146                           ;main.c: 224: }
  2147                           ;main.c: 226: pitchPosition = pos;
  2148  000C18  C01D  F090         	movff	setPitchServo@pos,_pitchPosition
  2149  000C1C  C01E  F091         	movff	setPitchServo@pos+1,_pitchPosition+1
  2150  000C20  0012               	return		;funcret
  2151  000C22                     __end_of_setPitchServo:
  2152                           	opt stack 0
  2153                           tblptru	equ	0xFF8
  2154                           tblptrh	equ	0xFF7
  2155                           tblptrl	equ	0xFF6
  2156                           tablat	equ	0xFF5
  2157                           intcon	equ	0xFF2
  2158                           postinc0	equ	0xFEE
  2159                           wreg	equ	0xFE8
  2160                           postdec1	equ	0xFE5
  2161                           fsr1l	equ	0xFE1
  2162                           status	equ	0xFD8
  2163                           
  2164 ;; *************** function _setMotorSpeed *****************
  2165 ;; Defined at:
  2166 ;;		line 228 in file "main.c"
  2167 ;; Parameters:    Size  Location     Type
  2168 ;;  speed           2   28[COMRAM] unsigned int 
  2169 ;; Auto vars:     Size  Location     Type
  2170 ;;		None
  2171 ;; Return value:  Size  Location     Type
  2172 ;;                  1    wreg      void 
  2173 ;; Registers used:
  2174 ;;		wreg, status,2, status,0
  2175 ;; Tracked objects:
  2176 ;;		On entry : 0/0
  2177 ;;		On exit  : 0/0
  2178 ;;		Unchanged: 0/0
  2179 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2180 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2181 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2182 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2183 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2184 ;;Total ram usage:        2 bytes
  2185 ;; Hardware stack levels used:    1
  2186 ;; Hardware stack levels required when called:    4
  2187 ;; This function calls:
  2188 ;;		Nothing
  2189 ;; This function is called by:
  2190 ;;		_main
  2191 ;; This function uses a non-reentrant model
  2192 ;;
  2193                           
  2194                           	psect	text3
  2195  000C22                     __ptext3:
  2196                           	opt stack 0
  2197  000C22                     _setMotorSpeed:
  2198                           	opt stack 26
  2199                           
  2200                           ;main.c: 231: if(speed< 2500){
  2201                           
  2202                           ;incstack = 0
  2203  000C22  0EC4               	movlw	196
  2204  000C24  5C1D               	subwf	setMotorSpeed@speed,w,c
  2205  000C26  0E09               	movlw	9
  2206  000C28  581E               	subwfb	setMotorSpeed@speed+1,w,c
  2207  000C2A  B0D8               	btfsc	status,0,c
  2208  000C2C  D004               	goto	l477
  2209                           
  2210                           ;main.c: 232: speed = 2500;
  2211  000C2E  0E09               	movlw	9
  2212  000C30  6E1E               	movwf	setMotorSpeed@speed+1,c
  2213  000C32  0EC4               	movlw	196
  2214  000C34  D009               	goto	L3
  2215  000C36                     l477:
  2216                           
  2217                           ;main.c: 235: else if(speed > 3500){
  2218  000C36  0EAD               	movlw	173
  2219  000C38  5C1D               	subwf	setMotorSpeed@speed,w,c
  2220  000C3A  0E0D               	movlw	13
  2221  000C3C  581E               	subwfb	setMotorSpeed@speed+1,w,c
  2222  000C3E  A0D8               	btfss	status,0,c
  2223  000C40  D004               	goto	l479
  2224                           
  2225                           ;main.c: 236: speed = 3500;
  2226  000C42  0E0D               	movlw	13
  2227  000C44  6E1E               	movwf	setMotorSpeed@speed+1,c
  2228  000C46  0EAC               	movlw	172
  2229  000C48                     L3:
  2230  000C48  6E1D               	movwf	setMotorSpeed@speed,c
  2231  000C4A                     l479:
  2232                           
  2233                           ;main.c: 237: }
  2234                           ;main.c: 239: motorSpeed = speed;
  2235  000C4A  C01D  F08E         	movff	setMotorSpeed@speed,_motorSpeed
  2236  000C4E  C01E  F08F         	movff	setMotorSpeed@speed+1,_motorSpeed+1
  2237  000C52  0012               	return		;funcret
  2238  000C54                     __end_of_setMotorSpeed:
  2239                           	opt stack 0
  2240                           tblptru	equ	0xFF8
  2241                           tblptrh	equ	0xFF7
  2242                           tblptrl	equ	0xFF6
  2243                           tablat	equ	0xFF5
  2244                           intcon	equ	0xFF2
  2245                           postinc0	equ	0xFEE
  2246                           wreg	equ	0xFE8
  2247                           postdec1	equ	0xFE5
  2248                           fsr1l	equ	0xFE1
  2249                           status	equ	0xFD8
  2250                           
  2251 ;; *************** function _printf *****************
  2252 ;; Defined at:
  2253 ;;		line 464 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\doprnt.c"
  2254 ;; Parameters:    Size  Location     Type
  2255 ;;  f               2    8[BANK0 ] PTR const unsigned char 
  2256 ;;		 -> STR_23(32), STR_22(17), STR_21(1), STR_20(1), 
  2257 ;;		 -> STR_19(1), STR_18(17), STR_17(21), STR_16(27), 
  2258 ;;		 -> STR_15(5), STR_14(5), STR_13(39), STR_12(35), 
  2259 ;;		 -> STR_11(35), STR_10(31), STR_9(31), STR_8(38), 
  2260 ;;		 -> STR_7(38), STR_6(27), STR_5(27), STR_4(34), 
  2261 ;;		 -> STR_3(32), STR_2(40), STR_1(40), 
  2262 ;; Auto vars:     Size  Location     Type
  2263 ;;  val             4   20[BANK0 ] unsigned long 
  2264 ;;  tmpval          4    0        struct .
  2265 ;;  cp              3    0        PTR const unsigned char 
  2266 ;;  ap              2   25[BANK0 ] PTR void [1]
  2267 ;;		 -> ?_printf(2), 
  2268 ;;  prec            2   18[BANK0 ] int 
  2269 ;;  len             2    0        unsigned int 
  2270 ;;  c               1   27[BANK0 ] char 
  2271 ;;  flag            1   24[BANK0 ] unsigned char 
  2272 ;; Return value:  Size  Location     Type
  2273 ;;                  2    8[BANK0 ] int 
  2274 ;; Registers used:
  2275 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  2276 ;; Tracked objects:
  2277 ;;		On entry : 0/0
  2278 ;;		On exit  : 0/0
  2279 ;;		Unchanged: 0/0
  2280 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2281 ;;      Params:         0      10       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2282 ;;      Locals:         0      10       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2283 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2284 ;;      Totals:         2      20       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2285 ;;Total ram usage:       22 bytes
  2286 ;; Hardware stack levels used:    1
  2287 ;; Hardware stack levels required when called:    6
  2288 ;; This function calls:
  2289 ;;		___lldiv
  2290 ;;		___llmod
  2291 ;;		_putch
  2292 ;; This function is called by:
  2293 ;;		_main
  2294 ;; This function uses a non-reentrant model
  2295 ;;
  2296                           
  2297                           	psect	text4
  2298  0005A4                     __ptext4:
  2299                           	opt stack 0
  2300  0005A4                     _printf:
  2301                           	opt stack 24
  2302                           
  2303                           ;doprnt.c: 466: va_list ap;
  2304                           ;doprnt.c: 499: signed char c;
  2305                           ;doprnt.c: 504: int prec;
  2306                           ;doprnt.c: 508: unsigned char flag;
  2307                           ;doprnt.c: 523: union {
  2308                           ;doprnt.c: 524: unsigned long vd;
  2309                           ;doprnt.c: 525: double integ;
  2310                           ;doprnt.c: 526: } tmpval;
  2311                           ;doprnt.c: 528: unsigned long val;
  2312                           ;doprnt.c: 529: unsigned len;
  2313                           ;doprnt.c: 530: const char * cp;
  2314                           ;doprnt.c: 533: *ap = __va_start();
  2315                           
  2316                           ;incstack = 0
  2317  0005A4  0E6A               	movlw	low (?_printf+2)
  2318  0005A6  0100               	movlb	0	; () banked
  2319  0005A8  6F79               	movwf	printf@ap& (0+255),b
  2320  0005AA  0E00               	movlw	high (?_printf+2)
  2321  0005AC  6F7A               	movwf	(printf@ap+1)& (0+255),b
  2322                           
  2323                           ;doprnt.c: 536: while(c = *f++) {
  2324  0005AE  D10C               	goto	u1750
  2325  0005B0                     
  2326                           ; BSR set to: 0
  2327                           ;doprnt.c: 538: if(c != '%')
  2328                           
  2329                           ; BSR set to: 0
  2330  0005B0  0E25               	movlw	37
  2331  0005B2  197B               	xorwf	printf@c& (0+255),w,b
  2332  0005B4  B4D8               	btfsc	status,2,c
  2333  0005B6  D004               	goto	l717
  2334                           
  2335                           ; BSR set to: 0
  2336                           ;doprnt.c: 540: {
  2337                           ;doprnt.c: 541: (putch(c) );
  2338  0005B8  517B               	movf	printf@c& (0+255),w,b
  2339  0005BA  ECC8  F007         	call	_putch
  2340                           
  2341                           ;doprnt.c: 542: continue;
  2342  0005BE  D104               	goto	u1750
  2343  0005C0                     l717:
  2344                           
  2345                           ;doprnt.c: 543: }
  2346                           ;doprnt.c: 548: flag = 0;
  2347  0005C0  0E00               	movlw	0
  2348  0005C2  0100               	movlb	0	; () banked
  2349  0005C4  6F78               	movwf	printf@flag& (0+255),b
  2350                           
  2351                           ; BSR set to: 0
  2352                           ;doprnt.c: 635: switch(c = *f++) {
  2353                           
  2354                           ;doprnt.c: 633: loop:
  2355  0005C6  D013               	goto	l719
  2356  0005C8                     
  2357                           ; BSR set to: 0
  2358                           ;doprnt.c: 643: flag |= 0x10;
  2359                           
  2360                           ; BSR set to: 0
  2361  0005C8  8978               	bsf	printf@flag& (0+255),4,b
  2362                           
  2363                           ;doprnt.c: 644: goto loop;
  2364  0005CA  D011               	goto	l719
  2365  0005CC                     
  2366                           ; BSR set to: 0
  2367                           ;doprnt.c: 799: c = (*(int *)__va_arg((*(int **)ap), (int)0));
  2368                           
  2369                           ; BSR set to: 0
  2370  0005CC  C079  FFD9         	movff	printf@ap,fsr2l
  2371  0005D0  C07A  FFDA         	movff	printf@ap+1,fsr2h
  2372  0005D4  50DF               	movf	indf2,w,c
  2373  0005D6  6F7B               	movwf	printf@c& (0+255),b
  2374                           
  2375                           ; BSR set to: 0
  2376  0005D8  0E02               	movlw	2
  2377  0005DA  2779               	addwf	printf@ap& (0+255),f,b
  2378  0005DC  0E00               	movlw	0
  2379  0005DE  237A               	addwfc	(printf@ap+1)& (0+255),f,b
  2380  0005E0                     
  2381                           ; BSR set to: 0
  2382                           ;doprnt.c: 809: (putch(c) );
  2383                           
  2384                           ; BSR set to: 0
  2385  0005E0  517B               	movf	printf@c& (0+255),w,b
  2386  0005E2  ECC8  F007         	call	_putch
  2387                           
  2388                           ;doprnt.c: 810: continue;
  2389  0005E6  D0F0               	goto	u1750
  2390  0005E8                     
  2391                           ;doprnt.c: 818: flag |= 0x40;
  2392  0005E8  0100               	movlb	0	; () banked
  2393  0005EA  8D78               	bsf	printf@flag& (0+255),6,b
  2394                           
  2395                           ; BSR set to: 0
  2396                           ;doprnt.c: 822: }
  2397                           
  2398                           ;doprnt.c: 819: break;
  2399  0005EC  D01E               	goto	l725
  2400  0005EE                     l719:
  2401                           
  2402                           ; BSR set to: 0
  2403                           
  2404                           ; BSR set to: 0
  2405  0005EE  C068  FFF6         	movff	printf@f,tblptrl
  2406  0005F2  C069  FFF7         	movff	printf@f+1,tblptrh
  2407  0005F6  4B68               	infsnz	printf@f& (0+255),f,b
  2408  0005F8  2B69               	incf	(printf@f+1)& (0+255),f,b
  2409  0005FA                     	if	1	;Program memory is < 0x10000, tblptru is always zero
  2410  0005FA  6AF8               	clrf	tblptru,c
  2411  0005FC                     	endif
  2412  0005FC                     	if	0	;tblptru may be non-zero
  2413  0005FC                     	endif
  2414  0005FC  0008               	tblrd		*
  2415  0005FE  CFF5 F07B          	movff	tablat,printf@c
  2416  000602  517B               	movf	printf@c& (0+255),w,b
  2417                           
  2418                           ; Switch size 1, requested type "space"
  2419                           ; Number of cases is 6, Range of values is 0 to 117
  2420                           ; switch strategies available:
  2421                           ; Name         Instructions Cycles
  2422                           ; simple_byte           19    10 (average)
  2423                           ;	Chosen strategy is simple_byte
  2424  000604  0A00               	xorlw	0	; case 0
  2425  000606  B4D8               	btfsc	status,2,c
  2426  000608  0012               	return	
  2427  00060A  0A63               	xorlw	99	; case 99
  2428  00060C  B4D8               	btfsc	status,2,c
  2429  00060E  D7DE               	goto	l726
  2430  000610  0A07               	xorlw	7	; case 100
  2431  000612  B4D8               	btfsc	status,2,c
  2432  000614  D00A               	goto	l725
  2433  000616  0A0D               	xorlw	13	; case 105
  2434  000618  B4D8               	btfsc	status,2,c
  2435  00061A  D007               	goto	l725
  2436  00061C  0A05               	xorlw	5	; case 108
  2437  00061E  B4D8               	btfsc	status,2,c
  2438  000620  D7D3               	goto	l722
  2439  000622  0A19               	xorlw	25	; case 117
  2440  000624  B4D8               	btfsc	status,2,c
  2441  000626  D7E0               	goto	l728
  2442  000628  D7DB               	goto	l727
  2443  00062A                     l725:
  2444                           
  2445                           ; BSR set to: 0
  2446                           ;doprnt.c: 1251: if((flag & 0x40) == 0x00)
  2447  00062A  BD78               	btfsc	printf@flag& (0+255),6,b
  2448  00062C  D02E               	goto	l729
  2449                           
  2450                           ; BSR set to: 0
  2451                           ;doprnt.c: 1253: {
  2452                           ;doprnt.c: 1255: if(flag & 0x10)
  2453  00062E  A978               	btfss	printf@flag& (0+255),4,b
  2454  000630  D00E               	goto	l730
  2455                           
  2456                           ; BSR set to: 0
  2457                           ;doprnt.c: 1256: val = (*(long *)__va_arg((*(long **)ap), (long)0));
  2458  000632  C079  FFD9         	movff	printf@ap,fsr2l
  2459  000636  C07A  FFDA         	movff	printf@ap+1,fsr2h
  2460  00063A  CFDE F074          	movff	postinc2,printf@val
  2461  00063E  CFDE F075          	movff	postinc2,printf@val+1
  2462  000642  CFDE F076          	movff	postinc2,printf@val+2
  2463  000646  CFDE F077          	movff	postinc2,printf@val+3
  2464                           
  2465                           ; BSR set to: 0
  2466  00064A  0E04               	movlw	4
  2467  00064C  D00E               	goto	L4
  2468  00064E                     l730:
  2469                           
  2470                           ; BSR set to: 0
  2471                           ;doprnt.c: 1257: else
  2472                           ;doprnt.c: 1259: val = (long)(*(int *)__va_arg((*(int **)ap), (int)0));
  2473                           
  2474                           ; BSR set to: 0
  2475  00064E  C079  FFD9         	movff	printf@ap,fsr2l
  2476  000652  C07A  FFDA         	movff	printf@ap+1,fsr2h
  2477  000656  CFDE F074          	movff	postinc2,printf@val
  2478  00065A  CFDD F075          	movff	postdec2,printf@val+1
  2479  00065E  0E00               	movlw	0
  2480  000660  BF75               	btfsc	(printf@val+1)& (0+255),7,b
  2481  000662  0EFF               	movlw	-1
  2482  000664  6F76               	movwf	(printf@val+2)& (0+255),b
  2483  000666  6F77               	movwf	(printf@val+3)& (0+255),b
  2484                           
  2485                           ; BSR set to: 0
  2486  000668  0E02               	movlw	2
  2487  00066A                     L4:
  2488  00066A  2779               	addwf	printf@ap& (0+255),f,b
  2489  00066C  0E00               	movlw	0
  2490  00066E  237A               	addwfc	(printf@ap+1)& (0+255),f,b
  2491                           
  2492                           ; BSR set to: 0
  2493                           ;doprnt.c: 1261: if((long)val < 0) {
  2494                           
  2495                           ; BSR set to: 0
  2496  000670  AF77               	btfss	(printf@val+3)& (0+255),7,b
  2497  000672  D02D               	goto	l735
  2498                           
  2499                           ; BSR set to: 0
  2500                           ;doprnt.c: 1262: flag |= 0x03;
  2501  000674  0E03               	movlw	3
  2502  000676  1378               	iorwf	printf@flag& (0+255),f,b
  2503                           
  2504                           ; BSR set to: 0
  2505                           ;doprnt.c: 1263: val = -val;
  2506  000678  1F77               	comf	(printf@val+3)& (0+255),f,b
  2507  00067A  1F76               	comf	(printf@val+2)& (0+255),f,b
  2508  00067C  1F75               	comf	(printf@val+1)& (0+255),f,b
  2509  00067E  6D74               	negf	printf@val& (0+255),b
  2510  000680  0E00               	movlw	0
  2511  000682  2375               	addwfc	(printf@val+1)& (0+255),f,b
  2512  000684  2376               	addwfc	(printf@val+2)& (0+255),f,b
  2513  000686  2377               	addwfc	(printf@val+3)& (0+255),f,b
  2514                           
  2515                           ; BSR set to: 0
  2516                           ;doprnt.c: 1264: }
  2517                           ;doprnt.c: 1266: }
  2518  000688  D022               	goto	l735
  2519  00068A                     l729:
  2520                           
  2521                           ; BSR set to: 0
  2522                           ;doprnt.c: 1268: else
  2523                           ;doprnt.c: 1273: {
  2524                           ;doprnt.c: 1281: if(flag & 0x10)
  2525  00068A  A978               	btfss	printf@flag& (0+255),4,b
  2526  00068C  D00E               	goto	l734
  2527                           
  2528                           ; BSR set to: 0
  2529                           ;doprnt.c: 1282: val = (*(unsigned long *)__va_arg((*(unsigned long **)ap), (unsigned lo
      +                          ng)0));
  2530  00068E  C079  FFD9         	movff	printf@ap,fsr2l
  2531  000692  C07A  FFDA         	movff	printf@ap+1,fsr2h
  2532  000696  CFDE F074          	movff	postinc2,printf@val
  2533  00069A  CFDE F075          	movff	postinc2,printf@val+1
  2534  00069E  CFDE F076          	movff	postinc2,printf@val+2
  2535  0006A2  CFDE F077          	movff	postinc2,printf@val+3
  2536                           
  2537                           ; BSR set to: 0
  2538  0006A6  0E04               	movlw	4
  2539  0006A8  D00F               	goto	L5
  2540  0006AA                     l734:
  2541                           
  2542                           ; BSR set to: 0
  2543                           ;doprnt.c: 1283: else
  2544                           ;doprnt.c: 1286: val = (*(unsigned *)__va_arg((*(unsigned **)ap), (unsigned)0));
  2545                           
  2546                           ; BSR set to: 0
  2547  0006AA  C079  FFD9         	movff	printf@ap,fsr2l
  2548  0006AE  C07A  FFDA         	movff	printf@ap+1,fsr2h
  2549  0006B2  CFDE F02B          	movff	postinc2,??_printf
  2550  0006B6  CFDD F02C          	movff	postdec2,??_printf+1
  2551  0006BA  C02B  F074         	movff	??_printf,printf@val
  2552  0006BE  C02C  F075         	movff	??_printf+1,printf@val+1
  2553  0006C2  6B76               	clrf	(printf@val+2)& (0+255),b
  2554  0006C4  6B77               	clrf	(printf@val+3)& (0+255),b
  2555                           
  2556                           ; BSR set to: 0
  2557  0006C6  0E02               	movlw	2
  2558  0006C8                     L5:
  2559  0006C8  2779               	addwf	printf@ap& (0+255),f,b
  2560  0006CA  0E00               	movlw	0
  2561  0006CC  237A               	addwfc	(printf@ap+1)& (0+255),f,b
  2562  0006CE                     l735:
  2563                           
  2564                           ; BSR set to: 0
  2565                           ;doprnt.c: 1287: }
  2566                           ;doprnt.c: 1305: for(c = 1 ; c != sizeof dpowers/sizeof dpowers[0] ; c++)
  2567                           
  2568                           ; BSR set to: 0
  2569                           
  2570                           ; BSR set to: 0
  2571  0006CE  0E01               	movlw	1
  2572  0006D0  6F7B               	movwf	printf@c& (0+255),b
  2573  0006D2                     l2806:
  2574                           
  2575                           ; BSR set to: 0
  2576  0006D2  0E0A               	movlw	10
  2577  0006D4  197B               	xorwf	printf@c& (0+255),w,b
  2578  0006D6  B4D8               	btfsc	status,2,c
  2579  0006D8  D01B               	goto	u1730
  2580                           
  2581                           ; BSR set to: 0
  2582                           ;doprnt.c: 1306: if(val < dpowers[c])
  2583                           
  2584                           ; BSR set to: 0
  2585                           
  2586                           ; BSR set to: 0
  2587  0006DA  517B               	movf	printf@c& (0+255),w,b
  2588  0006DC  0D04               	mullw	4
  2589  0006DE  0E9B               	movlw	low _dpowers
  2590  0006E0  24F3               	addwf	prodl,w,c
  2591  0006E2  6EF6               	movwf	tblptrl,c
  2592  0006E4  0EFD               	movlw	high _dpowers
  2593  0006E6  20F4               	addwfc	prodh,w,c
  2594  0006E8  6EF7               	movwf	tblptrh,c
  2595  0006EA                     	if	1	;There are 3 active tblptr bytes
  2596  0006EA  6AF8               	clrf	tblptru,c
  2597  0006EC  0E00               	movlw	low (__mediumconst shr (0+16))
  2598  0006EE  22F8               	addwfc	tblptru,f,c
  2599  0006F0                     	endif
  2600  0006F0  0009               	tblrd		*+
  2601  0006F2  50F5               	movf	tablat,w,c
  2602  0006F4  5D74               	subwf	printf@val& (0+255),w,b
  2603  0006F6  0009               	tblrd		*+
  2604  0006F8  50F5               	movf	tablat,w,c
  2605  0006FA  5975               	subwfb	(printf@val+1)& (0+255),w,b
  2606  0006FC  0009               	tblrd		*+
  2607  0006FE  50F5               	movf	tablat,w,c
  2608  000700  5976               	subwfb	(printf@val+2)& (0+255),w,b
  2609  000702  0009               	tblrd		*+
  2610  000704  50F5               	movf	tablat,w,c
  2611  000706  5977               	subwfb	(printf@val+3)& (0+255),w,b
  2612  000708  A0D8               	btfss	status,0,c
  2613  00070A  D002               	goto	u1730
  2614                           
  2615                           ; BSR set to: 0
  2616                           
  2617                           ; BSR set to: 0
  2618                           
  2619                           ; BSR set to: 0
  2620                           ;doprnt.c: 1307: break;
  2621  00070C  2B7B               	incf	printf@c& (0+255),f,b
  2622  00070E  D7E1               	goto	l2806
  2623  000710                     u1730:
  2624                           
  2625                           ; BSR set to: 0
  2626                           ;doprnt.c: 1422: {
  2627                           ;doprnt.c: 1438: if(flag & 0x03)
  2628                           
  2629                           ; BSR set to: 0
  2630  000710  C078  F02B         	movff	printf@flag,??_printf
  2631  000714  0E03               	movlw	3
  2632  000716  162B               	andwf	??_printf,f,c
  2633  000718  B4D8               	btfsc	status,2,c
  2634  00071A  D003               	goto	l739
  2635                           
  2636                           ; BSR set to: 0
  2637                           ;doprnt.c: 1439: (putch('-') );
  2638  00071C  0E2D               	movlw	45
  2639  00071E  ECC8  F007         	call	_putch
  2640  000722                     l739:
  2641                           
  2642                           ;doprnt.c: 1469: }
  2643                           ;doprnt.c: 1472: prec = c;
  2644  000722  0100               	movlb	0	; () banked
  2645  000724  517B               	movf	printf@c& (0+255),w,b
  2646  000726  6F72               	movwf	printf@prec& (0+255),b
  2647  000728  6B73               	clrf	(printf@prec+1)& (0+255),b
  2648  00072A  BF72               	btfsc	printf@prec& (0+255),7,b
  2649  00072C  0773               	decf	(printf@prec+1)& (0+255),f,b
  2650                           
  2651                           ;doprnt.c: 1474: while(prec--) {
  2652  00072E  D043               	goto	l740
  2653  000730                     l2824:
  2654                           
  2655                           ; BSR set to: 0
  2656                           ;doprnt.c: 1478: {
  2657                           ;doprnt.c: 1489: c = (val / dpowers[prec]) % 10 + '0';
  2658  000730  C072  F02B         	movff	printf@prec,??_printf
  2659  000734  C073  F02C         	movff	printf@prec+1,??_printf+1
  2660  000738  90D8               	bcf	status,0,c
  2661  00073A  362B               	rlcf	??_printf,f,c
  2662  00073C  362C               	rlcf	??_printf+1,f,c
  2663  00073E  90D8               	bcf	status,0,c
  2664  000740  362B               	rlcf	??_printf,f,c
  2665  000742  362C               	rlcf	??_printf+1,f,c
  2666  000744  0E9B               	movlw	low _dpowers
  2667  000746  242B               	addwf	??_printf,w,c
  2668  000748  6EF6               	movwf	tblptrl,c
  2669  00074A  0EFD               	movlw	high _dpowers
  2670  00074C  202C               	addwfc	??_printf+1,w,c
  2671  00074E  6EF7               	movwf	tblptrh,c
  2672  000750                     	if	1	;There are 3 active tblptr bytes
  2673  000750  6AF8               	clrf	tblptru,c
  2674  000752  0E00               	movlw	low (__mediumconst shr (0+16))
  2675  000754  22F8               	addwfc	tblptru,f,c
  2676  000756                     	endif
  2677  000756  0009               	tblrd		*+
  2678  000758  CFF5 F021          	movff	tablat,___lldiv@divisor
  2679  00075C  0009               	tblrd		*+
  2680  00075E  CFF5 F022          	movff	tablat,___lldiv@divisor+1
  2681  000762  0009               	tblrd		*+
  2682  000764  CFF5 F023          	movff	tablat,___lldiv@divisor+2
  2683  000768  000A               	tblrd		*-
  2684  00076A  CFF5 F024          	movff	tablat,___lldiv@divisor+3
  2685  00076E  C074  F01D         	movff	printf@val,___lldiv@dividend
  2686  000772  C075  F01E         	movff	printf@val+1,___lldiv@dividend+1
  2687  000776  C076  F01F         	movff	printf@val+2,___lldiv@dividend+2
  2688  00077A  C077  F020         	movff	printf@val+3,___lldiv@dividend+3
  2689  00077E  ECA3  F004         	call	___lldiv	;wreg free
  2690  000782  C01D  F060         	movff	?___lldiv,___llmod@dividend
  2691  000786  C01E  F061         	movff	?___lldiv+1,___llmod@dividend+1
  2692  00078A  C01F  F062         	movff	?___lldiv+2,___llmod@dividend+2
  2693  00078E  C020  F063         	movff	?___lldiv+3,___llmod@dividend+3
  2694  000792  0E0A               	movlw	10
  2695  000794  0100               	movlb	0	; () banked
  2696  000796  6F64               	movwf	___llmod@divisor& (0+255),b
  2697  000798  0E00               	movlw	0
  2698  00079A  6F65               	movwf	(___llmod@divisor+1)& (0+255),b
  2699  00079C  0E00               	movlw	0
  2700  00079E  6F66               	movwf	(___llmod@divisor+2)& (0+255),b
  2701  0007A0  0E00               	movlw	0
  2702  0007A2  6F67               	movwf	(___llmod@divisor+3)& (0+255),b
  2703  0007A4  ECE4  F004         	call	___llmod	;wreg free
  2704  0007A8  0100               	movlb	0	; () banked
  2705  0007AA  5160               	movf	?___llmod& (0+255),w,b
  2706  0007AC  0F30               	addlw	48
  2707  0007AE  6F7B               	movwf	printf@c& (0+255),b
  2708                           
  2709                           ; BSR set to: 0
  2710                           ;doprnt.c: 1523: }
  2711                           ;doprnt.c: 1524: (putch(c) );
  2712  0007B0  517B               	movf	printf@c& (0+255),w,b
  2713  0007B2  ECC8  F007         	call	_putch
  2714  0007B6                     l740:
  2715  0007B6  0100               	movlb	0	; () banked
  2716  0007B8  0772               	decf	printf@prec& (0+255),f,b
  2717  0007BA  A0D8               	btfss	status,0,c
  2718  0007BC  0773               	decf	(printf@prec+1)& (0+255),f,b
  2719  0007BE  2972               	incf	printf@prec& (0+255),w,b
  2720  0007C0  E1B7               	bnz	l2824
  2721  0007C2  2973               	incf	(printf@prec+1)& (0+255),w,b
  2722  0007C4  A4D8               	btfss	status,2,c
  2723  0007C6  D7B4               	goto	l741
  2724  0007C8                     u1750:
  2725                           
  2726                           ; BSR set to: 0
  2727                           
  2728                           ; BSR set to: 0
  2729  0007C8  C068  FFF6         	movff	printf@f,tblptrl
  2730  0007CC  C069  FFF7         	movff	printf@f+1,tblptrh
  2731  0007D0  0100               	movlb	0	; () banked
  2732  0007D2  4B68               	infsnz	printf@f& (0+255),f,b
  2733  0007D4  2B69               	incf	(printf@f+1)& (0+255),f,b
  2734  0007D6                     	if	1	;Program memory is < 0x10000, tblptru is always zero
  2735  0007D6  6AF8               	clrf	tblptru,c
  2736  0007D8                     	endif
  2737  0007D8                     	if	0	;tblptru may be non-zero
  2738  0007D8                     	endif
  2739  0007D8  0008               	tblrd		*
  2740  0007DA  CFF5 F07B          	movff	tablat,printf@c
  2741  0007DE  517B               	movf	printf@c& (0+255),w,b
  2742  0007E0  B4D8               	btfsc	status,2,c
  2743  0007E2  0012               	return	
  2744  0007E4  D6E5               	goto	l716
  2745  0007E6                     __end_of_printf:
  2746                           	opt stack 0
  2747                           tblptru	equ	0xFF8
  2748                           tblptrh	equ	0xFF7
  2749                           tblptrl	equ	0xFF6
  2750                           tablat	equ	0xFF5
  2751                           prodh	equ	0xFF4
  2752                           prodl	equ	0xFF3
  2753                           intcon	equ	0xFF2
  2754                           postinc0	equ	0xFEE
  2755                           wreg	equ	0xFE8
  2756                           postdec1	equ	0xFE5
  2757                           fsr1l	equ	0xFE1
  2758                           indf2	equ	0xFDF
  2759                           postinc2	equ	0xFDE
  2760                           postdec2	equ	0xFDD
  2761                           fsr2h	equ	0xFDA
  2762                           fsr2l	equ	0xFD9
  2763                           status	equ	0xFD8
  2764                           
  2765 ;; *************** function _putch *****************
  2766 ;; Defined at:
  2767 ;;		line 125 in file "mcc_generated_files/eusart2.c"
  2768 ;; Parameters:    Size  Location     Type
  2769 ;;  txData          1    wreg     unsigned char 
  2770 ;; Auto vars:     Size  Location     Type
  2771 ;;  txData          1   29[COMRAM] unsigned char 
  2772 ;; Return value:  Size  Location     Type
  2773 ;;                  1    wreg      void 
  2774 ;; Registers used:
  2775 ;;		wreg, status,2, cstack
  2776 ;; Tracked objects:
  2777 ;;		On entry : 0/0
  2778 ;;		On exit  : 0/0
  2779 ;;		Unchanged: 0/0
  2780 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2781 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2782 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2783 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2784 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2785 ;;Total ram usage:        1 bytes
  2786 ;; Hardware stack levels used:    1
  2787 ;; Hardware stack levels required when called:    5
  2788 ;; This function calls:
  2789 ;;		_EUSART2_Write
  2790 ;; This function is called by:
  2791 ;;		_printf
  2792 ;; This function uses a non-reentrant model
  2793 ;;
  2794                           
  2795                           	psect	text5
  2796  000F90                     __ptext5:
  2797                           	opt stack 0
  2798  000F90                     _putch:
  2799                           	opt stack 24
  2800                           
  2801                           ; BSR set to: 0
  2802                           ;incstack = 0
  2803                           ;putch@txData stored from wreg
  2804  000F90  6E1E               	movwf	putch@txData,c
  2805                           
  2806                           ;eusart2.c: 127: EUSART2_Write(txData);
  2807  000F92  501E               	movf	putch@txData,w,c
  2808  000F94  ECB6  F007         	call	_EUSART2_Write
  2809  000F98  0012               	return		;funcret
  2810  000F9A                     __end_of_putch:
  2811                           	opt stack 0
  2812                           tblptru	equ	0xFF8
  2813                           tblptrh	equ	0xFF7
  2814                           tblptrl	equ	0xFF6
  2815                           tablat	equ	0xFF5
  2816                           prodh	equ	0xFF4
  2817                           prodl	equ	0xFF3
  2818                           intcon	equ	0xFF2
  2819                           postinc0	equ	0xFEE
  2820                           wreg	equ	0xFE8
  2821                           postdec1	equ	0xFE5
  2822                           fsr1l	equ	0xFE1
  2823                           indf2	equ	0xFDF
  2824                           postinc2	equ	0xFDE
  2825                           postdec2	equ	0xFDD
  2826                           fsr2h	equ	0xFDA
  2827                           fsr2l	equ	0xFD9
  2828                           status	equ	0xFD8
  2829                           
  2830 ;; *************** function _EUSART2_Write *****************
  2831 ;; Defined at:
  2832 ;;		line 111 in file "mcc_generated_files/eusart2.c"
  2833 ;; Parameters:    Size  Location     Type
  2834 ;;  txData          1    wreg     unsigned char 
  2835 ;; Auto vars:     Size  Location     Type
  2836 ;;  txData          1   28[COMRAM] unsigned char 
  2837 ;; Return value:  Size  Location     Type
  2838 ;;                  1    wreg      void 
  2839 ;; Registers used:
  2840 ;;		wreg
  2841 ;; Tracked objects:
  2842 ;;		On entry : 0/0
  2843 ;;		On exit  : 0/0
  2844 ;;		Unchanged: 0/0
  2845 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2846 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2847 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2848 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2849 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2850 ;;Total ram usage:        1 bytes
  2851 ;; Hardware stack levels used:    1
  2852 ;; Hardware stack levels required when called:    4
  2853 ;; This function calls:
  2854 ;;		Nothing
  2855 ;; This function is called by:
  2856 ;;		_putch
  2857 ;; This function uses a non-reentrant model
  2858 ;;
  2859                           
  2860                           	psect	text6
  2861  000F6C                     __ptext6:
  2862                           	opt stack 0
  2863  000F6C                     _EUSART2_Write:
  2864                           	opt stack 24
  2865                           
  2866                           ;incstack = 0
  2867                           ;EUSART2_Write@txData stored from wreg
  2868  000F6C  6E1D               	movwf	EUSART2_Write@txData,c
  2869  000F6E                     
  2870                           ;eusart2.c: 114: {
  2871                           
  2872                           ;eusart2.c: 113: while(0 == PIR3bits.TX2IF)
  2873  000F6E  A8A4               	btfss	4004,4,c	;volatile
  2874  000F70  D7FE               	goto	l2112
  2875                           
  2876                           ;eusart2.c: 115: }
  2877                           ;eusart2.c: 117: TXREG2 = txData;
  2878  000F72  C01D  FF73         	movff	EUSART2_Write@txData,3955	;volatile
  2879  000F76  0012               	return		;funcret
  2880  000F78                     __end_of_EUSART2_Write:
  2881                           	opt stack 0
  2882                           tblptru	equ	0xFF8
  2883                           tblptrh	equ	0xFF7
  2884                           tblptrl	equ	0xFF6
  2885                           tablat	equ	0xFF5
  2886                           prodh	equ	0xFF4
  2887                           prodl	equ	0xFF3
  2888                           intcon	equ	0xFF2
  2889                           postinc0	equ	0xFEE
  2890                           wreg	equ	0xFE8
  2891                           postdec1	equ	0xFE5
  2892                           fsr1l	equ	0xFE1
  2893                           indf2	equ	0xFDF
  2894                           postinc2	equ	0xFDE
  2895                           postdec2	equ	0xFDD
  2896                           fsr2h	equ	0xFDA
  2897                           fsr2l	equ	0xFD9
  2898                           status	equ	0xFD8
  2899                           
  2900 ;; *************** function ___llmod *****************
  2901 ;; Defined at:
  2902 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\llmod.c"
  2903 ;; Parameters:    Size  Location     Type
  2904 ;;  dividend        4    0[BANK0 ] unsigned long 
  2905 ;;  divisor         4    4[BANK0 ] unsigned long 
  2906 ;; Auto vars:     Size  Location     Type
  2907 ;;  counter         1   41[COMRAM] unsigned char 
  2908 ;; Return value:  Size  Location     Type
  2909 ;;                  4    0[BANK0 ] unsigned long 
  2910 ;; Registers used:
  2911 ;;		wreg, status,2, status,0
  2912 ;; Tracked objects:
  2913 ;;		On entry : 0/0
  2914 ;;		On exit  : 0/0
  2915 ;;		Unchanged: 0/0
  2916 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2917 ;;      Params:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2918 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2919 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2920 ;;      Totals:         1       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2921 ;;Total ram usage:        9 bytes
  2922 ;; Hardware stack levels used:    1
  2923 ;; Hardware stack levels required when called:    4
  2924 ;; This function calls:
  2925 ;;		Nothing
  2926 ;; This function is called by:
  2927 ;;		_printf
  2928 ;; This function uses a non-reentrant model
  2929 ;;
  2930                           
  2931                           	psect	text7
  2932  0009C8                     __ptext7:
  2933                           	opt stack 0
  2934  0009C8                     ___llmod:
  2935                           	opt stack 25
  2936                           
  2937                           ;incstack = 0
  2938  0009C8  0100               	movlb	0	; () banked
  2939  0009CA  5164               	movf	___llmod@divisor& (0+255),w,b
  2940  0009CC  1165               	iorwf	(___llmod@divisor+1)& (0+255),w,b
  2941  0009CE  1166               	iorwf	(___llmod@divisor+2)& (0+255),w,b
  2942  0009D0  1167               	iorwf	(___llmod@divisor+3)& (0+255),w,b
  2943  0009D2  B4D8               	btfsc	status,2,c
  2944  0009D4  D024               	goto	l1110
  2945                           
  2946                           ; BSR set to: 0
  2947  0009D6  0E01               	movlw	1
  2948  0009D8  6E2A               	movwf	___llmod@counter,c
  2949  0009DA  D006               	goto	l1105
  2950  0009DC                     
  2951                           ; BSR set to: 0
  2952                           
  2953                           ; BSR set to: 0
  2954  0009DC  90D8               	bcf	status,0,c
  2955  0009DE  3764               	rlcf	___llmod@divisor& (0+255),f,b
  2956  0009E0  3765               	rlcf	(___llmod@divisor+1)& (0+255),f,b
  2957  0009E2  3766               	rlcf	(___llmod@divisor+2)& (0+255),f,b
  2958  0009E4  3767               	rlcf	(___llmod@divisor+3)& (0+255),f,b
  2959  0009E6  2A2A               	incf	___llmod@counter,f,c
  2960  0009E8                     l1105:
  2961                           
  2962                           ; BSR set to: 0
  2963                           
  2964                           ; BSR set to: 0
  2965  0009E8  AF67               	btfss	(___llmod@divisor+3)& (0+255),7,b
  2966  0009EA  D7F8               	goto	l1106
  2967  0009EC                     u1640:
  2968                           
  2969                           ; BSR set to: 0
  2970                           
  2971                           ; BSR set to: 0
  2972                           
  2973                           ; BSR set to: 0
  2974  0009EC  5164               	movf	___llmod@divisor& (0+255),w,b
  2975  0009EE  5D60               	subwf	___llmod@dividend& (0+255),w,b
  2976  0009F0  5165               	movf	(___llmod@divisor+1)& (0+255),w,b
  2977  0009F2  5961               	subwfb	(___llmod@dividend+1)& (0+255),w,b
  2978  0009F4  5166               	movf	(___llmod@divisor+2)& (0+255),w,b
  2979  0009F6  5962               	subwfb	(___llmod@dividend+2)& (0+255),w,b
  2980  0009F8  5167               	movf	(___llmod@divisor+3)& (0+255),w,b
  2981  0009FA  5963               	subwfb	(___llmod@dividend+3)& (0+255),w,b
  2982  0009FC  A0D8               	btfss	status,0,c
  2983  0009FE  D008               	goto	l1109
  2984                           
  2985                           ; BSR set to: 0
  2986  000A00  5164               	movf	___llmod@divisor& (0+255),w,b
  2987  000A02  5F60               	subwf	___llmod@dividend& (0+255),f,b
  2988  000A04  5165               	movf	(___llmod@divisor+1)& (0+255),w,b
  2989  000A06  5B61               	subwfb	(___llmod@dividend+1)& (0+255),f,b
  2990  000A08  5166               	movf	(___llmod@divisor+2)& (0+255),w,b
  2991  000A0A  5B62               	subwfb	(___llmod@dividend+2)& (0+255),f,b
  2992  000A0C  5167               	movf	(___llmod@divisor+3)& (0+255),w,b
  2993  000A0E  5B63               	subwfb	(___llmod@dividend+3)& (0+255),f,b
  2994  000A10                     l1109:
  2995                           
  2996                           ; BSR set to: 0
  2997                           
  2998                           ; BSR set to: 0
  2999  000A10  90D8               	bcf	status,0,c
  3000  000A12  3367               	rrcf	(___llmod@divisor+3)& (0+255),f,b
  3001  000A14  3366               	rrcf	(___llmod@divisor+2)& (0+255),f,b
  3002  000A16  3365               	rrcf	(___llmod@divisor+1)& (0+255),f,b
  3003  000A18  3364               	rrcf	___llmod@divisor& (0+255),f,b
  3004                           
  3005                           ; BSR set to: 0
  3006  000A1A  2E2A               	decfsz	___llmod@counter,f,c
  3007  000A1C  D7E7               	goto	u1640
  3008  000A1E                     l1110:
  3009                           
  3010                           ; BSR set to: 0
  3011                           
  3012                           ; BSR set to: 0
  3013  000A1E  C060  F060         	movff	___llmod@dividend,?___llmod
  3014  000A22  C061  F061         	movff	___llmod@dividend+1,?___llmod+1
  3015  000A26  C062  F062         	movff	___llmod@dividend+2,?___llmod+2
  3016  000A2A  C063  F063         	movff	___llmod@dividend+3,?___llmod+3
  3017                           
  3018                           ; BSR set to: 0
  3019  000A2E  0012               	return		;funcret
  3020  000A30                     __end_of___llmod:
  3021                           	opt stack 0
  3022                           tblptru	equ	0xFF8
  3023                           tblptrh	equ	0xFF7
  3024                           tblptrl	equ	0xFF6
  3025                           tablat	equ	0xFF5
  3026                           prodh	equ	0xFF4
  3027                           prodl	equ	0xFF3
  3028                           intcon	equ	0xFF2
  3029                           postinc0	equ	0xFEE
  3030                           wreg	equ	0xFE8
  3031                           postdec1	equ	0xFE5
  3032                           fsr1l	equ	0xFE1
  3033                           indf2	equ	0xFDF
  3034                           postinc2	equ	0xFDE
  3035                           postdec2	equ	0xFDD
  3036                           fsr2h	equ	0xFDA
  3037                           fsr2l	equ	0xFD9
  3038                           status	equ	0xFD8
  3039                           
  3040 ;; *************** function ___lldiv *****************
  3041 ;; Defined at:
  3042 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\lldiv.c"
  3043 ;; Parameters:    Size  Location     Type
  3044 ;;  dividend        4   28[COMRAM] unsigned long 
  3045 ;;  divisor         4   32[COMRAM] unsigned long 
  3046 ;; Auto vars:     Size  Location     Type
  3047 ;;  quotient        4   36[COMRAM] unsigned long 
  3048 ;;  counter         1   40[COMRAM] unsigned char 
  3049 ;; Return value:  Size  Location     Type
  3050 ;;                  4   28[COMRAM] unsigned long 
  3051 ;; Registers used:
  3052 ;;		wreg, status,2, status,0
  3053 ;; Tracked objects:
  3054 ;;		On entry : 0/0
  3055 ;;		On exit  : 0/0
  3056 ;;		Unchanged: 0/0
  3057 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3058 ;;      Params:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3059 ;;      Locals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3060 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3061 ;;      Totals:        13       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3062 ;;Total ram usage:       13 bytes
  3063 ;; Hardware stack levels used:    1
  3064 ;; Hardware stack levels required when called:    4
  3065 ;; This function calls:
  3066 ;;		Nothing
  3067 ;; This function is called by:
  3068 ;;		_printf
  3069 ;; This function uses a non-reentrant model
  3070 ;;
  3071                           
  3072                           	psect	text8
  3073  000946                     __ptext8:
  3074                           	opt stack 0
  3075  000946                     ___lldiv:
  3076                           	opt stack 25
  3077                           
  3078                           ; BSR set to: 0
  3079                           ;incstack = 0
  3080  000946  0E00               	movlw	0
  3081  000948  6E25               	movwf	___lldiv@quotient,c
  3082  00094A  0E00               	movlw	0
  3083  00094C  6E26               	movwf	___lldiv@quotient+1,c
  3084  00094E  0E00               	movlw	0
  3085  000950  6E27               	movwf	___lldiv@quotient+2,c
  3086  000952  0E00               	movlw	0
  3087  000954  6E28               	movwf	___lldiv@quotient+3,c
  3088  000956  5021               	movf	___lldiv@divisor,w,c
  3089  000958  1022               	iorwf	___lldiv@divisor+1,w,c
  3090  00095A  1023               	iorwf	___lldiv@divisor+2,w,c
  3091  00095C  1024               	iorwf	___lldiv@divisor+3,w,c
  3092  00095E  B4D8               	btfsc	status,2,c
  3093  000960  D02A               	goto	l1100
  3094  000962  0E01               	movlw	1
  3095  000964  6E29               	movwf	___lldiv@counter,c
  3096  000966  D006               	goto	l1095
  3097  000968  90D8               	bcf	status,0,c
  3098  00096A  3621               	rlcf	___lldiv@divisor,f,c
  3099  00096C  3622               	rlcf	___lldiv@divisor+1,f,c
  3100  00096E  3623               	rlcf	___lldiv@divisor+2,f,c
  3101  000970  3624               	rlcf	___lldiv@divisor+3,f,c
  3102  000972  2A29               	incf	___lldiv@counter,f,c
  3103  000974                     l1095:
  3104  000974  AE24               	btfss	___lldiv@divisor+3,7,c
  3105  000976  D7F8               	goto	l1096
  3106  000978                     u1100:
  3107  000978  90D8               	bcf	status,0,c
  3108  00097A  3625               	rlcf	___lldiv@quotient,f,c
  3109  00097C  3626               	rlcf	___lldiv@quotient+1,f,c
  3110  00097E  3627               	rlcf	___lldiv@quotient+2,f,c
  3111  000980  3628               	rlcf	___lldiv@quotient+3,f,c
  3112  000982  5021               	movf	___lldiv@divisor,w,c
  3113  000984  5C1D               	subwf	___lldiv@dividend,w,c
  3114  000986  5022               	movf	___lldiv@divisor+1,w,c
  3115  000988  581E               	subwfb	___lldiv@dividend+1,w,c
  3116  00098A  5023               	movf	___lldiv@divisor+2,w,c
  3117  00098C  581F               	subwfb	___lldiv@dividend+2,w,c
  3118  00098E  5024               	movf	___lldiv@divisor+3,w,c
  3119  000990  5820               	subwfb	___lldiv@dividend+3,w,c
  3120  000992  A0D8               	btfss	status,0,c
  3121  000994  D009               	goto	l1099
  3122  000996  5021               	movf	___lldiv@divisor,w,c
  3123  000998  5E1D               	subwf	___lldiv@dividend,f,c
  3124  00099A  5022               	movf	___lldiv@divisor+1,w,c
  3125  00099C  5A1E               	subwfb	___lldiv@dividend+1,f,c
  3126  00099E  5023               	movf	___lldiv@divisor+2,w,c
  3127  0009A0  5A1F               	subwfb	___lldiv@dividend+2,f,c
  3128  0009A2  5024               	movf	___lldiv@divisor+3,w,c
  3129  0009A4  5A20               	subwfb	___lldiv@dividend+3,f,c
  3130  0009A6  8025               	bsf	___lldiv@quotient,0,c
  3131  0009A8                     l1099:
  3132  0009A8  90D8               	bcf	status,0,c
  3133  0009AA  3224               	rrcf	___lldiv@divisor+3,f,c
  3134  0009AC  3223               	rrcf	___lldiv@divisor+2,f,c
  3135  0009AE  3222               	rrcf	___lldiv@divisor+1,f,c
  3136  0009B0  3221               	rrcf	___lldiv@divisor,f,c
  3137  0009B2  2E29               	decfsz	___lldiv@counter,f,c
  3138  0009B4  D7E1               	goto	u1100
  3139  0009B6                     l1100:
  3140  0009B6  C025  F01D         	movff	___lldiv@quotient,?___lldiv
  3141  0009BA  C026  F01E         	movff	___lldiv@quotient+1,?___lldiv+1
  3142  0009BE  C027  F01F         	movff	___lldiv@quotient+2,?___lldiv+2
  3143  0009C2  C028  F020         	movff	___lldiv@quotient+3,?___lldiv+3
  3144  0009C6  0012               	return		;funcret
  3145  0009C8                     __end_of___lldiv:
  3146                           	opt stack 0
  3147                           tblptru	equ	0xFF8
  3148                           tblptrh	equ	0xFF7
  3149                           tblptrl	equ	0xFF6
  3150                           tablat	equ	0xFF5
  3151                           prodh	equ	0xFF4
  3152                           prodl	equ	0xFF3
  3153                           intcon	equ	0xFF2
  3154                           postinc0	equ	0xFEE
  3155                           wreg	equ	0xFE8
  3156                           postdec1	equ	0xFE5
  3157                           fsr1l	equ	0xFE1
  3158                           indf2	equ	0xFDF
  3159                           postinc2	equ	0xFDE
  3160                           postdec2	equ	0xFDD
  3161                           fsr2h	equ	0xFDA
  3162                           fsr2l	equ	0xFD9
  3163                           status	equ	0xFD8
  3164                           
  3165 ;; *************** function _parseInt *****************
  3166 ;; Defined at:
  3167 ;;		line 242 in file "main.c"
  3168 ;; Parameters:    Size  Location     Type
  3169 ;;		None
  3170 ;; Auto vars:     Size  Location     Type
  3171 ;;  position        2   31[COMRAM] unsigned int 
  3172 ;; Return value:  Size  Location     Type
  3173 ;;                  2   28[COMRAM] unsigned int 
  3174 ;; Registers used:
  3175 ;;		wreg, status,2, status,0, cstack
  3176 ;; Tracked objects:
  3177 ;;		On entry : 0/0
  3178 ;;		On exit  : 0/0
  3179 ;;		Unchanged: 0/0
  3180 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3181 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3182 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3183 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3184 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3185 ;;Total ram usage:        5 bytes
  3186 ;; Hardware stack levels used:    1
  3187 ;; Hardware stack levels required when called:    5
  3188 ;; This function calls:
  3189 ;;		_EUSART1_Read
  3190 ;;		_EUSART1_is_rx_ready
  3191 ;; This function is called by:
  3192 ;;		_main
  3193 ;; This function uses a non-reentrant model
  3194 ;;
  3195                           
  3196                           	psect	text9
  3197  000DE6                     __ptext9:
  3198                           	opt stack 0
  3199  000DE6                     _parseInt:
  3200                           	opt stack 25
  3201                           
  3202                           ;main.c: 243: while(!(EUSART1_is_rx_ready()));
  3203                           
  3204                           ;incstack = 0
  3205  000DE6  ECBC  F007         	call	_EUSART1_is_rx_ready	;wreg free
  3206  000DEA  0900               	iorlw	0
  3207  000DEC  B4D8               	btfsc	status,2,c
  3208  000DEE  D7FB               	goto	_parseInt
  3209                           
  3210                           ;main.c: 244: uint16_t position = EUSART1_Read();
  3211  000DF0  EC9F  F007         	call	_EUSART1_Read	;wreg free
  3212  000DF4  6E1F               	movwf	??_parseInt& (0+255),c
  3213  000DF6  501F               	movf	??_parseInt,w,c
  3214  000DF8  6E20               	movwf	parseInt@position,c
  3215  000DFA  6A21               	clrf	parseInt@position+1,c
  3216                           
  3217                           ;main.c: 245: return position;
  3218  000DFC  C020  F01D         	movff	parseInt@position,?_parseInt
  3219  000E00  C021  F01E         	movff	parseInt@position+1,?_parseInt+1
  3220  000E04  0012               	return	
  3221  000E06                     __end_of_parseInt:
  3222                           	opt stack 0
  3223                           tblptru	equ	0xFF8
  3224                           tblptrh	equ	0xFF7
  3225                           tblptrl	equ	0xFF6
  3226                           tablat	equ	0xFF5
  3227                           prodh	equ	0xFF4
  3228                           prodl	equ	0xFF3
  3229                           intcon	equ	0xFF2
  3230                           postinc0	equ	0xFEE
  3231                           wreg	equ	0xFE8
  3232                           postdec1	equ	0xFE5
  3233                           fsr1l	equ	0xFE1
  3234                           indf2	equ	0xFDF
  3235                           postinc2	equ	0xFDE
  3236                           postdec2	equ	0xFDD
  3237                           fsr2h	equ	0xFDA
  3238                           fsr2l	equ	0xFD9
  3239                           status	equ	0xFD8
  3240                           
  3241 ;; *************** function _EUSART1_is_rx_ready *****************
  3242 ;; Defined at:
  3243 ;;		line 83 in file "mcc_generated_files/eusart1.c"
  3244 ;; Parameters:    Size  Location     Type
  3245 ;;		None
  3246 ;; Auto vars:     Size  Location     Type
  3247 ;;		None
  3248 ;; Return value:  Size  Location     Type
  3249 ;;                  1    wreg      unsigned char 
  3250 ;; Registers used:
  3251 ;;		wreg
  3252 ;; Tracked objects:
  3253 ;;		On entry : 0/0
  3254 ;;		On exit  : 0/0
  3255 ;;		Unchanged: 0/0
  3256 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3257 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3258 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3259 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3260 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3261 ;;Total ram usage:        0 bytes
  3262 ;; Hardware stack levels used:    1
  3263 ;; Hardware stack levels required when called:    4
  3264 ;; This function calls:
  3265 ;;		Nothing
  3266 ;; This function is called by:
  3267 ;;		_main
  3268 ;;		_parseInt
  3269 ;; This function uses a non-reentrant model
  3270 ;;
  3271                           
  3272                           	psect	text10
  3273  000F78                     __ptext10:
  3274                           	opt stack 0
  3275  000F78                     _EUSART1_is_rx_ready:
  3276                           	opt stack 25
  3277                           
  3278                           ;eusart1.c: 85: return PIR1bits.RC1IF;
  3279                           
  3280                           ;incstack = 0
  3281  000F78  AA9E               	btfss	3998,5,c	;volatile
  3282  000F7A  D002               	goto	u940
  3283  000F7C  0E01               	movlw	1
  3284  000F7E  0012               	return	
  3285  000F80                     u940:
  3286  000F80  0E00               	movlw	0
  3287  000F82  0012               	return	
  3288  000F84                     __end_of_EUSART1_is_rx_ready:
  3289                           	opt stack 0
  3290                           tblptru	equ	0xFF8
  3291                           tblptrh	equ	0xFF7
  3292                           tblptrl	equ	0xFF6
  3293                           tablat	equ	0xFF5
  3294                           prodh	equ	0xFF4
  3295                           prodl	equ	0xFF3
  3296                           intcon	equ	0xFF2
  3297                           postinc0	equ	0xFEE
  3298                           wreg	equ	0xFE8
  3299                           postdec1	equ	0xFE5
  3300                           fsr1l	equ	0xFE1
  3301                           indf2	equ	0xFDF
  3302                           postinc2	equ	0xFDE
  3303                           postdec2	equ	0xFDD
  3304                           fsr2h	equ	0xFDA
  3305                           fsr2l	equ	0xFD9
  3306                           status	equ	0xFD8
  3307                           
  3308 ;; *************** function _EUSART1_Read *****************
  3309 ;; Defined at:
  3310 ;;		line 93 in file "mcc_generated_files/eusart1.c"
  3311 ;; Parameters:    Size  Location     Type
  3312 ;;		None
  3313 ;; Auto vars:     Size  Location     Type
  3314 ;;		None
  3315 ;; Return value:  Size  Location     Type
  3316 ;;                  1    wreg      unsigned char 
  3317 ;; Registers used:
  3318 ;;		wreg, status,2
  3319 ;; Tracked objects:
  3320 ;;		On entry : 0/0
  3321 ;;		On exit  : 0/0
  3322 ;;		Unchanged: 0/0
  3323 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3324 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3325 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3326 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3327 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3328 ;;Total ram usage:        0 bytes
  3329 ;; Hardware stack levels used:    1
  3330 ;; Hardware stack levels required when called:    4
  3331 ;; This function calls:
  3332 ;;		Nothing
  3333 ;; This function is called by:
  3334 ;;		_main
  3335 ;;		_parseInt
  3336 ;; This function uses a non-reentrant model
  3337 ;;
  3338                           
  3339                           	psect	text11
  3340  000F3E                     __ptext11:
  3341                           	opt stack 0
  3342  000F3E                     _EUSART1_Read:
  3343                           	opt stack 25
  3344                           
  3345                           ;eusart1.c: 96: {
  3346                           
  3347                           ;eusart1.c: 95: while(!PIR1bits.RC1IF)
  3348                           
  3349                           ;incstack = 0
  3350  000F3E  AA9E               	btfss	3998,5,c	;volatile
  3351  000F40  D7FE               	goto	_EUSART1_Read
  3352                           
  3353                           ;eusart1.c: 97: }
  3354                           ;eusart1.c: 100: if(1 == RCSTA1bits.OERR)
  3355  000F42  A2AB               	btfss	4011,1,c	;volatile
  3356  000F44  D002               	goto	l344
  3357                           
  3358                           ;eusart1.c: 101: {
  3359                           ;eusart1.c: 104: RCSTA1bits.CREN = 0;
  3360  000F46  98AB               	bcf	4011,4,c	;volatile
  3361                           
  3362                           ;eusart1.c: 105: RCSTA1bits.CREN = 1;
  3363  000F48  88AB               	bsf	4011,4,c	;volatile
  3364  000F4A                     l344:
  3365                           
  3366                           ;eusart1.c: 106: }
  3367                           ;eusart1.c: 108: return RCREG1;
  3368  000F4A  50AE               	movf	4014,w,c	;volatile
  3369  000F4C  0012               	return	
  3370  000F4E                     __end_of_EUSART1_Read:
  3371                           	opt stack 0
  3372                           tblptru	equ	0xFF8
  3373                           tblptrh	equ	0xFF7
  3374                           tblptrl	equ	0xFF6
  3375                           tablat	equ	0xFF5
  3376                           prodh	equ	0xFF4
  3377                           prodl	equ	0xFF3
  3378                           intcon	equ	0xFF2
  3379                           postinc0	equ	0xFEE
  3380                           wreg	equ	0xFE8
  3381                           postdec1	equ	0xFE5
  3382                           fsr1l	equ	0xFE1
  3383                           indf2	equ	0xFDF
  3384                           postinc2	equ	0xFDE
  3385                           postdec2	equ	0xFDD
  3386                           fsr2h	equ	0xFDA
  3387                           fsr2l	equ	0xFD9
  3388                           status	equ	0xFD8
  3389                           
  3390 ;; *************** function _SYSTEM_Initialize *****************
  3391 ;; Defined at:
  3392 ;;		line 50 in file "mcc_generated_files/mcc.c"
  3393 ;; Parameters:    Size  Location     Type
  3394 ;;		None
  3395 ;; Auto vars:     Size  Location     Type
  3396 ;;		None
  3397 ;; Return value:  Size  Location     Type
  3398 ;;                  1    wreg      void 
  3399 ;; Registers used:
  3400 ;;		wreg, status,2, status,0, cstack
  3401 ;; Tracked objects:
  3402 ;;		On entry : 0/0
  3403 ;;		On exit  : 0/0
  3404 ;;		Unchanged: 0/0
  3405 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3406 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3407 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3408 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3409 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3410 ;;Total ram usage:        0 bytes
  3411 ;; Hardware stack levels used:    1
  3412 ;; Hardware stack levels required when called:    6
  3413 ;; This function calls:
  3414 ;;		_CCP4_Initialize
  3415 ;;		_CCP5_Initialize
  3416 ;;		_EUSART1_Initialize
  3417 ;;		_EUSART2_Initialize
  3418 ;;		_INTERRUPT_Initialize
  3419 ;;		_OSCILLATOR_Initialize
  3420 ;;		_PIN_MANAGER_Initialize
  3421 ;;		_TMR0_Initialize
  3422 ;;		_TMR1_Initialize
  3423 ;;		_TMR2_Initialize
  3424 ;;		_TMR3_Initialize
  3425 ;;		_TMR5_Initialize
  3426 ;; This function is called by:
  3427 ;;		_main
  3428 ;; This function uses a non-reentrant model
  3429 ;;
  3430                           
  3431                           	psect	text12
  3432  000C54                     __ptext12:
  3433                           	opt stack 0
  3434  000C54                     _SYSTEM_Initialize:
  3435                           	opt stack 24
  3436                           
  3437                           ;mcc.c: 53: INTERRUPT_Initialize();
  3438                           
  3439                           ;incstack = 0
  3440  000C54  ECEA  F007         	call	_INTERRUPT_Initialize	;wreg free
  3441                           
  3442                           ;mcc.c: 54: PIN_MANAGER_Initialize();
  3443  000C58  EC73  F006         	call	_PIN_MANAGER_Initialize	;wreg free
  3444                           
  3445                           ;mcc.c: 55: OSCILLATOR_Initialize();
  3446  000C5C  EC96  F007         	call	_OSCILLATOR_Initialize	;wreg free
  3447                           
  3448                           ;mcc.c: 56: CCP5_Initialize();
  3449  000C60  EC3E  F007         	call	_CCP5_Initialize	;wreg free
  3450                           
  3451                           ;mcc.c: 57: CCP4_Initialize();
  3452  000C64  EC4C  F007         	call	_CCP4_Initialize	;wreg free
  3453                           
  3454                           ;mcc.c: 58: TMR3_Initialize();
  3455  000C68  EC22  F007         	call	_TMR3_Initialize	;wreg free
  3456                           
  3457                           ;mcc.c: 59: TMR5_Initialize();
  3458  000C6C  EC5C  F006         	call	_TMR5_Initialize	;wreg free
  3459                           
  3460                           ;mcc.c: 60: TMR2_Initialize();
  3461  000C70  EC30  F007         	call	_TMR2_Initialize	;wreg free
  3462                           
  3463                           ;mcc.c: 61: TMR1_Initialize();
  3464  000C74  ECB6  F006         	call	_TMR1_Initialize	;wreg free
  3465                           
  3466                           ;mcc.c: 62: TMR0_Initialize();
  3467  000C78  ECC5  F005         	call	_TMR0_Initialize	;wreg free
  3468                           
  3469                           ;mcc.c: 63: EUSART1_Initialize();
  3470  000C7C  EC8B  F007         	call	_EUSART1_Initialize	;wreg free
  3471                           
  3472                           ;mcc.c: 64: EUSART2_Initialize();
  3473  000C80  EC80  F007         	call	_EUSART2_Initialize	;wreg free
  3474  000C84  0012               	return		;funcret
  3475  000C86                     __end_of_SYSTEM_Initialize:
  3476                           	opt stack 0
  3477                           tblptru	equ	0xFF8
  3478                           tblptrh	equ	0xFF7
  3479                           tblptrl	equ	0xFF6
  3480                           tablat	equ	0xFF5
  3481                           prodh	equ	0xFF4
  3482                           prodl	equ	0xFF3
  3483                           intcon	equ	0xFF2
  3484                           postinc0	equ	0xFEE
  3485                           wreg	equ	0xFE8
  3486                           postdec1	equ	0xFE5
  3487                           fsr1l	equ	0xFE1
  3488                           indf2	equ	0xFDF
  3489                           postinc2	equ	0xFDE
  3490                           postdec2	equ	0xFDD
  3491                           fsr2h	equ	0xFDA
  3492                           fsr2l	equ	0xFD9
  3493                           status	equ	0xFD8
  3494                           
  3495 ;; *************** function _TMR5_Initialize *****************
  3496 ;; Defined at:
  3497 ;;		line 64 in file "mcc_generated_files/tmr5.c"
  3498 ;; Parameters:    Size  Location     Type
  3499 ;;		None
  3500 ;; Auto vars:     Size  Location     Type
  3501 ;;		None
  3502 ;; Return value:  Size  Location     Type
  3503 ;;                  1    wreg      void 
  3504 ;; Registers used:
  3505 ;;		wreg, status,2, status,0, cstack
  3506 ;; Tracked objects:
  3507 ;;		On entry : 0/0
  3508 ;;		On exit  : 0/0
  3509 ;;		Unchanged: 0/0
  3510 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3511 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3512 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3513 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3514 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3515 ;;Total ram usage:        0 bytes
  3516 ;; Hardware stack levels used:    1
  3517 ;; Hardware stack levels required when called:    5
  3518 ;; This function calls:
  3519 ;;		_TMR5_SetInterruptHandler
  3520 ;; This function is called by:
  3521 ;;		_SYSTEM_Initialize
  3522 ;; This function uses a non-reentrant model
  3523 ;;
  3524                           
  3525                           	psect	text13
  3526  000CB8                     __ptext13:
  3527                           	opt stack 0
  3528  000CB8                     _TMR5_Initialize:
  3529                           	opt stack 24
  3530                           
  3531                           ;tmr5.c: 69: T5GCON = 0x00;
  3532                           
  3533                           ;incstack = 0
  3534  000CB8  0E00               	movlw	0
  3535  000CBA  010F               	movlb	15	; () banked
  3536  000CBC  6F4D               	movwf	77,b	;volatile
  3537                           
  3538                           ;tmr5.c: 72: TMR5H = 0xE0;
  3539  000CBE  0EE0               	movlw	224
  3540  000CC0  6F50               	movwf	80,b	;volatile
  3541                           
  3542                           ;tmr5.c: 75: TMR5L = 0x00;
  3543  000CC2  0E00               	movlw	0
  3544  000CC4  6F4F               	movwf	79,b	;volatile
  3545                           
  3546                           ; BSR set to: 15
  3547                           ;tmr5.c: 78: timer5ReloadVal=TMR5;
  3548  000CC6  CF4F F031          	movff	3919,_timer5ReloadVal	;volatile
  3549  000CCA  CF50 F032          	movff	3920,_timer5ReloadVal+1	;volatile
  3550                           
  3551                           ; BSR set to: 15
  3552                           ;tmr5.c: 81: PIR5bits.TMR5IF = 0;
  3553  000CCE  927E               	bcf	3966,1,c	;volatile
  3554                           
  3555                           ; BSR set to: 15
  3556                           ;tmr5.c: 84: PIE5bits.TMR5IE = 1;
  3557  000CD0  827D               	bsf	3965,1,c	;volatile
  3558                           
  3559                           ; BSR set to: 15
  3560                           ;tmr5.c: 87: TMR5_SetInterruptHandler(TMR5_DefaultInterruptHandler);
  3561  000CD2  0EC4               	movlw	low _TMR5_DefaultInterruptHandler
  3562  000CD4  6E1D               	movwf	TMR5_SetInterruptHandler@InterruptHandler,c
  3563  000CD6  0E0A               	movlw	high _TMR5_DefaultInterruptHandler
  3564  000CD8  6E1E               	movwf	TMR5_SetInterruptHandler@InterruptHandler+1,c
  3565  000CDA  ECCD  F007         	call	_TMR5_SetInterruptHandler	;wreg free
  3566                           
  3567                           ;tmr5.c: 90: T5CON = 0x31;
  3568  000CDE  0E31               	movlw	49
  3569  000CE0  010F               	movlb	15	; () banked
  3570  000CE2  6F4E               	movwf	78,b	;volatile
  3571                           
  3572                           ; BSR set to: 15
  3573  000CE4  0012               	return		;funcret
  3574  000CE6                     __end_of_TMR5_Initialize:
  3575                           	opt stack 0
  3576                           tblptru	equ	0xFF8
  3577                           tblptrh	equ	0xFF7
  3578                           tblptrl	equ	0xFF6
  3579                           tablat	equ	0xFF5
  3580                           prodh	equ	0xFF4
  3581                           prodl	equ	0xFF3
  3582                           intcon	equ	0xFF2
  3583                           postinc0	equ	0xFEE
  3584                           wreg	equ	0xFE8
  3585                           postdec1	equ	0xFE5
  3586                           fsr1l	equ	0xFE1
  3587                           indf2	equ	0xFDF
  3588                           postinc2	equ	0xFDE
  3589                           postdec2	equ	0xFDD
  3590                           fsr2h	equ	0xFDA
  3591                           fsr2l	equ	0xFD9
  3592                           status	equ	0xFD8
  3593                           
  3594 ;; *************** function _TMR5_SetInterruptHandler *****************
  3595 ;; Defined at:
  3596 ;;		line 172 in file "mcc_generated_files/tmr5.c"
  3597 ;; Parameters:    Size  Location     Type
  3598 ;;  InterruptHan    2   28[COMRAM] PTR FTN()void 
  3599 ;;		 -> TMR5_DefaultInterruptHandler(1), 
  3600 ;; Auto vars:     Size  Location     Type
  3601 ;;		None
  3602 ;; Return value:  Size  Location     Type
  3603 ;;                  1    wreg      void 
  3604 ;; Registers used:
  3605 ;;		wreg, status,2, status,0
  3606 ;; Tracked objects:
  3607 ;;		On entry : 0/0
  3608 ;;		On exit  : 0/0
  3609 ;;		Unchanged: 0/0
  3610 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3611 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3612 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3613 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3614 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3615 ;;Total ram usage:        2 bytes
  3616 ;; Hardware stack levels used:    1
  3617 ;; Hardware stack levels required when called:    4
  3618 ;; This function calls:
  3619 ;;		Nothing
  3620 ;; This function is called by:
  3621 ;;		_TMR5_Initialize
  3622 ;; This function uses a non-reentrant model
  3623 ;;
  3624                           
  3625                           	psect	text14
  3626  000F9A                     __ptext14:
  3627                           	opt stack 0
  3628  000F9A                     _TMR5_SetInterruptHandler:
  3629                           	opt stack 24
  3630                           
  3631                           ;tmr5.c: 173: TMR5_InterruptHandler = InterruptHandler;
  3632                           
  3633                           ; BSR set to: 15
  3634                           ;incstack = 0
  3635  000F9A  C01D  F02F         	movff	TMR5_SetInterruptHandler@InterruptHandler,_TMR5_InterruptHandler
  3636  000F9E  C01E  F030         	movff	TMR5_SetInterruptHandler@InterruptHandler+1,_TMR5_InterruptHandler+1
  3637  000FA2  0012               	return		;funcret
  3638  000FA4                     __end_of_TMR5_SetInterruptHandler:
  3639                           	opt stack 0
  3640                           tblptru	equ	0xFF8
  3641                           tblptrh	equ	0xFF7
  3642                           tblptrl	equ	0xFF6
  3643                           tablat	equ	0xFF5
  3644                           prodh	equ	0xFF4
  3645                           prodl	equ	0xFF3
  3646                           intcon	equ	0xFF2
  3647                           postinc0	equ	0xFEE
  3648                           wreg	equ	0xFE8
  3649                           postdec1	equ	0xFE5
  3650                           fsr1l	equ	0xFE1
  3651                           indf2	equ	0xFDF
  3652                           postinc2	equ	0xFDE
  3653                           postdec2	equ	0xFDD
  3654                           fsr2h	equ	0xFDA
  3655                           fsr2l	equ	0xFD9
  3656                           status	equ	0xFD8
  3657                           
  3658 ;; *************** function _TMR3_Initialize *****************
  3659 ;; Defined at:
  3660 ;;		line 63 in file "mcc_generated_files/tmr3.c"
  3661 ;; Parameters:    Size  Location     Type
  3662 ;;		None
  3663 ;; Auto vars:     Size  Location     Type
  3664 ;;		None
  3665 ;; Return value:  Size  Location     Type
  3666 ;;                  1    wreg      void 
  3667 ;; Registers used:
  3668 ;;		wreg, status,2
  3669 ;; Tracked objects:
  3670 ;;		On entry : 0/0
  3671 ;;		On exit  : 0/0
  3672 ;;		Unchanged: 0/0
  3673 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3674 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3675 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3676 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3677 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3678 ;;Total ram usage:        0 bytes
  3679 ;; Hardware stack levels used:    1
  3680 ;; Hardware stack levels required when called:    4
  3681 ;; This function calls:
  3682 ;;		Nothing
  3683 ;; This function is called by:
  3684 ;;		_SYSTEM_Initialize
  3685 ;; This function uses a non-reentrant model
  3686 ;;
  3687                           
  3688                           	psect	text15
  3689  000E44                     __ptext15:
  3690                           	opt stack 0
  3691  000E44                     _TMR3_Initialize:
  3692                           	opt stack 25
  3693                           
  3694                           ;tmr3.c: 68: T3GCON = 0x00;
  3695                           
  3696                           ;incstack = 0
  3697  000E44  0E00               	movlw	0
  3698  000E46  6EB4               	movwf	4020,c	;volatile
  3699                           
  3700                           ;tmr3.c: 71: TMR3H = 0x00;
  3701  000E48  0E00               	movlw	0
  3702  000E4A  6EB3               	movwf	4019,c	;volatile
  3703                           
  3704                           ;tmr3.c: 74: TMR3L = 0x00;
  3705  000E4C  0E00               	movlw	0
  3706  000E4E  6EB2               	movwf	4018,c	;volatile
  3707                           
  3708                           ;tmr3.c: 77: timer3ReloadVal=TMR3;
  3709  000E50  CFB2 F037          	movff	4018,_timer3ReloadVal	;volatile
  3710  000E54  CFB3 F038          	movff	4019,_timer3ReloadVal+1	;volatile
  3711                           
  3712                           ;tmr3.c: 80: PIR2bits.TMR3IF = 0;
  3713  000E58  92A1               	bcf	4001,1,c	;volatile
  3714                           
  3715                           ;tmr3.c: 83: T3CON = 0x01;
  3716  000E5A  0E01               	movlw	1
  3717  000E5C  6EB1               	movwf	4017,c	;volatile
  3718  000E5E  0012               	return		;funcret
  3719  000E60                     __end_of_TMR3_Initialize:
  3720                           	opt stack 0
  3721                           tblptru	equ	0xFF8
  3722                           tblptrh	equ	0xFF7
  3723                           tblptrl	equ	0xFF6
  3724                           tablat	equ	0xFF5
  3725                           prodh	equ	0xFF4
  3726                           prodl	equ	0xFF3
  3727                           intcon	equ	0xFF2
  3728                           postinc0	equ	0xFEE
  3729                           wreg	equ	0xFE8
  3730                           postdec1	equ	0xFE5
  3731                           fsr1l	equ	0xFE1
  3732                           indf2	equ	0xFDF
  3733                           postinc2	equ	0xFDE
  3734                           postdec2	equ	0xFDD
  3735                           fsr2h	equ	0xFDA
  3736                           fsr2l	equ	0xFD9
  3737                           status	equ	0xFD8
  3738                           
  3739 ;; *************** function _TMR2_Initialize *****************
  3740 ;; Defined at:
  3741 ;;		line 64 in file "mcc_generated_files/tmr2.c"
  3742 ;; Parameters:    Size  Location     Type
  3743 ;;		None
  3744 ;; Auto vars:     Size  Location     Type
  3745 ;;		None
  3746 ;; Return value:  Size  Location     Type
  3747 ;;                  1    wreg      void 
  3748 ;; Registers used:
  3749 ;;		wreg, status,2, status,0, cstack
  3750 ;; Tracked objects:
  3751 ;;		On entry : 0/0
  3752 ;;		On exit  : 0/0
  3753 ;;		Unchanged: 0/0
  3754 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3755 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3756 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3757 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3758 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3759 ;;Total ram usage:        0 bytes
  3760 ;; Hardware stack levels used:    1
  3761 ;; Hardware stack levels required when called:    5
  3762 ;; This function calls:
  3763 ;;		_TMR2_SetInterruptHandler
  3764 ;; This function is called by:
  3765 ;;		_SYSTEM_Initialize
  3766 ;; This function uses a non-reentrant model
  3767 ;;
  3768                           
  3769                           	psect	text16
  3770  000E60                     __ptext16:
  3771                           	opt stack 0
  3772  000E60                     _TMR2_Initialize:
  3773                           	opt stack 24
  3774                           
  3775                           ;tmr2.c: 69: PR2 = 0xFF;
  3776                           
  3777                           ;incstack = 0
  3778  000E60  68BB               	setf	4027,c	;volatile
  3779                           
  3780                           ;tmr2.c: 72: TMR2 = 0x00;
  3781  000E62  0E00               	movlw	0
  3782  000E64  6EBC               	movwf	4028,c	;volatile
  3783                           
  3784                           ;tmr2.c: 75: PIR1bits.TMR2IF = 0;
  3785  000E66  929E               	bcf	3998,1,c	;volatile
  3786                           
  3787                           ;tmr2.c: 78: PIE1bits.TMR2IE = 1;
  3788  000E68  829D               	bsf	3997,1,c	;volatile
  3789                           
  3790                           ;tmr2.c: 81: TMR2_SetInterruptHandler(TMR2_DefaultInterruptHandler);
  3791  000E6A  0EE6               	movlw	low _TMR2_DefaultInterruptHandler
  3792  000E6C  6E1D               	movwf	TMR2_SetInterruptHandler@InterruptHandler,c
  3793  000E6E  0E07               	movlw	high _TMR2_DefaultInterruptHandler
  3794  000E70  6E1E               	movwf	TMR2_SetInterruptHandler@InterruptHandler+1,c
  3795  000E72  ECD2  F007         	call	_TMR2_SetInterruptHandler	;wreg free
  3796                           
  3797                           ;tmr2.c: 84: T2CON = 0x06;
  3798  000E76  0E06               	movlw	6
  3799  000E78  6EBA               	movwf	4026,c	;volatile
  3800  000E7A  0012               	return		;funcret
  3801  000E7C                     __end_of_TMR2_Initialize:
  3802                           	opt stack 0
  3803                           tblptru	equ	0xFF8
  3804                           tblptrh	equ	0xFF7
  3805                           tblptrl	equ	0xFF6
  3806                           tablat	equ	0xFF5
  3807                           prodh	equ	0xFF4
  3808                           prodl	equ	0xFF3
  3809                           intcon	equ	0xFF2
  3810                           postinc0	equ	0xFEE
  3811                           wreg	equ	0xFE8
  3812                           postdec1	equ	0xFE5
  3813                           fsr1l	equ	0xFE1
  3814                           indf2	equ	0xFDF
  3815                           postinc2	equ	0xFDE
  3816                           postdec2	equ	0xFDD
  3817                           fsr2h	equ	0xFDA
  3818                           fsr2l	equ	0xFD9
  3819                           status	equ	0xFD8
  3820                           
  3821 ;; *************** function _TMR2_SetInterruptHandler *****************
  3822 ;; Defined at:
  3823 ;;		line 132 in file "mcc_generated_files/tmr2.c"
  3824 ;; Parameters:    Size  Location     Type
  3825 ;;  InterruptHan    2   28[COMRAM] PTR FTN()void 
  3826 ;;		 -> TMR2_DefaultInterruptHandler(1), 
  3827 ;; Auto vars:     Size  Location     Type
  3828 ;;		None
  3829 ;; Return value:  Size  Location     Type
  3830 ;;                  1    wreg      void 
  3831 ;; Registers used:
  3832 ;;		wreg, status,2, status,0
  3833 ;; Tracked objects:
  3834 ;;		On entry : 0/0
  3835 ;;		On exit  : 0/0
  3836 ;;		Unchanged: 0/0
  3837 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3838 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3839 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3840 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3841 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3842 ;;Total ram usage:        2 bytes
  3843 ;; Hardware stack levels used:    1
  3844 ;; Hardware stack levels required when called:    4
  3845 ;; This function calls:
  3846 ;;		Nothing
  3847 ;; This function is called by:
  3848 ;;		_TMR2_Initialize
  3849 ;; This function uses a non-reentrant model
  3850 ;;
  3851                           
  3852                           	psect	text17
  3853  000FA4                     __ptext17:
  3854                           	opt stack 0
  3855  000FA4                     _TMR2_SetInterruptHandler:
  3856                           	opt stack 24
  3857                           
  3858                           ;tmr2.c: 133: TMR2_InterruptHandler = InterruptHandler;
  3859                           
  3860                           ;incstack = 0
  3861  000FA4  C01D  F02D         	movff	TMR2_SetInterruptHandler@InterruptHandler,_TMR2_InterruptHandler
  3862  000FA8  C01E  F02E         	movff	TMR2_SetInterruptHandler@InterruptHandler+1,_TMR2_InterruptHandler+1
  3863  000FAC  0012               	return		;funcret
  3864  000FAE                     __end_of_TMR2_SetInterruptHandler:
  3865                           	opt stack 0
  3866                           tblptru	equ	0xFF8
  3867                           tblptrh	equ	0xFF7
  3868                           tblptrl	equ	0xFF6
  3869                           tablat	equ	0xFF5
  3870                           prodh	equ	0xFF4
  3871                           prodl	equ	0xFF3
  3872                           intcon	equ	0xFF2
  3873                           postinc0	equ	0xFEE
  3874                           wreg	equ	0xFE8
  3875                           postdec1	equ	0xFE5
  3876                           fsr1l	equ	0xFE1
  3877                           indf2	equ	0xFDF
  3878                           postinc2	equ	0xFDE
  3879                           postdec2	equ	0xFDD
  3880                           fsr2h	equ	0xFDA
  3881                           fsr2l	equ	0xFD9
  3882                           status	equ	0xFD8
  3883                           
  3884 ;; *************** function _TMR1_Initialize *****************
  3885 ;; Defined at:
  3886 ;;		line 64 in file "mcc_generated_files/tmr1.c"
  3887 ;; Parameters:    Size  Location     Type
  3888 ;;		None
  3889 ;; Auto vars:     Size  Location     Type
  3890 ;;		None
  3891 ;; Return value:  Size  Location     Type
  3892 ;;                  1    wreg      void 
  3893 ;; Registers used:
  3894 ;;		wreg, status,2, status,0, cstack
  3895 ;; Tracked objects:
  3896 ;;		On entry : 0/0
  3897 ;;		On exit  : 0/0
  3898 ;;		Unchanged: 0/0
  3899 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3900 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3901 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3902 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3903 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3904 ;;Total ram usage:        0 bytes
  3905 ;; Hardware stack levels used:    1
  3906 ;; Hardware stack levels required when called:    5
  3907 ;; This function calls:
  3908 ;;		_TMR1_SetInterruptHandler
  3909 ;; This function is called by:
  3910 ;;		_SYSTEM_Initialize
  3911 ;; This function uses a non-reentrant model
  3912 ;;
  3913                           
  3914                           	psect	text18
  3915  000D6C                     __ptext18:
  3916                           	opt stack 0
  3917  000D6C                     _TMR1_Initialize:
  3918                           	opt stack 24
  3919                           
  3920                           ;tmr1.c: 69: T1GCON = 0x00;
  3921                           
  3922                           ;incstack = 0
  3923  000D6C  0E00               	movlw	0
  3924  000D6E  6ECC               	movwf	4044,c	;volatile
  3925                           
  3926                           ;tmr1.c: 72: TMR1H = 0x63;
  3927  000D70  0E63               	movlw	99
  3928  000D72  6ECF               	movwf	4047,c	;volatile
  3929                           
  3930                           ;tmr1.c: 75: TMR1L = 0xC0;
  3931  000D74  0EC0               	movlw	192
  3932  000D76  6ECE               	movwf	4046,c	;volatile
  3933                           
  3934                           ;tmr1.c: 78: timer1ReloadVal=TMR1;
  3935  000D78  CFCE F035          	movff	4046,_timer1ReloadVal	;volatile
  3936  000D7C  CFCF F036          	movff	4047,_timer1ReloadVal+1	;volatile
  3937                           
  3938                           ;tmr1.c: 81: PIR1bits.TMR1IF = 0;
  3939  000D80  909E               	bcf	3998,0,c	;volatile
  3940                           
  3941                           ;tmr1.c: 84: PIE1bits.TMR1IE = 1;
  3942  000D82  809D               	bsf	3997,0,c	;volatile
  3943                           
  3944                           ;tmr1.c: 87: TMR1_SetInterruptHandler(TMR1_DefaultInterruptHandler);
  3945  000D84  0E06               	movlw	low _TMR1_DefaultInterruptHandler
  3946  000D86  6E1D               	movwf	TMR1_SetInterruptHandler@InterruptHandler,c
  3947  000D88  0E0B               	movlw	high _TMR1_DefaultInterruptHandler
  3948  000D8A  6E1E               	movwf	TMR1_SetInterruptHandler@InterruptHandler+1,c
  3949  000D8C  ECD7  F007         	call	_TMR1_SetInterruptHandler	;wreg free
  3950                           
  3951                           ;tmr1.c: 90: T1CON = 0x31;
  3952  000D90  0E31               	movlw	49
  3953  000D92  6ECD               	movwf	4045,c	;volatile
  3954  000D94  0012               	return		;funcret
  3955  000D96                     __end_of_TMR1_Initialize:
  3956                           	opt stack 0
  3957                           tblptru	equ	0xFF8
  3958                           tblptrh	equ	0xFF7
  3959                           tblptrl	equ	0xFF6
  3960                           tablat	equ	0xFF5
  3961                           prodh	equ	0xFF4
  3962                           prodl	equ	0xFF3
  3963                           intcon	equ	0xFF2
  3964                           postinc0	equ	0xFEE
  3965                           wreg	equ	0xFE8
  3966                           postdec1	equ	0xFE5
  3967                           fsr1l	equ	0xFE1
  3968                           indf2	equ	0xFDF
  3969                           postinc2	equ	0xFDE
  3970                           postdec2	equ	0xFDD
  3971                           fsr2h	equ	0xFDA
  3972                           fsr2l	equ	0xFD9
  3973                           status	equ	0xFD8
  3974                           
  3975 ;; *************** function _TMR1_SetInterruptHandler *****************
  3976 ;; Defined at:
  3977 ;;		line 172 in file "mcc_generated_files/tmr1.c"
  3978 ;; Parameters:    Size  Location     Type
  3979 ;;  InterruptHan    2   28[COMRAM] PTR FTN()void 
  3980 ;;		 -> TMR1_DefaultInterruptHandler(1), 
  3981 ;; Auto vars:     Size  Location     Type
  3982 ;;		None
  3983 ;; Return value:  Size  Location     Type
  3984 ;;                  1    wreg      void 
  3985 ;; Registers used:
  3986 ;;		wreg, status,2, status,0
  3987 ;; Tracked objects:
  3988 ;;		On entry : 0/0
  3989 ;;		On exit  : 0/0
  3990 ;;		Unchanged: 0/0
  3991 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3992 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3993 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3994 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3995 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3996 ;;Total ram usage:        2 bytes
  3997 ;; Hardware stack levels used:    1
  3998 ;; Hardware stack levels required when called:    4
  3999 ;; This function calls:
  4000 ;;		Nothing
  4001 ;; This function is called by:
  4002 ;;		_TMR1_Initialize
  4003 ;; This function uses a non-reentrant model
  4004 ;;
  4005                           
  4006                           	psect	text19
  4007  000FAE                     __ptext19:
  4008                           	opt stack 0
  4009  000FAE                     _TMR1_SetInterruptHandler:
  4010                           	opt stack 24
  4011                           
  4012                           ;tmr1.c: 173: TMR1_InterruptHandler = InterruptHandler;
  4013                           
  4014                           ;incstack = 0
  4015  000FAE  C01D  F033         	movff	TMR1_SetInterruptHandler@InterruptHandler,_TMR1_InterruptHandler
  4016  000FB2  C01E  F034         	movff	TMR1_SetInterruptHandler@InterruptHandler+1,_TMR1_InterruptHandler+1
  4017  000FB6  0012               	return		;funcret
  4018  000FB8                     __end_of_TMR1_SetInterruptHandler:
  4019                           	opt stack 0
  4020                           tblptru	equ	0xFF8
  4021                           tblptrh	equ	0xFF7
  4022                           tblptrl	equ	0xFF6
  4023                           tablat	equ	0xFF5
  4024                           prodh	equ	0xFF4
  4025                           prodl	equ	0xFF3
  4026                           intcon	equ	0xFF2
  4027                           postinc0	equ	0xFEE
  4028                           wreg	equ	0xFE8
  4029                           postdec1	equ	0xFE5
  4030                           fsr1l	equ	0xFE1
  4031                           indf2	equ	0xFDF
  4032                           postinc2	equ	0xFDE
  4033                           postdec2	equ	0xFDD
  4034                           fsr2h	equ	0xFDA
  4035                           fsr2l	equ	0xFD9
  4036                           status	equ	0xFD8
  4037                           
  4038 ;; *************** function _TMR0_Initialize *****************
  4039 ;; Defined at:
  4040 ;;		line 67 in file "mcc_generated_files/tmr0.c"
  4041 ;; Parameters:    Size  Location     Type
  4042 ;;		None
  4043 ;; Auto vars:     Size  Location     Type
  4044 ;;		None
  4045 ;; Return value:  Size  Location     Type
  4046 ;;                  1    wreg      void 
  4047 ;; Registers used:
  4048 ;;		wreg, status,2, status,0, cstack
  4049 ;; Tracked objects:
  4050 ;;		On entry : 0/0
  4051 ;;		On exit  : 0/0
  4052 ;;		Unchanged: 0/0
  4053 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4054 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4055 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4056 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4057 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4058 ;;Total ram usage:        2 bytes
  4059 ;; Hardware stack levels used:    1
  4060 ;; Hardware stack levels required when called:    5
  4061 ;; This function calls:
  4062 ;;		_TMR0_SetInterruptHandler
  4063 ;; This function is called by:
  4064 ;;		_SYSTEM_Initialize
  4065 ;; This function uses a non-reentrant model
  4066 ;;
  4067                           
  4068                           	psect	text20
  4069  000B8A                     __ptext20:
  4070                           	opt stack 0
  4071  000B8A                     _TMR0_Initialize:
  4072                           	opt stack 24
  4073                           
  4074                           ;tmr0.c: 72: T0CONbits.T08BIT = 0;
  4075                           
  4076                           ;incstack = 0
  4077  000B8A  9CD5               	bcf	4053,6,c	;volatile
  4078                           
  4079                           ;tmr0.c: 75: TMR0H = 0xFF;
  4080  000B8C  68D7               	setf	4055,c	;volatile
  4081                           
  4082                           ;tmr0.c: 78: TMR0L = 0xFE;
  4083  000B8E  0EFE               	movlw	254
  4084  000B90  6ED6               	movwf	4054,c	;volatile
  4085                           
  4086                           ;tmr0.c: 82: timer0ReloadVal = (uint16_t)((TMR0H << 8) | TMR0L);
  4087  000B92  50D6               	movf	4054,w,c	;volatile
  4088  000B94  CFD7 F01F          	movff	4055,??_TMR0_Initialize	;volatile
  4089  000B98  6A20               	clrf	(??_TMR0_Initialize+1)& (0+255),c
  4090  000B9A  C01F  F020         	movff	??_TMR0_Initialize,??_TMR0_Initialize+1
  4091  000B9E  6A1F               	clrf	??_TMR0_Initialize,c
  4092  000BA0  101F               	iorwf	??_TMR0_Initialize,w,c
  4093  000BA2  6E39               	movwf	_timer0ReloadVal,c	;volatile
  4094  000BA4  5020               	movf	??_TMR0_Initialize+1,w,c
  4095  000BA6  6E3A               	movwf	_timer0ReloadVal+1,c	;volatile
  4096                           
  4097                           ;tmr0.c: 85: INTCONbits.TMR0IF = 0;
  4098  000BA8  94F2               	bcf	intcon,2,c	;volatile
  4099                           
  4100                           ;tmr0.c: 88: INTCONbits.TMR0IE = 1;
  4101  000BAA  8AF2               	bsf	intcon,5,c	;volatile
  4102                           
  4103                           ;tmr0.c: 91: TMR0_SetInterruptHandler(TMR0_DefaultInterruptHandler);
  4104  000BAC  0E48               	movlw	low _TMR0_DefaultInterruptHandler
  4105  000BAE  6E1D               	movwf	TMR0_SetInterruptHandler@InterruptHandler,c
  4106  000BB0  0E0B               	movlw	high _TMR0_DefaultInterruptHandler
  4107  000BB2  6E1E               	movwf	TMR0_SetInterruptHandler@InterruptHandler+1,c
  4108  000BB4  ECDC  F007         	call	_TMR0_SetInterruptHandler	;wreg free
  4109                           
  4110                           ;tmr0.c: 94: T0CON = 0x92;
  4111  000BB8  0E92               	movlw	146
  4112  000BBA  6ED5               	movwf	4053,c	;volatile
  4113  000BBC  0012               	return		;funcret
  4114  000BBE                     __end_of_TMR0_Initialize:
  4115                           	opt stack 0
  4116                           tblptru	equ	0xFF8
  4117                           tblptrh	equ	0xFF7
  4118                           tblptrl	equ	0xFF6
  4119                           tablat	equ	0xFF5
  4120                           prodh	equ	0xFF4
  4121                           prodl	equ	0xFF3
  4122                           intcon	equ	0xFF2
  4123                           postinc0	equ	0xFEE
  4124                           wreg	equ	0xFE8
  4125                           postdec1	equ	0xFE5
  4126                           fsr1l	equ	0xFE1
  4127                           indf2	equ	0xFDF
  4128                           postinc2	equ	0xFDE
  4129                           postdec2	equ	0xFDD
  4130                           fsr2h	equ	0xFDA
  4131                           fsr2l	equ	0xFD9
  4132                           status	equ	0xFD8
  4133                           
  4134 ;; *************** function _TMR0_SetInterruptHandler *****************
  4135 ;; Defined at:
  4136 ;;		line 156 in file "mcc_generated_files/tmr0.c"
  4137 ;; Parameters:    Size  Location     Type
  4138 ;;  InterruptHan    2   28[COMRAM] PTR FTN()void 
  4139 ;;		 -> TMR0_DefaultInterruptHandler(1), 
  4140 ;; Auto vars:     Size  Location     Type
  4141 ;;		None
  4142 ;; Return value:  Size  Location     Type
  4143 ;;                  1    wreg      void 
  4144 ;; Registers used:
  4145 ;;		wreg, status,2, status,0
  4146 ;; Tracked objects:
  4147 ;;		On entry : 0/0
  4148 ;;		On exit  : 0/0
  4149 ;;		Unchanged: 0/0
  4150 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4151 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4152 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4153 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4154 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4155 ;;Total ram usage:        2 bytes
  4156 ;; Hardware stack levels used:    1
  4157 ;; Hardware stack levels required when called:    4
  4158 ;; This function calls:
  4159 ;;		Nothing
  4160 ;; This function is called by:
  4161 ;;		_TMR0_Initialize
  4162 ;; This function uses a non-reentrant model
  4163 ;;
  4164                           
  4165                           	psect	text21
  4166  000FB8                     __ptext21:
  4167                           	opt stack 0
  4168  000FB8                     _TMR0_SetInterruptHandler:
  4169                           	opt stack 24
  4170                           
  4171                           ;tmr0.c: 157: TMR0_InterruptHandler = InterruptHandler;
  4172                           
  4173                           ;incstack = 0
  4174  000FB8  C01D  F03B         	movff	TMR0_SetInterruptHandler@InterruptHandler,_TMR0_InterruptHandler
  4175  000FBC  C01E  F03C         	movff	TMR0_SetInterruptHandler@InterruptHandler+1,_TMR0_InterruptHandler+1
  4176  000FC0  0012               	return		;funcret
  4177  000FC2                     __end_of_TMR0_SetInterruptHandler:
  4178                           	opt stack 0
  4179                           tblptru	equ	0xFF8
  4180                           tblptrh	equ	0xFF7
  4181                           tblptrl	equ	0xFF6
  4182                           tablat	equ	0xFF5
  4183                           prodh	equ	0xFF4
  4184                           prodl	equ	0xFF3
  4185                           intcon	equ	0xFF2
  4186                           postinc0	equ	0xFEE
  4187                           wreg	equ	0xFE8
  4188                           postdec1	equ	0xFE5
  4189                           fsr1l	equ	0xFE1
  4190                           indf2	equ	0xFDF
  4191                           postinc2	equ	0xFDE
  4192                           postdec2	equ	0xFDD
  4193                           fsr2h	equ	0xFDA
  4194                           fsr2l	equ	0xFD9
  4195                           status	equ	0xFD8
  4196                           
  4197 ;; *************** function _PIN_MANAGER_Initialize *****************
  4198 ;; Defined at:
  4199 ;;		line 57 in file "mcc_generated_files/pin_manager.c"
  4200 ;; Parameters:    Size  Location     Type
  4201 ;;		None
  4202 ;; Auto vars:     Size  Location     Type
  4203 ;;		None
  4204 ;; Return value:  Size  Location     Type
  4205 ;;                  1    wreg      void 
  4206 ;; Registers used:
  4207 ;;		wreg, status,2
  4208 ;; Tracked objects:
  4209 ;;		On entry : 0/0
  4210 ;;		On exit  : 0/0
  4211 ;;		Unchanged: 0/0
  4212 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4213 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4214 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4215 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4216 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4217 ;;Total ram usage:        0 bytes
  4218 ;; Hardware stack levels used:    1
  4219 ;; Hardware stack levels required when called:    4
  4220 ;; This function calls:
  4221 ;;		Nothing
  4222 ;; This function is called by:
  4223 ;;		_SYSTEM_Initialize
  4224 ;; This function uses a non-reentrant model
  4225 ;;
  4226                           
  4227                           	psect	text22
  4228  000CE6                     __ptext22:
  4229                           	opt stack 0
  4230  000CE6                     _PIN_MANAGER_Initialize:
  4231                           	opt stack 25
  4232                           
  4233                           ;pin_manager.c: 62: LATA = 0x00;
  4234                           
  4235                           ;incstack = 0
  4236  000CE6  0E00               	movlw	0
  4237  000CE8  6E89               	movwf	3977,c	;volatile
  4238                           
  4239                           ;pin_manager.c: 63: LATB = 0x00;
  4240  000CEA  0E00               	movlw	0
  4241  000CEC  6E8A               	movwf	3978,c	;volatile
  4242                           
  4243                           ;pin_manager.c: 64: LATC = 0x00;
  4244  000CEE  0E00               	movlw	0
  4245  000CF0  6E8B               	movwf	3979,c	;volatile
  4246                           
  4247                           ;pin_manager.c: 69: TRISA = 0xF8;
  4248  000CF2  0EF8               	movlw	248
  4249  000CF4  6E92               	movwf	3986,c	;volatile
  4250                           
  4251                           ;pin_manager.c: 70: TRISB = 0xBF;
  4252  000CF6  0EBF               	movlw	191
  4253  000CF8  6E93               	movwf	3987,c	;volatile
  4254                           
  4255                           ;pin_manager.c: 71: TRISC = 0xBF;
  4256  000CFA  0EBF               	movlw	191
  4257  000CFC  6E94               	movwf	3988,c	;volatile
  4258                           
  4259                           ;pin_manager.c: 76: ANSELC = 0x3C;
  4260  000CFE  0E3C               	movlw	60
  4261  000D00  010F               	movlb	15	; () banked
  4262  000D02  6F3A               	movwf	58,b	;volatile
  4263                           
  4264                           ;pin_manager.c: 77: ANSELB = 0x3E;
  4265  000D04  0E3E               	movlw	62
  4266  000D06  6F39               	movwf	57,b	;volatile
  4267                           
  4268                           ;pin_manager.c: 78: ANSELA = 0x2F;
  4269  000D08  0E2F               	movlw	47
  4270  000D0A  6F38               	movwf	56,b	;volatile
  4271                           
  4272                           ;pin_manager.c: 83: WPUB = 0x00;
  4273  000D0C  0E00               	movlw	0
  4274  000D0E  6E61               	movwf	3937,c	;volatile
  4275                           
  4276                           ; BSR set to: 15
  4277                           ;pin_manager.c: 84: INTCON2bits.nRBPU = 1;
  4278  000D10  8EF1               	bsf	intcon2,7,c	;volatile
  4279                           
  4280                           ; BSR set to: 15
  4281  000D12  0012               	return		;funcret
  4282  000D14                     __end_of_PIN_MANAGER_Initialize:
  4283                           	opt stack 0
  4284                           tblptru	equ	0xFF8
  4285                           tblptrh	equ	0xFF7
  4286                           tblptrl	equ	0xFF6
  4287                           tablat	equ	0xFF5
  4288                           prodh	equ	0xFF4
  4289                           prodl	equ	0xFF3
  4290                           intcon	equ	0xFF2
  4291                           intcon2	equ	0xFF1
  4292                           postinc0	equ	0xFEE
  4293                           wreg	equ	0xFE8
  4294                           postdec1	equ	0xFE5
  4295                           fsr1l	equ	0xFE1
  4296                           indf2	equ	0xFDF
  4297                           postinc2	equ	0xFDE
  4298                           postdec2	equ	0xFDD
  4299                           fsr2h	equ	0xFDA
  4300                           fsr2l	equ	0xFD9
  4301                           status	equ	0xFD8
  4302                           
  4303 ;; *************** function _OSCILLATOR_Initialize *****************
  4304 ;; Defined at:
  4305 ;;		line 67 in file "mcc_generated_files/mcc.c"
  4306 ;; Parameters:    Size  Location     Type
  4307 ;;		None
  4308 ;; Auto vars:     Size  Location     Type
  4309 ;;		None
  4310 ;; Return value:  Size  Location     Type
  4311 ;;                  1    wreg      void 
  4312 ;; Registers used:
  4313 ;;		wreg, status,2
  4314 ;; Tracked objects:
  4315 ;;		On entry : 0/0
  4316 ;;		On exit  : 0/0
  4317 ;;		Unchanged: 0/0
  4318 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4319 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4320 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4321 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4322 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4323 ;;Total ram usage:        0 bytes
  4324 ;; Hardware stack levels used:    1
  4325 ;; Hardware stack levels required when called:    4
  4326 ;; This function calls:
  4327 ;;		Nothing
  4328 ;; This function is called by:
  4329 ;;		_SYSTEM_Initialize
  4330 ;; This function uses a non-reentrant model
  4331 ;;
  4332                           
  4333                           	psect	text23
  4334  000F2C                     __ptext23:
  4335                           	opt stack 0
  4336  000F2C                     _OSCILLATOR_Initialize:
  4337                           	opt stack 25
  4338                           
  4339                           ;mcc.c: 70: OSCCON = 0x70;
  4340                           
  4341                           ; BSR set to: 15
  4342                           ;incstack = 0
  4343  000F2C  0E70               	movlw	112
  4344  000F2E  6ED3               	movwf	4051,c	;volatile
  4345                           
  4346                           ;mcc.c: 72: OSCCON2 = 0x04;
  4347  000F30  0E04               	movlw	4
  4348  000F32  6ED2               	movwf	4050,c	;volatile
  4349                           
  4350                           ;mcc.c: 74: OSCTUNE = 0x40;
  4351  000F34  0E40               	movlw	64
  4352  000F36  6E9B               	movwf	3995,c	;volatile
  4353  000F38                     
  4354                           ;mcc.c: 77: {
  4355  000F38  BED2               	btfsc	4050,7,c	;volatile
  4356  000F3A  0012               	return	
  4357  000F3C  D7FD               	goto	l119
  4358  000F3E                     __end_of_OSCILLATOR_Initialize:
  4359                           	opt stack 0
  4360                           tblptru	equ	0xFF8
  4361                           tblptrh	equ	0xFF7
  4362                           tblptrl	equ	0xFF6
  4363                           tablat	equ	0xFF5
  4364                           prodh	equ	0xFF4
  4365                           prodl	equ	0xFF3
  4366                           intcon	equ	0xFF2
  4367                           intcon2	equ	0xFF1
  4368                           postinc0	equ	0xFEE
  4369                           wreg	equ	0xFE8
  4370                           postdec1	equ	0xFE5
  4371                           fsr1l	equ	0xFE1
  4372                           indf2	equ	0xFDF
  4373                           postinc2	equ	0xFDE
  4374                           postdec2	equ	0xFDD
  4375                           fsr2h	equ	0xFDA
  4376                           fsr2l	equ	0xFD9
  4377                           status	equ	0xFD8
  4378                           
  4379 ;; *************** function _INTERRUPT_Initialize *****************
  4380 ;; Defined at:
  4381 ;;		line 52 in file "mcc_generated_files/interrupt_manager.c"
  4382 ;; Parameters:    Size  Location     Type
  4383 ;;		None
  4384 ;; Auto vars:     Size  Location     Type
  4385 ;;		None
  4386 ;; Return value:  Size  Location     Type
  4387 ;;                  1    wreg      void 
  4388 ;; Registers used:
  4389 ;;		None
  4390 ;; Tracked objects:
  4391 ;;		On entry : 0/0
  4392 ;;		On exit  : 0/0
  4393 ;;		Unchanged: 0/0
  4394 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4395 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4396 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4397 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4398 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4399 ;;Total ram usage:        0 bytes
  4400 ;; Hardware stack levels used:    1
  4401 ;; Hardware stack levels required when called:    4
  4402 ;; This function calls:
  4403 ;;		Nothing
  4404 ;; This function is called by:
  4405 ;;		_SYSTEM_Initialize
  4406 ;; This function uses a non-reentrant model
  4407 ;;
  4408                           
  4409                           	psect	text24
  4410  000FD4                     __ptext24:
  4411                           	opt stack 0
  4412  000FD4                     _INTERRUPT_Initialize:
  4413                           	opt stack 25
  4414                           
  4415                           ;interrupt_manager.c: 55: RCONbits.IPEN = 0;
  4416                           
  4417                           ;incstack = 0
  4418  000FD4  9ED0               	bcf	4048,7,c	;volatile
  4419  000FD6  0012               	return		;funcret
  4420  000FD8                     __end_of_INTERRUPT_Initialize:
  4421                           	opt stack 0
  4422                           tblptru	equ	0xFF8
  4423                           tblptrh	equ	0xFF7
  4424                           tblptrl	equ	0xFF6
  4425                           tablat	equ	0xFF5
  4426                           prodh	equ	0xFF4
  4427                           prodl	equ	0xFF3
  4428                           intcon	equ	0xFF2
  4429                           intcon2	equ	0xFF1
  4430                           postinc0	equ	0xFEE
  4431                           wreg	equ	0xFE8
  4432                           postdec1	equ	0xFE5
  4433                           fsr1l	equ	0xFE1
  4434                           indf2	equ	0xFDF
  4435                           postinc2	equ	0xFDE
  4436                           postdec2	equ	0xFDD
  4437                           fsr2h	equ	0xFDA
  4438                           fsr2l	equ	0xFD9
  4439                           status	equ	0xFD8
  4440                           
  4441 ;; *************** function _EUSART2_Initialize *****************
  4442 ;; Defined at:
  4443 ;;		line 56 in file "mcc_generated_files/eusart2.c"
  4444 ;; Parameters:    Size  Location     Type
  4445 ;;		None
  4446 ;; Auto vars:     Size  Location     Type
  4447 ;;		None
  4448 ;; Return value:  Size  Location     Type
  4449 ;;                  1    wreg      void 
  4450 ;; Registers used:
  4451 ;;		wreg, status,2
  4452 ;; Tracked objects:
  4453 ;;		On entry : 0/0
  4454 ;;		On exit  : 0/0
  4455 ;;		Unchanged: 0/0
  4456 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4457 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4458 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4459 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4460 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4461 ;;Total ram usage:        0 bytes
  4462 ;; Hardware stack levels used:    1
  4463 ;; Hardware stack levels required when called:    4
  4464 ;; This function calls:
  4465 ;;		Nothing
  4466 ;; This function is called by:
  4467 ;;		_SYSTEM_Initialize
  4468 ;; This function uses a non-reentrant model
  4469 ;;
  4470                           
  4471                           	psect	text25
  4472  000F00                     __ptext25:
  4473                           	opt stack 0
  4474  000F00                     _EUSART2_Initialize:
  4475                           	opt stack 25
  4476                           
  4477                           ;eusart2.c: 61: BAUDCON2 = 0x08;
  4478                           
  4479                           ;incstack = 0
  4480  000F00  0E08               	movlw	8
  4481  000F02  6E70               	movwf	3952,c	;volatile
  4482                           
  4483                           ;eusart2.c: 64: RCSTA2 = 0x90;
  4484  000F04  0E90               	movlw	144
  4485  000F06  6E71               	movwf	3953,c	;volatile
  4486                           
  4487                           ;eusart2.c: 67: TXSTA2 = 0x24;
  4488  000F08  0E24               	movlw	36
  4489  000F0A  6E72               	movwf	3954,c	;volatile
  4490                           
  4491                           ;eusart2.c: 70: SPBRG2 = 0x8A;
  4492  000F0C  0E8A               	movlw	138
  4493  000F0E  6E75               	movwf	3957,c	;volatile
  4494                           
  4495                           ;eusart2.c: 73: SPBRGH2 = 0x00;
  4496  000F10  0E00               	movlw	0
  4497  000F12  6E76               	movwf	3958,c	;volatile
  4498  000F14  0012               	return		;funcret
  4499  000F16                     __end_of_EUSART2_Initialize:
  4500                           	opt stack 0
  4501                           tblptru	equ	0xFF8
  4502                           tblptrh	equ	0xFF7
  4503                           tblptrl	equ	0xFF6
  4504                           tablat	equ	0xFF5
  4505                           prodh	equ	0xFF4
  4506                           prodl	equ	0xFF3
  4507                           intcon	equ	0xFF2
  4508                           intcon2	equ	0xFF1
  4509                           postinc0	equ	0xFEE
  4510                           wreg	equ	0xFE8
  4511                           postdec1	equ	0xFE5
  4512                           fsr1l	equ	0xFE1
  4513                           indf2	equ	0xFDF
  4514                           postinc2	equ	0xFDE
  4515                           postdec2	equ	0xFDD
  4516                           fsr2h	equ	0xFDA
  4517                           fsr2l	equ	0xFD9
  4518                           status	equ	0xFD8
  4519                           
  4520 ;; *************** function _EUSART1_Initialize *****************
  4521 ;; Defined at:
  4522 ;;		line 56 in file "mcc_generated_files/eusart1.c"
  4523 ;; Parameters:    Size  Location     Type
  4524 ;;		None
  4525 ;; Auto vars:     Size  Location     Type
  4526 ;;		None
  4527 ;; Return value:  Size  Location     Type
  4528 ;;                  1    wreg      void 
  4529 ;; Registers used:
  4530 ;;		wreg, status,2
  4531 ;; Tracked objects:
  4532 ;;		On entry : 0/0
  4533 ;;		On exit  : 0/0
  4534 ;;		Unchanged: 0/0
  4535 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4536 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4537 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4538 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4539 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4540 ;;Total ram usage:        0 bytes
  4541 ;; Hardware stack levels used:    1
  4542 ;; Hardware stack levels required when called:    4
  4543 ;; This function calls:
  4544 ;;		Nothing
  4545 ;; This function is called by:
  4546 ;;		_SYSTEM_Initialize
  4547 ;; This function uses a non-reentrant model
  4548 ;;
  4549                           
  4550                           	psect	text26
  4551  000F16                     __ptext26:
  4552                           	opt stack 0
  4553  000F16                     _EUSART1_Initialize:
  4554                           	opt stack 25
  4555                           
  4556                           ;eusart1.c: 61: BAUDCON1 = 0x08;
  4557                           
  4558                           ;incstack = 0
  4559  000F16  0E08               	movlw	8
  4560  000F18  6EB8               	movwf	4024,c	;volatile
  4561                           
  4562                           ;eusart1.c: 64: RCSTA1 = 0x90;
  4563  000F1A  0E90               	movlw	144
  4564  000F1C  6EAB               	movwf	4011,c	;volatile
  4565                           
  4566                           ;eusart1.c: 67: TXSTA1 = 0x24;
  4567  000F1E  0E24               	movlw	36
  4568  000F20  6EAC               	movwf	4012,c	;volatile
  4569                           
  4570                           ;eusart1.c: 70: SPBRG1 = 0x8A;
  4571  000F22  0E8A               	movlw	138
  4572  000F24  6EAF               	movwf	4015,c	;volatile
  4573                           
  4574                           ;eusart1.c: 73: SPBRGH1 = 0x00;
  4575  000F26  0E00               	movlw	0
  4576  000F28  6EB0               	movwf	4016,c	;volatile
  4577  000F2A  0012               	return		;funcret
  4578  000F2C                     __end_of_EUSART1_Initialize:
  4579                           	opt stack 0
  4580                           tblptru	equ	0xFF8
  4581                           tblptrh	equ	0xFF7
  4582                           tblptrl	equ	0xFF6
  4583                           tablat	equ	0xFF5
  4584                           prodh	equ	0xFF4
  4585                           prodl	equ	0xFF3
  4586                           intcon	equ	0xFF2
  4587                           intcon2	equ	0xFF1
  4588                           postinc0	equ	0xFEE
  4589                           wreg	equ	0xFE8
  4590                           postdec1	equ	0xFE5
  4591                           fsr1l	equ	0xFE1
  4592                           indf2	equ	0xFDF
  4593                           postinc2	equ	0xFDE
  4594                           postdec2	equ	0xFDD
  4595                           fsr2h	equ	0xFDA
  4596                           fsr2l	equ	0xFD9
  4597                           status	equ	0xFD8
  4598                           
  4599 ;; *************** function _CCP5_Initialize *****************
  4600 ;; Defined at:
  4601 ;;		line 58 in file "mcc_generated_files/ccp5.c"
  4602 ;; Parameters:    Size  Location     Type
  4603 ;;		None
  4604 ;; Auto vars:     Size  Location     Type
  4605 ;;		None
  4606 ;; Return value:  Size  Location     Type
  4607 ;;                  1    wreg      void 
  4608 ;; Registers used:
  4609 ;;		wreg, status,2
  4610 ;; Tracked objects:
  4611 ;;		On entry : 0/0
  4612 ;;		On exit  : 0/0
  4613 ;;		Unchanged: 0/0
  4614 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4615 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4616 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4617 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4618 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4619 ;;Total ram usage:        0 bytes
  4620 ;; Hardware stack levels used:    1
  4621 ;; Hardware stack levels required when called:    4
  4622 ;; This function calls:
  4623 ;;		Nothing
  4624 ;; This function is called by:
  4625 ;;		_SYSTEM_Initialize
  4626 ;; This function uses a non-reentrant model
  4627 ;;
  4628                           
  4629                           	psect	text27
  4630  000E7C                     __ptext27:
  4631                           	opt stack 0
  4632  000E7C                     _CCP5_Initialize:
  4633                           	opt stack 25
  4634                           
  4635                           ;ccp5.c: 63: CCP5CON = 0x05;
  4636                           
  4637                           ;incstack = 0
  4638  000E7C  0E05               	movlw	5
  4639  000E7E  010F               	movlb	15	; () banked
  4640  000E80  6F54               	movwf	84,b	;volatile
  4641                           
  4642                           ;ccp5.c: 66: CCPR5L = 0x00;
  4643  000E82  0E00               	movlw	0
  4644  000E84  6F55               	movwf	85,b	;volatile
  4645                           
  4646                           ;ccp5.c: 69: CCPR5H = 0x00;
  4647  000E86  0E00               	movlw	0
  4648  000E88  6F56               	movwf	86,b	;volatile
  4649                           
  4650                           ;ccp5.c: 72: CCPTMRS1bits.C5TSEL = 0x1;
  4651  000E8A  5148               	movf	72,w,b	;volatile
  4652  000E8C  0BF3               	andlw	-13
  4653  000E8E  0904               	iorlw	4
  4654  000E90  6F48               	movwf	72,b	;volatile
  4655                           
  4656                           ; BSR set to: 15
  4657                           ;ccp5.c: 75: PIR4bits.CCP5IF = 0;
  4658  000E92  947B               	bcf	3963,2,c	;volatile
  4659                           
  4660                           ; BSR set to: 15
  4661                           ;ccp5.c: 78: PIE4bits.CCP5IE = 1;
  4662  000E94  847A               	bsf	3962,2,c	;volatile
  4663                           
  4664                           ; BSR set to: 15
  4665  000E96  0012               	return		;funcret
  4666  000E98                     __end_of_CCP5_Initialize:
  4667                           	opt stack 0
  4668                           tblptru	equ	0xFF8
  4669                           tblptrh	equ	0xFF7
  4670                           tblptrl	equ	0xFF6
  4671                           tablat	equ	0xFF5
  4672                           prodh	equ	0xFF4
  4673                           prodl	equ	0xFF3
  4674                           intcon	equ	0xFF2
  4675                           intcon2	equ	0xFF1
  4676                           postinc0	equ	0xFEE
  4677                           wreg	equ	0xFE8
  4678                           postdec1	equ	0xFE5
  4679                           fsr1l	equ	0xFE1
  4680                           indf2	equ	0xFDF
  4681                           postinc2	equ	0xFDE
  4682                           postdec2	equ	0xFDD
  4683                           fsr2h	equ	0xFDA
  4684                           fsr2l	equ	0xFD9
  4685                           status	equ	0xFD8
  4686                           
  4687 ;; *************** function _CCP4_Initialize *****************
  4688 ;; Defined at:
  4689 ;;		line 58 in file "mcc_generated_files/ccp4.c"
  4690 ;; Parameters:    Size  Location     Type
  4691 ;;		None
  4692 ;; Auto vars:     Size  Location     Type
  4693 ;;		None
  4694 ;; Return value:  Size  Location     Type
  4695 ;;                  1    wreg      void 
  4696 ;; Registers used:
  4697 ;;		wreg, status,2
  4698 ;; Tracked objects:
  4699 ;;		On entry : 0/0
  4700 ;;		On exit  : 0/0
  4701 ;;		Unchanged: 0/0
  4702 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4703 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4704 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4705 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4706 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4707 ;;Total ram usage:        0 bytes
  4708 ;; Hardware stack levels used:    1
  4709 ;; Hardware stack levels required when called:    4
  4710 ;; This function calls:
  4711 ;;		Nothing
  4712 ;; This function is called by:
  4713 ;;		_SYSTEM_Initialize
  4714 ;; This function uses a non-reentrant model
  4715 ;;
  4716                           
  4717                           	psect	text28
  4718  000E98                     __ptext28:
  4719                           	opt stack 0
  4720  000E98                     _CCP4_Initialize:
  4721                           	opt stack 25
  4722                           
  4723                           ;ccp4.c: 63: CCP4CON = 0x05;
  4724                           
  4725                           ; BSR set to: 15
  4726                           ;incstack = 0
  4727  000E98  0E05               	movlw	5
  4728  000E9A  010F               	movlb	15	; () banked
  4729  000E9C  6F57               	movwf	87,b	;volatile
  4730                           
  4731                           ;ccp4.c: 66: CCPR4L = 0x00;
  4732  000E9E  0E00               	movlw	0
  4733  000EA0  6F58               	movwf	88,b	;volatile
  4734                           
  4735                           ;ccp4.c: 69: CCPR4H = 0x00;
  4736  000EA2  0E00               	movlw	0
  4737  000EA4  6F59               	movwf	89,b	;volatile
  4738                           
  4739                           ;ccp4.c: 72: CCPTMRS1bits.C4TSEL = 0x1;
  4740  000EA6  5148               	movf	72,w,b	;volatile
  4741  000EA8  0BFC               	andlw	-4
  4742  000EAA  0901               	iorlw	1
  4743  000EAC  6F48               	movwf	72,b	;volatile
  4744                           
  4745                           ; BSR set to: 15
  4746                           ;ccp4.c: 75: PIR4bits.CCP4IF = 0;
  4747  000EAE  927B               	bcf	3963,1,c	;volatile
  4748                           
  4749                           ; BSR set to: 15
  4750                           ;ccp4.c: 78: PIE4bits.CCP4IE = 1;
  4751  000EB0  827A               	bsf	3962,1,c	;volatile
  4752                           
  4753                           ; BSR set to: 15
  4754  000EB2  0012               	return		;funcret
  4755  000EB4                     __end_of_CCP4_Initialize:
  4756                           	opt stack 0
  4757                           tblptru	equ	0xFF8
  4758                           tblptrh	equ	0xFF7
  4759                           tblptrl	equ	0xFF6
  4760                           tablat	equ	0xFF5
  4761                           prodh	equ	0xFF4
  4762                           prodl	equ	0xFF3
  4763                           intcon	equ	0xFF2
  4764                           intcon2	equ	0xFF1
  4765                           postinc0	equ	0xFEE
  4766                           wreg	equ	0xFE8
  4767                           postdec1	equ	0xFE5
  4768                           fsr1l	equ	0xFE1
  4769                           indf2	equ	0xFDF
  4770                           postinc2	equ	0xFDE
  4771                           postdec2	equ	0xFDD
  4772                           fsr2h	equ	0xFDA
  4773                           fsr2l	equ	0xFD9
  4774                           status	equ	0xFD8
  4775                           
  4776 ;; *************** function _EUSART2_is_rx_ready *****************
  4777 ;; Defined at:
  4778 ;;		line 83 in file "mcc_generated_files/eusart2.c"
  4779 ;; Parameters:    Size  Location     Type
  4780 ;;		None
  4781 ;; Auto vars:     Size  Location     Type
  4782 ;;		None
  4783 ;; Return value:  Size  Location     Type
  4784 ;;                  1    wreg      unsigned char 
  4785 ;; Registers used:
  4786 ;;		wreg
  4787 ;; Tracked objects:
  4788 ;;		On entry : 0/0
  4789 ;;		On exit  : 0/0
  4790 ;;		Unchanged: 0/0
  4791 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4792 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4793 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4794 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4795 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4796 ;;Total ram usage:        0 bytes
  4797 ;; Hardware stack levels used:    1
  4798 ;; Hardware stack levels required when called:    4
  4799 ;; This function calls:
  4800 ;;		Nothing
  4801 ;; This function is called by:
  4802 ;;		_main
  4803 ;; This function uses a non-reentrant model
  4804 ;;
  4805                           
  4806                           	psect	text29
  4807  000F84                     __ptext29:
  4808                           	opt stack 0
  4809  000F84                     _EUSART2_is_rx_ready:
  4810                           	opt stack 26
  4811                           
  4812                           ;eusart2.c: 85: return PIR3bits.RC2IF;
  4813                           
  4814                           ; BSR set to: 15
  4815                           ;incstack = 0
  4816  000F84  AAA4               	btfss	4004,5,c	;volatile
  4817  000F86  D002               	goto	u1230
  4818  000F88  0E01               	movlw	1
  4819  000F8A  0012               	return	
  4820  000F8C                     u1230:
  4821  000F8C  0E00               	movlw	0
  4822  000F8E  0012               	return	
  4823  000F90                     __end_of_EUSART2_is_rx_ready:
  4824                           	opt stack 0
  4825                           tblptru	equ	0xFF8
  4826                           tblptrh	equ	0xFF7
  4827                           tblptrl	equ	0xFF6
  4828                           tablat	equ	0xFF5
  4829                           prodh	equ	0xFF4
  4830                           prodl	equ	0xFF3
  4831                           intcon	equ	0xFF2
  4832                           intcon2	equ	0xFF1
  4833                           postinc0	equ	0xFEE
  4834                           wreg	equ	0xFE8
  4835                           postdec1	equ	0xFE5
  4836                           fsr1l	equ	0xFE1
  4837                           indf2	equ	0xFDF
  4838                           postinc2	equ	0xFDE
  4839                           postdec2	equ	0xFDD
  4840                           fsr2h	equ	0xFDA
  4841                           fsr2l	equ	0xFD9
  4842                           status	equ	0xFD8
  4843                           
  4844 ;; *************** function _EUSART2_Read *****************
  4845 ;; Defined at:
  4846 ;;		line 93 in file "mcc_generated_files/eusart2.c"
  4847 ;; Parameters:    Size  Location     Type
  4848 ;;		None
  4849 ;; Auto vars:     Size  Location     Type
  4850 ;;		None
  4851 ;; Return value:  Size  Location     Type
  4852 ;;                  1    wreg      unsigned char 
  4853 ;; Registers used:
  4854 ;;		wreg, status,2
  4855 ;; Tracked objects:
  4856 ;;		On entry : 0/0
  4857 ;;		On exit  : 0/0
  4858 ;;		Unchanged: 0/0
  4859 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4860 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4861 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4862 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4863 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4864 ;;Total ram usage:        0 bytes
  4865 ;; Hardware stack levels used:    1
  4866 ;; Hardware stack levels required when called:    4
  4867 ;; This function calls:
  4868 ;;		Nothing
  4869 ;; This function is called by:
  4870 ;;		_main
  4871 ;;		_getch
  4872 ;; This function uses a non-reentrant model
  4873 ;;
  4874                           
  4875                           	psect	text30
  4876  000F4E                     __ptext30:
  4877                           	opt stack 0
  4878  000F4E                     _EUSART2_Read:
  4879                           	opt stack 26
  4880                           
  4881                           ;eusart2.c: 96: {
  4882                           
  4883                           ;eusart2.c: 95: while(!PIR3bits.RC2IF)
  4884                           
  4885                           ;incstack = 0
  4886  000F4E  AAA4               	btfss	4004,5,c	;volatile
  4887  000F50  D7FE               	goto	_EUSART2_Read
  4888                           
  4889                           ;eusart2.c: 97: }
  4890                           ;eusart2.c: 100: if(1 == RCSTA2bits.OERR)
  4891  000F52  A271               	btfss	3953,1,c	;volatile
  4892  000F54  D002               	goto	l161
  4893                           
  4894                           ;eusart2.c: 101: {
  4895                           ;eusart2.c: 104: RCSTA2bits.CREN = 0;
  4896  000F56  9871               	bcf	3953,4,c	;volatile
  4897                           
  4898                           ;eusart2.c: 105: RCSTA2bits.CREN = 1;
  4899  000F58  8871               	bsf	3953,4,c	;volatile
  4900  000F5A                     l161:
  4901                           
  4902                           ;eusart2.c: 106: }
  4903                           ;eusart2.c: 108: return RCREG2;
  4904  000F5A  5074               	movf	3956,w,c	;volatile
  4905  000F5C  0012               	return	
  4906  000F5E                     __end_of_EUSART2_Read:
  4907                           	opt stack 0
  4908                           tblptru	equ	0xFF8
  4909                           tblptrh	equ	0xFF7
  4910                           tblptrl	equ	0xFF6
  4911                           tablat	equ	0xFF5
  4912                           prodh	equ	0xFF4
  4913                           prodl	equ	0xFF3
  4914                           intcon	equ	0xFF2
  4915                           intcon2	equ	0xFF1
  4916                           postinc0	equ	0xFEE
  4917                           wreg	equ	0xFE8
  4918                           postdec1	equ	0xFE5
  4919                           fsr1l	equ	0xFE1
  4920                           indf2	equ	0xFDF
  4921                           postinc2	equ	0xFDE
  4922                           postdec2	equ	0xFDD
  4923                           fsr2h	equ	0xFDA
  4924                           fsr2l	equ	0xFD9
  4925                           status	equ	0xFD8
  4926                           
  4927 ;; *************** function _INTERRUPT_InterruptManager *****************
  4928 ;; Defined at:
  4929 ;;		line 58 in file "mcc_generated_files/interrupt_manager.c"
  4930 ;; Parameters:    Size  Location     Type
  4931 ;;		None
  4932 ;; Auto vars:     Size  Location     Type
  4933 ;;		None
  4934 ;; Return value:  Size  Location     Type
  4935 ;;                  1    wreg      void 
  4936 ;; Registers used:
  4937 ;;		wreg, status,2, status,0, pclath, tosl, cstack
  4938 ;; Tracked objects:
  4939 ;;		On entry : 0/0
  4940 ;;		On exit  : 0/0
  4941 ;;		Unchanged: 0/0
  4942 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4943 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4944 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4945 ;;      Temps:         18       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4946 ;;      Totals:        18       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4947 ;;Total ram usage:       18 bytes
  4948 ;; Hardware stack levels used:    1
  4949 ;; Hardware stack levels required when called:    3
  4950 ;; This function calls:
  4951 ;;		_CCP4_CaptureISR
  4952 ;;		_CCP5_CaptureISR
  4953 ;;		_TMR0_ISR
  4954 ;;		_TMR1_ISR
  4955 ;;		_TMR2_ISR
  4956 ;;		_TMR5_ISR
  4957 ;; This function is called by:
  4958 ;;		Interrupt level 2
  4959 ;; This function uses a non-reentrant model
  4960 ;;
  4961                           
  4962                           	psect	intcode
  4963  000008                     __pintcode:
  4964                           	opt stack 0
  4965  000008                     _INTERRUPT_InterruptManager:
  4966                           	opt stack 24
  4967                           
  4968                           ;incstack = 0
  4969  000008  8243               	bsf	btemp,1,c	;set compiler interrupt flag (level 2)
  4970  00000A  CFFA F00B          	movff	pclath,??_INTERRUPT_InterruptManager
  4971  00000E  CFFB F00C          	movff	pclatu,??_INTERRUPT_InterruptManager+1
  4972  000012  CFE9 F00D          	movff	fsr0l,??_INTERRUPT_InterruptManager+2
  4973  000016  CFEA F00E          	movff	fsr0h,??_INTERRUPT_InterruptManager+3
  4974  00001A  CFE1 F00F          	movff	fsr1l,??_INTERRUPT_InterruptManager+4
  4975  00001E  CFE2 F010          	movff	fsr1h,??_INTERRUPT_InterruptManager+5
  4976  000022  CFD9 F011          	movff	fsr2l,??_INTERRUPT_InterruptManager+6
  4977  000026  CFDA F012          	movff	fsr2h,??_INTERRUPT_InterruptManager+7
  4978  00002A  CFF3 F013          	movff	prodl,??_INTERRUPT_InterruptManager+8
  4979  00002E  CFF4 F014          	movff	prodh,??_INTERRUPT_InterruptManager+9
  4980  000032  CFF6 F015          	movff	tblptrl,??_INTERRUPT_InterruptManager+10
  4981  000036  CFF7 F016          	movff	tblptrh,??_INTERRUPT_InterruptManager+11
  4982  00003A  CFF8 F017          	movff	tblptru,??_INTERRUPT_InterruptManager+12
  4983  00003E  CFF5 F018          	movff	tablat,??_INTERRUPT_InterruptManager+13
  4984  000042  C043  F019         	movff	btemp,??_INTERRUPT_InterruptManager+14
  4985  000046  C044  F01A         	movff	btemp+1,??_INTERRUPT_InterruptManager+15
  4986  00004A  C045  F01B         	movff	btemp+2,??_INTERRUPT_InterruptManager+16
  4987  00004E  C046  F01C         	movff	btemp+3,??_INTERRUPT_InterruptManager+17
  4988                           
  4989                           ;interrupt_manager.c: 61: if(INTCONbits.TMR0IE == 1 && INTCONbits.TMR0IF == 1)
  4990  000052  BAF2               	btfsc	intcon,5,c	;volatile
  4991  000054  A4F2               	btfss	intcon,2,c	;volatile
  4992  000056  D003               	goto	i2l66
  4993                           
  4994                           ;interrupt_manager.c: 62: {
  4995                           ;interrupt_manager.c: 63: TMR0_ISR();
  4996  000058  ECCB  F006         	call	_TMR0_ISR	;wreg free
  4997                           
  4998                           ;interrupt_manager.c: 64: }
  4999  00005C  D01F               	goto	i2l77
  5000  00005E                     i2l66:
  5001                           
  5002                           ;interrupt_manager.c: 65: else if(INTCONbits.PEIE == 1)
  5003  00005E  ACF2               	btfss	intcon,6,c	;volatile
  5004  000060  D01D               	goto	i2l77
  5005                           
  5006                           ;interrupt_manager.c: 66: {
  5007                           ;interrupt_manager.c: 67: if(PIE4bits.CCP5IE == 1 && PIR4bits.CCP5IF == 1)
  5008  000062  B47A               	btfsc	3962,2,c	;volatile
  5009  000064  A47B               	btfss	3963,2,c	;volatile
  5010  000066  D003               	goto	i2l69
  5011                           
  5012                           ;interrupt_manager.c: 68: {
  5013                           ;interrupt_manager.c: 69: CCP5_CaptureISR();
  5014  000068  EC68  F007         	call	_CCP5_CaptureISR	;wreg free
  5015                           
  5016                           ;interrupt_manager.c: 70: }
  5017  00006C  D017               	goto	i2l77
  5018  00006E                     i2l69:
  5019                           
  5020                           ;interrupt_manager.c: 71: else if(PIE5bits.TMR5IE == 1 && PIR5bits.TMR5IF == 1)
  5021  00006E  B27D               	btfsc	3965,1,c	;volatile
  5022  000070  A27E               	btfss	3966,1,c	;volatile
  5023  000072  D003               	goto	i2l71
  5024                           
  5025                           ;interrupt_manager.c: 72: {
  5026                           ;interrupt_manager.c: 73: TMR5_ISR();
  5027  000074  EC8A  F006         	call	_TMR5_ISR	;wreg free
  5028                           
  5029                           ;interrupt_manager.c: 74: }
  5030  000078  D011               	goto	i2l77
  5031  00007A                     i2l71:
  5032                           
  5033                           ;interrupt_manager.c: 75: else if(PIE4bits.CCP4IE == 1 && PIR4bits.CCP4IF == 1)
  5034  00007A  B27A               	btfsc	3962,1,c	;volatile
  5035  00007C  A27B               	btfss	3963,1,c	;volatile
  5036  00007E  D003               	goto	i2l73
  5037                           
  5038                           ;interrupt_manager.c: 76: {
  5039                           ;interrupt_manager.c: 77: CCP4_CaptureISR();
  5040  000080  EC74  F007         	call	_CCP4_CaptureISR	;wreg free
  5041                           
  5042                           ;interrupt_manager.c: 78: }
  5043  000084  D00B               	goto	i2l77
  5044  000086                     i2l73:
  5045                           
  5046                           ;interrupt_manager.c: 79: else if(PIE1bits.TMR2IE == 1 && PIR1bits.TMR2IF == 1)
  5047  000086  B29D               	btfsc	3997,1,c	;volatile
  5048  000088  A29E               	btfss	3998,1,c	;volatile
  5049  00008A  D003               	goto	i2l75
  5050                           
  5051                           ;interrupt_manager.c: 80: {
  5052                           ;interrupt_manager.c: 81: TMR2_ISR();
  5053  00008C  EC03  F007         	call	_TMR2_ISR	;wreg free
  5054                           
  5055                           ;interrupt_manager.c: 82: }
  5056  000090  D005               	goto	i2l77
  5057  000092                     i2l75:
  5058                           
  5059                           ;interrupt_manager.c: 83: else if(PIE1bits.TMR1IE == 1 && PIR1bits.TMR1IF == 1)
  5060  000092  B09D               	btfsc	3997,0,c	;volatile
  5061  000094  A09E               	btfss	3998,0,c	;volatile
  5062  000096  D002               	goto	i2l77
  5063                           
  5064                           ;interrupt_manager.c: 84: {
  5065                           ;interrupt_manager.c: 85: TMR1_ISR();
  5066  000098  ECA0  F006         	call	_TMR1_ISR	;wreg free
  5067  00009C                     i2l77:
  5068                           
  5069                           ;interrupt_manager.c: 92: else
  5070                           ;interrupt_manager.c: 93: {
  5071                           
  5072                           ;interrupt_manager.c: 90: }
  5073                           ;interrupt_manager.c: 91: }
  5074                           
  5075                           ;interrupt_manager.c: 87: else
  5076                           ;interrupt_manager.c: 88: {
  5077  00009C  C01C  F046         	movff	??_INTERRUPT_InterruptManager+17,btemp+3
  5078  0000A0  C01B  F045         	movff	??_INTERRUPT_InterruptManager+16,btemp+2
  5079  0000A4  C01A  F044         	movff	??_INTERRUPT_InterruptManager+15,btemp+1
  5080  0000A8  C019  F043         	movff	??_INTERRUPT_InterruptManager+14,btemp
  5081  0000AC  C018  FFF5         	movff	??_INTERRUPT_InterruptManager+13,tablat
  5082  0000B0  C017  FFF8         	movff	??_INTERRUPT_InterruptManager+12,tblptru
  5083  0000B4  C016  FFF7         	movff	??_INTERRUPT_InterruptManager+11,tblptrh
  5084  0000B8  C015  FFF6         	movff	??_INTERRUPT_InterruptManager+10,tblptrl
  5085  0000BC  C014  FFF4         	movff	??_INTERRUPT_InterruptManager+9,prodh
  5086  0000C0  C013  FFF3         	movff	??_INTERRUPT_InterruptManager+8,prodl
  5087  0000C4  C012  FFDA         	movff	??_INTERRUPT_InterruptManager+7,fsr2h
  5088  0000C8  C011  FFD9         	movff	??_INTERRUPT_InterruptManager+6,fsr2l
  5089  0000CC  C010  FFE2         	movff	??_INTERRUPT_InterruptManager+5,fsr1h
  5090  0000D0  C00F  FFE1         	movff	??_INTERRUPT_InterruptManager+4,fsr1l
  5091  0000D4  C00E  FFEA         	movff	??_INTERRUPT_InterruptManager+3,fsr0h
  5092  0000D8  C00D  FFE9         	movff	??_INTERRUPT_InterruptManager+2,fsr0l
  5093  0000DC  C00C  FFFB         	movff	??_INTERRUPT_InterruptManager+1,pclatu
  5094  0000E0  C00B  FFFA         	movff	??_INTERRUPT_InterruptManager,pclath
  5095  0000E4  9243               	bcf	btemp,1,c	;clear compiler interrupt flag (level 2)
  5096  0000E6  0011               	retfie		f
  5097  0000E8                     __end_of_INTERRUPT_InterruptManager:
  5098                           	opt stack 0
  5099                           pclatu	equ	0xFFB
  5100                           pclath	equ	0xFFA
  5101                           tblptru	equ	0xFF8
  5102                           tblptrh	equ	0xFF7
  5103                           tblptrl	equ	0xFF6
  5104                           tablat	equ	0xFF5
  5105                           prodh	equ	0xFF4
  5106                           prodl	equ	0xFF3
  5107                           intcon	equ	0xFF2
  5108                           intcon2	equ	0xFF1
  5109                           postinc0	equ	0xFEE
  5110                           fsr0h	equ	0xFEA
  5111                           fsr0l	equ	0xFE9
  5112                           wreg	equ	0xFE8
  5113                           postdec1	equ	0xFE5
  5114                           fsr1h	equ	0xFE2
  5115                           fsr1l	equ	0xFE1
  5116                           indf2	equ	0xFDF
  5117                           postinc2	equ	0xFDE
  5118                           postdec2	equ	0xFDD
  5119                           fsr2h	equ	0xFDA
  5120                           fsr2l	equ	0xFD9
  5121                           status	equ	0xFD8
  5122                           
  5123 ;; *************** function _TMR5_ISR *****************
  5124 ;; Defined at:
  5125 ;;		line 158 in file "mcc_generated_files/tmr5.c"
  5126 ;; Parameters:    Size  Location     Type
  5127 ;;		None
  5128 ;; Auto vars:     Size  Location     Type
  5129 ;;		None
  5130 ;; Return value:  Size  Location     Type
  5131 ;;                  1    wreg      void 
  5132 ;; Registers used:
  5133 ;;		wreg, status,2, status,0, pclath, tosl, cstack
  5134 ;; Tracked objects:
  5135 ;;		On entry : 0/0
  5136 ;;		On exit  : 0/0
  5137 ;;		Unchanged: 0/0
  5138 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5139 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5140 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5141 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5142 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5143 ;;Total ram usage:        0 bytes
  5144 ;; Hardware stack levels used:    1
  5145 ;; Hardware stack levels required when called:    2
  5146 ;; This function calls:
  5147 ;;		Absolute function
  5148 ;;		_TMR5_DefaultInterruptHandler
  5149 ;;		_TMR5_WriteTimer
  5150 ;; This function is called by:
  5151 ;;		_INTERRUPT_InterruptManager
  5152 ;; This function uses a non-reentrant model
  5153 ;;
  5154                           
  5155                           	psect	text32
  5156  000D14                     __ptext32:
  5157                           	opt stack 0
  5158  000D14                     _TMR5_ISR:
  5159                           	opt stack 24
  5160                           
  5161                           ;tmr5.c: 162: PIR5bits.TMR5IF = 0;
  5162                           
  5163                           ;incstack = 0
  5164  000D14  927E               	bcf	3966,1,c	;volatile
  5165                           
  5166                           ;tmr5.c: 163: TMR5_WriteTimer(timer5ReloadVal);
  5167  000D16  C031  F001         	movff	_timer5ReloadVal,TMR5_WriteTimer@timerVal	;volatile
  5168  000D1A  C032  F002         	movff	_timer5ReloadVal+1,TMR5_WriteTimer@timerVal+1	;volatile
  5169  000D1E  EC13  F007         	call	_TMR5_WriteTimer	;wreg free
  5170                           
  5171                           ;tmr5.c: 165: if(TMR5_InterruptHandler)
  5172  000D22  502F               	movf	_TMR5_InterruptHandler,w,c
  5173  000D24  1030               	iorwf	_TMR5_InterruptHandler+1,w,c
  5174  000D26  B4D8               	btfsc	status,2,c
  5175  000D28  0012               	return	
  5176                           
  5177                           ;tmr5.c: 166: {
  5178                           ;tmr5.c: 167: TMR5_InterruptHandler();
  5179  000D2A  D801               	call	i2u118_48
  5180  000D2C  0012               	return	
  5181  000D2E                     i2u118_48:
  5182  000D2E  0005               	push	
  5183  000D30  6EFA               	movwf	pclath,c
  5184  000D32  502F               	movf	_TMR5_InterruptHandler,w,c
  5185  000D34  6EFD               	movwf	tosl,c
  5186  000D36  5030               	movf	_TMR5_InterruptHandler+1,w,c
  5187  000D38  6EFE               	movwf	tosh,c
  5188  000D3A  6AFF               	clrf	tosu,c
  5189  000D3C  50FA               	movf	pclath,w,c
  5190  000D3E  0012               	return		;indir
  5191  000D40                     __end_of_TMR5_ISR:
  5192                           	opt stack 0
  5193                           tosu	equ	0xFFF
  5194                           tosh	equ	0xFFE
  5195                           tosl	equ	0xFFD
  5196                           pclatu	equ	0xFFB
  5197                           pclath	equ	0xFFA
  5198                           tblptru	equ	0xFF8
  5199                           tblptrh	equ	0xFF7
  5200                           tblptrl	equ	0xFF6
  5201                           tablat	equ	0xFF5
  5202                           prodh	equ	0xFF4
  5203                           prodl	equ	0xFF3
  5204                           intcon	equ	0xFF2
  5205                           intcon2	equ	0xFF1
  5206                           postinc0	equ	0xFEE
  5207                           fsr0h	equ	0xFEA
  5208                           fsr0l	equ	0xFE9
  5209                           wreg	equ	0xFE8
  5210                           postdec1	equ	0xFE5
  5211                           fsr1h	equ	0xFE2
  5212                           fsr1l	equ	0xFE1
  5213                           indf2	equ	0xFDF
  5214                           postinc2	equ	0xFDE
  5215                           postdec2	equ	0xFDD
  5216                           fsr2h	equ	0xFDA
  5217                           fsr2l	equ	0xFD9
  5218                           status	equ	0xFD8
  5219                           
  5220 ;; *************** function _TMR5_DefaultInterruptHandler *****************
  5221 ;; Defined at:
  5222 ;;		line 315 in file "main.c"
  5223 ;; Parameters:    Size  Location     Type
  5224 ;;		None
  5225 ;; Auto vars:     Size  Location     Type
  5226 ;;		None
  5227 ;; Return value:  Size  Location     Type
  5228 ;;                  1    wreg      void 
  5229 ;; Registers used:
  5230 ;;		wreg, status,2, status,0, cstack
  5231 ;; Tracked objects:
  5232 ;;		On entry : 0/0
  5233 ;;		On exit  : 0/0
  5234 ;;		Unchanged: 0/0
  5235 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5236 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5237 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5238 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5239 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5240 ;;Total ram usage:        2 bytes
  5241 ;; Hardware stack levels used:    1
  5242 ;; Hardware stack levels required when called:    1
  5243 ;; This function calls:
  5244 ;;		_TMR5_WriteTimer
  5245 ;; This function is called by:
  5246 ;;		_TMR5_Initialize
  5247 ;;		_TMR5_ISR
  5248 ;; This function uses a non-reentrant model
  5249 ;;
  5250                           
  5251                           	psect	text33
  5252  000AC4                     __ptext33:
  5253                           	opt stack 0
  5254  000AC4                     _TMR5_DefaultInterruptHandler:
  5255                           	opt stack 24
  5256                           
  5257                           ;main.c: 316: static uint8_t pulseHigh = 0;
  5258                           ;main.c: 317: if(!pulseHigh){
  5259                           
  5260                           ;incstack = 0
  5261  000AC4  503D               	movf	TMR5_DefaultInterruptHandler@pulseHigh,w,c
  5262  000AC6  A4D8               	btfss	status,2,c
  5263  000AC8  D013               	goto	i2l525
  5264                           
  5265                           ;main.c: 318: do { LATAbits.LATA2 = 1; } while(0);
  5266  000ACA  8489               	bsf	3977,2,c	;volatile
  5267                           
  5268                           ;main.c: 319: TMR5_WriteTimer(0xFFFF - motorSpeed );
  5269  000ACC  C08E  F003         	movff	_motorSpeed,??_TMR5_DefaultInterruptHandler
  5270  000AD0  C08F  F004         	movff	_motorSpeed+1,??_TMR5_DefaultInterruptHandler+1
  5271  000AD4  1E03               	comf	??_TMR5_DefaultInterruptHandler,f,c
  5272  000AD6  1E04               	comf	??_TMR5_DefaultInterruptHandler+1,f,c
  5273  000AD8  4A03               	infsnz	??_TMR5_DefaultInterruptHandler,f,c
  5274  000ADA  2A04               	incf	??_TMR5_DefaultInterruptHandler+1,f,c
  5275  000ADC  0EFF               	movlw	255
  5276  000ADE  2403               	addwf	??_TMR5_DefaultInterruptHandler,w,c
  5277  000AE0  6E01               	movwf	TMR5_WriteTimer@timerVal,c
  5278  000AE2  0EFF               	movlw	255
  5279  000AE4  2004               	addwfc	??_TMR5_DefaultInterruptHandler+1,w,c
  5280  000AE6  6E02               	movwf	TMR5_WriteTimer@timerVal+1,c
  5281  000AE8  EC13  F007         	call	_TMR5_WriteTimer	;wreg free
  5282                           
  5283                           ;main.c: 320: pulseHigh = 1;
  5284  000AEC  0E01               	movlw	1
  5285  000AEE  D008               	goto	L6
  5286  000AF0                     i2l525:
  5287                           
  5288                           ;main.c: 322: else{
  5289                           ;main.c: 323: do { LATAbits.LATA2 = 0; } while(0);
  5290  000AF0  9489               	bcf	3977,2,c	;volatile
  5291                           
  5292                           ;main.c: 324: TMR5_WriteTimer(0xFFFF - 40000 );
  5293  000AF2  0E63               	movlw	99
  5294  000AF4  6E02               	movwf	TMR5_WriteTimer@timerVal+1,c
  5295  000AF6  0EBF               	movlw	191
  5296  000AF8  6E01               	movwf	TMR5_WriteTimer@timerVal,c
  5297  000AFA  EC13  F007         	call	_TMR5_WriteTimer	;wreg free
  5298                           
  5299                           ;main.c: 325: pulseHigh = 0;
  5300  000AFE  0E00               	movlw	0
  5301  000B00                     L6:
  5302  000B00  6E3D               	movwf	TMR5_DefaultInterruptHandler@pulseHigh,c
  5303                           
  5304                           ;main.c: 326: }
  5305                           ;main.c: 329: PIR5bits.TMR5IF = 0;
  5306  000B02  927E               	bcf	3966,1,c	;volatile
  5307  000B04  0012               	return		;funcret
  5308  000B06                     __end_of_TMR5_DefaultInterruptHandler:
  5309                           	opt stack 0
  5310                           tosu	equ	0xFFF
  5311                           tosh	equ	0xFFE
  5312                           tosl	equ	0xFFD
  5313                           pclatu	equ	0xFFB
  5314                           pclath	equ	0xFFA
  5315                           tblptru	equ	0xFF8
  5316                           tblptrh	equ	0xFF7
  5317                           tblptrl	equ	0xFF6
  5318                           tablat	equ	0xFF5
  5319                           prodh	equ	0xFF4
  5320                           prodl	equ	0xFF3
  5321                           intcon	equ	0xFF2
  5322                           intcon2	equ	0xFF1
  5323                           postinc0	equ	0xFEE
  5324                           fsr0h	equ	0xFEA
  5325                           fsr0l	equ	0xFE9
  5326                           wreg	equ	0xFE8
  5327                           postdec1	equ	0xFE5
  5328                           fsr1h	equ	0xFE2
  5329                           fsr1l	equ	0xFE1
  5330                           indf2	equ	0xFDF
  5331                           postinc2	equ	0xFDE
  5332                           postdec2	equ	0xFDD
  5333                           fsr2h	equ	0xFDA
  5334                           fsr2l	equ	0xFD9
  5335                           status	equ	0xFD8
  5336                           
  5337 ;; *************** function _TMR5_WriteTimer *****************
  5338 ;; Defined at:
  5339 ;;		line 121 in file "mcc_generated_files/tmr5.c"
  5340 ;; Parameters:    Size  Location     Type
  5341 ;;  timerVal        2    0[COMRAM] unsigned int 
  5342 ;; Auto vars:     Size  Location     Type
  5343 ;;		None
  5344 ;; Return value:  Size  Location     Type
  5345 ;;                  1    wreg      void 
  5346 ;; Registers used:
  5347 ;;		wreg, status,2
  5348 ;; Tracked objects:
  5349 ;;		On entry : 0/0
  5350 ;;		On exit  : 0/0
  5351 ;;		Unchanged: 0/0
  5352 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5353 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5354 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5355 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5356 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5357 ;;Total ram usage:        2 bytes
  5358 ;; Hardware stack levels used:    1
  5359 ;; This function calls:
  5360 ;;		Nothing
  5361 ;; This function is called by:
  5362 ;;		_TMR5_DefaultInterruptHandler
  5363 ;;		_TMR5_ISR
  5364 ;;		_TMR5_Reload
  5365 ;; This function uses a non-reentrant model
  5366 ;;
  5367                           
  5368                           	psect	text34
  5369  000E26                     __ptext34:
  5370                           	opt stack 0
  5371  000E26                     _TMR5_WriteTimer:
  5372                           	opt stack 25
  5373                           
  5374                           ;tmr5.c: 123: if (T5CONbits.T5SYNC == 1)
  5375                           
  5376                           ;incstack = 0
  5377  000E26  010F               	movlb	15	; () banked
  5378  000E28  A54E               	btfss	78,2,b	;volatile
  5379  000E2A  D007               	goto	i2l643
  5380                           
  5381                           ; BSR set to: 15
  5382                           ;tmr5.c: 124: {
  5383                           ;tmr5.c: 126: T5CONbits.TMR5ON = 0;
  5384  000E2C  914E               	bcf	78,0,b	;volatile
  5385                           
  5386                           ; BSR set to: 15
  5387                           ;tmr5.c: 129: TMR5H = (timerVal >> 8);
  5388  000E2E  5002               	movf	TMR5_WriteTimer@timerVal+1,w,c
  5389  000E30  6F50               	movwf	80,b	;volatile
  5390                           
  5391                           ; BSR set to: 15
  5392                           ;tmr5.c: 130: TMR5L = (uint8_t) timerVal;
  5393  000E32  C001  FF4F         	movff	TMR5_WriteTimer@timerVal,3919	;volatile
  5394                           
  5395                           ; BSR set to: 15
  5396                           ;tmr5.c: 133: T5CONbits.TMR5ON =1;
  5397  000E36  814E               	bsf	78,0,b	;volatile
  5398                           
  5399                           ;tmr5.c: 134: }
  5400  000E38  0012               	return	
  5401  000E3A                     i2l643:
  5402                           
  5403                           ; BSR set to: 15
  5404                           ;tmr5.c: 135: else
  5405                           ;tmr5.c: 136: {
  5406                           ;tmr5.c: 138: TMR5H = (timerVal >> 8);
  5407                           
  5408                           ; BSR set to: 15
  5409  000E3A  5002               	movf	TMR5_WriteTimer@timerVal+1,w,c
  5410  000E3C  6F50               	movwf	80,b	;volatile
  5411                           
  5412                           ; BSR set to: 15
  5413                           ;tmr5.c: 139: TMR5L = (uint8_t) timerVal;
  5414  000E3E  C001  FF4F         	movff	TMR5_WriteTimer@timerVal,3919	;volatile
  5415  000E42  0012               	return	
  5416  000E44                     __end_of_TMR5_WriteTimer:
  5417                           	opt stack 0
  5418                           tosu	equ	0xFFF
  5419                           tosh	equ	0xFFE
  5420                           tosl	equ	0xFFD
  5421                           pclatu	equ	0xFFB
  5422                           pclath	equ	0xFFA
  5423                           tblptru	equ	0xFF8
  5424                           tblptrh	equ	0xFF7
  5425                           tblptrl	equ	0xFF6
  5426                           tablat	equ	0xFF5
  5427                           prodh	equ	0xFF4
  5428                           prodl	equ	0xFF3
  5429                           intcon	equ	0xFF2
  5430                           intcon2	equ	0xFF1
  5431                           postinc0	equ	0xFEE
  5432                           fsr0h	equ	0xFEA
  5433                           fsr0l	equ	0xFE9
  5434                           wreg	equ	0xFE8
  5435                           postdec1	equ	0xFE5
  5436                           fsr1h	equ	0xFE2
  5437                           fsr1l	equ	0xFE1
  5438                           indf2	equ	0xFDF
  5439                           postinc2	equ	0xFDE
  5440                           postdec2	equ	0xFDD
  5441                           fsr2h	equ	0xFDA
  5442                           fsr2l	equ	0xFD9
  5443                           status	equ	0xFD8
  5444                           
  5445 ;; *************** function _TMR2_ISR *****************
  5446 ;; Defined at:
  5447 ;;		line 119 in file "mcc_generated_files/tmr2.c"
  5448 ;; Parameters:    Size  Location     Type
  5449 ;;		None
  5450 ;; Auto vars:     Size  Location     Type
  5451 ;;		None
  5452 ;; Return value:  Size  Location     Type
  5453 ;;                  1    wreg      void 
  5454 ;; Registers used:
  5455 ;;		wreg, status,2, status,0, pclath, tosl, cstack
  5456 ;; Tracked objects:
  5457 ;;		On entry : 0/0
  5458 ;;		On exit  : 0/0
  5459 ;;		Unchanged: 0/0
  5460 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5461 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5462 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5463 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5464 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5465 ;;Total ram usage:        0 bytes
  5466 ;; Hardware stack levels used:    1
  5467 ;; Hardware stack levels required when called:    2
  5468 ;; This function calls:
  5469 ;;		Absolute function
  5470 ;;		_TMR2_DefaultInterruptHandler
  5471 ;; This function is called by:
  5472 ;;		_INTERRUPT_InterruptManager
  5473 ;; This function uses a non-reentrant model
  5474 ;;
  5475                           
  5476                           	psect	text35
  5477  000E06                     __ptext35:
  5478                           	opt stack 0
  5479  000E06                     _TMR2_ISR:
  5480                           	opt stack 24
  5481                           
  5482                           ;tmr2.c: 123: PIR1bits.TMR2IF = 0;
  5483                           
  5484                           ; BSR set to: 15
  5485                           ;incstack = 0
  5486  000E06  929E               	bcf	3998,1,c	;volatile
  5487                           
  5488                           ;tmr2.c: 125: if(TMR2_InterruptHandler)
  5489  000E08  502D               	movf	_TMR2_InterruptHandler,w,c
  5490  000E0A  102E               	iorwf	_TMR2_InterruptHandler+1,w,c
  5491  000E0C  B4D8               	btfsc	status,2,c
  5492  000E0E  0012               	return	
  5493                           
  5494                           ;tmr2.c: 126: {
  5495                           ;tmr2.c: 127: TMR2_InterruptHandler();
  5496  000E10  D801               	call	i2u120_48
  5497  000E12  0012               	return	
  5498  000E14                     i2u120_48:
  5499  000E14  0005               	push	
  5500  000E16  6EFA               	movwf	pclath,c
  5501  000E18  502D               	movf	_TMR2_InterruptHandler,w,c
  5502  000E1A  6EFD               	movwf	tosl,c
  5503  000E1C  502E               	movf	_TMR2_InterruptHandler+1,w,c
  5504  000E1E  6EFE               	movwf	tosh,c
  5505  000E20  6AFF               	clrf	tosu,c
  5506  000E22  50FA               	movf	pclath,w,c
  5507  000E24  0012               	return		;indir
  5508  000E26                     __end_of_TMR2_ISR:
  5509                           	opt stack 0
  5510                           tosu	equ	0xFFF
  5511                           tosh	equ	0xFFE
  5512                           tosl	equ	0xFFD
  5513                           pclatu	equ	0xFFB
  5514                           pclath	equ	0xFFA
  5515                           tblptru	equ	0xFF8
  5516                           tblptrh	equ	0xFF7
  5517                           tblptrl	equ	0xFF6
  5518                           tablat	equ	0xFF5
  5519                           prodh	equ	0xFF4
  5520                           prodl	equ	0xFF3
  5521                           intcon	equ	0xFF2
  5522                           intcon2	equ	0xFF1
  5523                           postinc0	equ	0xFEE
  5524                           fsr0h	equ	0xFEA
  5525                           fsr0l	equ	0xFE9
  5526                           wreg	equ	0xFE8
  5527                           postdec1	equ	0xFE5
  5528                           fsr1h	equ	0xFE2
  5529                           fsr1l	equ	0xFE1
  5530                           indf2	equ	0xFDF
  5531                           postinc2	equ	0xFDE
  5532                           postdec2	equ	0xFDD
  5533                           fsr2h	equ	0xFDA
  5534                           fsr2l	equ	0xFD9
  5535                           status	equ	0xFD8
  5536                           
  5537 ;; *************** function _TMR2_DefaultInterruptHandler *****************
  5538 ;; Defined at:
  5539 ;;		line 287 in file "main.c"
  5540 ;; Parameters:    Size  Location     Type
  5541 ;;		None
  5542 ;; Auto vars:     Size  Location     Type
  5543 ;;  error           4    6[COMRAM] long 
  5544 ;; Return value:  Size  Location     Type
  5545 ;;                  1    wreg      void 
  5546 ;; Registers used:
  5547 ;;		wreg, status,2, status,0, cstack
  5548 ;; Tracked objects:
  5549 ;;		On entry : 0/0
  5550 ;;		On exit  : 0/0
  5551 ;;		Unchanged: 0/0
  5552 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5553 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5554 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5555 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5556 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5557 ;;Total ram usage:        8 bytes
  5558 ;; Hardware stack levels used:    1
  5559 ;; Hardware stack levels required when called:    1
  5560 ;; This function calls:
  5561 ;;		_TMR2_WriteTimer
  5562 ;;		i2_setMotorSpeed
  5563 ;; This function is called by:
  5564 ;;		_TMR2_Initialize
  5565 ;;		_TMR2_ISR
  5566 ;; This function uses a non-reentrant model
  5567 ;;
  5568                           
  5569                           	psect	text36
  5570  0007E6                     __ptext36:
  5571                           	opt stack 0
  5572  0007E6                     _TMR2_DefaultInterruptHandler:
  5573                           	opt stack 24
  5574                           
  5575                           ;main.c: 288: if(motorControlMode == 1){
  5576                           
  5577                           ;incstack = 0
  5578  0007E6  0442               	decf	_motorControlMode,w,c
  5579  0007E8  A4D8               	btfss	status,2,c
  5580  0007EA  D072               	goto	i2l517
  5581                           
  5582                           ;main.c: 289: int32_t error = (encoderPosition - motorSetPoint);
  5583  0007EC  C09C  F003         	movff	_motorSetPoint,??_TMR2_DefaultInterruptHandler
  5584  0007F0  C09D  F004         	movff	_motorSetPoint+1,??_TMR2_DefaultInterruptHandler+1
  5585  0007F4  C09E  F005         	movff	_motorSetPoint+2,??_TMR2_DefaultInterruptHandler+2
  5586  0007F8  C09F  F006         	movff	_motorSetPoint+3,??_TMR2_DefaultInterruptHandler+3
  5587  0007FC  1E03               	comf	??_TMR2_DefaultInterruptHandler,f,c
  5588  0007FE  1E04               	comf	??_TMR2_DefaultInterruptHandler+1,f,c
  5589  000800  1E05               	comf	??_TMR2_DefaultInterruptHandler+2,f,c
  5590  000802  1E06               	comf	??_TMR2_DefaultInterruptHandler+3,f,c
  5591  000804  2A03               	incf	??_TMR2_DefaultInterruptHandler,f,c
  5592  000806  0E00               	movlw	0
  5593  000808  2204               	addwfc	??_TMR2_DefaultInterruptHandler+1,f,c
  5594  00080A  2205               	addwfc	??_TMR2_DefaultInterruptHandler+2,f,c
  5595  00080C  2206               	addwfc	??_TMR2_DefaultInterruptHandler+3,f,c
  5596  00080E  0100               	movlb	0	; () banked
  5597  000810  5198               	movf	_encoderPosition& (0+255),w,b
  5598  000812  2403               	addwf	??_TMR2_DefaultInterruptHandler,w,c
  5599  000814  6E07               	movwf	TMR2_DefaultInterruptHandler@error,c
  5600  000816  5199               	movf	(_encoderPosition+1)& (0+255),w,b
  5601  000818  2004               	addwfc	??_TMR2_DefaultInterruptHandler+1,w,c
  5602  00081A  6E08               	movwf	TMR2_DefaultInterruptHandler@error+1,c
  5603  00081C  519A               	movf	(_encoderPosition+2)& (0+255),w,b
  5604  00081E  2005               	addwfc	??_TMR2_DefaultInterruptHandler+2,w,c
  5605  000820  6E09               	movwf	TMR2_DefaultInterruptHandler@error+2,c
  5606  000822  519B               	movf	(_encoderPosition+3)& (0+255),w,b
  5607  000824  2006               	addwfc	??_TMR2_DefaultInterruptHandler+3,w,c
  5608  000826  6E0A               	movwf	TMR2_DefaultInterruptHandler@error+3,c
  5609                           
  5610                           ;main.c: 290: if(error > 500){
  5611  000828  BE0A               	btfsc	TMR2_DefaultInterruptHandler@error+3,7,c
  5612  00082A  D011               	goto	i2l512
  5613  00082C  500A               	movf	TMR2_DefaultInterruptHandler@error+3,w,c
  5614  00082E  1009               	iorwf	TMR2_DefaultInterruptHandler@error+2,w,c
  5615  000830  E106               	bnz	i2u100_40
  5616  000832  0EF5               	movlw	245
  5617  000834  5C07               	subwf	TMR2_DefaultInterruptHandler@error,w,c
  5618  000836  0E01               	movlw	1
  5619  000838  5808               	subwfb	TMR2_DefaultInterruptHandler@error+1,w,c
  5620  00083A  A0D8               	btfss	status,0,c
  5621  00083C  D008               	goto	i2l512
  5622  00083E                     i2u100_40:
  5623                           
  5624                           ; BSR set to: 0
  5625                           ;main.c: 291: error = 500;
  5626  00083E  0EF4               	movlw	244
  5627  000840  6E07               	movwf	TMR2_DefaultInterruptHandler@error,c
  5628  000842  0E01               	movlw	1
  5629  000844  6E08               	movwf	TMR2_DefaultInterruptHandler@error+1,c
  5630  000846  0E00               	movlw	0
  5631  000848  6E09               	movwf	TMR2_DefaultInterruptHandler@error+2,c
  5632  00084A  0E00               	movlw	0
  5633  00084C  6E0A               	movwf	TMR2_DefaultInterruptHandler@error+3,c
  5634  00084E                     i2l512:
  5635                           
  5636                           ; BSR set to: 0
  5637                           ;main.c: 292: }
  5638                           ;main.c: 293: if(error < -500){
  5639                           
  5640                           ; BSR set to: 0
  5641  00084E  AE0A               	btfss	TMR2_DefaultInterruptHandler@error+3,7,c
  5642  000850  D012               	goto	i2l513
  5643  000852  0E0C               	movlw	12
  5644  000854  5C07               	subwf	TMR2_DefaultInterruptHandler@error,w,c
  5645  000856  0EFE               	movlw	254
  5646  000858  5808               	subwfb	TMR2_DefaultInterruptHandler@error+1,w,c
  5647  00085A  0EFF               	movlw	255
  5648  00085C  5809               	subwfb	TMR2_DefaultInterruptHandler@error+2,w,c
  5649  00085E  0EFF               	movlw	255
  5650  000860  580A               	subwfb	TMR2_DefaultInterruptHandler@error+3,w,c
  5651  000862  B0D8               	btfsc	status,0,c
  5652  000864  D008               	goto	i2l513
  5653                           
  5654                           ; BSR set to: 0
  5655                           ;main.c: 294: error = -500;
  5656  000866  0E0C               	movlw	12
  5657  000868  6E07               	movwf	TMR2_DefaultInterruptHandler@error,c
  5658  00086A  0EFE               	movlw	254
  5659  00086C  6E08               	movwf	TMR2_DefaultInterruptHandler@error+1,c
  5660  00086E  0EFF               	movlw	255
  5661  000870  6E09               	movwf	TMR2_DefaultInterruptHandler@error+2,c
  5662  000872  0EFF               	movlw	255
  5663  000874  6E0A               	movwf	TMR2_DefaultInterruptHandler@error+3,c
  5664  000876                     i2l513:
  5665                           
  5666                           ; BSR set to: 0
  5667                           ;main.c: 295: }
  5668                           ;main.c: 296: if(error >100 || error < -100){
  5669                           
  5670                           ; BSR set to: 0
  5671  000876  BE0A               	btfsc	TMR2_DefaultInterruptHandler@error+3,7,c
  5672  000878  D008               	goto	i2u102_40
  5673  00087A  500A               	movf	TMR2_DefaultInterruptHandler@error+3,w,c
  5674  00087C  1009               	iorwf	TMR2_DefaultInterruptHandler@error+2,w,c
  5675  00087E  1008               	iorwf	TMR2_DefaultInterruptHandler@error+1,w,c
  5676  000880  E110               	bnz	i2l2320
  5677  000882  0E65               	movlw	101
  5678  000884  5C07               	subwf	TMR2_DefaultInterruptHandler@error,w,c
  5679  000886  B0D8               	btfsc	status,0,c
  5680  000888  D00C               	goto	i2u103_40
  5681  00088A                     i2u102_40:
  5682                           
  5683                           ; BSR set to: 0
  5684  00088A  AE0A               	btfss	TMR2_DefaultInterruptHandler@error+3,7,c
  5685  00088C  D01B               	goto	i2l514
  5686  00088E  0E9C               	movlw	156
  5687  000890  5C07               	subwf	TMR2_DefaultInterruptHandler@error,w,c
  5688  000892  0EFF               	movlw	255
  5689  000894  5808               	subwfb	TMR2_DefaultInterruptHandler@error+1,w,c
  5690  000896  0EFF               	movlw	255
  5691  000898  5809               	subwfb	TMR2_DefaultInterruptHandler@error+2,w,c
  5692  00089A  0EFF               	movlw	255
  5693  00089C  580A               	subwfb	TMR2_DefaultInterruptHandler@error+3,w,c
  5694  00089E  B0D8               	btfsc	status,0,c
  5695  0008A0  D011               	goto	i2l514
  5696  0008A2                     i2u103_40:
  5697  0008A2                     i2l2320:
  5698                           
  5699                           ; BSR set to: 0
  5700                           ;main.c: 297: setMotorSpeed(3000 - error);
  5701  0008A2  C007  F003         	movff	TMR2_DefaultInterruptHandler@error,??_TMR2_DefaultInterruptHandler
  5702  0008A6  C008  F004         	movff	TMR2_DefaultInterruptHandler@error+1,??_TMR2_DefaultInterruptHandler+1
  5703  0008AA  1E03               	comf	??_TMR2_DefaultInterruptHandler,f,c
  5704  0008AC  1E04               	comf	??_TMR2_DefaultInterruptHandler+1,f,c
  5705  0008AE  4A03               	infsnz	??_TMR2_DefaultInterruptHandler,f,c
  5706  0008B0  2A04               	incf	??_TMR2_DefaultInterruptHandler+1,f,c
  5707  0008B2  0EB8               	movlw	184
  5708  0008B4  2403               	addwf	??_TMR2_DefaultInterruptHandler,w,c
  5709  0008B6  6E01               	movwf	i2setMotorSpeed@speed,c
  5710  0008B8  0E0B               	movlw	11
  5711  0008BA  2004               	addwfc	??_TMR2_DefaultInterruptHandler+1,w,c
  5712  0008BC  6E02               	movwf	i2setMotorSpeed@speed+1,c
  5713  0008BE  EC43  F006         	call	i2_setMotorSpeed	;wreg free
  5714                           
  5715                           ;main.c: 298: }
  5716  0008C2  D006               	goto	i2l517
  5717  0008C4                     i2l514:
  5718                           
  5719                           ;main.c: 299: else{
  5720                           ;main.c: 300: setMotorSpeed(3000);
  5721  0008C4  0E0B               	movlw	11
  5722  0008C6  6E02               	movwf	i2setMotorSpeed@speed+1,c
  5723  0008C8  0EB8               	movlw	184
  5724  0008CA  6E01               	movwf	i2setMotorSpeed@speed,c
  5725  0008CC  EC43  F006         	call	i2_setMotorSpeed	;wreg free
  5726  0008D0                     i2l517:
  5727                           
  5728                           ;main.c: 301: }
  5729                           ;main.c: 303: }
  5730                           ;main.c: 304: if(encoderPosition <leftLimit && motorSpeed <3000){
  5731  0008D0  0100               	movlb	0	; () banked
  5732  0008D2  518A               	movf	_leftLimit& (0+255),w,b
  5733  0008D4  5D98               	subwf	_encoderPosition& (0+255),w,b
  5734  0008D6  518B               	movf	(_leftLimit+1)& (0+255),w,b
  5735  0008D8  5999               	subwfb	(_encoderPosition+1)& (0+255),w,b
  5736  0008DA  518C               	movf	(_leftLimit+2)& (0+255),w,b
  5737  0008DC  599A               	subwfb	(_encoderPosition+2)& (0+255),w,b
  5738  0008DE  519B               	movf	(_encoderPosition+3)& (0+255),w,b
  5739  0008E0  0A80               	xorlw	128
  5740  0008E2  6E03               	movwf	??_TMR2_DefaultInterruptHandler& (0+255),c
  5741  0008E4  518D               	movf	(_leftLimit+3)& (0+255),w,b
  5742  0008E6  0A80               	xorlw	128
  5743  0008E8  5803               	subwfb	??_TMR2_DefaultInterruptHandler& (0+255),w,c
  5744  0008EA  B0D8               	btfsc	status,0,c
  5745  0008EC  D00C               	goto	i2l518
  5746                           
  5747                           ; BSR set to: 0
  5748  0008EE  0EB8               	movlw	184
  5749  0008F0  5D8E               	subwf	_motorSpeed& (0+255),w,b
  5750  0008F2  0E0B               	movlw	11
  5751  0008F4  598F               	subwfb	(_motorSpeed+1)& (0+255),w,b
  5752  0008F6  B0D8               	btfsc	status,0,c
  5753  0008F8  D006               	goto	i2l518
  5754                           
  5755                           ; BSR set to: 0
  5756                           ;main.c: 305: setMotorSpeed(3000);
  5757  0008FA  0E0B               	movlw	11
  5758  0008FC  6E02               	movwf	i2setMotorSpeed@speed+1,c
  5759  0008FE  0EB8               	movlw	184
  5760  000900  6E01               	movwf	i2setMotorSpeed@speed,c
  5761  000902  EC43  F006         	call	i2_setMotorSpeed	;wreg free
  5762  000906                     i2l518:
  5763                           
  5764                           ;main.c: 306: }
  5765                           ;main.c: 307: if(encoderPosition >rightLimit&& motorSpeed >3000){
  5766  000906  0100               	movlb	0	; () banked
  5767  000908  5198               	movf	_encoderPosition& (0+255),w,b
  5768  00090A  5D86               	subwf	_rightLimit& (0+255),w,b
  5769  00090C  5199               	movf	(_encoderPosition+1)& (0+255),w,b
  5770  00090E  5987               	subwfb	(_rightLimit+1)& (0+255),w,b
  5771  000910  519A               	movf	(_encoderPosition+2)& (0+255),w,b
  5772  000912  5988               	subwfb	(_rightLimit+2)& (0+255),w,b
  5773  000914  5189               	movf	(_rightLimit+3)& (0+255),w,b
  5774  000916  0A80               	xorlw	128
  5775  000918  6E03               	movwf	??_TMR2_DefaultInterruptHandler& (0+255),c
  5776  00091A  519B               	movf	(_encoderPosition+3)& (0+255),w,b
  5777  00091C  0A80               	xorlw	128
  5778  00091E  5803               	subwfb	??_TMR2_DefaultInterruptHandler& (0+255),w,c
  5779  000920  B0D8               	btfsc	status,0,c
  5780  000922  D00C               	goto	i2l519
  5781                           
  5782                           ; BSR set to: 0
  5783  000924  0EB9               	movlw	185
  5784  000926  5D8E               	subwf	_motorSpeed& (0+255),w,b
  5785  000928  0E0B               	movlw	11
  5786  00092A  598F               	subwfb	(_motorSpeed+1)& (0+255),w,b
  5787  00092C  A0D8               	btfss	status,0,c
  5788  00092E  D006               	goto	i2l519
  5789                           
  5790                           ; BSR set to: 0
  5791                           ;main.c: 308: setMotorSpeed(3000);
  5792  000930  0E0B               	movlw	11
  5793  000932  6E02               	movwf	i2setMotorSpeed@speed+1,c
  5794  000934  0EB8               	movlw	184
  5795  000936  6E01               	movwf	i2setMotorSpeed@speed,c
  5796  000938  EC43  F006         	call	i2_setMotorSpeed	;wreg free
  5797  00093C                     i2l519:
  5798                           
  5799                           ;main.c: 309: }
  5800                           ;main.c: 311: TMR2_WriteTimer(0);
  5801  00093C  0E00               	movlw	0
  5802  00093E  ECE6  F007         	call	_TMR2_WriteTimer
  5803                           
  5804                           ;main.c: 312: PIR1bits.TMR2IF = 0;
  5805  000942  929E               	bcf	3998,1,c	;volatile
  5806  000944  0012               	return		;funcret
  5807  000946                     __end_of_TMR2_DefaultInterruptHandler:
  5808                           	opt stack 0
  5809                           tosu	equ	0xFFF
  5810                           tosh	equ	0xFFE
  5811                           tosl	equ	0xFFD
  5812                           pclatu	equ	0xFFB
  5813                           pclath	equ	0xFFA
  5814                           tblptru	equ	0xFF8
  5815                           tblptrh	equ	0xFF7
  5816                           tblptrl	equ	0xFF6
  5817                           tablat	equ	0xFF5
  5818                           prodh	equ	0xFF4
  5819                           prodl	equ	0xFF3
  5820                           intcon	equ	0xFF2
  5821                           intcon2	equ	0xFF1
  5822                           postinc0	equ	0xFEE
  5823                           fsr0h	equ	0xFEA
  5824                           fsr0l	equ	0xFE9
  5825                           wreg	equ	0xFE8
  5826                           postdec1	equ	0xFE5
  5827                           fsr1h	equ	0xFE2
  5828                           fsr1l	equ	0xFE1
  5829                           indf2	equ	0xFDF
  5830                           postinc2	equ	0xFDE
  5831                           postdec2	equ	0xFDD
  5832                           fsr2h	equ	0xFDA
  5833                           fsr2l	equ	0xFD9
  5834                           status	equ	0xFD8
  5835                           
  5836 ;; *************** function i2_setMotorSpeed *****************
  5837 ;; Defined at:
  5838 ;;		line 228 in file "main.c"
  5839 ;; Parameters:    Size  Location     Type
  5840 ;;  speed           2    0[COMRAM] unsigned int 
  5841 ;; Auto vars:     Size  Location     Type
  5842 ;;		None
  5843 ;; Return value:  Size  Location     Type
  5844 ;;                  1    wreg      void 
  5845 ;; Registers used:
  5846 ;;		wreg, status,2, status,0
  5847 ;; Tracked objects:
  5848 ;;		On entry : 0/0
  5849 ;;		On exit  : 0/0
  5850 ;;		Unchanged: 0/0
  5851 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5852 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5853 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5854 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5855 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5856 ;;Total ram usage:        2 bytes
  5857 ;; Hardware stack levels used:    1
  5858 ;; This function calls:
  5859 ;;		Nothing
  5860 ;; This function is called by:
  5861 ;;		_TMR2_DefaultInterruptHandler
  5862 ;; This function uses a non-reentrant model
  5863 ;;
  5864                           
  5865                           	psect	text37
  5866  000C86                     __ptext37:
  5867                           	opt stack 0
  5868  000C86                     i2_setMotorSpeed:
  5869                           	opt stack 24
  5870                           
  5871                           ;main.c: 231: if(speed< 2500){
  5872                           
  5873                           ;incstack = 0
  5874  000C86  0EC4               	movlw	196
  5875  000C88  5C01               	subwf	i2setMotorSpeed@speed,w,c
  5876  000C8A  0E09               	movlw	9
  5877  000C8C  5802               	subwfb	i2setMotorSpeed@speed+1,w,c
  5878  000C8E  B0D8               	btfsc	status,0,c
  5879  000C90  D004               	goto	i2l477
  5880                           
  5881                           ;main.c: 232: speed = 2500;
  5882  000C92  0E09               	movlw	9
  5883  000C94  6E02               	movwf	i2setMotorSpeed@speed+1,c
  5884  000C96  0EC4               	movlw	196
  5885  000C98  D009               	goto	L7
  5886  000C9A                     i2l477:
  5887                           
  5888                           ;main.c: 235: else if(speed > 3500){
  5889  000C9A  0EAD               	movlw	173
  5890  000C9C  5C01               	subwf	i2setMotorSpeed@speed,w,c
  5891  000C9E  0E0D               	movlw	13
  5892  000CA0  5802               	subwfb	i2setMotorSpeed@speed+1,w,c
  5893  000CA2  A0D8               	btfss	status,0,c
  5894  000CA4  D004               	goto	i2l479
  5895                           
  5896                           ;main.c: 236: speed = 3500;
  5897  000CA6  0E0D               	movlw	13
  5898  000CA8  6E02               	movwf	i2setMotorSpeed@speed+1,c
  5899  000CAA  0EAC               	movlw	172
  5900  000CAC                     L7:
  5901  000CAC  6E01               	movwf	i2setMotorSpeed@speed,c
  5902  000CAE                     i2l479:
  5903                           
  5904                           ;main.c: 237: }
  5905                           ;main.c: 239: motorSpeed = speed;
  5906  000CAE  C001  F08E         	movff	i2setMotorSpeed@speed,_motorSpeed
  5907  000CB2  C002  F08F         	movff	i2setMotorSpeed@speed+1,_motorSpeed+1
  5908  000CB6  0012               	return		;funcret
  5909  000CB8                     __end_ofi2_setMotorSpeed:
  5910                           	opt stack 0
  5911                           tosu	equ	0xFFF
  5912                           tosh	equ	0xFFE
  5913                           tosl	equ	0xFFD
  5914                           pclatu	equ	0xFFB
  5915                           pclath	equ	0xFFA
  5916                           tblptru	equ	0xFF8
  5917                           tblptrh	equ	0xFF7
  5918                           tblptrl	equ	0xFF6
  5919                           tablat	equ	0xFF5
  5920                           prodh	equ	0xFF4
  5921                           prodl	equ	0xFF3
  5922                           intcon	equ	0xFF2
  5923                           intcon2	equ	0xFF1
  5924                           postinc0	equ	0xFEE
  5925                           fsr0h	equ	0xFEA
  5926                           fsr0l	equ	0xFE9
  5927                           wreg	equ	0xFE8
  5928                           postdec1	equ	0xFE5
  5929                           fsr1h	equ	0xFE2
  5930                           fsr1l	equ	0xFE1
  5931                           indf2	equ	0xFDF
  5932                           postinc2	equ	0xFDE
  5933                           postdec2	equ	0xFDD
  5934                           fsr2h	equ	0xFDA
  5935                           fsr2l	equ	0xFD9
  5936                           status	equ	0xFD8
  5937                           
  5938 ;; *************** function _TMR2_WriteTimer *****************
  5939 ;; Defined at:
  5940 ;;		line 108 in file "mcc_generated_files/tmr2.c"
  5941 ;; Parameters:    Size  Location     Type
  5942 ;;  timerVal        1    wreg     unsigned char 
  5943 ;; Auto vars:     Size  Location     Type
  5944 ;;  timerVal        1    0[COMRAM] unsigned char 
  5945 ;; Return value:  Size  Location     Type
  5946 ;;                  1    wreg      void 
  5947 ;; Registers used:
  5948 ;;		wreg
  5949 ;; Tracked objects:
  5950 ;;		On entry : 0/0
  5951 ;;		On exit  : 0/0
  5952 ;;		Unchanged: 0/0
  5953 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5954 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5955 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5956 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5957 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5958 ;;Total ram usage:        1 bytes
  5959 ;; Hardware stack levels used:    1
  5960 ;; This function calls:
  5961 ;;		Nothing
  5962 ;; This function is called by:
  5963 ;;		_TMR2_DefaultInterruptHandler
  5964 ;; This function uses a non-reentrant model
  5965 ;;
  5966                           
  5967                           	psect	text38
  5968  000FCC                     __ptext38:
  5969                           	opt stack 0
  5970  000FCC                     _TMR2_WriteTimer:
  5971                           	opt stack 24
  5972                           
  5973                           ;incstack = 0
  5974                           ;TMR2_WriteTimer@timerVal stored from wreg
  5975  000FCC  6E01               	movwf	TMR2_WriteTimer@timerVal,c
  5976                           
  5977                           ;tmr2.c: 111: TMR2 = timerVal;
  5978  000FCE  C001  FFBC         	movff	TMR2_WriteTimer@timerVal,4028	;volatile
  5979  000FD2  0012               	return		;funcret
  5980  000FD4                     __end_of_TMR2_WriteTimer:
  5981                           	opt stack 0
  5982                           tosu	equ	0xFFF
  5983                           tosh	equ	0xFFE
  5984                           tosl	equ	0xFFD
  5985                           pclatu	equ	0xFFB
  5986                           pclath	equ	0xFFA
  5987                           tblptru	equ	0xFF8
  5988                           tblptrh	equ	0xFF7
  5989                           tblptrl	equ	0xFF6
  5990                           tablat	equ	0xFF5
  5991                           prodh	equ	0xFF4
  5992                           prodl	equ	0xFF3
  5993                           intcon	equ	0xFF2
  5994                           intcon2	equ	0xFF1
  5995                           postinc0	equ	0xFEE
  5996                           fsr0h	equ	0xFEA
  5997                           fsr0l	equ	0xFE9
  5998                           wreg	equ	0xFE8
  5999                           postdec1	equ	0xFE5
  6000                           fsr1h	equ	0xFE2
  6001                           fsr1l	equ	0xFE1
  6002                           indf2	equ	0xFDF
  6003                           postinc2	equ	0xFDE
  6004                           postdec2	equ	0xFDD
  6005                           fsr2h	equ	0xFDA
  6006                           fsr2l	equ	0xFD9
  6007                           status	equ	0xFD8
  6008                           
  6009 ;; *************** function _TMR1_ISR *****************
  6010 ;; Defined at:
  6011 ;;		line 158 in file "mcc_generated_files/tmr1.c"
  6012 ;; Parameters:    Size  Location     Type
  6013 ;;		None
  6014 ;; Auto vars:     Size  Location     Type
  6015 ;;		None
  6016 ;; Return value:  Size  Location     Type
  6017 ;;                  1    wreg      void 
  6018 ;; Registers used:
  6019 ;;		wreg, status,2, status,0, pclath, tosl, cstack
  6020 ;; Tracked objects:
  6021 ;;		On entry : 0/0
  6022 ;;		On exit  : 0/0
  6023 ;;		Unchanged: 0/0
  6024 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6025 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6026 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6027 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6028 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6029 ;;Total ram usage:        0 bytes
  6030 ;; Hardware stack levels used:    1
  6031 ;; Hardware stack levels required when called:    2
  6032 ;; This function calls:
  6033 ;;		Absolute function
  6034 ;;		_TMR1_DefaultInterruptHandler
  6035 ;;		_TMR1_WriteTimer
  6036 ;; This function is called by:
  6037 ;;		_INTERRUPT_InterruptManager
  6038 ;; This function uses a non-reentrant model
  6039 ;;
  6040                           
  6041                           	psect	text39
  6042  000D40                     __ptext39:
  6043                           	opt stack 0
  6044  000D40                     _TMR1_ISR:
  6045                           	opt stack 24
  6046                           
  6047                           ;tmr1.c: 162: PIR1bits.TMR1IF = 0;
  6048                           
  6049                           ;incstack = 0
  6050  000D40  909E               	bcf	3998,0,c	;volatile
  6051                           
  6052                           ;tmr1.c: 163: TMR1_WriteTimer(timer1ReloadVal);
  6053  000D42  C035  F001         	movff	_timer1ReloadVal,TMR1_WriteTimer@timerVal	;volatile
  6054  000D46  C036  F002         	movff	_timer1ReloadVal+1,TMR1_WriteTimer@timerVal+1	;volatile
  6055  000D4A  EC5A  F007         	call	_TMR1_WriteTimer	;wreg free
  6056                           
  6057                           ;tmr1.c: 165: if(TMR1_InterruptHandler)
  6058  000D4E  5033               	movf	_TMR1_InterruptHandler,w,c
  6059  000D50  1034               	iorwf	_TMR1_InterruptHandler+1,w,c
  6060  000D52  B4D8               	btfsc	status,2,c
  6061  000D54  0012               	return	
  6062                           
  6063                           ;tmr1.c: 166: {
  6064                           ;tmr1.c: 167: TMR1_InterruptHandler();
  6065  000D56  D801               	call	i2u122_48
  6066  000D58  0012               	return	
  6067  000D5A                     i2u122_48:
  6068  000D5A  0005               	push	
  6069  000D5C  6EFA               	movwf	pclath,c
  6070  000D5E  5033               	movf	_TMR1_InterruptHandler,w,c
  6071  000D60  6EFD               	movwf	tosl,c
  6072  000D62  5034               	movf	_TMR1_InterruptHandler+1,w,c
  6073  000D64  6EFE               	movwf	tosh,c
  6074  000D66  6AFF               	clrf	tosu,c
  6075  000D68  50FA               	movf	pclath,w,c
  6076  000D6A  0012               	return		;indir
  6077  000D6C                     __end_of_TMR1_ISR:
  6078                           	opt stack 0
  6079                           tosu	equ	0xFFF
  6080                           tosh	equ	0xFFE
  6081                           tosl	equ	0xFFD
  6082                           pclatu	equ	0xFFB
  6083                           pclath	equ	0xFFA
  6084                           tblptru	equ	0xFF8
  6085                           tblptrh	equ	0xFF7
  6086                           tblptrl	equ	0xFF6
  6087                           tablat	equ	0xFF5
  6088                           prodh	equ	0xFF4
  6089                           prodl	equ	0xFF3
  6090                           intcon	equ	0xFF2
  6091                           intcon2	equ	0xFF1
  6092                           postinc0	equ	0xFEE
  6093                           fsr0h	equ	0xFEA
  6094                           fsr0l	equ	0xFE9
  6095                           wreg	equ	0xFE8
  6096                           postdec1	equ	0xFE5
  6097                           fsr1h	equ	0xFE2
  6098                           fsr1l	equ	0xFE1
  6099                           indf2	equ	0xFDF
  6100                           postinc2	equ	0xFDE
  6101                           postdec2	equ	0xFDD
  6102                           fsr2h	equ	0xFDA
  6103                           fsr2l	equ	0xFD9
  6104                           status	equ	0xFD8
  6105                           
  6106 ;; *************** function _TMR1_DefaultInterruptHandler *****************
  6107 ;; Defined at:
  6108 ;;		line 270 in file "main.c"
  6109 ;; Parameters:    Size  Location     Type
  6110 ;;		None
  6111 ;; Auto vars:     Size  Location     Type
  6112 ;;		None
  6113 ;; Return value:  Size  Location     Type
  6114 ;;                  1    wreg      void 
  6115 ;; Registers used:
  6116 ;;		wreg, status,2, status,0, cstack
  6117 ;; Tracked objects:
  6118 ;;		On entry : 0/0
  6119 ;;		On exit  : 0/0
  6120 ;;		Unchanged: 0/0
  6121 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6122 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6123 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6124 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6125 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6126 ;;Total ram usage:        2 bytes
  6127 ;; Hardware stack levels used:    1
  6128 ;; Hardware stack levels required when called:    1
  6129 ;; This function calls:
  6130 ;;		_TMR1_WriteTimer
  6131 ;; This function is called by:
  6132 ;;		_TMR1_Initialize
  6133 ;;		_TMR1_ISR
  6134 ;; This function uses a non-reentrant model
  6135 ;;
  6136                           
  6137                           	psect	text40
  6138  000B06                     __ptext40:
  6139                           	opt stack 0
  6140  000B06                     _TMR1_DefaultInterruptHandler:
  6141                           	opt stack 24
  6142                           
  6143                           ;main.c: 271: static uint8_t pulseHigh = 0;
  6144                           ;main.c: 272: if(!pulseHigh){
  6145                           
  6146                           ;incstack = 0
  6147  000B06  503E               	movf	TMR1_DefaultInterruptHandler@pulseHigh,w,c
  6148  000B08  A4D8               	btfss	status,2,c
  6149  000B0A  D013               	goto	i2l502
  6150                           
  6151                           ;main.c: 273: do { LATAbits.LATA0 = 1; } while(0);
  6152  000B0C  8089               	bsf	3977,0,c	;volatile
  6153                           
  6154                           ;main.c: 274: TMR1_WriteTimer(0xFFFF -pitchPosition );
  6155  000B0E  C090  F003         	movff	_pitchPosition,??_TMR1_DefaultInterruptHandler
  6156  000B12  C091  F004         	movff	_pitchPosition+1,??_TMR1_DefaultInterruptHandler+1
  6157  000B16  1E03               	comf	??_TMR1_DefaultInterruptHandler,f,c
  6158  000B18  1E04               	comf	??_TMR1_DefaultInterruptHandler+1,f,c
  6159  000B1A  4A03               	infsnz	??_TMR1_DefaultInterruptHandler,f,c
  6160  000B1C  2A04               	incf	??_TMR1_DefaultInterruptHandler+1,f,c
  6161  000B1E  0EFF               	movlw	255
  6162  000B20  2403               	addwf	??_TMR1_DefaultInterruptHandler,w,c
  6163  000B22  6E01               	movwf	TMR1_WriteTimer@timerVal,c
  6164  000B24  0EFF               	movlw	255
  6165  000B26  2004               	addwfc	??_TMR1_DefaultInterruptHandler+1,w,c
  6166  000B28  6E02               	movwf	TMR1_WriteTimer@timerVal+1,c
  6167  000B2A  EC5A  F007         	call	_TMR1_WriteTimer	;wreg free
  6168                           
  6169                           ;main.c: 275: pulseHigh = 1;
  6170  000B2E  0E01               	movlw	1
  6171  000B30  D008               	goto	L8
  6172  000B32                     i2l502:
  6173                           
  6174                           ;main.c: 277: else{
  6175                           ;main.c: 278: do { LATAbits.LATA0 = 0; } while(0);
  6176  000B32  9089               	bcf	3977,0,c	;volatile
  6177                           
  6178                           ;main.c: 279: TMR1_WriteTimer(0xFFFF -40000 );
  6179  000B34  0E63               	movlw	99
  6180  000B36  6E02               	movwf	TMR1_WriteTimer@timerVal+1,c
  6181  000B38  0EBF               	movlw	191
  6182  000B3A  6E01               	movwf	TMR1_WriteTimer@timerVal,c
  6183  000B3C  EC5A  F007         	call	_TMR1_WriteTimer	;wreg free
  6184                           
  6185                           ;main.c: 280: pulseHigh = 0;
  6186  000B40  0E00               	movlw	0
  6187  000B42                     L8:
  6188  000B42  6E3E               	movwf	TMR1_DefaultInterruptHandler@pulseHigh,c
  6189                           
  6190                           ;main.c: 281: }
  6191                           ;main.c: 284: PIR1bits.TMR1IF = 0;
  6192  000B44  909E               	bcf	3998,0,c	;volatile
  6193  000B46  0012               	return		;funcret
  6194  000B48                     __end_of_TMR1_DefaultInterruptHandler:
  6195                           	opt stack 0
  6196                           tosu	equ	0xFFF
  6197                           tosh	equ	0xFFE
  6198                           tosl	equ	0xFFD
  6199                           pclatu	equ	0xFFB
  6200                           pclath	equ	0xFFA
  6201                           tblptru	equ	0xFF8
  6202                           tblptrh	equ	0xFF7
  6203                           tblptrl	equ	0xFF6
  6204                           tablat	equ	0xFF5
  6205                           prodh	equ	0xFF4
  6206                           prodl	equ	0xFF3
  6207                           intcon	equ	0xFF2
  6208                           intcon2	equ	0xFF1
  6209                           postinc0	equ	0xFEE
  6210                           fsr0h	equ	0xFEA
  6211                           fsr0l	equ	0xFE9
  6212                           wreg	equ	0xFE8
  6213                           postdec1	equ	0xFE5
  6214                           fsr1h	equ	0xFE2
  6215                           fsr1l	equ	0xFE1
  6216                           indf2	equ	0xFDF
  6217                           postinc2	equ	0xFDE
  6218                           postdec2	equ	0xFDD
  6219                           fsr2h	equ	0xFDA
  6220                           fsr2l	equ	0xFD9
  6221                           status	equ	0xFD8
  6222                           
  6223 ;; *************** function _TMR1_WriteTimer *****************
  6224 ;; Defined at:
  6225 ;;		line 121 in file "mcc_generated_files/tmr1.c"
  6226 ;; Parameters:    Size  Location     Type
  6227 ;;  timerVal        2    0[COMRAM] unsigned int 
  6228 ;; Auto vars:     Size  Location     Type
  6229 ;;		None
  6230 ;; Return value:  Size  Location     Type
  6231 ;;                  1    wreg      void 
  6232 ;; Registers used:
  6233 ;;		wreg, status,2
  6234 ;; Tracked objects:
  6235 ;;		On entry : 0/0
  6236 ;;		On exit  : 0/0
  6237 ;;		Unchanged: 0/0
  6238 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6239 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6240 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6241 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6242 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6243 ;;Total ram usage:        2 bytes
  6244 ;; Hardware stack levels used:    1
  6245 ;; This function calls:
  6246 ;;		Nothing
  6247 ;; This function is called by:
  6248 ;;		_TMR1_DefaultInterruptHandler
  6249 ;;		_TMR1_ISR
  6250 ;;		_TMR1_Reload
  6251 ;; This function uses a non-reentrant model
  6252 ;;
  6253                           
  6254                           	psect	text41
  6255  000EB4                     __ptext41:
  6256                           	opt stack 0
  6257  000EB4                     _TMR1_WriteTimer:
  6258                           	opt stack 25
  6259                           
  6260                           ;tmr1.c: 123: if (T1CONbits.T1SYNC == 1)
  6261                           
  6262                           ;incstack = 0
  6263  000EB4  A4CD               	btfss	4045,2,c	;volatile
  6264  000EB6  D007               	goto	i2l584
  6265                           
  6266                           ;tmr1.c: 124: {
  6267                           ;tmr1.c: 126: T1CONbits.TMR1ON = 0;
  6268  000EB8  90CD               	bcf	4045,0,c	;volatile
  6269                           
  6270                           ;tmr1.c: 129: TMR1H = (timerVal >> 8);
  6271  000EBA  5002               	movf	TMR1_WriteTimer@timerVal+1,w,c
  6272  000EBC  6ECF               	movwf	4047,c	;volatile
  6273                           
  6274                           ;tmr1.c: 130: TMR1L = (uint8_t) timerVal;
  6275  000EBE  C001  FFCE         	movff	TMR1_WriteTimer@timerVal,4046	;volatile
  6276                           
  6277                           ;tmr1.c: 133: T1CONbits.TMR1ON =1;
  6278  000EC2  80CD               	bsf	4045,0,c	;volatile
  6279                           
  6280                           ;tmr1.c: 134: }
  6281  000EC4  0012               	return	
  6282  000EC6                     i2l584:
  6283                           
  6284                           ;tmr1.c: 135: else
  6285                           ;tmr1.c: 136: {
  6286                           ;tmr1.c: 138: TMR1H = (timerVal >> 8);
  6287  000EC6  5002               	movf	TMR1_WriteTimer@timerVal+1,w,c
  6288  000EC8  6ECF               	movwf	4047,c	;volatile
  6289                           
  6290                           ;tmr1.c: 139: TMR1L = (uint8_t) timerVal;
  6291  000ECA  C001  FFCE         	movff	TMR1_WriteTimer@timerVal,4046	;volatile
  6292  000ECE  0012               	return	
  6293  000ED0                     __end_of_TMR1_WriteTimer:
  6294                           	opt stack 0
  6295                           tosu	equ	0xFFF
  6296                           tosh	equ	0xFFE
  6297                           tosl	equ	0xFFD
  6298                           pclatu	equ	0xFFB
  6299                           pclath	equ	0xFFA
  6300                           tblptru	equ	0xFF8
  6301                           tblptrh	equ	0xFF7
  6302                           tblptrl	equ	0xFF6
  6303                           tablat	equ	0xFF5
  6304                           prodh	equ	0xFF4
  6305                           prodl	equ	0xFF3
  6306                           intcon	equ	0xFF2
  6307                           intcon2	equ	0xFF1
  6308                           postinc0	equ	0xFEE
  6309                           fsr0h	equ	0xFEA
  6310                           fsr0l	equ	0xFE9
  6311                           wreg	equ	0xFE8
  6312                           postdec1	equ	0xFE5
  6313                           fsr1h	equ	0xFE2
  6314                           fsr1l	equ	0xFE1
  6315                           indf2	equ	0xFDF
  6316                           postinc2	equ	0xFDE
  6317                           postdec2	equ	0xFDD
  6318                           fsr2h	equ	0xFDA
  6319                           fsr2l	equ	0xFD9
  6320                           status	equ	0xFD8
  6321                           
  6322 ;; *************** function _TMR0_ISR *****************
  6323 ;; Defined at:
  6324 ;;		line 136 in file "mcc_generated_files/tmr0.c"
  6325 ;; Parameters:    Size  Location     Type
  6326 ;;		None
  6327 ;; Auto vars:     Size  Location     Type
  6328 ;;		None
  6329 ;; Return value:  Size  Location     Type
  6330 ;;                  1    wreg      void 
  6331 ;; Registers used:
  6332 ;;		wreg, status,2, status,0, pclath, tosl, cstack
  6333 ;; Tracked objects:
  6334 ;;		On entry : 0/0
  6335 ;;		On exit  : 0/0
  6336 ;;		Unchanged: 0/0
  6337 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6338 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6339 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6340 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6341 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6342 ;;Total ram usage:        0 bytes
  6343 ;; Hardware stack levels used:    1
  6344 ;; Hardware stack levels required when called:    2
  6345 ;; This function calls:
  6346 ;;		Absolute function
  6347 ;;		_TMR0_DefaultInterruptHandler
  6348 ;; This function is called by:
  6349 ;;		_INTERRUPT_InterruptManager
  6350 ;; This function uses a non-reentrant model
  6351 ;;
  6352                           
  6353                           	psect	text42
  6354  000D96                     __ptext42:
  6355                           	opt stack 0
  6356  000D96                     _TMR0_ISR:
  6357                           	opt stack 24
  6358                           
  6359                           ;tmr0.c: 140: INTCONbits.TMR0IF = 0;
  6360                           
  6361                           ;incstack = 0
  6362  000D96  94F2               	bcf	intcon,2,c	;volatile
  6363                           
  6364                           ;tmr0.c: 144: TMR0H = timer0ReloadVal >> 8;
  6365  000D98  503A               	movf	_timer0ReloadVal+1,w,c	;volatile
  6366  000D9A  6ED7               	movwf	4055,c	;volatile
  6367                           
  6368                           ;tmr0.c: 145: TMR0L = (uint8_t) timer0ReloadVal;
  6369  000D9C  C039  FFD6         	movff	_timer0ReloadVal,4054	;volatile
  6370                           
  6371                           ;tmr0.c: 147: if(TMR0_InterruptHandler)
  6372  000DA0  503B               	movf	_TMR0_InterruptHandler,w,c
  6373  000DA2  103C               	iorwf	_TMR0_InterruptHandler+1,w,c
  6374  000DA4  B4D8               	btfsc	status,2,c
  6375  000DA6  0012               	return	
  6376                           
  6377                           ;tmr0.c: 148: {
  6378                           ;tmr0.c: 149: TMR0_InterruptHandler();
  6379  000DA8  D801               	call	i2u116_48
  6380  000DAA  0012               	return	
  6381  000DAC                     i2u116_48:
  6382  000DAC  0005               	push	
  6383  000DAE  6EFA               	movwf	pclath,c
  6384  000DB0  503B               	movf	_TMR0_InterruptHandler,w,c
  6385  000DB2  6EFD               	movwf	tosl,c
  6386  000DB4  503C               	movf	_TMR0_InterruptHandler+1,w,c
  6387  000DB6  6EFE               	movwf	tosh,c
  6388  000DB8  6AFF               	clrf	tosu,c
  6389  000DBA  50FA               	movf	pclath,w,c
  6390  000DBC  0012               	return		;indir
  6391  000DBE                     __end_of_TMR0_ISR:
  6392                           	opt stack 0
  6393                           tosu	equ	0xFFF
  6394                           tosh	equ	0xFFE
  6395                           tosl	equ	0xFFD
  6396                           pclatu	equ	0xFFB
  6397                           pclath	equ	0xFFA
  6398                           tblptru	equ	0xFF8
  6399                           tblptrh	equ	0xFF7
  6400                           tblptrl	equ	0xFF6
  6401                           tablat	equ	0xFF5
  6402                           prodh	equ	0xFF4
  6403                           prodl	equ	0xFF3
  6404                           intcon	equ	0xFF2
  6405                           intcon2	equ	0xFF1
  6406                           postinc0	equ	0xFEE
  6407                           fsr0h	equ	0xFEA
  6408                           fsr0l	equ	0xFE9
  6409                           wreg	equ	0xFE8
  6410                           postdec1	equ	0xFE5
  6411                           fsr1h	equ	0xFE2
  6412                           fsr1l	equ	0xFE1
  6413                           indf2	equ	0xFDF
  6414                           postinc2	equ	0xFDE
  6415                           postdec2	equ	0xFDD
  6416                           fsr2h	equ	0xFDA
  6417                           fsr2l	equ	0xFD9
  6418                           status	equ	0xFD8
  6419                           
  6420 ;; *************** function _TMR0_DefaultInterruptHandler *****************
  6421 ;; Defined at:
  6422 ;;		line 250 in file "main.c"
  6423 ;; Parameters:    Size  Location     Type
  6424 ;;		None
  6425 ;; Auto vars:     Size  Location     Type
  6426 ;;		None
  6427 ;; Return value:  Size  Location     Type
  6428 ;;                  1    wreg      void 
  6429 ;; Registers used:
  6430 ;;		wreg, status,2, status,0, cstack
  6431 ;; Tracked objects:
  6432 ;;		On entry : 0/0
  6433 ;;		On exit  : 0/0
  6434 ;;		Unchanged: 0/0
  6435 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6436 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6437 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6438 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6439 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6440 ;;Total ram usage:        2 bytes
  6441 ;; Hardware stack levels used:    1
  6442 ;; Hardware stack levels required when called:    1
  6443 ;; This function calls:
  6444 ;;		_TMR0_WriteTimer
  6445 ;; This function is called by:
  6446 ;;		_TMR0_Initialize
  6447 ;;		_TMR0_ISR
  6448 ;; This function uses a non-reentrant model
  6449 ;;
  6450                           
  6451                           	psect	text43
  6452  000B48                     __ptext43:
  6453                           	opt stack 0
  6454  000B48                     _TMR0_DefaultInterruptHandler:
  6455                           	opt stack 24
  6456                           
  6457                           ;main.c: 252: static uint8_t pulseHigh = 0;
  6458                           ;main.c: 253: if(!pulseHigh){
  6459                           
  6460                           ;incstack = 0
  6461  000B48  503F               	movf	TMR0_DefaultInterruptHandler@pulseHigh,w,c
  6462  000B4A  A4D8               	btfss	status,2,c
  6463  000B4C  D013               	goto	i2l491
  6464                           
  6465                           ;main.c: 254: do { LATAbits.LATA1 = 1; } while(0);
  6466  000B4E  8289               	bsf	3977,1,c	;volatile
  6467                           
  6468                           ;main.c: 255: TMR0_WriteTimer(0xFFFF -yawPosition );
  6469  000B50  C092  F003         	movff	_yawPosition,??_TMR0_DefaultInterruptHandler
  6470  000B54  C093  F004         	movff	_yawPosition+1,??_TMR0_DefaultInterruptHandler+1
  6471  000B58  1E03               	comf	??_TMR0_DefaultInterruptHandler,f,c
  6472  000B5A  1E04               	comf	??_TMR0_DefaultInterruptHandler+1,f,c
  6473  000B5C  4A03               	infsnz	??_TMR0_DefaultInterruptHandler,f,c
  6474  000B5E  2A04               	incf	??_TMR0_DefaultInterruptHandler+1,f,c
  6475  000B60  0EFF               	movlw	255
  6476  000B62  2403               	addwf	??_TMR0_DefaultInterruptHandler,w,c
  6477  000B64  6E01               	movwf	TMR0_WriteTimer@timerVal,c
  6478  000B66  0EFF               	movlw	255
  6479  000B68  2004               	addwfc	??_TMR0_DefaultInterruptHandler+1,w,c
  6480  000B6A  6E02               	movwf	TMR0_WriteTimer@timerVal+1,c
  6481  000B6C  ECE1  F007         	call	_TMR0_WriteTimer	;wreg free
  6482                           
  6483                           ;main.c: 256: pulseHigh = 1;
  6484  000B70  0E01               	movlw	1
  6485  000B72  D008               	goto	L9
  6486  000B74                     i2l491:
  6487                           
  6488                           ;main.c: 258: else{
  6489                           ;main.c: 259: do { LATAbits.LATA1 = 0; } while(0);
  6490  000B74  9289               	bcf	3977,1,c	;volatile
  6491                           
  6492                           ;main.c: 260: TMR0_WriteTimer(0xFFFF -40000 );
  6493  000B76  0E63               	movlw	99
  6494  000B78  6E02               	movwf	TMR0_WriteTimer@timerVal+1,c
  6495  000B7A  0EBF               	movlw	191
  6496  000B7C  6E01               	movwf	TMR0_WriteTimer@timerVal,c
  6497  000B7E  ECE1  F007         	call	_TMR0_WriteTimer	;wreg free
  6498                           
  6499                           ;main.c: 261: pulseHigh = 0;
  6500  000B82  0E00               	movlw	0
  6501  000B84                     L9:
  6502  000B84  6E3F               	movwf	TMR0_DefaultInterruptHandler@pulseHigh,c
  6503                           
  6504                           ;main.c: 262: }
  6505                           ;main.c: 265: INTCONbits.TMR0IF = 0;
  6506  000B86  94F2               	bcf	intcon,2,c	;volatile
  6507  000B88  0012               	return		;funcret
  6508  000B8A                     __end_of_TMR0_DefaultInterruptHandler:
  6509                           	opt stack 0
  6510                           tosu	equ	0xFFF
  6511                           tosh	equ	0xFFE
  6512                           tosl	equ	0xFFD
  6513                           pclatu	equ	0xFFB
  6514                           pclath	equ	0xFFA
  6515                           tblptru	equ	0xFF8
  6516                           tblptrh	equ	0xFF7
  6517                           tblptrl	equ	0xFF6
  6518                           tablat	equ	0xFF5
  6519                           prodh	equ	0xFF4
  6520                           prodl	equ	0xFF3
  6521                           intcon	equ	0xFF2
  6522                           intcon2	equ	0xFF1
  6523                           postinc0	equ	0xFEE
  6524                           fsr0h	equ	0xFEA
  6525                           fsr0l	equ	0xFE9
  6526                           wreg	equ	0xFE8
  6527                           postdec1	equ	0xFE5
  6528                           fsr1h	equ	0xFE2
  6529                           fsr1l	equ	0xFE1
  6530                           indf2	equ	0xFDF
  6531                           postinc2	equ	0xFDE
  6532                           postdec2	equ	0xFDD
  6533                           fsr2h	equ	0xFDA
  6534                           fsr2l	equ	0xFD9
  6535                           status	equ	0xFD8
  6536                           
  6537 ;; *************** function _TMR0_WriteTimer *****************
  6538 ;; Defined at:
  6539 ;;		line 122 in file "mcc_generated_files/tmr0.c"
  6540 ;; Parameters:    Size  Location     Type
  6541 ;;  timerVal        2    0[COMRAM] unsigned int 
  6542 ;; Auto vars:     Size  Location     Type
  6543 ;;		None
  6544 ;; Return value:  Size  Location     Type
  6545 ;;                  1    wreg      void 
  6546 ;; Registers used:
  6547 ;;		wreg, status,2
  6548 ;; Tracked objects:
  6549 ;;		On entry : 0/0
  6550 ;;		On exit  : 0/0
  6551 ;;		Unchanged: 0/0
  6552 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6553 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6554 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6555 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6556 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6557 ;;Total ram usage:        2 bytes
  6558 ;; Hardware stack levels used:    1
  6559 ;; This function calls:
  6560 ;;		Nothing
  6561 ;; This function is called by:
  6562 ;;		_TMR0_DefaultInterruptHandler
  6563 ;; This function uses a non-reentrant model
  6564 ;;
  6565                           
  6566                           	psect	text44
  6567  000FC2                     __ptext44:
  6568                           	opt stack 0
  6569  000FC2                     _TMR0_WriteTimer:
  6570                           	opt stack 24
  6571                           
  6572                           ;tmr0.c: 125: TMR0H = timerVal >> 8;
  6573                           
  6574                           ;incstack = 0
  6575  000FC2  5002               	movf	TMR0_WriteTimer@timerVal+1,w,c
  6576  000FC4  6ED7               	movwf	4055,c	;volatile
  6577                           
  6578                           ;tmr0.c: 126: TMR0L = (uint8_t) timerVal;
  6579  000FC6  C001  FFD6         	movff	TMR0_WriteTimer@timerVal,4054	;volatile
  6580  000FCA  0012               	return		;funcret
  6581  000FCC                     __end_of_TMR0_WriteTimer:
  6582                           	opt stack 0
  6583                           tosu	equ	0xFFF
  6584                           tosh	equ	0xFFE
  6585                           tosl	equ	0xFFD
  6586                           pclatu	equ	0xFFB
  6587                           pclath	equ	0xFFA
  6588                           tblptru	equ	0xFF8
  6589                           tblptrh	equ	0xFF7
  6590                           tblptrl	equ	0xFF6
  6591                           tablat	equ	0xFF5
  6592                           prodh	equ	0xFF4
  6593                           prodl	equ	0xFF3
  6594                           intcon	equ	0xFF2
  6595                           intcon2	equ	0xFF1
  6596                           postinc0	equ	0xFEE
  6597                           fsr0h	equ	0xFEA
  6598                           fsr0l	equ	0xFE9
  6599                           wreg	equ	0xFE8
  6600                           postdec1	equ	0xFE5
  6601                           fsr1h	equ	0xFE2
  6602                           fsr1l	equ	0xFE1
  6603                           indf2	equ	0xFDF
  6604                           postinc2	equ	0xFDE
  6605                           postdec2	equ	0xFDD
  6606                           fsr2h	equ	0xFDA
  6607                           fsr2l	equ	0xFD9
  6608                           status	equ	0xFD8
  6609                           
  6610 ;; *************** function _CCP5_CaptureISR *****************
  6611 ;; Defined at:
  6612 ;;		line 81 in file "mcc_generated_files/ccp5.c"
  6613 ;; Parameters:    Size  Location     Type
  6614 ;;		None
  6615 ;; Auto vars:     Size  Location     Type
  6616 ;;  module          2    2[COMRAM] struct CCPR5Reg_tag
  6617 ;; Return value:  Size  Location     Type
  6618 ;;                  1    wreg      void 
  6619 ;; Registers used:
  6620 ;;		wreg, status,2, status,0, cstack
  6621 ;; Tracked objects:
  6622 ;;		On entry : 0/0
  6623 ;;		On exit  : 0/0
  6624 ;;		Unchanged: 0/0
  6625 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6626 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6627 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6628 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6629 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6630 ;;Total ram usage:        2 bytes
  6631 ;; Hardware stack levels used:    1
  6632 ;; Hardware stack levels required when called:    1
  6633 ;; This function calls:
  6634 ;;		_CCP5_CallBack
  6635 ;; This function is called by:
  6636 ;;		_INTERRUPT_InterruptManager
  6637 ;; This function uses a non-reentrant model
  6638 ;;
  6639                           
  6640                           	psect	text45
  6641  000ED0                     __ptext45:
  6642                           	opt stack 0
  6643  000ED0                     _CCP5_CaptureISR:
  6644                           	opt stack 25
  6645                           
  6646                           ;ccp5.c: 83: CCP_PERIOD_REG_T module;
  6647                           ;ccp5.c: 86: PIR4bits.CCP5IF = 0;
  6648                           
  6649                           ;incstack = 0
  6650  000ED0  947B               	bcf	3963,2,c	;volatile
  6651                           
  6652                           ;ccp5.c: 89: module.ccpr5l = CCPR5L;
  6653  000ED2  CF55 F003          	movff	3925,CCP5_CaptureISR@module	;volatile
  6654                           
  6655                           ;ccp5.c: 90: module.ccpr5h = CCPR5H;
  6656  000ED6  CF56 F004          	movff	3926,CCP5_CaptureISR@module+1	;volatile
  6657                           
  6658                           ;ccp5.c: 93: CCP5_CallBack(module.ccpr5_16Bit);
  6659  000EDA  C003  F001         	movff	CCP5_CaptureISR@module,CCP5_CallBack@capturedValue
  6660  000EDE  C004  F002         	movff	CCP5_CaptureISR@module+1,CCP5_CallBack@capturedValue+1
  6661  000EE2  ECDF  F006         	call	_CCP5_CallBack	;wreg free
  6662  000EE6  0012               	return		;funcret
  6663  000EE8                     __end_of_CCP5_CaptureISR:
  6664                           	opt stack 0
  6665                           tosu	equ	0xFFF
  6666                           tosh	equ	0xFFE
  6667                           tosl	equ	0xFFD
  6668                           pclatu	equ	0xFFB
  6669                           pclath	equ	0xFFA
  6670                           tblptru	equ	0xFF8
  6671                           tblptrh	equ	0xFF7
  6672                           tblptrl	equ	0xFF6
  6673                           tablat	equ	0xFF5
  6674                           prodh	equ	0xFF4
  6675                           prodl	equ	0xFF3
  6676                           intcon	equ	0xFF2
  6677                           intcon2	equ	0xFF1
  6678                           postinc0	equ	0xFEE
  6679                           fsr0h	equ	0xFEA
  6680                           fsr0l	equ	0xFE9
  6681                           wreg	equ	0xFE8
  6682                           postdec1	equ	0xFE5
  6683                           fsr1h	equ	0xFE2
  6684                           fsr1l	equ	0xFE1
  6685                           indf2	equ	0xFDF
  6686                           postinc2	equ	0xFDE
  6687                           postdec2	equ	0xFDD
  6688                           fsr2h	equ	0xFDA
  6689                           fsr2l	equ	0xFD9
  6690                           status	equ	0xFD8
  6691                           
  6692 ;; *************** function _CCP5_CallBack *****************
  6693 ;; Defined at:
  6694 ;;		line 352 in file "main.c"
  6695 ;; Parameters:    Size  Location     Type
  6696 ;;  capturedValu    2    0[COMRAM] unsigned int 
  6697 ;; Auto vars:     Size  Location     Type
  6698 ;;		None
  6699 ;; Return value:  Size  Location     Type
  6700 ;;                  1    wreg      void 
  6701 ;; Registers used:
  6702 ;;		wreg, status,2, status,0
  6703 ;; Tracked objects:
  6704 ;;		On entry : 0/0
  6705 ;;		On exit  : 0/0
  6706 ;;		Unchanged: 0/0
  6707 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6708 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6709 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6710 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6711 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6712 ;;Total ram usage:        2 bytes
  6713 ;; Hardware stack levels used:    1
  6714 ;; This function calls:
  6715 ;;		Nothing
  6716 ;; This function is called by:
  6717 ;;		_CCP5_CaptureISR
  6718 ;; This function uses a non-reentrant model
  6719 ;;
  6720                           
  6721                           	psect	text46
  6722  000DBE                     __ptext46:
  6723                           	opt stack 0
  6724  000DBE                     _CCP5_CallBack:
  6725                           	opt stack 25
  6726                           
  6727                           ;main.c: 354: if(CCP5CONbits.CCP5M == 0b0101){
  6728                           
  6729                           ;incstack = 0
  6730  000DBE  010F               	movlb	15	; () banked
  6731  000DC0  5154               	movf	84,w,b	;volatile
  6732  000DC2  0B0F               	andlw	15
  6733  000DC4  0A05               	xorlw	5
  6734  000DC6  A4D8               	btfss	status,2,c
  6735  000DC8  D006               	goto	i2l541
  6736                           
  6737                           ; BSR set to: 15
  6738                           ;main.c: 355: CCP5CONbits.CCP5M = 0b0100;
  6739  000DCA  5154               	movf	84,w,b	;volatile
  6740  000DCC  0BF0               	andlw	-16
  6741  000DCE  0904               	iorlw	4
  6742  000DD0  6F54               	movwf	84,b	;volatile
  6743                           
  6744                           ;main.c: 356: encoderB = 1;
  6745  000DD2  0E01               	movlw	1
  6746  000DD4  D005               	goto	L10
  6747  000DD6                     i2l541:
  6748                           
  6749                           ; BSR set to: 15
  6750                           ;main.c: 359: else{
  6751                           ;main.c: 360: CCP5CONbits.CCP5M = 0b0101;
  6752                           
  6753                           ; BSR set to: 15
  6754  000DD6  5154               	movf	84,w,b	;volatile
  6755  000DD8  0BF0               	andlw	-16
  6756  000DDA  0905               	iorlw	5
  6757  000DDC  6F54               	movwf	84,b	;volatile
  6758                           
  6759                           ;main.c: 361: encoderB = 0;
  6760  000DDE  0E00               	movlw	0
  6761  000DE0                     L10:
  6762  000DE0  6E40               	movwf	_encoderB,c
  6763                           
  6764                           ; BSR set to: 15
  6765                           ;main.c: 362: }
  6766                           ;main.c: 364: PIR4bits.CCP5IF = 0;
  6767                           
  6768                           ; BSR set to: 15
  6769  000DE2  947B               	bcf	3963,2,c	;volatile
  6770                           
  6771                           ; BSR set to: 15
  6772  000DE4  0012               	return		;funcret
  6773  000DE6                     __end_of_CCP5_CallBack:
  6774                           	opt stack 0
  6775                           tosu	equ	0xFFF
  6776                           tosh	equ	0xFFE
  6777                           tosl	equ	0xFFD
  6778                           pclatu	equ	0xFFB
  6779                           pclath	equ	0xFFA
  6780                           tblptru	equ	0xFF8
  6781                           tblptrh	equ	0xFF7
  6782                           tblptrl	equ	0xFF6
  6783                           tablat	equ	0xFF5
  6784                           prodh	equ	0xFF4
  6785                           prodl	equ	0xFF3
  6786                           intcon	equ	0xFF2
  6787                           intcon2	equ	0xFF1
  6788                           postinc0	equ	0xFEE
  6789                           fsr0h	equ	0xFEA
  6790                           fsr0l	equ	0xFE9
  6791                           wreg	equ	0xFE8
  6792                           postdec1	equ	0xFE5
  6793                           fsr1h	equ	0xFE2
  6794                           fsr1l	equ	0xFE1
  6795                           indf2	equ	0xFDF
  6796                           postinc2	equ	0xFDE
  6797                           postdec2	equ	0xFDD
  6798                           fsr2h	equ	0xFDA
  6799                           fsr2l	equ	0xFD9
  6800                           status	equ	0xFD8
  6801                           
  6802 ;; *************** function _CCP4_CaptureISR *****************
  6803 ;; Defined at:
  6804 ;;		line 81 in file "mcc_generated_files/ccp4.c"
  6805 ;; Parameters:    Size  Location     Type
  6806 ;;		None
  6807 ;; Auto vars:     Size  Location     Type
  6808 ;;  module          2    2[COMRAM] struct CCPR4Reg_tag
  6809 ;; Return value:  Size  Location     Type
  6810 ;;                  1    wreg      void 
  6811 ;; Registers used:
  6812 ;;		wreg, status,2, status,0, cstack
  6813 ;; Tracked objects:
  6814 ;;		On entry : 0/0
  6815 ;;		On exit  : 0/0
  6816 ;;		Unchanged: 0/0
  6817 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6818 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6819 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6820 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6821 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6822 ;;Total ram usage:        2 bytes
  6823 ;; Hardware stack levels used:    1
  6824 ;; Hardware stack levels required when called:    1
  6825 ;; This function calls:
  6826 ;;		_CCP4_CallBack
  6827 ;; This function is called by:
  6828 ;;		_INTERRUPT_InterruptManager
  6829 ;; This function uses a non-reentrant model
  6830 ;;
  6831                           
  6832                           	psect	text47
  6833  000EE8                     __ptext47:
  6834                           	opt stack 0
  6835  000EE8                     _CCP4_CaptureISR:
  6836                           	opt stack 25
  6837                           
  6838                           ;ccp4.c: 83: CCP_PERIOD_REG_T module;
  6839                           ;ccp4.c: 86: PIR4bits.CCP4IF = 0;
  6840                           
  6841                           ; BSR set to: 15
  6842                           ;incstack = 0
  6843  000EE8  927B               	bcf	3963,1,c	;volatile
  6844                           
  6845                           ;ccp4.c: 89: module.ccpr4l = CCPR4L;
  6846  000EEA  CF58 F003          	movff	3928,CCP4_CaptureISR@module	;volatile
  6847                           
  6848                           ;ccp4.c: 90: module.ccpr4h = CCPR4H;
  6849  000EEE  CF59 F004          	movff	3929,CCP4_CaptureISR@module+1	;volatile
  6850                           
  6851                           ;ccp4.c: 93: CCP4_CallBack(module.ccpr4_16Bit);
  6852  000EF2  C003  F001         	movff	CCP4_CaptureISR@module,CCP4_CallBack@capturedValue
  6853  000EF6  C004  F002         	movff	CCP4_CaptureISR@module+1,CCP4_CallBack@capturedValue+1
  6854  000EFA  EC18  F005         	call	_CCP4_CallBack	;wreg free
  6855  000EFE  0012               	return		;funcret
  6856  000F00                     __end_of_CCP4_CaptureISR:
  6857                           	opt stack 0
  6858                           tosu	equ	0xFFF
  6859                           tosh	equ	0xFFE
  6860                           tosl	equ	0xFFD
  6861                           pclatu	equ	0xFFB
  6862                           pclath	equ	0xFFA
  6863                           tblptru	equ	0xFF8
  6864                           tblptrh	equ	0xFF7
  6865                           tblptrl	equ	0xFF6
  6866                           tablat	equ	0xFF5
  6867                           prodh	equ	0xFF4
  6868                           prodl	equ	0xFF3
  6869                           intcon	equ	0xFF2
  6870                           intcon2	equ	0xFF1
  6871                           postinc0	equ	0xFEE
  6872                           fsr0h	equ	0xFEA
  6873                           fsr0l	equ	0xFE9
  6874                           wreg	equ	0xFE8
  6875                           postdec1	equ	0xFE5
  6876                           fsr1h	equ	0xFE2
  6877                           fsr1l	equ	0xFE1
  6878                           indf2	equ	0xFDF
  6879                           postinc2	equ	0xFDE
  6880                           postdec2	equ	0xFDD
  6881                           fsr2h	equ	0xFDA
  6882                           fsr2l	equ	0xFD9
  6883                           status	equ	0xFD8
  6884                           
  6885 ;; *************** function _CCP4_CallBack *****************
  6886 ;; Defined at:
  6887 ;;		line 332 in file "main.c"
  6888 ;; Parameters:    Size  Location     Type
  6889 ;;  capturedValu    2    0[COMRAM] unsigned int 
  6890 ;; Auto vars:     Size  Location     Type
  6891 ;;		None
  6892 ;; Return value:  Size  Location     Type
  6893 ;;                  1    wreg      void 
  6894 ;; Registers used:
  6895 ;;		wreg, status,2, status,0
  6896 ;; Tracked objects:
  6897 ;;		On entry : 0/0
  6898 ;;		On exit  : 0/0
  6899 ;;		Unchanged: 0/0
  6900 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6901 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6902 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6903 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6904 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6905 ;;Total ram usage:        2 bytes
  6906 ;; Hardware stack levels used:    1
  6907 ;; This function calls:
  6908 ;;		Nothing
  6909 ;; This function is called by:
  6910 ;;		_CCP4_CaptureISR
  6911 ;; This function uses a non-reentrant model
  6912 ;;
  6913                           
  6914                           	psect	text48
  6915  000A30                     __ptext48:
  6916                           	opt stack 0
  6917  000A30                     _CCP4_CallBack:
  6918                           	opt stack 25
  6919                           
  6920                           ;main.c: 334: if(CCP4CONbits.CCP4M == 0b0101){
  6921                           
  6922                           ;incstack = 0
  6923  000A30  010F               	movlb	15	; () banked
  6924  000A32  5157               	movf	87,w,b	;volatile
  6925  000A34  0B0F               	andlw	15
  6926  000A36  0A05               	xorlw	5
  6927  000A38  A4D8               	btfss	status,2,c
  6928  000A3A  D01A               	goto	i2l534
  6929                           
  6930                           ; BSR set to: 15
  6931                           ;main.c: 335: CCP4CONbits.CCP4M = 0b0100;
  6932  000A3C  5157               	movf	87,w,b	;volatile
  6933  000A3E  0BF0               	andlw	-16
  6934  000A40  0904               	iorlw	4
  6935  000A42  6F57               	movwf	87,b	;volatile
  6936                           
  6937                           ;main.c: 336: encoderA = 1;
  6938  000A44  0E01               	movlw	1
  6939  000A46  6E41               	movwf	_encoderA,c
  6940                           
  6941                           ;main.c: 337: if(encoderB==0){
  6942  000A48  5040               	movf	_encoderB,w,c
  6943  000A4A  A4D8               	btfss	status,2,c
  6944  000A4C  D007               	goto	i2l535
  6945                           
  6946                           ; BSR set to: 15
  6947                           ;main.c: 338: encoderPosition++;
  6948  000A4E  0E01               	movlw	1
  6949  000A50  0100               	movlb	0	; () banked
  6950  000A52  2798               	addwf	_encoderPosition& (0+255),f,b
  6951  000A54  0E00               	movlw	0
  6952  000A56  2399               	addwfc	(_encoderPosition+1)& (0+255),f,b
  6953  000A58  239A               	addwfc	(_encoderPosition+2)& (0+255),f,b
  6954  000A5A  D008               	goto	L11
  6955  000A5C                     i2l535:
  6956                           
  6957                           ;main.c: 340: else{
  6958                           ;main.c: 341: encoderPosition--;
  6959                           
  6960                           ; BSR set to: 0
  6961  000A5C  0EFF               	movlw	255
  6962  000A5E  0100               	movlb	0	; () banked
  6963  000A60  2798               	addwf	_encoderPosition& (0+255),f,b
  6964  000A62  0EFF               	movlw	255
  6965  000A64  2399               	addwfc	(_encoderPosition+1)& (0+255),f,b
  6966  000A66  0EFF               	movlw	255
  6967  000A68  239A               	addwfc	(_encoderPosition+2)& (0+255),f,b
  6968  000A6A  0EFF               	movlw	255
  6969  000A6C                     L11:
  6970  000A6C  239B               	addwfc	(_encoderPosition+3)& (0+255),f,b
  6971                           
  6972                           ; BSR set to: 0
  6973                           ;main.c: 342: }
  6974                           ;main.c: 343: }
  6975  000A6E  D007               	goto	i2l537
  6976  000A70                     i2l534:
  6977                           
  6978                           ;main.c: 344: else{
  6979                           ;main.c: 345: CCP4CONbits.CCP4M = 0b0101;
  6980                           
  6981                           ; BSR set to: 0
  6982  000A70  010F               	movlb	15	; () banked
  6983  000A72  5157               	movf	87,w,b	;volatile
  6984  000A74  0BF0               	andlw	-16
  6985  000A76  0905               	iorlw	5
  6986  000A78  6F57               	movwf	87,b	;volatile
  6987                           
  6988                           ;main.c: 346: encoderA = 0;
  6989  000A7A  0E00               	movlw	0
  6990  000A7C  6E41               	movwf	_encoderA,c
  6991  000A7E                     i2l537:
  6992                           
  6993                           ;main.c: 347: }
  6994                           ;main.c: 349: PIR4bits.CCP4IF = 0;
  6995                           
  6996                           ; BSR set to: 15
  6997  000A7E  927B               	bcf	3963,1,c	;volatile
  6998  000A80  0012               	return		;funcret
  6999  000A82                     __end_of_CCP4_CallBack:
  7000                           	opt stack 0
  7001                           tosu	equ	0xFFF
  7002                           tosh	equ	0xFFE
  7003                           tosl	equ	0xFFD
  7004                           pclatu	equ	0xFFB
  7005                           pclath	equ	0xFFA
  7006                           tblptru	equ	0xFF8
  7007                           tblptrh	equ	0xFF7
  7008                           tblptrl	equ	0xFF6
  7009                           tablat	equ	0xFF5
  7010                           prodh	equ	0xFF4
  7011                           prodl	equ	0xFF3
  7012                           intcon	equ	0xFF2
  7013                           intcon2	equ	0xFF1
  7014                           postinc0	equ	0xFEE
  7015                           fsr0h	equ	0xFEA
  7016                           fsr0l	equ	0xFE9
  7017                           wreg	equ	0xFE8
  7018                           postdec1	equ	0xFE5
  7019                           fsr1h	equ	0xFE2
  7020                           fsr1l	equ	0xFE1
  7021                           indf2	equ	0xFDF
  7022                           postinc2	equ	0xFDE
  7023                           postdec2	equ	0xFDD
  7024                           fsr2h	equ	0xFDA
  7025                           fsr2l	equ	0xFD9
  7026                           status	equ	0xFD8
  7027                           tosu	equ	0xFFF
  7028                           tosh	equ	0xFFE
  7029                           tosl	equ	0xFFD
  7030                           pclatu	equ	0xFFB
  7031                           pclath	equ	0xFFA
  7032                           tblptru	equ	0xFF8
  7033                           tblptrh	equ	0xFF7
  7034                           tblptrl	equ	0xFF6
  7035                           tablat	equ	0xFF5
  7036                           prodh	equ	0xFF4
  7037                           prodl	equ	0xFF3
  7038                           intcon	equ	0xFF2
  7039                           intcon2	equ	0xFF1
  7040                           postinc0	equ	0xFEE
  7041                           fsr0h	equ	0xFEA
  7042                           fsr0l	equ	0xFE9
  7043                           wreg	equ	0xFE8
  7044                           postdec1	equ	0xFE5
  7045                           fsr1h	equ	0xFE2
  7046                           fsr1l	equ	0xFE1
  7047                           indf2	equ	0xFDF
  7048                           postinc2	equ	0xFDE
  7049                           postdec2	equ	0xFDD
  7050                           fsr2h	equ	0xFDA
  7051                           fsr2l	equ	0xFD9
  7052                           status	equ	0xFD8
  7053                           
  7054                           	psect	text49
  7055  000000                     __ptext49:
  7056                           	opt stack 0
  7057                           tosu	equ	0xFFF
  7058                           tosh	equ	0xFFE
  7059                           tosl	equ	0xFFD
  7060                           pclatu	equ	0xFFB
  7061                           pclath	equ	0xFFA
  7062                           tblptru	equ	0xFF8
  7063                           tblptrh	equ	0xFF7
  7064                           tblptrl	equ	0xFF6
  7065                           tablat	equ	0xFF5
  7066                           prodh	equ	0xFF4
  7067                           prodl	equ	0xFF3
  7068                           intcon	equ	0xFF2
  7069                           intcon2	equ	0xFF1
  7070                           postinc0	equ	0xFEE
  7071                           fsr0h	equ	0xFEA
  7072                           fsr0l	equ	0xFE9
  7073                           wreg	equ	0xFE8
  7074                           postdec1	equ	0xFE5
  7075                           fsr1h	equ	0xFE2
  7076                           fsr1l	equ	0xFE1
  7077                           indf2	equ	0xFDF
  7078                           postinc2	equ	0xFDE
  7079                           postdec2	equ	0xFDD
  7080                           fsr2h	equ	0xFDA
  7081                           fsr2l	equ	0xFD9
  7082                           status	equ	0xFD8
  7083                           
  7084                           	psect	rparam
  7085  0000                     tosu	equ	0xFFF
  7086                           tosh	equ	0xFFE
  7087                           tosl	equ	0xFFD
  7088                           pclatu	equ	0xFFB
  7089                           pclath	equ	0xFFA
  7090                           tblptru	equ	0xFF8
  7091                           tblptrh	equ	0xFF7
  7092                           tblptrl	equ	0xFF6
  7093                           tablat	equ	0xFF5
  7094                           prodh	equ	0xFF4
  7095                           prodl	equ	0xFF3
  7096                           intcon	equ	0xFF2
  7097                           intcon2	equ	0xFF1
  7098                           postinc0	equ	0xFEE
  7099                           fsr0h	equ	0xFEA
  7100                           fsr0l	equ	0xFE9
  7101                           wreg	equ	0xFE8
  7102                           postdec1	equ	0xFE5
  7103                           fsr1h	equ	0xFE2
  7104                           fsr1l	equ	0xFE1
  7105                           indf2	equ	0xFDF
  7106                           postinc2	equ	0xFDE
  7107                           postdec2	equ	0xFDD
  7108                           fsr2h	equ	0xFDA
  7109                           fsr2l	equ	0xFD9
  7110                           status	equ	0xFD8
  7111                           
  7112                           	psect	temp
  7113  000043                     btemp:
  7114                           	opt stack 0
  7115  000043                     	ds	1
  7116  0000                     int$flags	set	btemp
  7117  0000                     wtemp6	set	btemp+1
  7118                           tosu	equ	0xFFF
  7119                           tosh	equ	0xFFE
  7120                           tosl	equ	0xFFD
  7121                           pclatu	equ	0xFFB
  7122                           pclath	equ	0xFFA
  7123                           tblptru	equ	0xFF8
  7124                           tblptrh	equ	0xFF7
  7125                           tblptrl	equ	0xFF6
  7126                           tablat	equ	0xFF5
  7127                           prodh	equ	0xFF4
  7128                           prodl	equ	0xFF3
  7129                           intcon	equ	0xFF2
  7130                           intcon2	equ	0xFF1
  7131                           postinc0	equ	0xFEE
  7132                           fsr0h	equ	0xFEA
  7133                           fsr0l	equ	0xFE9
  7134                           wreg	equ	0xFE8
  7135                           postdec1	equ	0xFE5
  7136                           fsr1h	equ	0xFE2
  7137                           fsr1l	equ	0xFE1
  7138                           indf2	equ	0xFDF
  7139                           postinc2	equ	0xFDE
  7140                           postdec2	equ	0xFDD
  7141                           fsr2h	equ	0xFDA
  7142                           fsr2l	equ	0xFD9
  7143                           status	equ	0xFD8


Data Sizes:
    Strings     571
    Constant    40
    Data        14
    BSS         34
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           94     44      66
    BANK0           160     38      64
    BANK1           256      0       0
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0
    BANK8           256      0       0
    BANK9           256      0       0
    BANK10          256      0       0
    BANK11          256      0       0
    BANK12          256      0       0
    BANK13          256      0       0
    BANK14          256      0       0
    BANK15           56      0       0

Pointer List with Targets:

    printf@f	PTR const unsigned char  size(2) Largest target is 40
		 -> STR_23(CODE[32]), STR_22(CODE[17]), STR_21(CODE[1]), STR_20(CODE[1]), 
		 -> STR_19(CODE[1]), STR_18(CODE[17]), STR_17(CODE[21]), STR_16(CODE[27]), 
		 -> STR_15(CODE[5]), STR_14(CODE[5]), STR_13(CODE[39]), STR_12(CODE[35]), 
		 -> STR_11(CODE[35]), STR_10(CODE[31]), STR_9(CODE[31]), STR_8(CODE[38]), 
		 -> STR_7(CODE[38]), STR_6(CODE[27]), STR_5(CODE[27]), STR_4(CODE[34]), 
		 -> STR_3(CODE[32]), STR_2(CODE[40]), STR_1(CODE[40]), 

    printf@ap	PTR void [1] size(2) Largest target is 2
		 -> ?_printf(BANK0[2]), 

    TMR2_SetInterruptHandler@InterruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> TMR2_DefaultInterruptHandler(), 

    TMR2_InterruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> TMR2_DefaultInterruptHandler(), Absolute function(), 

    TMR5_SetInterruptHandler@InterruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> TMR5_DefaultInterruptHandler(), 

    TMR5_InterruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> TMR5_DefaultInterruptHandler(), Absolute function(), 

    TMR1_SetInterruptHandler@InterruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> TMR1_DefaultInterruptHandler(), 

    TMR1_InterruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> TMR1_DefaultInterruptHandler(), Absolute function(), 

    TMR0_SetInterruptHandler@InterruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> TMR0_DefaultInterruptHandler(), 

    TMR0_InterruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> Absolute function(), TMR0_DefaultInterruptHandler(), 


Critical Paths under _main in COMRAM

    _main->_printf
    _printf->___llmod
    _putch->_EUSART2_Write
    ___llmod->___lldiv
    _SYSTEM_Initialize->_TMR0_Initialize
    _TMR5_Initialize->_TMR5_SetInterruptHandler
    _TMR2_Initialize->_TMR2_SetInterruptHandler
    _TMR1_Initialize->_TMR1_SetInterruptHandler
    _TMR0_Initialize->_TMR0_SetInterruptHandler

Critical Paths under _INTERRUPT_InterruptManager in COMRAM

    _TMR5_ISR->_TMR5_DefaultInterruptHandler
    _TMR5_DefaultInterruptHandler->_TMR5_WriteTimer
    _TMR2_ISR->_TMR2_DefaultInterruptHandler
    _TMR2_DefaultInterruptHandler->i2_setMotorSpeed
    _TMR1_ISR->_TMR1_DefaultInterruptHandler
    _TMR1_DefaultInterruptHandler->_TMR1_WriteTimer
    _TMR0_ISR->_TMR0_DefaultInterruptHandler
    _TMR0_DefaultInterruptHandler->_TMR0_WriteTimer
    _CCP5_CaptureISR->_CCP5_CallBack
    _CCP4_CaptureISR->_CCP4_CallBack

Critical Paths under _main in BANK0

    _main->_printf
    _printf->___llmod

Critical Paths under _INTERRUPT_InterruptManager in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK12

    None.

Critical Paths under _main in BANK13

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK13

    None.

Critical Paths under _main in BANK14

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK14

    None.

Critical Paths under _main in BANK15

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK15

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                10    10      0    5577
                                             28 BANK0     10    10      0
                       _EUSART1_Read
                _EUSART1_is_rx_ready
                       _EUSART2_Read
                _EUSART2_is_rx_ready
                  _SYSTEM_Initialize
                           _parseInt
                             _printf
                      _setMotorSpeed
                      _setPitchServo
                        _setYawServo
 ---------------------------------------------------------------------------------
 (1) _setYawServo                                          2     0      2     296
                                             28 COMRAM     2     0      2
 ---------------------------------------------------------------------------------
 (1) _setPitchServo                                        2     0      2     296
                                             28 COMRAM     2     0      2
 ---------------------------------------------------------------------------------
 (1) _setMotorSpeed                                        2     0      2     496
                                             28 COMRAM     2     0      2
 ---------------------------------------------------------------------------------
 (1) _printf                                              31    21     10    3681
                                             42 COMRAM     2     2      0
                                              8 BANK0     20    10     10
                            ___lldiv
                            ___llmod
                              _putch
 ---------------------------------------------------------------------------------
 (2) _putch                                                1     1      0      44
                                             29 COMRAM     1     1      0
                      _EUSART2_Write
 ---------------------------------------------------------------------------------
 (3) _EUSART2_Write                                        1     1      0      22
                                             28 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (2) ___llmod                                              9     1      8     412
                                             41 COMRAM     1     1      0
                                              0 BANK0      8     0      8
                            ___lldiv (ARG)
 ---------------------------------------------------------------------------------
 (2) ___lldiv                                             13     5      8     314
                                             28 COMRAM    13     5      8
 ---------------------------------------------------------------------------------
 (1) _parseInt                                             5     3      2      23
                                             28 COMRAM     5     3      2
                       _EUSART1_Read
                _EUSART1_is_rx_ready
 ---------------------------------------------------------------------------------
 (2) _EUSART1_is_rx_ready                                  0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _EUSART1_Read                                         0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _SYSTEM_Initialize                                    0     0      0     392
                    _CCP4_Initialize
                    _CCP5_Initialize
                 _EUSART1_Initialize
                 _EUSART2_Initialize
               _INTERRUPT_Initialize
              _OSCILLATOR_Initialize
             _PIN_MANAGER_Initialize
                    _TMR0_Initialize
                    _TMR1_Initialize
                    _TMR2_Initialize
                    _TMR3_Initialize
                    _TMR5_Initialize
 ---------------------------------------------------------------------------------
 (2) _TMR5_Initialize                                      0     0      0      98
           _TMR5_SetInterruptHandler
 ---------------------------------------------------------------------------------
 (3) _TMR5_SetInterruptHandler                             2     0      2      98
                                             28 COMRAM     2     0      2
 ---------------------------------------------------------------------------------
 (2) _TMR3_Initialize                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _TMR2_Initialize                                      0     0      0      98
           _TMR2_SetInterruptHandler
 ---------------------------------------------------------------------------------
 (3) _TMR2_SetInterruptHandler                             2     0      2      98
                                             28 COMRAM     2     0      2
 ---------------------------------------------------------------------------------
 (2) _TMR1_Initialize                                      0     0      0      98
           _TMR1_SetInterruptHandler
 ---------------------------------------------------------------------------------
 (3) _TMR1_SetInterruptHandler                             2     0      2      98
                                             28 COMRAM     2     0      2
 ---------------------------------------------------------------------------------
 (2) _TMR0_Initialize                                      2     2      0      98
                                             30 COMRAM     2     2      0
           _TMR0_SetInterruptHandler
 ---------------------------------------------------------------------------------
 (3) _TMR0_SetInterruptHandler                             2     0      2      98
                                             28 COMRAM     2     0      2
 ---------------------------------------------------------------------------------
 (2) _PIN_MANAGER_Initialize                               0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _OSCILLATOR_Initialize                                0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _INTERRUPT_Initialize                                 0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _EUSART2_Initialize                                   0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _EUSART1_Initialize                                   0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _CCP5_Initialize                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _CCP4_Initialize                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _EUSART2_is_rx_ready                                  0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _EUSART2_Read                                         0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 3
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (4) _INTERRUPT_InterruptManager                          18    18      0    2317
                                             10 COMRAM    18    18      0
                    _CCP4_CaptureISR
                    _CCP5_CaptureISR
                           _TMR0_ISR
                           _TMR1_ISR
                           _TMR2_ISR
                           _TMR5_ISR
 ---------------------------------------------------------------------------------
 (5) _TMR5_ISR                                             0     0      0     784
                   Absolute function *
       _TMR5_DefaultInterruptHandler *
                    _TMR5_WriteTimer
 ---------------------------------------------------------------------------------
 (6) _TMR5_DefaultInterruptHandler                         2     2      0     392
                                              2 COMRAM     2     2      0
                    _TMR5_WriteTimer
 ---------------------------------------------------------------------------------
 (6) _TMR5_WriteTimer                                      2     0      2     392
                                              0 COMRAM     2     0      2
 ---------------------------------------------------------------------------------
 (5) _TMR2_ISR                                             0     0      0     307
                   Absolute function *
       _TMR2_DefaultInterruptHandler *
 ---------------------------------------------------------------------------------
 (6) _TMR2_DefaultInterruptHandler                         8     8      0     307
                                              2 COMRAM     8     8      0
                    _TMR2_WriteTimer
                    i2_setMotorSpeed
 ---------------------------------------------------------------------------------
 (7) i2_setMotorSpeed                                      2     0      2     172
                                              0 COMRAM     2     0      2
 ---------------------------------------------------------------------------------
 (7) _TMR2_WriteTimer                                      1     1      0      22
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (5) _TMR1_ISR                                             0     0      0     784
                   Absolute function *
       _TMR1_DefaultInterruptHandler *
                    _TMR1_WriteTimer
 ---------------------------------------------------------------------------------
 (6) _TMR1_DefaultInterruptHandler                         2     2      0     392
                                              2 COMRAM     2     2      0
                    _TMR1_WriteTimer
 ---------------------------------------------------------------------------------
 (6) _TMR1_WriteTimer                                      2     0      2     392
                                              0 COMRAM     2     0      2
 ---------------------------------------------------------------------------------
 (5) _TMR0_ISR                                             0     0      0     196
                   Absolute function *
       _TMR0_DefaultInterruptHandler *
 ---------------------------------------------------------------------------------
 (6) _TMR0_DefaultInterruptHandler                         2     2      0     196
                                              2 COMRAM     2     2      0
                    _TMR0_WriteTimer
 ---------------------------------------------------------------------------------
 (7) _TMR0_WriteTimer                                      2     0      2     196
                                              0 COMRAM     2     0      2
 ---------------------------------------------------------------------------------
 (6) Absolute function(Fake)                               0     0      0       0
 ---------------------------------------------------------------------------------
 (5) _CCP5_CaptureISR                                      2     2      0     123
                                              2 COMRAM     2     2      0
                      _CCP5_CallBack
 ---------------------------------------------------------------------------------
 (6) _CCP5_CallBack                                        2     0      2      76
                                              0 COMRAM     2     0      2
 ---------------------------------------------------------------------------------
 (5) _CCP4_CaptureISR                                      2     2      0     123
                                              2 COMRAM     2     2      0
                      _CCP4_CallBack
 ---------------------------------------------------------------------------------
 (6) _CCP4_CallBack                                        2     0      2      76
                                              0 COMRAM     2     0      2
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 7
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _EUSART1_Read
   _EUSART1_is_rx_ready
   _EUSART2_Read
   _EUSART2_is_rx_ready
   _SYSTEM_Initialize
     _CCP4_Initialize
     _CCP5_Initialize
     _EUSART1_Initialize
     _EUSART2_Initialize
     _INTERRUPT_Initialize
     _OSCILLATOR_Initialize
     _PIN_MANAGER_Initialize
     _TMR0_Initialize
       _TMR0_SetInterruptHandler
     _TMR1_Initialize
       _TMR1_SetInterruptHandler
     _TMR2_Initialize
       _TMR2_SetInterruptHandler
     _TMR3_Initialize
     _TMR5_Initialize
       _TMR5_SetInterruptHandler
   _parseInt
     _EUSART1_Read
     _EUSART1_is_rx_ready
   _printf
     ___lldiv
     ___llmod
       ___lldiv (ARG)
     _putch
       _EUSART2_Write
   _setMotorSpeed
   _setPitchServo
   _setYawServo

 _INTERRUPT_InterruptManager (ROOT)
   _CCP4_CaptureISR
     _CCP4_CallBack
   _CCP5_CaptureISR
     _CCP5_CallBack
   _TMR0_ISR
     Absolute function(Fake) *
     _TMR0_DefaultInterruptHandler *
       _TMR0_WriteTimer
   _TMR1_ISR
     Absolute function(Fake) *
     _TMR1_DefaultInterruptHandler *
       _TMR1_WriteTimer
     _TMR1_WriteTimer *
   _TMR2_ISR
     Absolute function(Fake) *
     _TMR2_DefaultInterruptHandler *
       _TMR2_WriteTimer
       i2_setMotorSpeed
   _TMR5_ISR
     Absolute function(Fake) *
     _TMR5_DefaultInterruptHandler *
       _TMR5_WriteTimer
     _TMR5_WriteTimer *

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             F37      0       0      37        0.0%
EEDATA             400      0       0       0        0.0%
BITBANK14          100      0       0      33        0.0%
BANK14             100      0       0      34        0.0%
BITBANK13          100      0       0      31        0.0%
BANK13             100      0       0      32        0.0%
BITBANK12          100      0       0      29        0.0%
BANK12             100      0       0      30        0.0%
BITBANK11          100      0       0      27        0.0%
BANK11             100      0       0      28        0.0%
BITBANK10          100      0       0      25        0.0%
BANK10             100      0       0      26        0.0%
BITBANK9           100      0       0      23        0.0%
BANK9              100      0       0      24        0.0%
BITBANK8           100      0       0      21        0.0%
BANK8              100      0       0      22        0.0%
BITBANK7           100      0       0      19        0.0%
BANK7              100      0       0      20        0.0%
BITBANK6           100      0       0      17        0.0%
BANK6              100      0       0      18        0.0%
BITBANK5           100      0       0      15        0.0%
BANK5              100      0       0      16        0.0%
BITBANK4           100      0       0      13        0.0%
BANK4              100      0       0      14        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0       0       9        0.0%
BITBANK1           100      0       0       6        0.0%
BANK1              100      0       0       7        0.0%
BITBANK0            A0      0       0       4        0.0%
BANK0               A0     26      40       5       40.0%
BITCOMRAM           5E      0       0       0        0.0%
COMRAM              5E     2C      42       1       70.2%
BITBANK15           38      0       0      35        0.0%
BANK15              38      0       0      36        0.0%
BITSFR_1             0      0       0     200        0.0%
SFR_1                0      0       0     200        0.0%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0      82      12        0.0%
DATA                 0      0      82       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V1.45 build -152302408 
Symbol Table                                                                                   Tue May 01 12:33:33 2018

                         _CCP4_Initialize 0E98          __end_of_TMR2_SetInterruptHandler 0FAE  
        __end_of_TMR5_SetInterruptHandler 0FA4                         ??_TMR5_WriteTimer 0003  
                         _timer0ReloadVal 0039                              __CFG_CP0$OFF 000000  
                            __CFG_CP1$OFF 000000                              __CFG_CP2$OFF 000000  
                            __CFG_CP3$OFF 000000                               __CFG_LVP$ON 000000  
                                     l119 0F38                                       l161 0F5A  
                                     l420 00F4                                       l422 0370  
                                     l430 0216                                       l431 0244  
                                     l423 0108                                       l344 0F4A  
                                     l424 03CA                                       l440 02FA  
                                     l432 0278                                       l425 0130  
                                     l450 03DE                                       l442 0322  
                                     l434 02DA                                       l426 015A  
                                     l443 0336                                       l435 02AC  
                                     l427 0194                                       l460 0554  
                                     l452 041C                                       l428 01BE  
                                     l453 045C                                       l445 0346  
                                     l437 02EA                                       l429 01E8  
                                     l454 04DC                                       l446 0356  
                                     l471 0C04                                       l455 04EE  
                                     l447 035A                                       l456 0500  
                                     l473 0C18                                       l465 0BD2  
                                     l449 0568                                       l457 0512  
                                     l730 064E                                       l722 05C8  
                                     l458 0528                                       l467 0BE6  
                                     l459 053E                                       l740 07B6  
                                     l716 05B0                                       l741 0730  
                                     l725 062A                                       l717 05C0  
                                     l477 0C36                                       l734 06AA  
                                     l726 05CC                                       l735 06CE  
                                     l719 05EE                                       l727 05E0  
                                     l479 0C4A                                       l728 05E8  
                                     l729 068A                                       l739 0722  
                            __CFG_CPB$OFF 000000                                       _PR2 000FBB  
                            __CFG_CPD$OFF 000000                                       u940 0F80  
                         _timer1ReloadVal 0035                           _TMR2_Initialize 0E60  
                                     tosl 000FFD                                       wreg 000FE8  
                              _TXSTA1bits 000FAC                                _TXSTA2bits 000F72  
                 __end_of_CCP4_CaptureISR 0F00                           _CCP5_Initialize 0E7C  
                                    l1100 09B6                                      l1110 0A1E  
                                    l1105 09E8                                      l1106 09DC  
                                    l1109 0A10                                      l2112 0F6E  
                                    l1095 0974                                      l1096 0968  
                                    l1099 09A8                           _timer3ReloadVal 0037  
                                    l2806 06D2                                      l2824 0730  
                                    STR_1 FDEB                                      STR_2 FDC3  
                                    STR_3 FEEE                                      STR_4 FECC  
                                    STR_5 FF87                                      STR_6 FFA2  
                                    STR_7 FE60                                      STR_8 FE3A  
                                    STR_9 FF4D                                      u1100 0978  
                                    u1230 0F8C                                      _LATA 000F89  
                                    _LATB 000F8A                                      _LATC 000F8B  
                                    u1640 09EC                                      u1730 0710  
                                    u1750 07C8                                      i2l71 007A  
                                    i2l73 0086                                      i2l66 005E  
                                    i2l75 0092                                      i2l77 009C  
                                    i2l69 006E                                      _TMR1 000FCE  
                                    _TMR2 000FBC                                      _TMR3 000FB2  
                                    _TMR5 000F4F                                      _WPUB 000F61  
                         i2_setMotorSpeed 0C86                             _EUSART2_Write 0F6C  
                                    _main 00EC                                      _home 0094  
                           ?_EUSART1_Read 0001                             ?_EUSART2_Read 0001  
                                    fsr0h 000FEA                                      fsr1h 000FE2  
                                    fsr2h 000FDA                                      fsr0l 000FE9  
                                    indf2 000FDF                                      fsr1l 000FE1  
                                    fsr2l 000FD9                                      btemp 0043  
                           __CFG_BORV$190 000000                                      prodh 000FF4  
                                    prodl 000FF3                                      start 00E8  
                         _timer5ReloadVal 0031                             __CFG_IESO$OFF 000000  
                         _TMR3_Initialize 0E44                ??_TMR1_SetInterruptHandler 001F  
                            ___param_bank 000000                   __end_of_CCP5_CaptureISR 0EE8  
                 __end_of_TMR0_Initialize 0BBE            ??_TMR0_DefaultInterruptHandler 0003  
          __size_of_OSCILLATOR_Initialize 0012             __end_of_OSCILLATOR_Initialize 0F3E  
                                   ?_main 0001                                     STR_10 FF2E  
                                   STR_11 FEA9                                     STR_20 FFD1  
                                   STR_12 FE86                                     STR_21 FFD1  
                                   STR_13 FE13                                     STR_14 FFF4  
                                   STR_22 FFE3                                     STR_15 FFF9  
                                   STR_23 FF0E                                     STR_16 FF6C  
                                   STR_17 FFBD                                     STR_18 FFD2  
                                   STR_19 FFD1                           __end_of___lldiv 09C8  
                                   _T0CON 000FD5                                     _T1CON 000FCD  
                         __end_of___llmod 0A30                                     _T2CON 000FBA  
                                   _T3CON 000FB1                                     _T5CON 000F4E  
                          __CFG_DEBUG$OFF 000000                           _TMR0_WriteTimer 0FC2  
                                   i2l502 0B32                                     i2l512 084E  
                                   i2l513 0876                                     i2l514 08C4  
                                   i2l541 0DD6                                     i2l517 08D0  
                                   i2l525 0AF0                                     i2l534 0A70  
                                   i2l518 0906                                     i2l535 0A5C  
                                   i2l519 093C                                     i2l537 0A7E  
                                   i2l491 0B74                                     i2l643 0E3A  
                                   i2l477 0C9A                                     i2l479 0CAE  
                                   i2l584 0EC6                                     _TMR0H 000FD7  
                                   _TMR1H 000FCF                                     _TMR0L 000FD6  
                                   _TMR3H 000FB3                                     _TMR1L 000FCE  
                                   _TMR3L 000FB2                                     _TMR5H 000F50  
                                   _TMR5L 000F4F                                     _TRISA 000F92  
                                   _TRISB 000F93                                     _TRISC 000F94  
       __size_of_TMR0_SetInterruptHandler 000A                             __CFG_WRT0$OFF 000000  
                           __CFG_WRT1$OFF 000000                             __CFG_WRT2$OFF 000000  
               ?_TMR0_SetInterruptHandler 001D                             __CFG_WRT3$OFF 000000  
                          __CFG_EBTR0$OFF 000000                            __CFG_FCMEN$OFF 000000  
                          __CFG_EBTR1$OFF 000000                            __CFG_EBTR2$OFF 000000  
                          __CFG_EBTR3$OFF 000000                          __end_of_TMR0_ISR 0DBE  
                        __end_of_TMR1_ISR 0D6C                          __end_of_TMR2_ISR 0E26  
                           __CFG_WRTB$OFF 000000                             __CFG_WRTC$OFF 000000  
                           __CFG_WRTD$OFF 000000                          __end_of_TMR5_ISR 0D40  
                          __CFG_EBTRB$OFF 000000                           __end_of_dpowers FDC3  
                      __CFG_MCLRE$EXTMCLR 000000                                     _putch 0F90  
                 __end_of_TMR1_Initialize 0D96                            ?_EUSART2_Write 0001  
                                   pclath 000FFA                                     tablat 000FF5  
                          ??_EUSART1_Read 001D                            ??_EUSART2_Read 001D  
                  __size_of_CCP4_CallBack 0052                                     status 000FD8  
                 __end_of_CCP4_Initialize 0EB4                                     wtemp6 0044  
                          __CFG_HFOFST$ON 000000                           _TMR1_WriteTimer 0EB4  
                          __CFG_PBADEN$ON 000000                          _motorControlMode 0042  
                  __size_of_CCP5_CallBack 0028                           _TMR5_Initialize 0CB8  
                         __initialization 0A82                __end_of_EUSART1_Initialize 0F2C  
                            __end_of_main 05A4                     __end_of_setPitchServo 0C22  
                          setYawServo@pos 001D                   __end_of_TMR2_Initialize 0E7C  
             ?_INTERRUPT_InterruptManager 0001                  _TMR2_SetInterruptHandler 0FA4  
                                  ??_main 007C                   __end_of_CCP5_Initialize 0E98  
                _TMR5_SetInterruptHandler 0F9A                             __activetblptr 000003  
                         _TMR2_WriteTimer 0FCC                     __end_of_setMotorSpeed 0C54  
                 __end_ofi2_setMotorSpeed 0CB8                          ?_CCP4_CaptureISR 0001  
              __end_of_EUSART2_Initialize 0F16                          ___llmod@dividend 0060  
                                  _CCPR4H 000F59                                    _CCPR5H 000F56  
                                  _CCPR4L 000F58                                    _CCPR5L 000F55  
                                  _ANSELA 000F38                                    ?_putch 0001  
                                  _ANSELB 000F39                                    _ANSELC 000F3A  
                                  _T1GCON 000FCC                                    _T3GCON 000FB4  
                                  _T5GCON 000F4D                              ?_setYawServo 001D  
                 TMR1_WriteTimer@timerVal 0001              __size_of_EUSART1_is_rx_ready 000C  
                 __end_of_TMR3_Initialize 0E60                                    i2l2320 08A2  
                          __CFG_WDTEN$OFF 000000                                    _RCREG1 000FAE  
                                  _RCREG2 000F74                                    _RCSTA1 000FAB  
                                  _RCSTA2 000F71                                    _OSCCON 000FD3  
                                  _PLLRDY 007E97                                    _SPBRG1 000FAF  
                                  _SPBRG2 000F75                                    _TXREG1 000FAD  
                                  _TXREG2 000F73                                    _TXSTA1 000FAC  
                                  _TXSTA2 000F72                            __CFG_XINST$OFF 000000  
    __end_of_TMR1_DefaultInterruptHandler 0B48     __size_of_TMR1_DefaultInterruptHandler 0042  
            _TMR1_DefaultInterruptHandler 0B06                              _CCPTMRS1bits 000F48  
                        ?_CCP5_CaptureISR 0001                            __CFG_STVREN$ON 000000  
                 __end_of_TMR0_WriteTimer 0FCC                                 ??___lldiv 0025  
                               ??___llmod 002A                          ?_TMR0_Initialize 0001  
                                  clear_0 0AA8                                    clear_1 0AB4  
                        __end_of_parseInt 0E06                             _CCP4_CallBack 0A30  
                                  _printf 05A4                             _CCP5_CallBack 0DBE  
                        parseInt@position 0020                              __mediumconst FD9A  
                                  tblptrh 000FF7                                    tblptrl 000FF6  
                                  tblptru 000FF8                           ??_EUSART2_Write 001D  
TMR2_SetInterruptHandler@InterruptHandler 001D  TMR5_SetInterruptHandler@InterruptHandler 001D  
TMR1_SetInterruptHandler@InterruptHandler 001D  TMR0_SetInterruptHandler@InterruptHandler 001D  
                 __end_of_TMR1_WriteTimer 0ED0             __size_of_INTERRUPT_Initialize 0004  
                        ?_TMR1_Initialize 0001              __size_of_EUSART2_is_rx_ready 000C  
                 __end_of_TMR5_Initialize 0CE6                         _SYSTEM_Initialize 0C54  
                              __accesstop 0060                   __end_of__initialization 0ABA  
                        ?_CCP4_Initialize 0001                        ?_SYSTEM_Initialize 0001  
                           ___rparam_used 000001                           _TMR5_WriteTimer 0E26  
                          __pcstackCOMRAM 0001                              __pidataBANK0 0F5E  
                     ??_SYSTEM_Initialize 0021                                 ?_TMR0_ISR 0001  
                               ?_TMR1_ISR 0001                                 ?_TMR2_ISR 0001  
           ?_TMR1_DefaultInterruptHandler 0001                                 ?_TMR5_ISR 0001  
                 __end_of_TMR2_WriteTimer 0FD4                             __end_of_putch 0F9A  
                        ?_TMR2_Initialize 0001                            ?_CCP4_CallBack 0001  
                    __end_of_EUSART1_Read 0F4E                      __end_of_EUSART2_Read 0F5E  
                        ?_CCP5_Initialize 0001                            ?_CCP5_CallBack 0001  
                        ?i2_setMotorSpeed 0001                      i2setMotorSpeed@speed 0001  
               __end_of_SYSTEM_Initialize 0C86                                   ??_putch 001E  
                              __pbssBANK0 0094                          ?_TMR3_Initialize 0001  
                         __CFG_PLLCFG$OFF 000000                        __CFG_CCP2MX$PORTC1 000000  
        __end_of_TMR0_SetInterruptHandler 0FC2                                ??_TMR0_ISR 0005  
                              ??_TMR1_ISR 0005                                ??_TMR2_ISR 000B  
                      __CFG_CCP3MX$PORTB5 000000                                ??_TMR5_ISR 0005  
                        ?_TMR0_WriteTimer 0001                                   _CCP4CON 000F57  
                                 _CCP5CON 000F54                                   ?_printf 0068  
                                 _OSCCON2 000FD2                                   _OSCTUNE 000F9B  
                                 _SPBRGH1 000FB0                                   _SPBRGH2 000F76  
                        ?_TMR1_WriteTimer 0001                   __end_of_TMR5_WriteTimer 0E44  
                        ?_TMR5_Initialize 0001                      __size_of_setYawServo 0032  
                               ?_parseInt 001D                           __CFG_PWRTEN$OFF 000000  
                                 __Hparam 0000                                   __Lparam 0000  
              ??_TMR2_SetInterruptHandler 001F                ??_TMR5_SetInterruptHandler 001F  
                         ??_CCP4_CallBack 0003                                   ___lldiv 0946  
                                 ___llmod 09C8                          ?_TMR2_WriteTimer 0001  
                     _EUSART1_is_rx_ready 0F78                                   __pcinit 0A82  
                         ??_CCP5_CallBack 0003                                   __ramtop 1000  
                                 __ptext0 00EC                                   __ptext1 0BBE  
                                 __ptext2 0BF0                                   __ptext3 0C22  
                                 __ptext4 05A4                                   __ptext5 0F90  
                                 __ptext6 0F6C                                   __ptext7 09C8  
                                 __ptext8 0946                                   __ptext9 0DE6  
                         __size_of_printf 0242                                 _T0CONbits 000FD5  
          ??_TMR1_DefaultInterruptHandler 0003                                 _T1CONbits 000FCD  
                                 _dpowers FD9B                     _OSCILLATOR_Initialize 0F2C  
                               _T2CONbits 000FBA                                 _T3CONbits 000FB1  
       __size_of_TMR1_SetInterruptHandler 000A                        _EUSART1_Initialize 0F16  
                ??_PIN_MANAGER_Initialize 001D                 ?_TMR1_SetInterruptHandler 001D  
                               _T5CONbits 000F4E                                   main@cmd 0085  
              __size_of_SYSTEM_Initialize 0032                                   main@pos 0081  
                    end_of_initialization 0ABA                      ?_EUSART1_is_rx_ready 0001  
                     ?_EUSART1_Initialize 0001                                _rightLimit 0086  
                              ??_parseInt 001F                           ___lldiv@divisor 0021  
                         ___lldiv@counter 0029                        _EUSART2_Initialize 0F00  
                                 printf@c 007B                                   printf@f 0068  
                                 postdec1 000FE5                                   postdec2 000FDD  
                                 postinc0 000FEE                                   postinc2 000FDE  
                   __size_of_EUSART1_Read 0010                     __size_of_EUSART2_Read 0010  
                              _motorSpeed 008E                      ??_EUSART1_Initialize 001D  
                     ?_EUSART2_Initialize 0001                       _EUSART2_is_rx_ready 0F84  
                _TMR0_SetInterruptHandler 0FB8                     _TMR5_InterruptHandler 002F  
              CCP5_CallBack@capturedValue 0001                     ??_EUSART1_is_rx_ready 001D  
                        ?_TMR5_WriteTimer 0001                      ??_EUSART2_Initialize 001D  
                  __size_of_setPitchServo 0032                      ?_EUSART2_is_rx_ready 0001  
                 TMR2_WriteTimer@timerVal 0001                   TMR5_WriteTimer@timerVal 0001  
                            _EUSART1_Read 0F3E                              _EUSART2_Read 0F4E  
                __size_of_CCP4_CaptureISR 0018                               _CCP4CONbits 000F57  
                             _CCP5CONbits 000F54                    __size_of_setMotorSpeed 0032  
            __end_of_INTERRUPT_Initialize 0FD8      __end_of_TMR2_DefaultInterruptHandler 0946  
   __size_of_TMR2_DefaultInterruptHandler 0160              _TMR2_DefaultInterruptHandler 07E6  
                       __size_of_TMR0_ISR 0028                         __size_of_TMR1_ISR 002C  
                       __size_of_TMR2_ISR 0020                         __size_of_TMR5_ISR 002C  
                  ?_OSCILLATOR_Initialize 0001                  __size_of_CCP5_CaptureISR 0018  
                          __end_of_printf 07E6                       start_initialization 0A82  
    __end_of_TMR5_DefaultInterruptHandler 0B06     __size_of_TMR5_DefaultInterruptHandler 0042  
            _TMR5_DefaultInterruptHandler 0AC4                  __size_of_TMR0_Initialize 0034  
         __size_of_PIN_MANAGER_Initialize 002E                               putch@txData 001E  
                   ??_EUSART2_is_rx_ready 001D                     __end_of_EUSART2_Write 0F78  
                         ___llmod@divisor 0064                           ___llmod@counter 002A  
                __size_of_TMR1_Initialize 002A                           _encoderPosition 0098  
                __size_of_CCP4_Initialize 001C                               __pdataBANK0 0086  
                           _setPitchServo 0BF0             ?_TMR2_DefaultInterruptHandler 0001  
                                ??_printf 002B                     CCP4_CaptureISR@module 0003  
                             __pbssCOMRAM 002D                             _setMotorSpeed 0C22  
                           __pcstackBANK0 0060                  __size_of_TMR2_Initialize 001C  
           ?_TMR5_DefaultInterruptHandler 0001                  __size_of_CCP5_Initialize 001C  
                     EUSART2_Write@txData 001D                             _pitchPosition 0090  
                __size_ofi2_setMotorSpeed 0032                     _TMR0_InterruptHandler 003B  
                  _PIN_MANAGER_Initialize 0CE6                         __size_of_parseInt 0020  
                __size_of_TMR3_Initialize 001C                                 __pintcode 0008  
        __end_of_TMR1_SetInterruptHandler 0FB8                             __pmediumconst FD9A  
       TMR2_DefaultInterruptHandler@error 0007                         ??_CCP4_CaptureISR 0003  
                          ?_setPitchServo 001D                                  ?___lldiv 001D  
                                ?___llmod 0060              ??_INTERRUPT_InterruptManager 000B  
                        __CFG_PRICLKEN$ON 000000                                 _leftLimit 008A  
                          ?_setMotorSpeed 001D                                  _BAUDCON1 000FB8  
                                _BAUDCON2 000F70                  __size_of_TMR0_WriteTimer 000A  
                       ??_CCP5_CaptureISR 0003                             ??_setYawServo 001F  
                          __size_of_putch 000A                      _INTERRUPT_Initialize 0FD4  
                       ??_TMR0_Initialize 001F                                  _LATAbits 000F89  
                                _PIE1bits 000F9D                                  _PIE4bits 000F7A  
                                _PIE5bits 000F7D                                  i2u100_40 083E  
                                i2u102_40 088A                  __size_of_TMR1_WriteTimer 001C  
                                i2u103_40 08A2                                  i2u120_48 0E14  
                                i2u122_48 0D5A                                  i2u116_48 0DAC  
                                i2u118_48 0D2E       __size_of_INTERRUPT_InterruptManager 00E0  
              ??_TMR0_SetInterruptHandler 001F                                  _PIR1bits 000F9E  
                                _PIR2bits 000FA1                                  _PIR3bits 000FA4  
                                _PIR4bits 000F7B                                  _PIR5bits 000F7E  
                __size_of_TMR5_Initialize 002E                                  _RCONbits 000FD0  
                        __CFG_WDTPS$32768 000000                                  _TMR0_ISR 0D96  
                                _TMR1_ISR 0D40                                  _TMR2_ISR 0E06  
                                _TMR5_ISR 0D14                     __end_of_CCP4_CallBack 0A82  
                       ??_TMR1_Initialize 001F                     __end_of_CCP5_CallBack 0DE6  
                              printf@flag 0078                         ??_CCP4_Initialize 001D  
                              printf@prec 0072            ??_TMR2_DefaultInterruptHandler 0003  
       __size_of_TMR2_SetInterruptHandler 000A                  __size_of_TMR2_WriteTimer 0008  
                               main@speed 0083         __size_of_TMR5_SetInterruptHandler 000A  
               ?_TMR2_SetInterruptHandler 001D                 ?_TMR5_SetInterruptHandler 001D  
                             _INTCON2bits 000FF1                                 copy_data0 0A96  
                   ?_INTERRUPT_Initialize 0001                             _motorSetPoint 009C  
                       ??_TMR2_Initialize 001F            ??_TMR5_DefaultInterruptHandler 0003  
                       ??_CCP5_Initialize 001D                       __end_of_setYawServo 0BF0  
                                __Hrparam 0000                                  __Lrparam 0000  
                         ??_setPitchServo 001F                        __CFG_BOREN$SBORDIS 000000  
                       ??i2_setMotorSpeed 0003                         __CFG_P2BMX$PORTB5 000000  
                 ??_OSCILLATOR_Initialize 001D                          __size_of___lldiv 0082  
                        __size_of___llmod 0068               __size_of_EUSART1_Initialize 0016  
   TMR0_DefaultInterruptHandler@pulseHigh 003F     TMR1_DefaultInterruptHandler@pulseHigh 003E  
   TMR5_DefaultInterruptHandler@pulseHigh 003D                           ??_setMotorSpeed 001F  
                       ??_TMR3_Initialize 001D                  _TMR1_SetInterruptHandler 0FAE  
                   _TMR1_InterruptHandler 0033                CCP4_CallBack@capturedValue 0001  
             __end_of_EUSART1_is_rx_ready 0F84                                  __ptext10 0F78  
                                __ptext11 0F3E                                  __ptext20 0B8A  
                                __ptext12 0C54                                  __ptext21 0FB8  
                                __ptext13 0CB8                                _T1GCONbits 000FCC  
                                __ptext30 0F4E                                  __ptext22 0CE6  
                                __ptext14 0F9A                                  __ptext23 0F2C  
                                __ptext15 0E44                                  __ptext40 0B06  
                                __ptext32 0D14                                  __ptext24 0FD4  
                                __ptext16 0E60                                  __ptext41 0EB4  
                                __ptext33 0AC4                                  __ptext25 0F00  
                                __ptext17 0FA4                                  __ptext42 0D96  
                                __ptext34 0E26                                  __ptext26 0F16  
                                __ptext18 0D6C                                  __ptext43 0B48  
                                __ptext35 0E06                                  __ptext27 0E7C  
                                __ptext19 0FAE                                  __ptext44 0FC2  
                                __ptext36 07E6                                  __ptext28 0E98  
                                __ptext45 0ED0                                  __ptext37 0C86  
                                __ptext29 0F84                                  __ptext46 0DBE  
                                __ptext38 0FCC                                  __ptext47 0EE8  
                                __ptext39 0D40                                  __ptext48 0A30  
                                __ptext49 0000                                  _encoderA 0041  
                                _encoderB 0040                   TMR0_WriteTimer@timerVal 0001  
                              _T3GCONbits 000FB4                         ??_TMR0_WriteTimer 0003  
             __size_of_EUSART2_Initialize 0016                             __size_of_main 04B8  
                              _T5GCONbits 000F4D                                  _parseInt 0DE6  
    __end_of_TMR0_DefaultInterruptHandler 0B8A     __size_of_TMR0_DefaultInterruptHandler 0042  
            _TMR0_DefaultInterruptHandler 0B48                  __size_of_TMR5_WriteTimer 001E  
                                int$flags 0043        __end_of_INTERRUPT_InterruptManager 00E8  
              _INTERRUPT_InterruptManager 0008                                  main@cmd2 0080  
                               printf@val 0074                         ??_TMR1_WriteTimer 0003  
                       ??_TMR5_Initialize 001F                                _INTCONbits 000FF2  
             __end_of_EUSART2_is_rx_ready 0F90                    ??_INTERRUPT_Initialize 001D  
                      setMotorSpeed@speed 001D                                  intlevel2 0000  
                             _setYawServo 0BBE                         ??_TMR2_WriteTimer 0001  
                         _CCP4_CaptureISR 0EE8                          ___lldiv@dividend 001D  
                 ?_PIN_MANAGER_Initialize 0001                                _RCSTA1bits 000FAB  
                              _RCSTA2bits 000F71             ?_TMR0_DefaultInterruptHandler 0001  
                                printf@ap 0079                          setPitchServo@pos 001D  
                  __size_of_EUSART2_Write 000C                           _CCP5_CaptureISR 0ED0  
                   CCP5_CaptureISR@module 0003                          ___lldiv@quotient 0025  
                         _TMR0_Initialize 0B8A                         __CFG_T3CMX$PORTC0 000000  
          __end_of_PIN_MANAGER_Initialize 0D14                         __CFG_FOSC$INTIO67 000000  
                   _TMR2_InterruptHandler 002D                               _yawPosition 0092  
                         _TMR1_Initialize 0D6C  
